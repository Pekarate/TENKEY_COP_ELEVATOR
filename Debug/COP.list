
COP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003524  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003658  08003658  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003658  08003658  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003658  08003658  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000010  08003670  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08003670  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001190a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241d  00000000  00000000  00031943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001caf2  00000000  00000000  00035ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001180b  00000000  00000000  000529d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb57  00000000  00000000  000641dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100d34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  00100d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003618 	.word	0x08003618

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003618 	.word	0x08003618

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
/* High priority interrupt routine																*/
/************************************************************************************************/
extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Can1RxData[8] = {0};
 8000154:	2300      	movs	r3, #0
 8000156:	62bb      	str	r3, [r7, #40]	; 0x28
 8000158:	2300      	movs	r3, #0
 800015a:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef Can1RxHeader;
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Can1RxHeader, Can1RxData) != HAL_OK)
 800015c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000160:	f107 020c 	add.w	r2, r7, #12
 8000164:	2101      	movs	r1, #1
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f001 fa05 	bl	8001576 <HAL_CAN_GetRxMessage>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	  {
		/* Reception Error */
		  Error_Handler();
 8000172:	f000 fd3f 	bl	8000bf4 <Error_Handler>
								ri++;
							rc++;								// increment message counter
						}
				}
	  }
}
 8000176:	e077      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
			if ((rc == RX_SIZE))							//software buffer data overrun
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b08      	cmp	r3, #8
 8000180:	d107      	bne.n	8000192 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
						errorregister |= ER_COMMUNICATION;		//set error bits
 8000182:	4b3c      	ldr	r3, [pc, #240]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	f043 0310 	orr.w	r3, r3, #16
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b39      	ldr	r3, [pc, #228]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800018e:	701a      	strb	r2, [r3, #0]
}
 8000190:	e06a      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
					rx[ri][0] 	= (Can1RxHeader.StdId>>3) & 0xF0;				//read function code
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4a37      	ldr	r2, [pc, #220]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800019a:	7812      	ldrb	r2, [r2, #0]
 800019c:	b2d2      	uxtb	r2, r2
 800019e:	4611      	mov	r1, r2
 80001a0:	f023 030f 	bic.w	r3, r3, #15
 80001a4:	b2d8      	uxtb	r0, r3
 80001a6:	4a35      	ldr	r2, [pc, #212]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001a8:	460b      	mov	r3, r1
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	440b      	add	r3, r1
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	4413      	add	r3, r2
 80001b2:	4602      	mov	r2, r0
 80001b4:	701a      	strb	r2, [r3, #0]
					rx[ri][1] 	= Can1RxHeader.StdId & 0x3F;   //(RXB1SIDL >> 5) + ((RXB1SIDH & 0x0F) << 3);	// node ID
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	4a2f      	ldr	r2, [pc, #188]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001c6:	b2d8      	uxtb	r0, r3
 80001c8:	4a2c      	ldr	r2, [pc, #176]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	3301      	adds	r3, #1
 80001d6:	4602      	mov	r2, r0
 80001d8:	701a      	strb	r2, [r3, #0]
					if ((rx[ri][0] != RSDO) || (rx[ri][1] == node_id))
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a26      	ldr	r2, [pc, #152]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2bc0      	cmp	r3, #192	; 0xc0
 80001f4:	d110      	bne.n	8000218 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000200:	460b      	mov	r3, r1
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	4413      	add	r3, r2
 800020a:	3301      	adds	r3, #1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d127      	bne.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
						memcpy((void *)&rx[ri][2],Can1RxData,Can1RxHeader.DLC);
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	4613      	mov	r3, r2
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	3302      	adds	r3, #2
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800022c:	4413      	add	r3, r2
 800022e:	69fa      	ldr	r2, [r7, #28]
 8000230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f003 f9d9 	bl	80035ec <memcpy>
							if (ri == (RX_SIZE-1))				//increment RX message write pointer
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2b07      	cmp	r3, #7
 8000242:	d103      	bne.n	800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
								ri = 0;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
 800024a:	e006      	b.n	800025a <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
								ri++;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	3301      	adds	r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000258:	701a      	strb	r2, [r3, #0]
							rc++;								// increment message counter
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	3301      	adds	r3, #1
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3730      	adds	r7, #48	; 0x30
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000054 	.word	0x20000054
 8000274:	2000004a 	.word	0x2000004a
 8000278:	20000122 	.word	0x20000122
 800027c:	20000060 	.word	0x20000060
 8000280:	200003ab 	.word	0x200003ab

08000284 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t hse_heartbeat_time = 0;
uint8_t CanRxData[8] = {0};
CAN_RxHeaderTypeDef CanRxHeader;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	static uint32_t Timettt = 0;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CanRxData) != HAL_OK)
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000290:	2100      	movs	r1, #0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f001 f96f 	bl	8001576 <HAL_CAN_GetRxMessage>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
	/* Reception Error */
	  Error_Handler();
 800029e:	f000 fca9 	bl	8000bf4 <Error_Handler>
 80002a2:	e01a      	b.n	80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	}
	else
	{
		if(((CanRxHeader.StdId>>3) & 0xF0 )== 0)
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			hsetime = HSETIME;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002b4:	2214      	movs	r2, #20
 80002b6:	701a      	strb	r2, [r3, #0]
		}
		if (((CanRxHeader.StdId & 0x3F) - 1) < MAX_LIFT)			// Heartbeat from HSE
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d803      	bhi.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
				hsetime = HSETIME;			// reset HSE supervisor time
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002c8:	2214      	movs	r2, #20
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e002      	b.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
		{
			hsetime = HSETIME-10;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	701a      	strb	r2, [r3, #0]

		}
		hse_heartbeat = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
	}
	hse_heartbeat_time = HAL_GetTick() - Timettt;
 80002da:	f000 ff49 	bl	8001170 <HAL_GetTick>
 80002de:	4602      	mov	r2, r0
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80002e8:	6013      	str	r3, [r2, #0]
	 Timettt = HAL_GetTick();
 80002ea:	f000 ff41 	bl	8001170 <HAL_GetTick>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000030 	.word	0x20000030
 8000300:	200000b0 	.word	0x200000b0
 8000304:	20000634 	.word	0x20000634
 8000308:	20000046 	.word	0x20000046
 800030c:	20000040 	.word	0x20000040
 8000310:	2000002c 	.word	0x2000002c

08000314 <CAN_transmit_Interrupt>:

uint16_t mallbox[3] = {0};
uint16_t txmallbox =0;
uint16_t txmallbox_request =0;
void CAN_transmit_Interrupt(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
	if (tc)											// more messages to send
 800031a:	4b3b      	ldr	r3, [pc, #236]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d06d      	beq.n	8000400 <CAN_transmit_Interrupt+0xec>
	{
		CAN_TxHeaderTypeDef CanTxHeader;
		uint8_t CanTxData[8] = {0};
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
		CanTxHeader.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1] ;
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4a36      	ldr	r2, [pc, #216]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000336:	460b      	mov	r3, r1
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	492f      	ldr	r1, [pc, #188]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000354:	4603      	mov	r3, r0
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4403      	add	r3, r0
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	3301      	adds	r3, #1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4413      	add	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
		CanTxHeader.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	61bb      	str	r3, [r7, #24]
		CanTxHeader.IDE   = CAN_ID_STD;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
		CanTxHeader.RTR	= CAN_RTR_DATA;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
		memcpy(CanTxData,(void *)(tx[to]+2),8);
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 80003a0:	4413      	add	r3, r2
 80003a2:	1c9a      	adds	r2, r3, #2
 80003a4:	463b      	mov	r3, r7
 80003a6:	6810      	ldr	r0, [r2, #0]
 80003a8:	6851      	ldr	r1, [r2, #4]
 80003aa:	c303      	stmia	r3!, {r0, r1}
		if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &pTxMailbox) == HAL_OK)
 80003ac:	463a      	mov	r2, r7
 80003ae:	f107 0108 	add.w	r1, r7, #8
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <CAN_transmit_Interrupt+0x100>)
 80003b4:	4818      	ldr	r0, [pc, #96]	; (8000418 <CAN_transmit_Interrupt+0x104>)
 80003b6:	f001 f804 	bl	80013c2 <HAL_CAN_AddTxMessage>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <CAN_transmit_Interrupt+0xba>
		{
			txmallbox++;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003ca:	801a      	strh	r2, [r3, #0]
 80003cc:	e001      	b.n	80003d2 <CAN_transmit_Interrupt+0xbe>
		}
		else
		{
			Error_Handler();
 80003ce:	f000 fc11 	bl	8000bf4 <Error_Handler>
		}
		tc--;														//decrement TX message counter
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003de:	701a      	strb	r2, [r3, #0]
		if (to == (TX_SIZE-1))					//increment TX message read pointer
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b07      	cmp	r3, #7
 80003e8:	d103      	bne.n	80003f2 <CAN_transmit_Interrupt+0xde>
			to = 0;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
		else
			to++;
	}
}
 80003f0:	e006      	b.n	8000400 <CAN_transmit_Interrupt+0xec>
			to++;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000005c 	.word	0x2000005c
 800040c:	20000120 	.word	0x20000120
 8000410:	200000cc 	.word	0x200000cc
 8000414:	20000058 	.word	0x20000058
 8000418:	20000374 	.word	0x20000374
 800041c:	2000003e 	.word	0x2000003e

08000420 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	mallbox[0]++;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8000432:	801a      	strh	r2, [r3, #0]
	CAN_transmit_Interrupt();
 8000434:	f7ff ff6e 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000038 	.word	0x20000038

08000444 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	mallbox[1]++;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	3301      	adds	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000456:	805a      	strh	r2, [r3, #2]
	CAN_transmit_Interrupt();
 8000458:	f7ff ff5c 	bl	8000314 <CAN_transmit_Interrupt>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000038 	.word	0x20000038

08000468 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	mallbox[2]++;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000472:	889b      	ldrh	r3, [r3, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800047a:	809a      	strh	r2, [r3, #4]
	CAN_transmit_Interrupt();
 800047c:	f7ff ff4a 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000038 	.word	0x20000038

0800048c <HAL_TIM_PeriodElapsedCallback>:

uint32_t TIM1_inter,TIM2_inter;
uint32_t TIM1_inter_store,TIM2_inter_store;
uint32_t time10ms,time500ms =0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
	static uint8_t time1_cnt = 0;
	static uint8_t time0_cnt = 0;
	static uint32_t reloadtime =0;
	if(htim->Instance == htim1.Instance)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4ba1      	ldr	r3, [pc, #644]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d15a      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0xce>
	{
		bTime.Time_10ms = 1;
 80004a4:	4aa0      	ldr	r2, [pc, #640]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80004a6:	7813      	ldrb	r3, [r2, #0]
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	7013      	strb	r3, [r2, #0]
		time1_cnt++;
 80004ae:	4b9f      	ldr	r3, [pc, #636]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b9d      	ldr	r3, [pc, #628]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80004b8:	701a      	strb	r2, [r3, #0]
		time10ms = HAL_GetTick() - reloadtime;
 80004ba:	f000 fe59 	bl	8001170 <HAL_GetTick>
 80004be:	4602      	mov	r2, r0
 80004c0:	4b9b      	ldr	r3, [pc, #620]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	4a9b      	ldr	r2, [pc, #620]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80004c8:	6013      	str	r3, [r2, #0]
		reloadtime = HAL_GetTick();
 80004ca:	f000 fe51 	bl	8001170 <HAL_GetTick>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a97      	ldr	r2, [pc, #604]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80004d2:	6013      	str	r3, [r2, #0]
		if((time1_cnt % 10) == 0)
 80004d4:	4b95      	ldr	r3, [pc, #596]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	4b97      	ldr	r3, [pc, #604]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80004da:	fba3 1302 	umull	r1, r3, r3, r2
 80004de:	08d9      	lsrs	r1, r3, #3
 80004e0:	460b      	mov	r3, r1
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	440b      	add	r3, r1
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d120      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{//100ms
				bTime.Time_100ms = 1;
 80004f0:	4a8d      	ldr	r2, [pc, #564]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80004f2:	7813      	ldrb	r3, [r2, #0]
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	7013      	strb	r3, [r2, #0]
				if (bBusOffTimer)
 80004fa:	4b90      	ldr	r3, [pc, #576]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <HAL_TIM_PeriodElapsedCallback+0x84>
					-- bBusOffTimer;
 8000502:	4b8e      	ldr	r3, [pc, #568]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b8c      	ldr	r3, [pc, #560]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e010      	b.n	8000532 <HAL_TIM_PeriodElapsedCallback+0xa6>
				else
					{
						if(bFunc.buz_set_id)
 8000510:	4b8b      	ldr	r3, [pc, #556]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d009      	beq.n	8000532 <HAL_TIM_PeriodElapsedCallback+0xa6>
							{
								Disable_BUZ();
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4888      	ldr	r0, [pc, #544]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000524:	f001 fdca 	bl	80020bc <HAL_GPIO_WritePin>
								bFunc.buz_set_id = 0;
 8000528:	4a85      	ldr	r2, [pc, #532]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800052a:	7813      	ldrb	r3, [r2, #0]
 800052c:	f36f 0300 	bfc	r3, #0, #1
 8000530:	7013      	strb	r3, [r2, #0]
							}
					}
			}
		if((time1_cnt % 200) == 0)
 8000532:	4b7e      	ldr	r3, [pc, #504]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4a84      	ldr	r2, [pc, #528]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000538:	fba2 1203 	umull	r1, r2, r2, r3
 800053c:	0992      	lsrs	r2, r2, #6
 800053e:	21c8      	movs	r1, #200	; 0xc8
 8000540:	fb01 f202 	mul.w	r2, r1, r2
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	f040 80e7 	bne.w	800071c <HAL_TIM_PeriodElapsedCallback+0x290>
			bTime.Time_2s = 1;
 800054e:	4a76      	ldr	r2, [pc, #472]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000550:	7813      	ldrb	r3, [r2, #0]
 8000552:	f043 0308 	orr.w	r3, r3, #8
 8000556:	7013      	strb	r3, [r2, #0]
										}
								}
						}

	}
}
 8000558:	e0e0      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x290>
	else if(htim->Instance == htim2.Instance)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b7b      	ldr	r3, [pc, #492]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	f040 80da 	bne.w	800071c <HAL_TIM_PeriodElapsedCallback+0x290>
					bTime.Time_500ms = true;
 8000568:	4a6f      	ldr	r2, [pc, #444]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800056a:	7813      	ldrb	r3, [r2, #0]
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	7013      	strb	r3, [r2, #0]
					bTime.flash_floor_500ms = true;
 8000572:	4a6d      	ldr	r2, [pc, #436]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000574:	7813      	ldrb	r3, [r2, #0]
 8000576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057a:	7013      	strb	r3, [r2, #0]
					time0_cnt++;
 800057c:	4b74      	ldr	r3, [pc, #464]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b72      	ldr	r3, [pc, #456]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000586:	701a      	strb	r2, [r3, #0]
					if (!nmtstate)						// only during Boot up
 8000588:	4b72      	ldr	r3, [pc, #456]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d10b      	bne.n	80005a8 <HAL_TIM_PeriodElapsedCallback+0x11c>
							if (nmtwait)					// waiting time for first heartbeat
 8000590:	4b71      	ldr	r3, [pc, #452]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <HAL_TIM_PeriodElapsedCallback+0x11c>
								nmtwait--;
 800059a:	4b6f      	ldr	r3, [pc, #444]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	3b01      	subs	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b6c      	ldr	r3, [pc, #432]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80005a6:	701a      	strb	r2, [r3, #0]
					if (heartbeat)						// decrement heartbeat timer
 80005a8:	4b6c      	ldr	r3, [pc, #432]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d005      	beq.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x130>
						heartbeat--;
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b68      	ldr	r3, [pc, #416]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80005ba:	701a      	strb	r2, [r3, #0]
					if (sdo_timer)			// check for SDO transfer time out
 80005bc:	4b68      	ldr	r3, [pc, #416]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d005      	beq.n	80005d0 <HAL_TIM_PeriodElapsedCallback+0x144>
						sdo_timer--;
 80005c4:	4b66      	ldr	r3, [pc, #408]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b64      	ldr	r3, [pc, #400]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80005ce:	701a      	strb	r2, [r3, #0]
					if (hsetime)
 80005d0:	4b64      	ldr	r3, [pc, #400]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d010      	beq.n	80005fc <HAL_TIM_PeriodElapsedCallback+0x170>
							hsetime--;
 80005da:	4b62      	ldr	r3, [pc, #392]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80005e6:	701a      	strb	r2, [r3, #0]
							if (!hsetime) 		// HSE heartbeat time out
 80005e8:	4b5e      	ldr	r3, [pc, #376]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d104      	bne.n	80005fc <HAL_TIM_PeriodElapsedCallback+0x170>
								bFunc.hsecheck = true; 	// HSE check necessary
 80005f2:	4a53      	ldr	r2, [pc, #332]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80005f4:	7813      	ldrb	r3, [r2, #0]
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	7013      	strb	r3, [r2, #0]
					if((time0_cnt % 10) == 0)
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000602:	fba3 1302 	umull	r1, r3, r3, r2
 8000606:	08d9      	lsrs	r1, r3, #3
 8000608:	460b      	mov	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d104      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x196>
						bTime.Time_5s = 1;
 8000618:	4a43      	ldr	r2, [pc, #268]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800061a:	7813      	ldrb	r3, [r2, #0]
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	7013      	strb	r3, [r2, #0]
					if(att_alarm_timer)
 8000622:	4b51      	ldr	r3, [pc, #324]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d026      	beq.n	8000678 <HAL_TIM_PeriodElapsedCallback+0x1ec>
							--att_alarm_timer;
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000634:	701a      	strb	r2, [r3, #0]
							if(!att_alarm_timer)
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d11c      	bne.n	8000678 <HAL_TIM_PeriodElapsedCallback+0x1ec>
									if(bTime.Time_alarm_fg)
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <HAL_TIM_PeriodElapsedCallback+0x1ce>
										buzzer &= ~BUZ_WORKING;
 800064c:	4b47      	ldr	r3, [pc, #284]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b45      	ldr	r3, [pc, #276]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000658:	701a      	strb	r2, [r3, #0]
									bFunc.buz_state = !bFunc.buz_state;
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf0c      	ite	eq
 8000668:	2301      	moveq	r3, #1
 800066a:	2300      	movne	r3, #0
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000670:	7813      	ldrb	r3, [r2, #0]
 8000672:	f361 0341 	bfi	r3, r1, #1, #1
 8000676:	7013      	strb	r3, [r2, #0]
					if(buz_alarm_totaltimer)
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d005      	beq.n	800068c <HAL_TIM_PeriodElapsedCallback+0x200>
						--buz_alarm_totaltimer;
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3b01      	subs	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800068a:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < mInOut_Number; i++)
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e03f      	b.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x286>
							if (outpar [i][IO_BASIC_FUNC] == ARRIVAL_INDICATION)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4a37      	ldr	r2, [pc, #220]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000696:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800069a:	2b44      	cmp	r3, #68	; 0x44
 800069c:	d136      	bne.n	800070c <HAL_TIM_PeriodElapsedCallback+0x280>
							if (outpar [i][IO_ACK])
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	4a34      	ldr	r2, [pc, #208]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	79db      	ldrb	r3, [r3, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d02f      	beq.n	800070c <HAL_TIM_PeriodElapsedCallback+0x280>
									outpar [i][IO_ACK]--; 			//decrement time counter
 80006ac:	7bfa      	ldrb	r2, [r7, #15]
 80006ae:	4931      	ldr	r1, [pc, #196]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006b0:	00d3      	lsls	r3, r2, #3
 80006b2:	440b      	add	r3, r1
 80006b4:	79db      	ldrb	r3, [r3, #7]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	492e      	ldr	r1, [pc, #184]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006bc:	00d3      	lsls	r3, r2, #3
 80006be:	440b      	add	r3, r1
 80006c0:	4602      	mov	r2, r0
 80006c2:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])		//time out
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4413      	add	r3, r2
 80006cc:	79db      	ldrb	r3, [r3, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d11c      	bne.n	800070c <HAL_TIM_PeriodElapsedCallback+0x280>
											bit_reset (out[i/8], i % 8);			// switch off output
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	b2d8      	uxtb	r0, r3
 80006d8:	4602      	mov	r2, r0
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80006dc:	5c9b      	ldrb	r3, [r3, r2]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	f003 0307 	and.w	r3, r3, #7
 80006e8:	2101      	movs	r1, #1
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4013      	ands	r3, r2
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	4602      	mov	r2, r0
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80006fe:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	4413      	add	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	7bfa      	ldrb	r2, [r7, #15]
 8000718:	429a      	cmp	r2, r3
 800071a:	d3ba      	bcc.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x206>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000640 	.word	0x20000640
 8000728:	20000140 	.word	0x20000140
 800072c:	2000004b 	.word	0x2000004b
 8000730:	2000004c 	.word	0x2000004c
 8000734:	20000638 	.word	0x20000638
 8000738:	cccccccd 	.word	0xcccccccd
 800073c:	20000047 	.word	0x20000047
 8000740:	200006e0 	.word	0x200006e0
 8000744:	40010800 	.word	0x40010800
 8000748:	51eb851f 	.word	0x51eb851f
 800074c:	2000073c 	.word	0x2000073c
 8000750:	20000050 	.word	0x20000050
 8000754:	2000063c 	.word	0x2000063c
 8000758:	2000068c 	.word	0x2000068c
 800075c:	20000785 	.word	0x20000785
 8000760:	20000045 	.word	0x20000045
 8000764:	20000634 	.word	0x20000634
 8000768:	20000048 	.word	0x20000048
 800076c:	20000044 	.word	0x20000044
 8000770:	20000049 	.word	0x20000049
 8000774:	200003bc 	.word	0x200003bc
 8000778:	2000034c 	.word	0x2000034c
 800077c:	20000000 	.word	0x20000000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fc9c 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f826 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 f9ca 	bl	8000b24 <MX_GPIO_Init>
  MX_CAN_Init();
 8000790:	f000 f868 	bl	8000864 <MX_CAN_Init>
  MX_SPI1_Init();
 8000794:	f000 f89c 	bl	80008d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000798:	f000 f8d0 	bl	800093c <MX_TIM1_Init>
  MX_TIM2_Init();
 800079c:	f000 f91e 	bl	80009dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007a0:	f000 f96a 	bl	8000a78 <MX_USART1_UART_Init>
  MX_USART2_Init();
 80007a4:	f000 f992 	bl	8000acc <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f000 fcea 	bl	8001184 <HAL_Delay>
  while(1)
  {
	 HAL_Delay(100);
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	f000 fce7 	bl	8001184 <HAL_Delay>
	 HC166_CLK_HIGH();
 80007b6:	2201      	movs	r2, #1
 80007b8:	2120      	movs	r1, #32
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0x54>)
 80007bc:	f001 fc7e 	bl	80020bc <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	; 0x64
 80007c2:	f000 fcdf 	bl	8001184 <HAL_Delay>
	  HC166_CLK_LOW();
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	4802      	ldr	r0, [pc, #8]	; (80007d4 <main+0x54>)
 80007cc:	f001 fc76 	bl	80020bc <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 80007d0:	e7ee      	b.n	80007b0 <main+0x30>
 80007d2:	bf00      	nop
 80007d4:	40010800 	.word	0x40010800

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	; 0x40
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 ff0e 	bl	8003608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000816:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fc63 	bl	80020ec <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800082c:	f000 f9e2 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2102      	movs	r1, #2
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fecd 	bl	80025ec <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000858:	f000 f9cc 	bl	8000bf4 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3740      	adds	r7, #64	; 0x40
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_CAN_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_CAN_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_CAN_Init+0x64>)
 8000870:	2210      	movs	r2, #16
 8000872:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_CAN_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_CAN_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_CAN_Init+0x64>)
 8000882:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000886:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_CAN_Init+0x64>)
 800088a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800088e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_CAN_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_CAN_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_CAN_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_CAN_Init+0x64>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_CAN_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_CAN_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_CAN_Init+0x64>)
 80008b6:	f000 fc89 	bl	80011cc <HAL_CAN_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 f998 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000374 	.word	0x20000374
 80008cc:	40006400 	.word	0x40006400

080008d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_SPI1_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_SPI1_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI1_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI1_Init+0x64>)
 8000904:	2218      	movs	r2, #24
 8000906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI1_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_SPI1_Init+0x64>)
 8000922:	f001 fffd 	bl	8002920 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800092c:	f000 f962 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200006e4 	.word	0x200006e4
 8000938:	40013000 	.word	0x40013000

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM1_Init+0x98>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_TIM1_Init+0x9c>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000960:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_TIM1_Init+0x98>)
 800096e:	2263      	movs	r2, #99	; 0x63
 8000970:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_TIM1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000986:	f002 f84f 	bl	8002a28 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 f930 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009a2:	f002 f998 	bl	8002cd6 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009ac:	f000 f922 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009be:	f002 fb6b 	bl	8003098 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c8:	f000 f914 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000640 	.word	0x20000640
 80009d8:	40012c00 	.word	0x40012c00

080009dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_TIM2_Init+0x98>)
 80009fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a02:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a24:	f002 f800 	bl	8002a28 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a2e:	f000 f8e1 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a40:	f002 f949 	bl	8002cd6 <HAL_TIM_ConfigClockSource>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a4a:	f000 f8d3 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_TIM2_Init+0x98>)
 8000a5c:	f002 fb1c 	bl	8003098 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a66:	f000 f8c5 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000073c 	.word	0x2000073c

08000a78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_USART1_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f002 fb62 	bl	8003178 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f89b 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200005f0 	.word	0x200005f0
 8000ac8:	40013800 	.word	0x40013800

08000acc <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_USART2_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_USART2_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART2_Init+0x50>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_USART2_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_USART2_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART2_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_USART2_Init+0x50>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART2_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_USART2_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART2_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_USART2_Init+0x50>)
 8000b0a:	f002 fc11 	bl	8003330 <HAL_USART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 f86e 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000069c 	.word	0x2000069c
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Out_Pin|HC595_SEL_Pin|UART_DE_Pin|HC166_SEL_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f248 1103 	movw	r1, #33027	; 0x8103
 8000b86:	4819      	ldr	r0, [pc, #100]	; (8000bec <MX_GPIO_Init+0xc8>)
 8000b88:	f001 fa98 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Buzzer_Out_Pin HC595_SEL_Pin UART_DE_Pin HC166_SEL_Pin */
  GPIO_InitStruct.Pin = Buzzer_Out_Pin|HC595_SEL_Pin|UART_DE_Pin|HC166_SEL_Pin;
 8000b8c:	f248 1303 	movw	r3, #33027	; 0x8103
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_GPIO_Init+0xc8>)
 8000ba6:	f001 f905 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IC_IN1_Pin IC_IN2_Pin IC_IN3_Pin IC_IN11_Pin
                           IC_IN12_Pin IC_IN13_Pin IC_IN14_Pin IC_IN4_Pin
                           IC_IN5_Pin IC_IN6_Pin IC_IN7_Pin IC_IN8_Pin
                           IC_IN9_Pin IC_IN10_Pin */
  GPIO_InitStruct.Pin = IC_IN1_Pin|IC_IN2_Pin|IC_IN3_Pin|IC_IN11_Pin
 8000baa:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000bae:	613b      	str	r3, [r7, #16]
                          |IC_IN12_Pin|IC_IN13_Pin|IC_IN14_Pin|IC_IN4_Pin
                          |IC_IN5_Pin|IC_IN6_Pin|IC_IN7_Pin|IC_IN8_Pin
                          |IC_IN9_Pin|IC_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <MX_GPIO_Init+0xcc>)
 8000bc0:	f001 f8f8 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NODE_ID_Pin */
  GPIO_InitStruct.Pin = NODE_ID_Pin;
 8000bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NODE_ID_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_GPIO_Init+0xcc>)
 8000bda:	f001 f8eb 	bl	8001db4 <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x60>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_MspInit+0x60>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000

08000c64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <HAL_CAN_MspInit+0xcc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d151      	bne.n	8000d28 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <HAL_CAN_MspInit+0xd0>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <HAL_CAN_MspInit+0xd0>)
 8000c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8e:	61d3      	str	r3, [r2, #28]
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <HAL_CAN_MspInit+0xd0>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <HAL_CAN_MspInit+0xd0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <HAL_CAN_MspInit+0xd0>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <HAL_CAN_MspInit+0xd0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481b      	ldr	r0, [pc, #108]	; (8000d38 <HAL_CAN_MspInit+0xd4>)
 8000cca:	f001 f873 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4815      	ldr	r0, [pc, #84]	; (8000d38 <HAL_CAN_MspInit+0xd4>)
 8000ce4:	f001 f866 	bl	8001db4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2013      	movs	r0, #19
 8000cee:	f001 f82a 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000cf2:	2013      	movs	r0, #19
 8000cf4:	f001 f843 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2014      	movs	r0, #20
 8000cfe:	f001 f822 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d02:	2014      	movs	r0, #20
 8000d04:	f001 f83b 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2015      	movs	r0, #21
 8000d0e:	f001 f81a 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d12:	2015      	movs	r0, #21
 8000d14:	f001 f833 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2016      	movs	r0, #22
 8000d1e:	f001 f812 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000d22:	2016      	movs	r0, #22
 8000d24:	f001 f82b 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40006400 	.word	0x40006400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010800 	.word	0x40010800

08000d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <HAL_SPI_MspInit+0x88>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d12f      	bne.n	8000dbc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_SPI_MspInit+0x8c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|GPIO_PIN_7;
 8000d8c:	23a0      	movs	r3, #160	; 0xa0
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <HAL_SPI_MspInit+0x90>)
 8000da0:	f001 f808 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_SPI_MspInit+0x90>)
 8000db8:	f000 fffc 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40013000 	.word	0x40013000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_TIM_Base_MspInit+0x88>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d11c      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_TIM_Base_MspInit+0x8c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_TIM_Base_MspInit+0x8c>)
 8000de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_TIM_Base_MspInit+0x8c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2018      	movs	r0, #24
 8000e00:	f000 ffa1 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000e04:	2018      	movs	r0, #24
 8000e06:	f000 ffba 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2019      	movs	r0, #25
 8000e10:	f000 ff99 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e14:	2019      	movs	r0, #25
 8000e16:	f000 ffb2 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e1a:	e018      	b.n	8000e4e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d113      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_TIM_Base_MspInit+0x8c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <HAL_TIM_Base_MspInit+0x8c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_TIM_Base_MspInit+0x8c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	201c      	movs	r0, #28
 8000e44:	f000 ff7f 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e48:	201c      	movs	r0, #28
 8000e4a:	f000 ff98 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_UART_MspInit+0x8c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d131      	bne.n	8000ee4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0x90>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <HAL_UART_MspInit+0x90>)
 8000e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x90>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x90>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x90>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x90>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <HAL_UART_MspInit+0x94>)
 8000ec6:	f000 ff75 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x94>)
 8000ee0:	f000 ff68 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_USART_MspInit+0x88>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d12f      	bne.n	8000f78 <HAL_USART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_USART_MspInit+0x8c>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_USART_MspInit+0x8c>)
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	61d3      	str	r3, [r2, #28]
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_USART_MspInit+0x8c>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_USART_MspInit+0x8c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_USART_MspInit+0x8c>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_USART_MspInit+0x8c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000f48:	2314      	movs	r3, #20
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <HAL_USART_MspInit+0x90>)
 8000f5c:	f000 ff2a 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f60:	2308      	movs	r3, #8
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_USART_MspInit+0x90>)
 8000f74:	f000 ff1e 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd2:	f000 f8bb 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000fe2:	f000 fbd9 	bl	8001798 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000374 	.word	0x20000374

08000ff0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ff6:	f000 fbcf 	bl	8001798 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000374 	.word	0x20000374

08001004 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <CAN1_RX1_IRQHandler+0x10>)
 800100a:	f000 fbc5 	bl	8001798 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000374 	.word	0x20000374

08001018 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <CAN1_SCE_IRQHandler+0x10>)
 800101e:	f000 fbbb 	bl	8001798 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000374 	.word	0x20000374

0800102c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM1_BRK_IRQHandler+0x10>)
 8001032:	f001 fd48 	bl	8002ac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000640 	.word	0x20000640

08001040 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM1_UP_IRQHandler+0x10>)
 8001046:	f001 fd3e 	bl	8002ac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000640 	.word	0x20000640

08001054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM2_IRQHandler+0x10>)
 800105a:	f001 fd34 	bl	8002ac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000073c 	.word	0x2000073c

08001068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800109a:	f7ff ffe5 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f002 fa81 	bl	80035a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a2:	f7ff fb6d 	bl	8000780 <main>
  bx lr
 80010a6:	4770      	bx	lr
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010b0:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 80010b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b8:	200007a4 	.word	0x200007a4

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x28>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fe2d 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fd90 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fe45 	bl	8001d9a <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 fe0d 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000004 	.word	0x20000004
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	2000000c 	.word	0x2000000c
 800116c:	200007a0 	.word	0x200007a0

08001170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	200007a0 	.word	0x200007a0

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff fff0 	bl	8001170 <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffe0 	bl	8001170 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000000c 	.word	0x2000000c

080011cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0ed      	b.n	80013ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd3a 	bl	8000c64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001200:	f7ff ffb6 	bl	8001170 <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001206:	e012      	b.n	800122e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001208:	f7ff ffb2 	bl	8001170 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b0a      	cmp	r3, #10
 8001214:	d90b      	bls.n	800122e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2205      	movs	r2, #5
 8001226:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0c5      	b.n	80013ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0e5      	beq.n	8001208 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0202 	bic.w	r2, r2, #2
 800124a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff ff90 	bl	8001170 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001252:	e012      	b.n	800127a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001254:	f7ff ff8c 	bl	8001170 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d90b      	bls.n	800127a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2205      	movs	r2, #5
 8001272:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e09f      	b.n	80013ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e5      	bne.n	8001254 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7e1b      	ldrb	r3, [r3, #24]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d108      	bne.n	80012a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7e5b      	ldrb	r3, [r3, #25]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d108      	bne.n	80012cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e007      	b.n	80012dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7e9b      	ldrb	r3, [r3, #26]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d108      	bne.n	80012f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0220 	orr.w	r2, r2, #32
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e007      	b.n	8001306 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0220 	bic.w	r2, r2, #32
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7edb      	ldrb	r3, [r3, #27]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d108      	bne.n	8001320 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0210 	bic.w	r2, r2, #16
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e007      	b.n	8001330 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0210 	orr.w	r2, r2, #16
 800132e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7f1b      	ldrb	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d108      	bne.n	800134a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0208 	orr.w	r2, r2, #8
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e007      	b.n	800135a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0208 	bic.w	r2, r2, #8
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7f5b      	ldrb	r3, [r3, #29]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0204 	orr.w	r2, r2, #4
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e007      	b.n	8001384 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0204 	bic.w	r2, r2, #4
 8001382:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	ea42 0103 	orr.w	r1, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	1e5a      	subs	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b089      	sub	sp, #36	; 0x24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <HAL_CAN_AddTxMessage+0x2c>
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	f040 80b8 	bne.w	800155e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10a      	bne.n	800140e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d105      	bne.n	800140e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a0 	beq.w	800154e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	0e1b      	lsrs	r3, r3, #24
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d907      	bls.n	800142e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e09e      	b.n	800156c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10d      	bne.n	800145c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800144a:	68f9      	ldr	r1, [r7, #12]
 800144c:	6809      	ldr	r1, [r1, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3318      	adds	r3, #24
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	440b      	add	r3, r1
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00f      	b.n	800147c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001466:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001470:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3318      	adds	r3, #24
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3318      	adds	r3, #24
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	440b      	add	r3, r1
 800148c:	3304      	adds	r3, #4
 800148e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	7d1b      	ldrb	r3, [r3, #20]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d111      	bne.n	80014bc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3318      	adds	r3, #24
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	6811      	ldr	r1, [r2, #0]
 80014ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3318      	adds	r3, #24
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	440b      	add	r3, r1
 80014b8:	3304      	adds	r3, #4
 80014ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3307      	adds	r3, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	061a      	lsls	r2, r3, #24
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3306      	adds	r3, #6
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3305      	adds	r3, #5
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	4313      	orrs	r3, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	3204      	adds	r2, #4
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	4610      	mov	r0, r2
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	6811      	ldr	r1, [r2, #0]
 80014e4:	ea43 0200 	orr.w	r2, r3, r0
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3303      	adds	r3, #3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	061a      	lsls	r2, r3, #24
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3302      	adds	r3, #2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3301      	adds	r3, #1
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	4313      	orrs	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	4610      	mov	r0, r2
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	6811      	ldr	r1, [r2, #0]
 800151a:	ea43 0200 	orr.w	r2, r3, r0
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	440b      	add	r3, r1
 8001524:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001528:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3318      	adds	r3, #24
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	6811      	ldr	r1, [r2, #0]
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3318      	adds	r3, #24
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e00e      	b.n	800156c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e006      	b.n	800156c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	3724      	adds	r7, #36	; 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001576:	b480      	push	{r7}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d003      	beq.n	800159a <HAL_CAN_GetRxMessage+0x24>
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80f3 	bne.w	8001780 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10e      	bne.n	80015be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e7      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0d8      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	331b      	adds	r3, #27
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0204 	and.w	r2, r3, #4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	331b      	adds	r3, #27
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0d5b      	lsrs	r3, r3, #21
 800160a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e00b      	b.n	800162c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	331b      	adds	r3, #27
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0202 	and.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	331b      	adds	r3, #27
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 020f 	and.w	r2, r3, #15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	331b      	adds	r3, #27
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	331b      	adds	r3, #27
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	3304      	adds	r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0a1a      	lsrs	r2, r3, #8
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0c1a      	lsrs	r2, r3, #16
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3302      	adds	r3, #2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0e1a      	lsrs	r2, r3, #24
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3303      	adds	r3, #3
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0a1a      	lsrs	r2, r3, #8
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3305      	adds	r3, #5
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0c1a      	lsrs	r2, r3, #16
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3306      	adds	r3, #6
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0e1a      	lsrs	r2, r3, #24
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3307      	adds	r3, #7
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	e007      	b.n	800177c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	e006      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
  }
}
 800178e:	4618      	mov	r0, r3
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d07c      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d023      	beq.n	8001830 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7fe fe10 	bl	8000420 <HAL_CAN_TxMailbox0CompleteCallback>
 8001800:	e016      	b.n	8001830 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	e00c      	b.n	8001830 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
 8001828:	e002      	b.n	8001830 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f96b 	bl	8001b06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d024      	beq.n	8001884 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001842:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7fe fdf8 	bl	8000444 <HAL_CAN_TxMailbox1CompleteCallback>
 8001854:	e016      	b.n	8001884 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	e00c      	b.n	8001884 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
 800187c:	e002      	b.n	8001884 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f94a 	bl	8001b18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d024      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001896:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe fde0 	bl	8000468 <HAL_CAN_TxMailbox2CompleteCallback>
 80018a8:	e016      	b.n	80018d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	e00c      	b.n	80018d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
 80018d0:	e002      	b.n	80018d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f929 	bl	8001b2a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2210      	movs	r2, #16
 80018fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2208      	movs	r2, #8
 8001916:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f90f 	bl	8001b3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe fca4 	bl	8000284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00c      	beq.n	8001960 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2208      	movs	r2, #8
 800197a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f8e6 	bl	8001b4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe fbd6 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f8cf 	bl	8001b60 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00b      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2208      	movs	r2, #8
 80019dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8c7 	bl	8001b72 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d07b      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d072      	beq.n	8001ade <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d008      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d043      	beq.n	8001ade <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d03e      	beq.n	8001ade <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a66:	2b60      	cmp	r3, #96	; 0x60
 8001a68:	d02b      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x32a>
 8001a6a:	2b60      	cmp	r3, #96	; 0x60
 8001a6c:	d82e      	bhi.n	8001acc <HAL_CAN_IRQHandler+0x334>
 8001a6e:	2b50      	cmp	r3, #80	; 0x50
 8001a70:	d022      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x320>
 8001a72:	2b50      	cmp	r3, #80	; 0x50
 8001a74:	d82a      	bhi.n	8001acc <HAL_CAN_IRQHandler+0x334>
 8001a76:	2b40      	cmp	r3, #64	; 0x40
 8001a78:	d019      	beq.n	8001aae <HAL_CAN_IRQHandler+0x316>
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d826      	bhi.n	8001acc <HAL_CAN_IRQHandler+0x334>
 8001a7e:	2b30      	cmp	r3, #48	; 0x30
 8001a80:	d010      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x30c>
 8001a82:	2b30      	cmp	r3, #48	; 0x30
 8001a84:	d822      	bhi.n	8001acc <HAL_CAN_IRQHandler+0x334>
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d002      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x2f8>
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d005      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a8e:	e01d      	b.n	8001acc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a98:	e019      	b.n	8001ace <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aa2:	e014      	b.n	8001ace <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aac:	e00f      	b.n	8001ace <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ab6:	e00a      	b.n	8001ace <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ac0:	e005      	b.n	8001ace <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aca:	e000      	b.n	8001ace <HAL_CAN_IRQHandler+0x336>
            break;
 8001acc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001adc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f843 	bl	8001b84 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4906      	ldr	r1, [pc, #24]	; (8001c30 <__NVIC_EnableIRQ+0x34>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff90 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff2d 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff42 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff35 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e169      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8158 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a9a      	ldr	r2, [pc, #616]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d05e      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001df0:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d875      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001df6:	4a98      	ldr	r2, [pc, #608]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d058      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001dfc:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d86f      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e02:	4a96      	ldr	r2, [pc, #600]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d052      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e08:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d869      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a94      	ldr	r2, [pc, #592]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04c      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e14:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d863      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a92      	ldr	r2, [pc, #584]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d046      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e20:	4a90      	ldr	r2, [pc, #576]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d85d      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d82a      	bhi.n	8001e80 <HAL_GPIO_Init+0xcc>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d859      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_GPIO_Init+0x80>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001eaf 	.word	0x08001eaf
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	08001e9b 	.word	0x08001e9b
 8001e40:	08001edd 	.word	0x08001edd
 8001e44:	08001ee3 	.word	0x08001ee3
 8001e48:	08001ee3 	.word	0x08001ee3
 8001e4c:	08001ee3 	.word	0x08001ee3
 8001e50:	08001ee3 	.word	0x08001ee3
 8001e54:	08001ee3 	.word	0x08001ee3
 8001e58:	08001ee3 	.word	0x08001ee3
 8001e5c:	08001ee3 	.word	0x08001ee3
 8001e60:	08001ee3 	.word	0x08001ee3
 8001e64:	08001ee3 	.word	0x08001ee3
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ee3 	.word	0x08001ee3
 8001e70:	08001ee3 	.word	0x08001ee3
 8001e74:	08001ee3 	.word	0x08001ee3
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001ea5 	.word	0x08001ea5
 8001e80:	4a79      	ldr	r2, [pc, #484]	; (8002068 <HAL_GPIO_Init+0x2b4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e86:	e02c      	b.n	8001ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e029      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e024      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e01f      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e01a      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e013      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
          break;
 8001ece:	e009      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	615a      	str	r2, [r3, #20]
          break;
 8001eda:	e003      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          break;
 8001ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d801      	bhi.n	8001eee <HAL_GPIO_Init+0x13a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_Init+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d802      	bhi.n	8001f00 <HAL_GPIO_Init+0x14c>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x152>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3b08      	subs	r3, #8
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80b1 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_GPIO_Init+0x2c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3f      	ldr	r2, [pc, #252]	; (8002078 <HAL_GPIO_Init+0x2c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3e      	ldr	r2, [pc, #248]	; (800207c <HAL_GPIO_Init+0x2c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1e4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3d      	ldr	r2, [pc, #244]	; (8002080 <HAL_GPIO_Init+0x2cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1e0>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb2:	492f      	ldr	r1, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	492c      	ldr	r1, [pc, #176]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4928      	ldr	r1, [pc, #160]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4922      	ldr	r1, [pc, #136]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491e      	ldr	r1, [pc, #120]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4918      	ldr	r1, [pc, #96]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4914      	ldr	r1, [pc, #80]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	490e      	ldr	r1, [pc, #56]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e021      	b.n	8002096 <HAL_GPIO_Init+0x2e2>
 8002052:	bf00      	nop
 8002054:	10320000 	.word	0x10320000
 8002058:	10310000 	.word	0x10310000
 800205c:	10220000 	.word	0x10220000
 8002060:	10210000 	.word	0x10210000
 8002064:	10120000 	.word	0x10120000
 8002068:	10110000 	.word	0x10110000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
 8002080:	40011400 	.word	0x40011400
 8002084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_GPIO_Init+0x304>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	4909      	ldr	r1, [pc, #36]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002092:	4013      	ands	r3, r2
 8002094:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3301      	adds	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f47f ae8e 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	372c      	adds	r7, #44	; 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e26c      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
 8002124:	4b8c      	ldr	r3, [pc, #560]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e246      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x76>
 8002154:	4b80      	ldr	r3, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b78      	ldr	r3, [pc, #480]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xbc>
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a71      	ldr	r2, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a67      	ldr	r2, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ffd2 	bl	8001170 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe ffce 	bl	8001170 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1fa      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe4>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe ffbe 	bl	8001170 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ffba 	bl	8001170 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1e6      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x10c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1ba      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4939      	ldr	r1, [pc, #228]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff73 	bl	8001170 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7fe ff6f 	bl	8001170 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e19b      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4927      	ldr	r1, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x270>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff52 	bl	8001170 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe ff4e 	bl	8001170 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e17a      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03a      	beq.n	8002370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe ff32 	bl	8001170 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe ff2e 	bl	8001170 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e15a      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fad8 	bl	80028e4 <RCC_Delay>
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7fe ff18 	bl	8001170 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe ff14 	bl	8001170 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e140      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	42420000 	.word	0x42420000
 8002360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b9e      	ldr	r3, [pc, #632]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e9      	bne.n	8002344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a6 	beq.w	80024ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b97      	ldr	r3, [pc, #604]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a93      	ldr	r2, [pc, #588]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b8e      	ldr	r3, [pc, #568]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fed5 	bl	8001170 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fed1 	bl	8001170 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0fd      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023f0:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a7a      	ldr	r2, [pc, #488]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x334>
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x356>
 8002428:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a6c      	ldr	r2, [pc, #432]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a63      	ldr	r2, [pc, #396]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe85 	bl	8001170 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fe81 	bl	8001170 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0ab      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x37e>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe fe6f 	bl	8001170 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fe6b 	bl	8001170 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e095      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b48      	ldr	r3, [pc, #288]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8081 	beq.w	80025d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d061      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d146      	bne.n	8002576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x4fc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fe3f 	bl	8001170 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fe3b 	bl	8001170 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e067      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	492d      	ldr	r1, [pc, #180]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a19      	ldr	r1, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	430b      	orrs	r3, r1
 8002542:	4927      	ldr	r1, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x4fc>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fe0f 	bl	8001170 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fe0b 	bl	8001170 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e037      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
 8002574:	e02f      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCC_OscConfig+0x4fc>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fdf8 	bl	8001170 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fdf4 	bl	8001170 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e020      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x498>
 80025a2:	e018      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e013      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
 80025e8:	42420060 	.word	0x42420060

080025ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0d0      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b6a      	ldr	r3, [pc, #424]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4965      	ldr	r1, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002652:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800266a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d040      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d115      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e073      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06b      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4936      	ldr	r1, [pc, #216]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7fe fd48 	bl	8001170 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fd44 	bl	8001170 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e053      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d210      	bcs.n	800273c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4922      	ldr	r1, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1d0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fca6 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08003640 	.word	0x08003640
 80027b8:	20000004 	.word	0x20000004
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b490      	push	{r4, r7}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027c8:	1d3c      	adds	r4, r7, #4
 80027ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027d0:	f240 2301 	movw	r3, #513	; 0x201
 80027d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x40>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x46>
 80027fe:	e02d      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002802:	623b      	str	r3, [r7, #32]
      break;
 8002804:	e02d      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002812:	4413      	add	r3, r2
 8002814:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002818:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0c5b      	lsrs	r3, r3, #17
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002832:	4413      	add	r3, r2
 8002834:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002838:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283e:	fb02 f203 	mul.w	r2, r2, r3
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e004      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	623b      	str	r3, [r7, #32]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	6a3b      	ldr	r3, [r7, #32]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc90      	pop	{r4, r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	08003630 	.word	0x08003630
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	003d0900 	.word	0x003d0900

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <HAL_RCC_GetHCLKFreq+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002898:	f7ff fff2 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08003650 	.word	0x08003650

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f7ff ffde 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08003650 	.word	0x08003650

080028e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCC_Delay+0x34>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <RCC_Delay+0x38>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a5b      	lsrs	r3, r3, #9
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002900:	bf00      	nop
  }
  while (Delay --);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f9      	bne.n	8002900 <RCC_Delay+0x1c>
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	20000004 	.word	0x20000004
 800291c:	10624dd3 	.word	0x10624dd3

08002920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e076      	b.n	8002a20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002942:	d009      	beq.n	8002958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
 800294a:	e005      	b.n	8002958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f9e2 	bl	8000d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	ea42 0103 	orr.w	r1, r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	0c1a      	lsrs	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f002 0204 	and.w	r2, r2, #4
 80029fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e041      	b.n	8002abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe f9be 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 fa1e 	bl	8002ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d122      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d11b      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0202 	mvn.w	r2, #2
 8002af2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f9b1 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f9a4 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f9b3 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d122      	bne.n	8002b76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0204 	mvn.w	r2, #4
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f987 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f97a 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f989 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d122      	bne.n	8002bca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11b      	bne.n	8002bca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0208 	mvn.w	r2, #8
 8002b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f95d 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002bb6:	e005      	b.n	8002bc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f950 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f95f 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d122      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d11b      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0210 	mvn.w	r2, #16
 8002bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f933 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f926 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f935 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10e      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0201 	mvn.w	r2, #1
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fd fc21 	bl	800048c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d10e      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b80      	cmp	r3, #128	; 0x80
 8002c64:	d107      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fa78 	bl	8003166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d10e      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d107      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8f9 	bl	8002e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d10e      	bne.n	8002cce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f06f 0220 	mvn.w	r2, #32
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fa43 	bl	8003154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_ConfigClockSource+0x18>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0b3      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x180>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d14:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d26:	d03e      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xd0>
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2c:	f200 8087 	bhi.w	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	f000 8085 	beq.w	8002e42 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d87f      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d3e:	2b70      	cmp	r3, #112	; 0x70
 8002d40:	d01a      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0xa2>
 8002d42:	2b70      	cmp	r3, #112	; 0x70
 8002d44:	d87b      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d46:	2b60      	cmp	r3, #96	; 0x60
 8002d48:	d050      	beq.n	8002dec <HAL_TIM_ConfigClockSource+0x116>
 8002d4a:	2b60      	cmp	r3, #96	; 0x60
 8002d4c:	d877      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d4e:	2b50      	cmp	r3, #80	; 0x50
 8002d50:	d03c      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xf6>
 8002d52:	2b50      	cmp	r3, #80	; 0x50
 8002d54:	d873      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d058      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0x136>
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d86f      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d5e:	2b30      	cmp	r3, #48	; 0x30
 8002d60:	d064      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0x156>
 8002d62:	2b30      	cmp	r3, #48	; 0x30
 8002d64:	d86b      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d060      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0x156>
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d867      	bhi.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d05c      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0x156>
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d05a      	beq.n	8002e2c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d76:	e062      	b.n	8002e3e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f000 f967 	bl	800305a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]
      break;
 8002da4:	e04e      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f000 f950 	bl	800305a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e03b      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f000 f8c7 	bl	8002f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2150      	movs	r1, #80	; 0x50
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f91e 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002dea:	e02b      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f000 f8e5 	bl	8002fc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2160      	movs	r1, #96	; 0x60
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f90e 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002e0a:	e01b      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f000 f8a7 	bl	8002f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2140      	movs	r1, #64	; 0x40
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f8fe 	bl	8003026 <TIM_ITRx_SetConfig>
      break;
 8002e2a:	e00b      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f000 f8f5 	bl	8003026 <TIM_ITRx_SetConfig>
        break;
 8002e3c:	e002      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
	...

08002ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0xbc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x30>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0xc0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d007      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <TIM_Base_SetConfig+0xbc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_Base_SetConfig+0x62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <TIM_Base_SetConfig+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d108      	bne.n	8002f1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <TIM_Base_SetConfig+0xb8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800

08002f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 030a 	bic.w	r3, r3, #10
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 0210 	bic.w	r2, r3, #16
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	031b      	lsls	r3, r3, #12
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003004:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	f043 0307 	orr.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800305a:	b480      	push	{r7}
 800305c:	b087      	sub	sp, #28
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003074:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	431a      	orrs	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	609a      	str	r2, [r3, #8]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e046      	b.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fc:	d009      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10c      	bne.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4313      	orrs	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e03f      	b.n	800320a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fe5e 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f829 	bl	8003214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800324e:	f023 030c 	bic.w	r3, r3, #12
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	430b      	orrs	r3, r1
 800325a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <UART_SetConfig+0x114>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d103      	bne.n	8003284 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800327c:	f7ff fb1e 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	e002      	b.n	800328a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7ff fb06 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8003288:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <UART_SetConfig+0x118>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	0119      	lsls	r1, r3, #4
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <UART_SetConfig+0x118>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	4419      	add	r1, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <UART_SetConfig+0x118>)
 80032fa:	fba3 0302 	umull	r0, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <UART_SetConfig+0x118>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	440a      	add	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40013800 	.word	0x40013800
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e033      	b.n	80033aa <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fdce 	bl	8000ef8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f825 	bl	80033b4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020c 	bic.w	r2, r2, #12
 80033ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033de:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80033e8:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003416:	f023 030c 	bic.w	r3, r3, #12
 800341a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003448:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	; (800359c <USART_SetConfig+0x1e8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d14f      	bne.n	80034f4 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7ff fa32 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003458:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009a      	lsls	r2, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	4a4b      	ldr	r2, [pc, #300]	; (80035a0 <USART_SetConfig+0x1ec>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	0119      	lsls	r1, r3, #4
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003490:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <USART_SetConfig+0x1ec>)
 8003492:	fba3 0302 	umull	r0, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2064      	movs	r0, #100	; 0x64
 800349a:	fb00 f303 	mul.w	r3, r0, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	3332      	adds	r3, #50	; 0x32
 80034a4:	4a3e      	ldr	r2, [pc, #248]	; (80035a0 <USART_SetConfig+0x1ec>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80034b2:	4419      	add	r1, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <USART_SetConfig+0x1ec>)
 80034cc:	fba3 0302 	umull	r0, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	fb00 f303 	mul.w	r3, r0, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	3332      	adds	r3, #50	; 0x32
 80034de:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <USART_SetConfig+0x1ec>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	440a      	add	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 80034f2:	e04e      	b.n	8003592 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7ff f9ce 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <USART_SetConfig+0x1ec>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <USART_SetConfig+0x1ec>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <USART_SetConfig+0x1ec>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003552:	4419      	add	r1, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	fbb2 f2f3 	udiv	r2, r2, r3
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <USART_SetConfig+0x1ec>)
 800356c:	fba3 0302 	umull	r0, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2064      	movs	r0, #100	; 0x64
 8003574:	fb00 f303 	mul.w	r3, r0, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <USART_SetConfig+0x1ec>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	440a      	add	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40013800 	.word	0x40013800
 80035a0:	51eb851f 	.word	0x51eb851f

080035a4 <__libc_init_array>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	2600      	movs	r6, #0
 80035a8:	4d0c      	ldr	r5, [pc, #48]	; (80035dc <__libc_init_array+0x38>)
 80035aa:	4c0d      	ldr	r4, [pc, #52]	; (80035e0 <__libc_init_array+0x3c>)
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	42a6      	cmp	r6, r4
 80035b2:	d109      	bne.n	80035c8 <__libc_init_array+0x24>
 80035b4:	f000 f830 	bl	8003618 <_init>
 80035b8:	2600      	movs	r6, #0
 80035ba:	4d0a      	ldr	r5, [pc, #40]	; (80035e4 <__libc_init_array+0x40>)
 80035bc:	4c0a      	ldr	r4, [pc, #40]	; (80035e8 <__libc_init_array+0x44>)
 80035be:	1b64      	subs	r4, r4, r5
 80035c0:	10a4      	asrs	r4, r4, #2
 80035c2:	42a6      	cmp	r6, r4
 80035c4:	d105      	bne.n	80035d2 <__libc_init_array+0x2e>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035cc:	4798      	blx	r3
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7ee      	b.n	80035b0 <__libc_init_array+0xc>
 80035d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d6:	4798      	blx	r3
 80035d8:	3601      	adds	r6, #1
 80035da:	e7f2      	b.n	80035c2 <__libc_init_array+0x1e>
 80035dc:	08003658 	.word	0x08003658
 80035e0:	08003658 	.word	0x08003658
 80035e4:	08003658 	.word	0x08003658
 80035e8:	0800365c 	.word	0x0800365c

080035ec <memcpy>:
 80035ec:	440a      	add	r2, r1
 80035ee:	4291      	cmp	r1, r2
 80035f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80035f4:	d100      	bne.n	80035f8 <memcpy+0xc>
 80035f6:	4770      	bx	lr
 80035f8:	b510      	push	{r4, lr}
 80035fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035fe:	4291      	cmp	r1, r2
 8003600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003604:	d1f9      	bne.n	80035fa <memcpy+0xe>
 8003606:	bd10      	pop	{r4, pc}

08003608 <memset>:
 8003608:	4603      	mov	r3, r0
 800360a:	4402      	add	r2, r0
 800360c:	4293      	cmp	r3, r2
 800360e:	d100      	bne.n	8003612 <memset+0xa>
 8003610:	4770      	bx	lr
 8003612:	f803 1b01 	strb.w	r1, [r3], #1
 8003616:	e7f9      	b.n	800360c <memset+0x4>

08003618 <_init>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	bf00      	nop
 800361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361e:	bc08      	pop	{r3}
 8003620:	469e      	mov	lr, r3
 8003622:	4770      	bx	lr

08003624 <_fini>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr
