
COP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004484  08004484  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004484  08004484  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  20000018  080044a4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010a4  080044a4  000210a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122ea  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002724  00000000  00000000  0003232b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00034a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00035a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd34  00000000  00000000  00036a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001163c  00000000  00000000  00053734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c62e  00000000  00000000  00064d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010139e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  001013f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08004444 	.word	0x08004444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08004444 	.word	0x08004444

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
/* High priority interrupt routine																*/
/************************************************************************************************/
extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Can1RxData[8] = {0};
 8000154:	2300      	movs	r3, #0
 8000156:	62bb      	str	r3, [r7, #40]	; 0x28
 8000158:	2300      	movs	r3, #0
 800015a:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef Can1RxHeader;
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Can1RxHeader, Can1RxData) != HAL_OK)
 800015c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000160:	f107 020c 	add.w	r2, r7, #12
 8000164:	2101      	movs	r1, #1
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f001 fa99 	bl	800169e <HAL_CAN_GetRxMessage>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	  {
		/* Reception Error */
		  Error_Handler();
 8000172:	f000 fdc3 	bl	8000cfc <Error_Handler>
								ri++;
							rc++;								// increment message counter
						}
				}
	  }
}
 8000176:	e077      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
			if ((rc == RX_SIZE))							//software buffer data overrun
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b08      	cmp	r3, #8
 8000180:	d107      	bne.n	8000192 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
						errorregister |= ER_COMMUNICATION;		//set error bits
 8000182:	4b3c      	ldr	r3, [pc, #240]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	f043 0310 	orr.w	r3, r3, #16
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b39      	ldr	r3, [pc, #228]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800018e:	701a      	strb	r2, [r3, #0]
}
 8000190:	e06a      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
					rx[ri][0] 	= (Can1RxHeader.StdId>>3) & 0xF0;				//read function code
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4a37      	ldr	r2, [pc, #220]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800019a:	7812      	ldrb	r2, [r2, #0]
 800019c:	b2d2      	uxtb	r2, r2
 800019e:	4611      	mov	r1, r2
 80001a0:	f023 030f 	bic.w	r3, r3, #15
 80001a4:	b2d8      	uxtb	r0, r3
 80001a6:	4a35      	ldr	r2, [pc, #212]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001a8:	460b      	mov	r3, r1
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	440b      	add	r3, r1
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	4413      	add	r3, r2
 80001b2:	4602      	mov	r2, r0
 80001b4:	701a      	strb	r2, [r3, #0]
					rx[ri][1] 	= Can1RxHeader.StdId & 0x3F;   //(RXB1SIDL >> 5) + ((RXB1SIDH & 0x0F) << 3);	// node ID
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	4a2f      	ldr	r2, [pc, #188]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001c6:	b2d8      	uxtb	r0, r3
 80001c8:	4a2c      	ldr	r2, [pc, #176]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	3301      	adds	r3, #1
 80001d6:	4602      	mov	r2, r0
 80001d8:	701a      	strb	r2, [r3, #0]
					if ((rx[ri][0] != RSDO) || (rx[ri][1] == node_id))
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a26      	ldr	r2, [pc, #152]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2bc0      	cmp	r3, #192	; 0xc0
 80001f4:	d110      	bne.n	8000218 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000200:	460b      	mov	r3, r1
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	4413      	add	r3, r2
 800020a:	3301      	adds	r3, #1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d127      	bne.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
						memcpy((void *)&rx[ri][2],Can1RxData,Can1RxHeader.DLC);
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	4613      	mov	r3, r2
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	3302      	adds	r3, #2
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800022c:	4413      	add	r3, r2
 800022e:	69fa      	ldr	r2, [r7, #28]
 8000230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f004 f8ef 	bl	8004418 <memcpy>
							if (ri == (RX_SIZE-1))				//increment RX message write pointer
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2b07      	cmp	r3, #7
 8000242:	d103      	bne.n	800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
								ri = 0;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
 800024a:	e006      	b.n	800025a <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
								ri++;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	3301      	adds	r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000258:	701a      	strb	r2, [r3, #0]
							rc++;								// increment message counter
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	3301      	adds	r3, #1
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3730      	adds	r7, #48	; 0x30
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000006c 	.word	0x2000006c
 8000274:	2000005d 	.word	0x2000005d
 8000278:	2000013a 	.word	0x2000013a
 800027c:	20000078 	.word	0x20000078
 8000280:	20000c77 	.word	0x20000c77

08000284 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t hse_heartbeat_time = 0;
uint8_t CanRxData[8] = {0};
CAN_RxHeaderTypeDef CanRxHeader;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	static uint32_t Timettt = 0;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CanRxData) != HAL_OK)
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000290:	2100      	movs	r1, #0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f001 fa03 	bl	800169e <HAL_CAN_GetRxMessage>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
	/* Reception Error */
	  Error_Handler();
 800029e:	f000 fd2d 	bl	8000cfc <Error_Handler>
 80002a2:	e01a      	b.n	80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	}
	else
	{
		if(((CanRxHeader.StdId>>3) & 0xF0 )== 0)
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			hsetime = HSETIME;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002b4:	2214      	movs	r2, #20
 80002b6:	701a      	strb	r2, [r3, #0]
		}
		if (((CanRxHeader.StdId & 0x3F) - 1) < MAX_LIFT)			// Heartbeat from HSE
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d803      	bhi.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
				hsetime = HSETIME;			// reset HSE supervisor time
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002c8:	2214      	movs	r2, #20
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e002      	b.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
		{
			hsetime = HSETIME-10;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	701a      	strb	r2, [r3, #0]

		}
		hse_heartbeat = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
	}
	hse_heartbeat_time = HAL_GetTick() - Timettt;
 80002da:	f000 ffdd 	bl	8001298 <HAL_GetTick>
 80002de:	4602      	mov	r2, r0
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80002e8:	6013      	str	r3, [r2, #0]
	 Timettt = HAL_GetTick();
 80002ea:	f000 ffd5 	bl	8001298 <HAL_GetTick>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000038 	.word	0x20000038
 8000300:	200000c8 	.word	0x200000c8
 8000304:	20000f8c 	.word	0x20000f8c
 8000308:	20000059 	.word	0x20000059
 800030c:	20000048 	.word	0x20000048
 8000310:	20000034 	.word	0x20000034

08000314 <CAN_transmit_Interrupt>:

uint16_t mallbox[3] = {0};
uint16_t txmallbox =0;
uint16_t txmallbox_request =0;
void CAN_transmit_Interrupt(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
	if (tc)											// more messages to send
 800031a:	4b3b      	ldr	r3, [pc, #236]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d06d      	beq.n	8000400 <CAN_transmit_Interrupt+0xec>
	{
		CAN_TxHeaderTypeDef CanTxHeader;
		uint8_t CanTxData[8] = {0};
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
		CanTxHeader.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1] ;
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4a36      	ldr	r2, [pc, #216]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000336:	460b      	mov	r3, r1
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	492f      	ldr	r1, [pc, #188]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000354:	4603      	mov	r3, r0
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4403      	add	r3, r0
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	3301      	adds	r3, #1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4413      	add	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
		CanTxHeader.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	61bb      	str	r3, [r7, #24]
		CanTxHeader.IDE   = CAN_ID_STD;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
		CanTxHeader.RTR	= CAN_RTR_DATA;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
		memcpy(CanTxData,(void *)(tx[to]+2),8);
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 80003a0:	4413      	add	r3, r2
 80003a2:	1c9a      	adds	r2, r3, #2
 80003a4:	463b      	mov	r3, r7
 80003a6:	6810      	ldr	r0, [r2, #0]
 80003a8:	6851      	ldr	r1, [r2, #4]
 80003aa:	c303      	stmia	r3!, {r0, r1}
		if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &pTxMailbox) == HAL_OK)
 80003ac:	463a      	mov	r2, r7
 80003ae:	f107 0108 	add.w	r1, r7, #8
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <CAN_transmit_Interrupt+0x100>)
 80003b4:	4818      	ldr	r0, [pc, #96]	; (8000418 <CAN_transmit_Interrupt+0x104>)
 80003b6:	f001 f898 	bl	80014ea <HAL_CAN_AddTxMessage>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <CAN_transmit_Interrupt+0xba>
		{
			txmallbox++;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003ca:	801a      	strh	r2, [r3, #0]
 80003cc:	e001      	b.n	80003d2 <CAN_transmit_Interrupt+0xbe>
		}
		else
		{
			Error_Handler();
 80003ce:	f000 fc95 	bl	8000cfc <Error_Handler>
		}
		tc--;														//decrement TX message counter
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003de:	701a      	strb	r2, [r3, #0]
		if (to == (TX_SIZE-1))					//increment TX message read pointer
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b07      	cmp	r3, #7
 80003e8:	d103      	bne.n	80003f2 <CAN_transmit_Interrupt+0xde>
			to = 0;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
		else
			to++;
	}
}
 80003f0:	e006      	b.n	8000400 <CAN_transmit_Interrupt+0xec>
			to++;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000074 	.word	0x20000074
 800040c:	20000138 	.word	0x20000138
 8000410:	200000e4 	.word	0x200000e4
 8000414:	20000070 	.word	0x20000070
 8000418:	20000c3c 	.word	0x20000c3c
 800041c:	20000046 	.word	0x20000046

08000420 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	mallbox[0]++;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8000432:	801a      	strh	r2, [r3, #0]
	CAN_transmit_Interrupt();
 8000434:	f7ff ff6e 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000040 	.word	0x20000040

08000444 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	mallbox[1]++;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	3301      	adds	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000456:	805a      	strh	r2, [r3, #2]
	CAN_transmit_Interrupt();
 8000458:	f7ff ff5c 	bl	8000314 <CAN_transmit_Interrupt>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000040 	.word	0x20000040

08000468 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	mallbox[2]++;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000472:	889b      	ldrh	r3, [r3, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800047a:	809a      	strh	r2, [r3, #4]
	CAN_transmit_Interrupt();
 800047c:	f7ff ff4a 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000040 	.word	0x20000040

0800048c <HAL_TIM_PeriodElapsedCallback>:

static uint32_t time1_cnt = 0;

uint32_t inspection_time;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]

	static uint32_t time0_cnt = 0;
	static uint32_t reloadtime =0;
	if(htim->Instance == htim1.Instance)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4ba4      	ldr	r3, [pc, #656]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d161      	bne.n	8000568 <HAL_TIM_PeriodElapsedCallback+0xdc>
	{
		bTime.Time_10ms = 1;
 80004a4:	4aa3      	ldr	r2, [pc, #652]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80004a6:	7813      	ldrb	r3, [r2, #0]
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	7013      	strb	r3, [r2, #0]
		time1_cnt++;
 80004ae:	4ba2      	ldr	r3, [pc, #648]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	4aa0      	ldr	r2, [pc, #640]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80004b6:	6013      	str	r3, [r2, #0]
		time10ms = HAL_GetTick() - reloadtime;
 80004b8:	f000 feee 	bl	8001298 <HAL_GetTick>
 80004bc:	4602      	mov	r2, r0
 80004be:	4b9f      	ldr	r3, [pc, #636]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	4a9e      	ldr	r2, [pc, #632]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80004c6:	6013      	str	r3, [r2, #0]
		reloadtime = HAL_GetTick();
 80004c8:	f000 fee6 	bl	8001298 <HAL_GetTick>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4a9b      	ldr	r2, [pc, #620]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80004d0:	6013      	str	r3, [r2, #0]
		Keytimout --;
 80004d2:	4b9c      	ldr	r3, [pc, #624]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a9a      	ldr	r2, [pc, #616]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80004da:	6013      	str	r3, [r2, #0]
		LedOfftimout --;
 80004dc:	4b9a      	ldr	r3, [pc, #616]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	4a99      	ldr	r2, [pc, #612]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80004e4:	6013      	str	r3, [r2, #0]
		if((time1_cnt % 10) == 0)
 80004e6:	4b94      	ldr	r3, [pc, #592]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	4b98      	ldr	r3, [pc, #608]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80004ec:	fba3 2301 	umull	r2, r3, r3, r1
 80004f0:	08da      	lsrs	r2, r3, #3
 80004f2:	4613      	mov	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4413      	add	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1aca      	subs	r2, r1, r3
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d120      	bne.n	8000542 <HAL_TIM_PeriodElapsedCallback+0xb6>
			{//100ms
				bTime.Time_100ms = 1;
 8000500:	4a8c      	ldr	r2, [pc, #560]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000502:	7813      	ldrb	r3, [r2, #0]
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	7013      	strb	r3, [r2, #0]
				if (bBusOffTimer)
 800050a:	4b91      	ldr	r3, [pc, #580]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x94>
					-- bBusOffTimer;
 8000512:	4b8f      	ldr	r3, [pc, #572]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	3b01      	subs	r3, #1
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b8d      	ldr	r3, [pc, #564]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	e010      	b.n	8000542 <HAL_TIM_PeriodElapsedCallback+0xb6>
				else
					{
						if(bFunc.buz_set_id)
 8000520:	4b8c      	ldr	r3, [pc, #560]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	d009      	beq.n	8000542 <HAL_TIM_PeriodElapsedCallback+0xb6>
							{
								Disable_BUZ();
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	4889      	ldr	r0, [pc, #548]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000534:	f002 f8ba 	bl	80026ac <HAL_GPIO_WritePin>
								bFunc.buz_set_id = 0;
 8000538:	4a86      	ldr	r2, [pc, #536]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800053a:	7813      	ldrb	r3, [r2, #0]
 800053c:	f36f 0300 	bfc	r3, #0, #1
 8000540:	7013      	strb	r3, [r2, #0]
							}
					}
			}
		if((time1_cnt % 200) == 0)
 8000542:	4b7d      	ldr	r3, [pc, #500]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b85      	ldr	r3, [pc, #532]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000548:	fba3 1302 	umull	r1, r3, r3, r2
 800054c:	099b      	lsrs	r3, r3, #6
 800054e:	21c8      	movs	r1, #200	; 0xc8
 8000550:	fb01 f303 	mul.w	r3, r1, r3
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	f040 80e5 	bne.w	8000726 <HAL_TIM_PeriodElapsedCallback+0x29a>
			bTime.Time_2s = 1;
 800055c:	4a75      	ldr	r2, [pc, #468]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800055e:	7813      	ldrb	r3, [r2, #0]
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	7013      	strb	r3, [r2, #0]
										}
								}
						}

	}
}
 8000566:	e0de      	b.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x29a>
	else if(htim->Instance == htim2.Instance)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b7c      	ldr	r3, [pc, #496]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	f040 80d8 	bne.w	8000726 <HAL_TIM_PeriodElapsedCallback+0x29a>
					bTime.Time_500ms = true;
 8000576:	4a6f      	ldr	r2, [pc, #444]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000578:	7813      	ldrb	r3, [r2, #0]
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	7013      	strb	r3, [r2, #0]
					bTime.flash_floor_500ms = true;
 8000580:	4a6c      	ldr	r2, [pc, #432]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000582:	7813      	ldrb	r3, [r2, #0]
 8000584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000588:	7013      	strb	r3, [r2, #0]
					time0_cnt++;
 800058a:	4b76      	ldr	r3, [pc, #472]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a74      	ldr	r2, [pc, #464]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000592:	6013      	str	r3, [r2, #0]
					if (!nmtstate)						// only during Boot up
 8000594:	4b74      	ldr	r3, [pc, #464]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10b      	bne.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0x128>
							if (nmtwait)					// waiting time for first heartbeat
 800059c:	4b73      	ldr	r3, [pc, #460]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d006      	beq.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0x128>
								nmtwait--;
 80005a6:	4b71      	ldr	r3, [pc, #452]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80005b2:	701a      	strb	r2, [r3, #0]
					if (heartbeat)						// decrement heartbeat timer
 80005b4:	4b6e      	ldr	r3, [pc, #440]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <HAL_TIM_PeriodElapsedCallback+0x13c>
						heartbeat--;
 80005bc:	4b6c      	ldr	r3, [pc, #432]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b6a      	ldr	r3, [pc, #424]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80005c6:	701a      	strb	r2, [r3, #0]
					if (sdo_timer)			// check for SDO transfer time out
 80005c8:	4b6a      	ldr	r3, [pc, #424]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <HAL_TIM_PeriodElapsedCallback+0x150>
						sdo_timer--;
 80005d0:	4b68      	ldr	r3, [pc, #416]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b66      	ldr	r3, [pc, #408]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005da:	701a      	strb	r2, [r3, #0]
					if (hsetime)
 80005dc:	4b66      	ldr	r3, [pc, #408]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d010      	beq.n	8000608 <HAL_TIM_PeriodElapsedCallback+0x17c>
							hsetime--;
 80005e6:	4b64      	ldr	r3, [pc, #400]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b61      	ldr	r3, [pc, #388]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80005f2:	701a      	strb	r2, [r3, #0]
							if (!hsetime) 		// HSE heartbeat time out
 80005f4:	4b60      	ldr	r3, [pc, #384]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d104      	bne.n	8000608 <HAL_TIM_PeriodElapsedCallback+0x17c>
								bFunc.hsecheck = true; 	// HSE check necessary
 80005fe:	4a55      	ldr	r2, [pc, #340]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000600:	7813      	ldrb	r3, [r2, #0]
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	7013      	strb	r3, [r2, #0]
					if((time0_cnt % 10) == 0)
 8000608:	4b56      	ldr	r3, [pc, #344]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	4b4f      	ldr	r3, [pc, #316]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800060e:	fba3 2301 	umull	r2, r3, r3, r1
 8000612:	08da      	lsrs	r2, r3, #3
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	1aca      	subs	r2, r1, r3
 800061e:	2a00      	cmp	r2, #0
 8000620:	d104      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x1a0>
						bTime.Time_5s = 1;
 8000622:	4a44      	ldr	r2, [pc, #272]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000624:	7813      	ldrb	r3, [r2, #0]
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	7013      	strb	r3, [r2, #0]
					if(att_alarm_timer)
 800062c:	4b53      	ldr	r3, [pc, #332]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d026      	beq.n	8000682 <HAL_TIM_PeriodElapsedCallback+0x1f6>
							--att_alarm_timer;
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b4f      	ldr	r3, [pc, #316]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800063e:	701a      	strb	r2, [r3, #0]
							if(!att_alarm_timer)
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d11c      	bne.n	8000682 <HAL_TIM_PeriodElapsedCallback+0x1f6>
									if(bTime.Time_alarm_fg)
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <HAL_TIM_PeriodElapsedCallback+0x1d8>
										buzzer &= ~BUZ_WORKING;
 8000656:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f023 0301 	bic.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b47      	ldr	r3, [pc, #284]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000662:	701a      	strb	r2, [r3, #0]
									bFunc.buz_state = !bFunc.buz_state;
 8000664:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2d9      	uxtb	r1, r3
 8000678:	4a36      	ldr	r2, [pc, #216]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800067a:	7813      	ldrb	r3, [r2, #0]
 800067c:	f361 0341 	bfi	r3, r1, #1, #1
 8000680:	7013      	strb	r3, [r2, #0]
					if(buz_alarm_totaltimer)
 8000682:	4b40      	ldr	r3, [pc, #256]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x20a>
						--buz_alarm_totaltimer;
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3b01      	subs	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000694:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < mInOut_Number; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e03f      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x290>
							if (outpar [i][IO_BASIC_FUNC] == ARRIVAL_INDICATION)
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a3a      	ldr	r2, [pc, #232]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006a0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80006a4:	2b44      	cmp	r3, #68	; 0x44
 80006a6:	d136      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x28a>
							if (outpar [i][IO_ACK])
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	4a37      	ldr	r2, [pc, #220]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	4413      	add	r3, r2
 80006b0:	79db      	ldrb	r3, [r3, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d02f      	beq.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x28a>
									outpar [i][IO_ACK]--; 			//decrement time counter
 80006b6:	7bfa      	ldrb	r2, [r7, #15]
 80006b8:	4933      	ldr	r1, [pc, #204]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006ba:	00d3      	lsls	r3, r2, #3
 80006bc:	440b      	add	r3, r1
 80006be:	79db      	ldrb	r3, [r3, #7]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	b2d8      	uxtb	r0, r3
 80006c4:	4930      	ldr	r1, [pc, #192]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006c6:	00d3      	lsls	r3, r2, #3
 80006c8:	440b      	add	r3, r1
 80006ca:	4602      	mov	r2, r0
 80006cc:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])		//time out
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	4413      	add	r3, r2
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d11c      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x28a>
											bit_reset (out[i/8], i % 8);			// switch off output
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	b2d8      	uxtb	r0, r3
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x300>)
 80006e6:	5c9b      	ldrb	r3, [r3, r2]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b25a      	sxtb	r2, r3
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	4013      	ands	r3, r2
 8000700:	b25b      	sxtb	r3, r3
 8000702:	4602      	mov	r2, r0
 8000704:	b2d9      	uxtb	r1, r3
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000708:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4413      	add	r3, r2
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	3301      	adds	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	7bfa      	ldrb	r2, [r7, #15]
 8000722:	429a      	cmp	r2, r3
 8000724:	d3ba      	bcc.n	800069c <HAL_TIM_PeriodElapsedCallback+0x210>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000f9c 	.word	0x20000f9c
 8000734:	20000a14 	.word	0x20000a14
 8000738:	20000060 	.word	0x20000060
 800073c:	20000064 	.word	0x20000064
 8000740:	20000f94 	.word	0x20000f94
 8000744:	20000004 	.word	0x20000004
 8000748:	20000008 	.word	0x20000008
 800074c:	cccccccd 	.word	0xcccccccd
 8000750:	2000005a 	.word	0x2000005a
 8000754:	20001038 	.word	0x20001038
 8000758:	40010800 	.word	0x40010800
 800075c:	51eb851f 	.word	0x51eb851f
 8000760:	2000103c 	.word	0x2000103c
 8000764:	20000068 	.word	0x20000068
 8000768:	20000f98 	.word	0x20000f98
 800076c:	20000fe5 	.word	0x20000fe5
 8000770:	20001085 	.word	0x20001085
 8000774:	2000004d 	.word	0x2000004d
 8000778:	20000f8c 	.word	0x20000f8c
 800077c:	2000005b 	.word	0x2000005b
 8000780:	2000004c 	.word	0x2000004c
 8000784:	2000005c 	.word	0x2000005c
 8000788:	20000cd0 	.word	0x20000cd0
 800078c:	20000050 	.word	0x20000050
 8000790:	20000000 	.word	0x20000000

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fd25 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f84d 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 fa29 	bl	8000bf8 <MX_GPIO_Init>
  MX_CAN_Init();
 80007a6:	f000 f88f 	bl	80008c8 <MX_CAN_Init>
  MX_TIM1_Init();
 80007aa:	f000 f8c3 	bl	8000934 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007ae:	f000 f911 	bl	80009d4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 f9ab 	bl	8000b0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80007b6:	f000 f95b 	bl	8000a70 <MX_TIM3_Init>
  MX_DMA_Init();
 80007ba:	f000 f9ff 	bl	8000bbc <MX_DMA_Init>
  MX_USART2_Init();
 80007be:	f000 f9cf 	bl	8000b60 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  USART2_TX_LOW;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <main+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 uint8_t data[2] ={0xB0,0};
 80007c8:	23b0      	movs	r3, #176	; 0xb0
 80007ca:	80bb      	strh	r3, [r7, #4]
 HAL_TIM_Base_Start(&htim3);
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <main+0x9c>)
 80007ce:	f002 fbef 	bl	8002fb0 <HAL_TIM_Base_Start>
  mDisp_buf[1] = 'B';
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <main+0xa0>)
 80007d4:	2242      	movs	r2, #66	; 0x42
 80007d6:	705a      	strb	r2, [r3, #1]
  mDisp_buf[2] = '1';
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <main+0xa0>)
 80007da:	2231      	movs	r2, #49	; 0x31
 80007dc:	709a      	strb	r2, [r3, #2]
  mDisp_buf[3] = 0;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <main+0xa0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	70da      	strb	r2, [r3, #3]
 while(1)
 {
		int checksum = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
		mDisp_buf[0] = 0xB0;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <main+0xa0>)
 80007ea:	22b0      	movs	r2, #176	; 0xb0
 80007ec:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<4; ++i)
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e00a      	b.n	800080a <main+0x76>
			checksum += mDisp_buf[i];
 80007f4:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <main+0xa0>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
		for (int i=0; i<4; ++i)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b03      	cmp	r3, #3
 800080e:	ddf1      	ble.n	80007f4 <main+0x60>
		mDisp_buf[4] = checksum;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <main+0xa0>)
 8000816:	711a      	strb	r2, [r3, #4]
	 HAL_USART_Transmit_DMA(&husart2, mDisp_buf, 5);
 8000818:	2205      	movs	r2, #5
 800081a:	4906      	ldr	r1, [pc, #24]	; (8000834 <main+0xa0>)
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <main+0xa4>)
 800081e:	f003 f887 	bl	8003930 <HAL_USART_Transmit_DMA>
	 HAL_Delay(100);
 8000822:	2064      	movs	r0, #100	; 0x64
 8000824:	f000 fd42 	bl	80012ac <HAL_Delay>
 {
 8000828:	e7dc      	b.n	80007e4 <main+0x50>
 800082a:	bf00      	nop
 800082c:	42210188 	.word	0x42210188
 8000830:	20000c88 	.word	0x20000c88
 8000834:	200009f0 	.word	0x200009f0
 8000838:	20000ff4 	.word	0x20000ff4

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	; 0x40
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2228      	movs	r2, #40	; 0x28
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fdf2 	bl	8004434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800087a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	4618      	mov	r0, r3
 8000886:	f001 ff29 	bl	80026dc <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000890:	f000 fa34 	bl	8000cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2102      	movs	r1, #2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f993 	bl	8002bdc <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008bc:	f000 fa1e 	bl	8000cfc <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3740      	adds	r7, #64	; 0x40
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_CAN_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_CAN_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_CAN_Init+0x64>)
 80008d4:	2210      	movs	r2, #16
 80008d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_CAN_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_CAN_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_CAN_Init+0x64>)
 80008e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_CAN_Init+0x64>)
 80008ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_CAN_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_CAN_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_CAN_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_CAN_Init+0x64>)
 8000908:	2201      	movs	r2, #1
 800090a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_CAN_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_CAN_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_CAN_Init+0x64>)
 800091a:	f000 fceb 	bl	80012f4 <HAL_CAN_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000924:	f000 f9ea 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000c3c 	.word	0x20000c3c
 8000930:	40006400 	.word	0x40006400

08000934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_TIM1_Init+0x98>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <MX_TIM1_Init+0x9c>)
 8000954:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_TIM1_Init+0x98>)
 8000958:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800095c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM1_Init+0x98>)
 8000966:	2263      	movs	r2, #99	; 0x63
 8000968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_TIM1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_TIM1_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_TIM1_Init+0x98>)
 800097e:	f002 fac7 	bl	8002f10 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f9b8 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM1_Init+0x98>)
 800099a:	f002 fc5b 	bl	8003254 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009a4:	f000 f9aa 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_TIM1_Init+0x98>)
 80009b6:	f002 fe2d 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c0:	f000 f99c 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000f9c 	.word	0x20000f9c
 80009d0:	40012c00 	.word	0x40012c00

080009d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_TIM2_Init+0x98>)
 80009f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_TIM2_Init+0x98>)
 80009fa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a08:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a1c:	f002 fa78 	bl	8002f10 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a26:	f000 f969 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a38:	f002 fc0c 	bl	8003254 <HAL_TIM_ConfigClockSource>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a42:	f000 f95b 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_TIM2_Init+0x98>)
 8000a54:	f002 fdde 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a5e:	f000 f94d 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000103c 	.word	0x2000103c

08000a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <MX_TIM3_Init+0x98>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000a94:	2247      	movs	r2, #71	; 0x47
 8000a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab2:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000ab4:	f002 fa2c 	bl	8002f10 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f91d 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4619      	mov	r1, r3
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000ad0:	f002 fbc0 	bl	8003254 <HAL_TIM_ConfigClockSource>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f90f 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM3_Init+0x94>)
 8000aec:	f002 fd92 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000af6:	f000 f901 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000c88 	.word	0x20000c88
 8000b08:	40000400 	.word	0x40000400

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART1_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b44:	f002 fdd6 	bl	80036f4 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8d5 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000f48 	.word	0x20000f48
 8000b5c:	40013800 	.word	0x40013800

08000b60 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <MX_USART2_Init+0x58>)
 8000b68:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b70:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_2EDGE;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b96:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART2_Init+0x54>)
 8000ba2:	f002 fe83 	bl	80038ac <HAL_USART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART2_Init+0x50>
  {
    Error_Handler();
 8000bac:	f000 f8a6 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000ff4 	.word	0x20000ff4
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_DMA_Init+0x38>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <MX_DMA_Init+0x38>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_DMA_Init+0x38>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2011      	movs	r0, #17
 8000be0:	f001 f945 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000be4:	2011      	movs	r0, #17
 8000be6:	f001 f95e 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a37      	ldr	r2, [pc, #220]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a2b      	ldr	r2, [pc, #172]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Out_Pin|HC595_SEL_Pin|SCK_Pin|MOSI_Pin
 8000c54:	2200      	movs	r2, #0
 8000c56:	f248 11a3 	movw	r1, #33187	; 0x81a3
 8000c5a:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c5c:	f001 fd26 	bl	80026ac <HAL_GPIO_WritePin>
                          |UART_DE_Pin|HC166_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Buzzer_Out_Pin HC595_SEL_Pin MOSI_Pin UART_DE_Pin
                           HC166_SEL_Pin */
  GPIO_InitStruct.Pin = Buzzer_Out_Pin|HC595_SEL_Pin|MOSI_Pin|UART_DE_Pin
 8000c60:	f248 1383 	movw	r3, #33155	; 0x8183
 8000c64:	613b      	str	r3, [r7, #16]
                          |HC166_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c7a:	f001 fb93 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCK_Pin */
  GPIO_InitStruct.Pin = SCK_Pin;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000c96:	f001 fb85 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8000c9a:	2340      	movs	r3, #64	; 0x40
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000cae:	f001 fb79 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IC_IN1_Pin IC_IN2_Pin IC_IN3_Pin IC_IN11_Pin
                           IC_IN12_Pin IC_IN13_Pin IC_IN14_Pin IC_IN4_Pin
                           IC_IN5_Pin IC_IN6_Pin IC_IN7_Pin IC_IN8_Pin
                           IC_IN9_Pin IC_IN10_Pin */
  GPIO_InitStruct.Pin = IC_IN1_Pin|IC_IN2_Pin|IC_IN3_Pin|IC_IN11_Pin
 8000cb2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000cb6:	613b      	str	r3, [r7, #16]
                          |IC_IN12_Pin|IC_IN13_Pin|IC_IN14_Pin|IC_IN4_Pin
                          |IC_IN5_Pin|IC_IN6_Pin|IC_IN7_Pin|IC_IN8_Pin
                          |IC_IN9_Pin|IC_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_GPIO_Init+0x100>)
 8000cc8:	f001 fb6c 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NODE_ID_Pin */
  GPIO_InitStruct.Pin = NODE_ID_Pin;
 8000ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NODE_ID_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_GPIO_Init+0x100>)
 8000ce2:	f001 fb5f 	bl	80023a4 <HAL_GPIO_Init>

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_MspInit+0x5c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_MspInit+0x5c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_MspInit+0x5c>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x5c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_MspInit+0x5c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x5c>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_MspInit+0x60>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_MspInit+0x60>)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000

08000d6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2c      	ldr	r2, [pc, #176]	; (8000e38 <HAL_CAN_MspInit+0xcc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d151      	bne.n	8000e30 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_CAN_MspInit+0xd0>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <HAL_CAN_MspInit+0xd0>)
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d96:	61d3      	str	r3, [r2, #28]
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_CAN_MspInit+0xd0>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_CAN_MspInit+0xd0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <HAL_CAN_MspInit+0xd0>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_CAN_MspInit+0xd0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481b      	ldr	r0, [pc, #108]	; (8000e40 <HAL_CAN_MspInit+0xd4>)
 8000dd2:	f001 fae7 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <HAL_CAN_MspInit+0xd4>)
 8000dec:	f001 fada 	bl	80023a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2013      	movs	r0, #19
 8000df6:	f001 f83a 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000dfa:	2013      	movs	r0, #19
 8000dfc:	f001 f853 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2014      	movs	r0, #20
 8000e06:	f001 f832 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f001 f84b 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2015      	movs	r0, #21
 8000e16:	f001 f82a 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e1a:	2015      	movs	r0, #21
 8000e1c:	f001 f843 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2016      	movs	r0, #22
 8000e26:	f001 f822 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e2a:	2016      	movs	r0, #22
 8000e2c:	f001 f83b 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40006400 	.word	0x40006400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <HAL_TIM_Base_MspInit+0xac>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d11c      	bne.n	8000e90 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e56:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2018      	movs	r0, #24
 8000e74:	f000 fffb 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000e78:	2018      	movs	r0, #24
 8000e7a:	f001 f814 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2019      	movs	r0, #25
 8000e84:	f000 fff3 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e88:	2019      	movs	r0, #25
 8000e8a:	f001 f80c 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e8e:	e02a      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d114      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	201c      	movs	r0, #28
 8000eb8:	f000 ffd9 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ebc:	201c      	movs	r0, #28
 8000ebe:	f000 fff2 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
}
 8000ec2:	e010      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_TIM_Base_MspInit+0xb4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_TIM_Base_MspInit+0xb0>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40012c00 	.word	0x40012c00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40000400 	.word	0x40000400

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <HAL_UART_MspInit+0x8c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d131      	bne.n	8000f80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_UART_MspInit+0x90>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_UART_MspInit+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0x90>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_UART_MspInit+0x90>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <HAL_UART_MspInit+0x94>)
 8000f62:	f001 fa1f 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_UART_MspInit+0x94>)
 8000f7c:	f001 fa12 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010800 	.word	0x40010800

08000f94 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_USART_MspInit+0xe4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d15d      	bne.n	8001070 <HAL_USART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_USART_MspInit+0xe8>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a30      	ldr	r2, [pc, #192]	; (800107c <HAL_USART_MspInit+0xe8>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	61d3      	str	r3, [r2, #28]
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <HAL_USART_MspInit+0xe8>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_USART_MspInit+0xe8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	; (800107c <HAL_USART_MspInit+0xe8>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <HAL_USART_MspInit+0xe8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4822      	ldr	r0, [pc, #136]	; (8001080 <HAL_USART_MspInit+0xec>)
 8000ff8:	f001 f9d4 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <HAL_USART_MspInit+0xec>)
 8001010:	f001 f9c8 	bl	80023a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_USART_MspInit+0xf4>)
 8001018:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_USART_MspInit+0xf0>)
 800101c:	2210      	movs	r2, #16
 800101e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_USART_MspInit+0xf0>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_USART_MspInit+0xf0>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001046:	f000 ff49 	bl	8001edc <HAL_DMA_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_USART_MspInit+0xc0>
    {
      Error_Handler();
 8001050:	f7ff fe54 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart2_tx);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_USART_MspInit+0xf0>)
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_USART_MspInit+0xf0>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f000 ff02 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800106a:	2026      	movs	r0, #38	; 0x26
 800106c:	f000 ff1b 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000
 8001080:	40010800 	.word	0x40010800
 8001084:	20000f00 	.word	0x20000f00
 8001088:	40020080 	.word	0x40020080

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <NMI_Handler+0x4>

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d2:	f000 f8cf 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Channel7_IRQHandler+0x10>)
 80010e2:	f001 f82b 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000f00 	.word	0x20000f00

080010f0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80010f6:	f000 fbe3 	bl	80018c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000c3c 	.word	0x20000c3c

08001104 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800110a:	f000 fbd9 	bl	80018c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000c3c 	.word	0x20000c3c

08001118 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <CAN1_RX1_IRQHandler+0x10>)
 800111e:	f000 fbcf 	bl	80018c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000c3c 	.word	0x20000c3c

0800112c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <CAN1_SCE_IRQHandler+0x10>)
 8001132:	f000 fbc5 	bl	80018c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000c3c 	.word	0x20000c3c

08001140 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM1_BRK_IRQHandler+0x10>)
 8001146:	f001 ff7d 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000f9c 	.word	0x20000f9c

08001154 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <TIM1_UP_IRQHandler+0x10>)
 800115a:	f001 ff73 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000f9c 	.word	0x20000f9c

08001168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM2_IRQHandler+0x10>)
 800116e:	f001 ff69 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000103c 	.word	0x2000103c

0800117c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <USART2_IRQHandler+0x10>)
 8001182:	f002 fc41 	bl	8003a08 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000ff4 	.word	0x20000ff4

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffe5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 f903 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fae3 	bl	8000794 <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011d8:	0800448c 	.word	0x0800448c
  ldr r2, =_sbss
 80011dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011e0:	200010a4 	.word	0x200010a4

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fe2d 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fd80 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fe45 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 fe0d 	bl	8001e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000014 	.word	0x20000014
 8001270:	20000010 	.word	0x20000010

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000014 	.word	0x20000014
 8001294:	200010a0 	.word	0x200010a0

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	200010a0 	.word	0x200010a0

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000014 	.word	0x20000014

080012f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0ed      	b.n	80014e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fd2a 	bl	8000d6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001328:	f7ff ffb6 	bl	8001298 <HAL_GetTick>
 800132c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800132e:	e012      	b.n	8001356 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001330:	f7ff ffb2 	bl	8001298 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d90b      	bls.n	8001356 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2205      	movs	r2, #5
 800134e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0c5      	b.n	80014e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0e5      	beq.n	8001330 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0202 	bic.w	r2, r2, #2
 8001372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001374:	f7ff ff90 	bl	8001298 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800137a:	e012      	b.n	80013a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800137c:	f7ff ff8c 	bl	8001298 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b0a      	cmp	r3, #10
 8001388:	d90b      	bls.n	80013a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e09f      	b.n	80014e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e5      	bne.n	800137c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e007      	b.n	80013da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7e5b      	ldrb	r3, [r3, #25]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e007      	b.n	8001404 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001402:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e9b      	ldrb	r3, [r3, #26]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e007      	b.n	800142e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0220 	bic.w	r2, r2, #32
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7edb      	ldrb	r3, [r3, #27]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d108      	bne.n	8001448 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0210 	bic.w	r2, r2, #16
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e007      	b.n	8001458 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0210 	orr.w	r2, r2, #16
 8001456:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f1b      	ldrb	r3, [r3, #28]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d108      	bne.n	8001472 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0208 	orr.w	r2, r2, #8
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e007      	b.n	8001482 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0208 	bic.w	r2, r2, #8
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7f5b      	ldrb	r3, [r3, #29]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d108      	bne.n	800149c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e007      	b.n	80014ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0204 	bic.w	r2, r2, #4
 80014aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	ea42 0103 	orr.w	r1, r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b089      	sub	sp, #36	; 0x24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d003      	beq.n	8001516 <HAL_CAN_AddTxMessage+0x2c>
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b02      	cmp	r3, #2
 8001512:	f040 80b8 	bne.w	8001686 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10a      	bne.n	8001536 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a0 	beq.w	8001676 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	0e1b      	lsrs	r3, r3, #24
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d907      	bls.n	8001556 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e09e      	b.n	8001694 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001556:	2201      	movs	r2, #1
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10d      	bne.n	8001584 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6809      	ldr	r1, [r1, #0]
 8001576:	431a      	orrs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3318      	adds	r3, #24
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	440b      	add	r3, r1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e00f      	b.n	80015a4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800158e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001594:	68f9      	ldr	r1, [r7, #12]
 8001596:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001598:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3318      	adds	r3, #24
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3318      	adds	r3, #24
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	3304      	adds	r3, #4
 80015b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	7d1b      	ldrb	r3, [r3, #20]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d111      	bne.n	80015e4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3318      	adds	r3, #24
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6811      	ldr	r1, [r2, #0]
 80015d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3318      	adds	r3, #24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	3304      	adds	r3, #4
 80015e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3307      	adds	r3, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	061a      	lsls	r2, r3, #24
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3306      	adds	r3, #6
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3305      	adds	r3, #5
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	4313      	orrs	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	3204      	adds	r2, #4
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4610      	mov	r0, r2
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6811      	ldr	r1, [r2, #0]
 800160c:	ea43 0200 	orr.w	r2, r3, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	440b      	add	r3, r1
 8001616:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800161a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3303      	adds	r3, #3
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	061a      	lsls	r2, r3, #24
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3302      	adds	r3, #2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3301      	adds	r3, #1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	4313      	orrs	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	4610      	mov	r0, r2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	6811      	ldr	r1, [r2, #0]
 8001642:	ea43 0200 	orr.w	r2, r3, r0
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	440b      	add	r3, r1
 800164c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001650:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	6811      	ldr	r1, [r2, #0]
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3318      	adds	r3, #24
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	440b      	add	r3, r1
 8001670:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e00e      	b.n	8001694 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e006      	b.n	8001694 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800169e:	b480      	push	{r7}
 80016a0:	b087      	sub	sp, #28
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d003      	beq.n	80016c2 <HAL_CAN_GetRxMessage+0x24>
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	f040 80f3 	bne.w	80018a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10e      	bne.n	80016e6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0e7      	b.n	80018b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d107      	bne.n	8001704 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d8      	b.n	80018b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	331b      	adds	r3, #27
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0204 	and.w	r2, r3, #4
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	331b      	adds	r3, #27
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0d5b      	lsrs	r3, r3, #21
 8001732:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00b      	b.n	8001754 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	331b      	adds	r3, #27
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	331b      	adds	r3, #27
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0202 	and.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	331b      	adds	r3, #27
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 020f 	and.w	r2, r3, #15
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	331b      	adds	r3, #27
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	3304      	adds	r3, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	331b      	adds	r3, #27
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	3304      	adds	r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0a1a      	lsrs	r2, r3, #8
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1a      	lsrs	r2, r3, #16
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3302      	adds	r3, #2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e1a      	lsrs	r2, r3, #24
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3303      	adds	r3, #3
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3304      	adds	r3, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0a1a      	lsrs	r2, r3, #8
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3305      	adds	r3, #5
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0c1a      	lsrs	r2, r3, #16
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3306      	adds	r3, #6
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4413      	add	r3, r2
 800186c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0e1a      	lsrs	r2, r3, #24
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3307      	adds	r3, #7
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0220 	orr.w	r2, r2, #32
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	e007      	b.n	80018a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0220 	orr.w	r2, r2, #32
 80018a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e006      	b.n	80018b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d07c      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d023      	beq.n	8001958 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fd7c 	bl	8000420 <HAL_CAN_TxMailbox0CompleteCallback>
 8001928:	e016      	b.n	8001958 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	e00c      	b.n	8001958 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	e002      	b.n	8001958 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f96b 	bl	8001c2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d024      	beq.n	80019ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe fd64 	bl	8000444 <HAL_CAN_TxMailbox1CompleteCallback>
 800197c:	e016      	b.n	80019ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	e00c      	b.n	80019ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e002      	b.n	80019ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f94a 	bl	8001c40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d024      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fd4c 	bl	8000468 <HAL_CAN_TxMailbox2CompleteCallback>
 80019d0:	e016      	b.n	8001a00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e00c      	b.n	8001a00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e002      	b.n	8001a00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f929 	bl	8001c52 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00c      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2210      	movs	r2, #16
 8001a22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f90f 	bl	8001c64 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fc10 	bl	8000284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00c      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8e6 	bl	8001c76 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fb42 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f8cf 	bl	8001c88 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2208      	movs	r2, #8
 8001b04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8c7 	bl	8001c9a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d07b      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d072      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d043      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d03e      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8e:	2b60      	cmp	r3, #96	; 0x60
 8001b90:	d02b      	beq.n	8001bea <HAL_CAN_IRQHandler+0x32a>
 8001b92:	2b60      	cmp	r3, #96	; 0x60
 8001b94:	d82e      	bhi.n	8001bf4 <HAL_CAN_IRQHandler+0x334>
 8001b96:	2b50      	cmp	r3, #80	; 0x50
 8001b98:	d022      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x320>
 8001b9a:	2b50      	cmp	r3, #80	; 0x50
 8001b9c:	d82a      	bhi.n	8001bf4 <HAL_CAN_IRQHandler+0x334>
 8001b9e:	2b40      	cmp	r3, #64	; 0x40
 8001ba0:	d019      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x316>
 8001ba2:	2b40      	cmp	r3, #64	; 0x40
 8001ba4:	d826      	bhi.n	8001bf4 <HAL_CAN_IRQHandler+0x334>
 8001ba6:	2b30      	cmp	r3, #48	; 0x30
 8001ba8:	d010      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x30c>
 8001baa:	2b30      	cmp	r3, #48	; 0x30
 8001bac:	d822      	bhi.n	8001bf4 <HAL_CAN_IRQHandler+0x334>
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d002      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x2f8>
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d005      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bb6:	e01d      	b.n	8001bf4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc0:	e019      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bca:	e014      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd4:	e00f      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bde:	e00a      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be8:	e005      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf2:	e000      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bf4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f843 	bl	8001cac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
	...

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4906      	ldr	r1, [pc, #24]	; (8001d58 <__NVIC_EnableIRQ+0x34>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff90 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff2d 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff42 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff90 	bl	8001db0 <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5f 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff35 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa2 	bl	8001e14 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e043      	b.n	8001f7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_DMA_Init+0xa8>)
 8001efa:	4413      	add	r3, r2
 8001efc:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <HAL_DMA_Init+0xac>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_DMA_Init+0xb0>)
 8001f0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	bffdfff8 	.word	0xbffdfff8
 8001f88:	cccccccd 	.word	0xcccccccd
 8001f8c:	40020000 	.word	0x40020000

08001f90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_DMA_Start_IT+0x20>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e04a      	b.n	8002046 <HAL_DMA_Start_IT+0xb6>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d13a      	bne.n	8002038 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f9ae 	bl	8002348 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 020e 	orr.w	r2, r2, #14
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e00f      	b.n	8002026 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 020a 	orr.w	r2, r2, #10
 8002024:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e005      	b.n	8002044 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002044:	7dfb      	ldrb	r3, [r7, #23]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002062:	2b02      	cmp	r3, #2
 8002064:	d005      	beq.n	8002072 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e051      	b.n	8002116 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_DMA_Abort_IT+0xd0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d029      	beq.n	80020f0 <HAL_DMA_Abort_IT+0xa0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <HAL_DMA_Abort_IT+0xd4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Abort_IT+0x9c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_DMA_Abort_IT+0xd8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01a      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x96>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_DMA_Abort_IT+0xdc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d012      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x90>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_DMA_Abort_IT+0xe0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00a      	beq.n	80020da <HAL_DMA_Abort_IT+0x8a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_DMA_Abort_IT+0xe4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d102      	bne.n	80020d4 <HAL_DMA_Abort_IT+0x84>
 80020ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020d2:	e00e      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d8:	e00b      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020de:	e008      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e4:	e005      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	e002      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020ec:	2310      	movs	r3, #16
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020f0:	2301      	movs	r3, #1
 80020f2:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_DMA_Abort_IT+0xe8>)
 80020f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
    } 
  }
  return status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40020008 	.word	0x40020008
 8002124:	4002001c 	.word	0x4002001c
 8002128:	40020030 	.word	0x40020030
 800212c:	40020044 	.word	0x40020044
 8002130:	40020058 	.word	0x40020058
 8002134:	4002006c 	.word	0x4002006c
 8002138:	40020000 	.word	0x40020000

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2204      	movs	r2, #4
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d04f      	beq.n	8002204 <HAL_DMA_IRQHandler+0xc8>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04a      	beq.n	8002204 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_DMA_IRQHandler+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d029      	beq.n	80021ea <HAL_DMA_IRQHandler+0xae>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_DMA_IRQHandler+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xaa>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <HAL_DMA_IRQHandler+0x1f8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01a      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xa4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a62      	ldr	r2, [pc, #392]	; (8002338 <HAL_DMA_IRQHandler+0x1fc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMA_IRQHandler+0x9e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_DMA_IRQHandler+0x200>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x98>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <HAL_DMA_IRQHandler+0x204>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <HAL_DMA_IRQHandler+0x92>
 80021c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021cc:	e00e      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021d2:	e00b      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021d8:	e008      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021de:	e005      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e4:	e002      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a55      	ldr	r2, [pc, #340]	; (8002344 <HAL_DMA_IRQHandler+0x208>)
 80021ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8094 	beq.w	8002322 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002202:	e08e      	b.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2202      	movs	r2, #2
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d056      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x186>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d051      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020a 	bic.w	r2, r2, #10
 800223a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_DMA_IRQHandler+0x1f0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d029      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x166>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a37      	ldr	r2, [pc, #220]	; (8002330 <HAL_DMA_IRQHandler+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_IRQHandler+0x162>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a35      	ldr	r2, [pc, #212]	; (8002334 <HAL_DMA_IRQHandler+0x1f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01a      	beq.n	8002298 <HAL_DMA_IRQHandler+0x15c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_DMA_IRQHandler+0x1fc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d012      	beq.n	8002292 <HAL_DMA_IRQHandler+0x156>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_DMA_IRQHandler+0x200>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00a      	beq.n	800228c <HAL_DMA_IRQHandler+0x150>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_DMA_IRQHandler+0x204>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_DMA_IRQHandler+0x14a>
 8002280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002284:	e00e      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	e00b      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	e008      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	e005      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229c:	e002      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 800229e:	2320      	movs	r3, #32
 80022a0:	e000      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 80022a2:	2302      	movs	r3, #2
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_DMA_IRQHandler+0x208>)
 80022a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d034      	beq.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022c0:	e02f      	b.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 020e 	bic.w	r2, r2, #14
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
    }
  }
  return;
 8002322:	bf00      	nop
 8002324:	bf00      	nop
}
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40020008 	.word	0x40020008
 8002330:	4002001c 	.word	0x4002001c
 8002334:	40020030 	.word	0x40020030
 8002338:	40020044 	.word	0x40020044
 800233c:	40020058 	.word	0x40020058
 8002340:	4002006c 	.word	0x4002006c
 8002344:	40020000 	.word	0x40020000

08002348 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d108      	bne.n	8002388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002386:	e007      	b.n	8002398 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e169      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b8:	2201      	movs	r2, #1
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8158 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a9a      	ldr	r2, [pc, #616]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d05e      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023e0:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d875      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023e6:	4a98      	ldr	r2, [pc, #608]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d058      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023ec:	4a96      	ldr	r2, [pc, #600]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d86f      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023f2:	4a96      	ldr	r2, [pc, #600]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d052      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023f8:	4a94      	ldr	r2, [pc, #592]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d869      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023fe:	4a94      	ldr	r2, [pc, #592]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04c      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002404:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d863      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800240a:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d046      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002410:	4a90      	ldr	r2, [pc, #576]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d85d      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d82a      	bhi.n	8002470 <HAL_GPIO_Init+0xcc>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d859      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_GPIO_Init+0x80>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	0800249f 	.word	0x0800249f
 8002428:	08002479 	.word	0x08002479
 800242c:	0800248b 	.word	0x0800248b
 8002430:	080024cd 	.word	0x080024cd
 8002434:	080024d3 	.word	0x080024d3
 8002438:	080024d3 	.word	0x080024d3
 800243c:	080024d3 	.word	0x080024d3
 8002440:	080024d3 	.word	0x080024d3
 8002444:	080024d3 	.word	0x080024d3
 8002448:	080024d3 	.word	0x080024d3
 800244c:	080024d3 	.word	0x080024d3
 8002450:	080024d3 	.word	0x080024d3
 8002454:	080024d3 	.word	0x080024d3
 8002458:	080024d3 	.word	0x080024d3
 800245c:	080024d3 	.word	0x080024d3
 8002460:	080024d3 	.word	0x080024d3
 8002464:	080024d3 	.word	0x080024d3
 8002468:	08002481 	.word	0x08002481
 800246c:	08002495 	.word	0x08002495
 8002470:	4a79      	ldr	r2, [pc, #484]	; (8002658 <HAL_GPIO_Init+0x2b4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002476:	e02c      	b.n	80024d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e029      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e024      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	3308      	adds	r3, #8
 8002490:	623b      	str	r3, [r7, #32]
          break;
 8002492:	e01f      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	330c      	adds	r3, #12
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e01a      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a6:	2304      	movs	r3, #4
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e013      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	611a      	str	r2, [r3, #16]
          break;
 80024be:	e009      	b.n	80024d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c0:	2308      	movs	r3, #8
 80024c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	615a      	str	r2, [r3, #20]
          break;
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          break;
 80024d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d801      	bhi.n	80024de <HAL_GPIO_Init+0x13a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_Init+0x13e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2bff      	cmp	r3, #255	; 0xff
 80024e8:	d802      	bhi.n	80024f0 <HAL_GPIO_Init+0x14c>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x152>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3b08      	subs	r3, #8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	210f      	movs	r1, #15
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	431a      	orrs	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80b1 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x2b8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_GPIO_Init+0x2c0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_GPIO_Init+0x1ec>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_GPIO_Init+0x2c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_GPIO_Init+0x1e8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3e      	ldr	r2, [pc, #248]	; (800266c <HAL_GPIO_Init+0x2c8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x1e4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <HAL_GPIO_Init+0x2cc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_GPIO_Init+0x1e0>
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002584:	2304      	movs	r3, #4
 8002586:	e004      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002588:	2302      	movs	r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002590:	2300      	movs	r3, #0
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	f002 0203 	and.w	r2, r2, #3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	4093      	lsls	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a2:	492f      	ldr	r1, [pc, #188]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	492c      	ldr	r1, [pc, #176]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4928      	ldr	r1, [pc, #160]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	491e      	ldr	r1, [pc, #120]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d021      	beq.n	8002678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e021      	b.n	8002686 <HAL_GPIO_Init+0x2e2>
 8002642:	bf00      	nop
 8002644:	10320000 	.word	0x10320000
 8002648:	10310000 	.word	0x10310000
 800264c:	10220000 	.word	0x10220000
 8002650:	10210000 	.word	0x10210000
 8002654:	10120000 	.word	0x10120000
 8002658:	10110000 	.word	0x10110000
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	40010800 	.word	0x40010800
 8002668:	40010c00 	.word	0x40010c00
 800266c:	40011000 	.word	0x40011000
 8002670:	40011400 	.word	0x40011400
 8002674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_GPIO_Init+0x304>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	43db      	mvns	r3, r3
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <HAL_GPIO_Init+0x304>)
 8002682:	4013      	ands	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	3301      	adds	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f ae8e 	bne.w	80023b8 <HAL_GPIO_Init+0x14>
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	372c      	adds	r7, #44	; 0x2c
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e26c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8087 	beq.w	800280a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fc:	4b92      	ldr	r3, [pc, #584]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b04      	cmp	r3, #4
 8002706:	d00c      	beq.n	8002722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d112      	bne.n	800273a <HAL_RCC_OscConfig+0x5e>
 8002714:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d10b      	bne.n	800273a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d06c      	beq.n	8002808 <HAL_RCC_OscConfig+0x12c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d168      	bne.n	8002808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e246      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x76>
 8002744:	4b80      	ldr	r3, [pc, #512]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a7f      	ldr	r2, [pc, #508]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e02e      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7a      	ldr	r2, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b78      	ldr	r3, [pc, #480]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a77      	ldr	r2, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0xbc>
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a71      	ldr	r2, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a67      	ldr	r2, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd6e 	bl	8001298 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fd6a 	bl	8001298 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1fa      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe4>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fd5a 	bl	8001298 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fd56 	bl	8001298 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1e6      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x10c>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002816:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x18c>
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1ba      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4939      	ldr	r1, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x270>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fd0f 	bl	8001298 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fd0b 	bl	8001298 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e19b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4927      	ldr	r1, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x270>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fcee 	bl	8001298 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe fcea 	bl	8001298 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e17a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03a      	beq.n	8002960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d019      	beq.n	8002926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCC_OscConfig+0x274>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe fcce 	bl	8001298 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fcca 	bl	8001298 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e15a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 fad8 	bl	8002ed4 <RCC_Delay>
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_OscConfig+0x274>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe fcb4 	bl	8001298 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002932:	e00f      	b.n	8002954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fcb0 	bl	8001298 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d908      	bls.n	8002954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e140      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	42420000 	.word	0x42420000
 8002950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	4b9e      	ldr	r3, [pc, #632]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e9      	bne.n	8002934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80a6 	beq.w	8002aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002972:	4b97      	ldr	r3, [pc, #604]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a93      	ldr	r2, [pc, #588]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]
 800298a:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b8e      	ldr	r3, [pc, #568]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a8a      	ldr	r2, [pc, #552]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fc71 	bl	8001298 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fc6d 	bl	8001298 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0fd      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x312>
 80029e0:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a7a      	ldr	r2, [pc, #488]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e02d      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x334>
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6213      	str	r3, [r2, #32]
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x356>
 8002a18:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4a6c      	ldr	r2, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a69      	ldr	r2, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a63      	ldr	r2, [pc, #396]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fc21 	bl	8001298 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fc1d 	bl	8001298 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0ab      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCC_OscConfig+0x37e>
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fc0b 	bl	8001298 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fc07 	bl	8001298 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e095      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ee      	bne.n	8002a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a47      	ldr	r2, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8081 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac4:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d061      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d146      	bne.n	8002b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_OscConfig+0x4fc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fbdb 	bl	8001298 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fbd7 	bl	8001298 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e067      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af8:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	492d      	ldr	r1, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a19      	ldr	r1, [r3, #32]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	430b      	orrs	r3, r1
 8002b32:	4927      	ldr	r1, [pc, #156]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x4fc>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fbab 	bl	8001298 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fba7 	bl	8001298 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e037      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x46a>
 8002b64:	e02f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_RCC_OscConfig+0x4fc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fb94 	bl	8001298 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fb90 	bl	8001298 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e020      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x498>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42420060 	.word	0x42420060

08002bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0d0      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d910      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4965      	ldr	r1, [pc, #404]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b8      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a52      	ldr	r2, [pc, #328]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	494d      	ldr	r1, [pc, #308]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d040      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d115      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e073      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4936      	ldr	r1, [pc, #216]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fae4 	bl	8001298 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fae0 	bl	8001298 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e053      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d210      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0207 	bic.w	r2, r3, #7
 8002d12:	4922      	ldr	r1, [pc, #136]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e032      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4916      	ldr	r1, [pc, #88]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	490e      	ldr	r1, [pc, #56]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d6a:	f000 f821 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	490a      	ldr	r1, [pc, #40]	; (8002da4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	5ccb      	ldrb	r3, [r1, r3]
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1cc>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1d0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fa42 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	0800446c 	.word	0x0800446c
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20000010 	.word	0x20000010

08002db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	b490      	push	{r4, r7}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002db8:	1d3c      	adds	r4, r7, #4
 8002dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dc0:	f240 2301 	movw	r3, #513	; 0x201
 8002dc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x46>
 8002dee:	e02d      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df2:	623b      	str	r3, [r7, #32]
      break;
 8002df4:	e02d      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	0c9b      	lsrs	r3, r3, #18
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e02:	4413      	add	r3, r2
 8002e04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c5b      	lsrs	r3, r3, #17
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e22:	4413      	add	r3, r2
 8002e24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e2e:	fb02 f203 	mul.w	r2, r2, r3
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e004      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	623b      	str	r3, [r7, #32]
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4e:	623b      	str	r3, [r7, #32]
      break;
 8002e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e52:	6a3b      	ldr	r3, [r7, #32]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3728      	adds	r7, #40	; 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc90      	pop	{r4, r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	0800445c 	.word	0x0800445c
 8002e64:	40021000 	.word	0x40021000
 8002e68:	007a1200 	.word	0x007a1200
 8002e6c:	003d0900 	.word	0x003d0900

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e88:	f7ff fff2 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	0800447c 	.word	0x0800447c

08002eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eb0:	f7ff ffde 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	0adb      	lsrs	r3, r3, #11
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	0800447c 	.word	0x0800447c

08002ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <RCC_Delay+0x34>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <RCC_Delay+0x38>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0a5b      	lsrs	r3, r3, #9
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ef0:	bf00      	nop
  }
  while (Delay --);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	60fa      	str	r2, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <RCC_Delay+0x1c>
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	2000000c 	.word	0x2000000c
 8002f0c:	10624dd3 	.word	0x10624dd3

08002f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e041      	b.n	8002fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd ff84 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f000 fa68 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_TIM_Base_Start+0x88>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x48>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x48>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_TIM_Base_Start+0x8c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x48>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <HAL_TIM_Base_Start+0x90>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800

08003044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0202 	mvn.w	r2, #2
 8003070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9b1 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9a4 	bl	80033dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f9b3 	bl	8003400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0204 	mvn.w	r2, #4
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f987 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f97a 	bl	80033dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f989 	bl	8003400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0208 	mvn.w	r2, #8
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2204      	movs	r2, #4
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f95d 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f950 	bl	80033dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f95f 	bl	8003400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b10      	cmp	r3, #16
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0210 	mvn.w	r2, #16
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2208      	movs	r2, #8
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f933 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f926 	bl	80033dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f935 	bl	8003400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd f962 	bl	800048c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa77 	bl	80036e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8f9 	bl	8003412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b20      	cmp	r3, #32
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0220 	mvn.w	r2, #32
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa42 	bl	80036d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIM_ConfigClockSource+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e0b3      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x180>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800328a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003292:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a4:	d03e      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0xd0>
 80032a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032aa:	f200 8087 	bhi.w	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b2:	f000 8085 	beq.w	80033c0 <HAL_TIM_ConfigClockSource+0x16c>
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ba:	d87f      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032bc:	2b70      	cmp	r3, #112	; 0x70
 80032be:	d01a      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0xa2>
 80032c0:	2b70      	cmp	r3, #112	; 0x70
 80032c2:	d87b      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032c4:	2b60      	cmp	r3, #96	; 0x60
 80032c6:	d050      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x116>
 80032c8:	2b60      	cmp	r3, #96	; 0x60
 80032ca:	d877      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032cc:	2b50      	cmp	r3, #80	; 0x50
 80032ce:	d03c      	beq.n	800334a <HAL_TIM_ConfigClockSource+0xf6>
 80032d0:	2b50      	cmp	r3, #80	; 0x50
 80032d2:	d873      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d058      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x136>
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d86f      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032dc:	2b30      	cmp	r3, #48	; 0x30
 80032de:	d064      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x156>
 80032e0:	2b30      	cmp	r3, #48	; 0x30
 80032e2:	d86b      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d060      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x156>
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d867      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x156>
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d05a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032f4:	e062      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f000 f966 	bl	80035d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003318:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	609a      	str	r2, [r3, #8]
      break;
 8003322:	e04e      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f000 f94f 	bl	80035d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003346:	609a      	str	r2, [r3, #8]
      break;
 8003348:	e03b      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	461a      	mov	r2, r3
 8003358:	f000 f8c6 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2150      	movs	r1, #80	; 0x50
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f91d 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003368:	e02b      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	461a      	mov	r2, r3
 8003378:	f000 f8e4 	bl	8003544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2160      	movs	r1, #96	; 0x60
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f90d 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8003388:	e01b      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	461a      	mov	r2, r3
 8003398:	f000 f8a6 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2140      	movs	r1, #64	; 0x40
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f8fd 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 80033a8:	e00b      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f000 f8f4 	bl	80035a2 <TIM_ITRx_SetConfig>
        break;
 80033ba:	e002      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <TIM_Base_SetConfig+0xb8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00b      	beq.n	8003454 <TIM_Base_SetConfig+0x30>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d007      	beq.n	8003454 <TIM_Base_SetConfig+0x30>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_Base_SetConfig+0xbc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0x30>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0xc0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d108      	bne.n	8003466 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <TIM_Base_SetConfig+0xb8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00b      	beq.n	8003486 <TIM_Base_SetConfig+0x62>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003474:	d007      	beq.n	8003486 <TIM_Base_SetConfig+0x62>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <TIM_Base_SetConfig+0xbc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d003      	beq.n	8003486 <TIM_Base_SetConfig+0x62>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <TIM_Base_SetConfig+0xc0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <TIM_Base_SetConfig+0xb8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d103      	bne.n	80034cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	615a      	str	r2, [r3, #20]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0210 	bic.w	r2, r3, #16
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800356e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003580:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e046      	b.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00e      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d009      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10c      	bne.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4313      	orrs	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e03f      	b.n	8003786 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fbee 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f829 	bl	8003790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800374c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800375c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037ca:	f023 030c 	bic.w	r3, r3, #12
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <UART_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d103      	bne.n	8003800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7ff fb58 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	e002      	b.n	8003806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7ff fb40 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8003804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <UART_SetConfig+0x118>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	0119      	lsls	r1, r3, #4
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <UART_SetConfig+0x118>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <UART_SetConfig+0x118>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385c:	4419      	add	r1, r3
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fbb2 f2f3 	udiv	r2, r2, r3
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <UART_SetConfig+0x118>)
 8003876:	fba3 0302 	umull	r0, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2064      	movs	r0, #100	; 0x64
 800387e:	fb00 f303 	mul.w	r3, r0, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <UART_SetConfig+0x118>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	440a      	add	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40013800 	.word	0x40013800
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e033      	b.n	8003926 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fb5e 	bl	8000f94 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fc7d 	bl	80041e0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003904:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003914:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_USART_Transmit_DMA>:
  * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d153      	bne.n	80039f2 <HAL_USART_Transmit_DMA+0xc2>
  {
    if ((pTxData == NULL) || (Size == 0))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_USART_Transmit_DMA+0x26>
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_USART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e04c      	b.n	80039f4 <HAL_USART_Transmit_DMA+0xc4>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_USART_Transmit_DMA+0x38>
 8003964:	2302      	movs	r3, #2
 8003966:	e045      	b.n	80039f4 <HAL_USART_Transmit_DMA+0xc4>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2212      	movs	r2, #18
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the USART DMA transfer complete callback */
    husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_USART_Transmit_DMA+0xcc>)
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the USART DMA Half transfer complete callback */
    husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <HAL_USART_Transmit_DMA+0xd0>)
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    husart->hdmatx->XferErrorCallback = USART_DMAError;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <HAL_USART_Transmit_DMA+0xd4>)
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    husart->hdmatx->XferAbortCallback = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	2200      	movs	r2, #0
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the USART transmit DMA channel */
    tmp = (uint32_t *)&pTxData;
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3304      	adds	r3, #4
 80039c4:	461a      	mov	r2, r3
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	f7fe fae2 	bl	8001f90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_USART_CLEAR_FLAG(husart, USART_FLAG_TC);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_USART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	08003c9f 	.word	0x08003c9f
 8003a00:	08003d09 	.word	0x08003d09
 8003a04:	08003d25 	.word	0x08003d25

08003a08 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d117      	bne.n	8003a6e <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_USART_IRQHandler+0x66>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b22      	cmp	r3, #34	; 0x22
 8003a5c:	d103      	bne.n	8003a66 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa63 	bl	8003f2a <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8003a64:	e0e9      	b.n	8003c3a <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fae5 	bl	8004036 <USART_TransmitReceive_IT>
      return;
 8003a6c:	e0e5      	b.n	8003c3a <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80bb 	beq.w	8003bec <HAL_USART_IRQHandler+0x1e4>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_USART_IRQHandler+0x84>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80b0 	beq.w	8003bec <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_USART_IRQHandler+0xa4>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_USART_IRQHandler+0xc4>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_USART_IRQHandler+0xe4>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00f      	beq.n	8003b16 <HAL_USART_IRQHandler+0x10e>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <HAL_USART_IRQHandler+0x102>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 808c 	beq.w	8003c38 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_USART_IRQHandler+0x146>
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b22      	cmp	r3, #34	; 0x22
 8003b3e:	d103      	bne.n	8003b48 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f9f2 	bl	8003f2a <USART_Receive_IT>
 8003b46:	e002      	b.n	8003b4e <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fa74 	bl	8004036 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_USART_IRQHandler+0x16e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d031      	beq.n	8003bda <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f937 	bl	8003dea <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d023      	beq.n	8003bd2 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b98:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d013      	beq.n	8003bca <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_USART_IRQHandler+0x238>)
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fa4e 	bl	8002050 <HAL_DMA_Abort_IT>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e00e      	b.n	8003be8 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f85e 	bl	8003c8c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e00a      	b.n	8003be8 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f85a 	bl	8003c8c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	e006      	b.n	8003be8 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f856 	bl	8003c8c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003be6:	e027      	b.n	8003c38 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	bf00      	nop
    return;
 8003bea:	e025      	b.n	8003c38 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <HAL_USART_IRQHandler+0x214>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b12      	cmp	r3, #18
 8003c0a:	d103      	bne.n	8003c14 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f91d 	bl	8003e4c <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8003c12:	e012      	b.n	8003c3a <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fa0e 	bl	8004036 <USART_TransmitReceive_IT>
    return;
 8003c1a:	e00e      	b.n	8003c3a <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_USART_IRQHandler+0x232>
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f95a 	bl	8003eea <USART_EndTransmit_IT>
    return;
 8003c36:	e000      	b.n	8003c3a <HAL_USART_IRQHandler+0x232>
    return;
 8003c38:	bf00      	nop
  }
}
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	08003e25 	.word	0x08003e25

08003c44 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_USART_TxHalfCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <USART_DMATransmitCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <USART_DMATransmitCplt+0x50>
  {
    husart->TxXferCount = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b12      	cmp	r3, #18
 8003cca:	d119      	bne.n	8003d00 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cda:	615a      	str	r2, [r3, #20]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cea:	60da      	str	r2, [r3, #12]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8003cec:	e008      	b.n	8003d00 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b12      	cmp	r3, #18
 8003cf8:	d102      	bne.n	8003d00 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ffa2 	bl	8003c44 <HAL_USART_TxCpltCallback>
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <USART_DMATxHalfCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff ff9d 	bl	8003c56 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <USART_DMAError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	60bb      	str	r3, [r7, #8]
  husart->RxXferCount = 0x00U;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Stop USART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b12      	cmp	r3, #18
 8003d62:	d105      	bne.n	8003d70 <USART_DMAError+0x4c>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <USART_DMAError+0x4c>
  {
    USART_EndTxTransfer(husart);
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f000 f828 	bl	8003dc0 <USART_EndTxTransfer>
  }

  /* Stop USART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf14      	ite	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	2300      	moveq	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b22      	cmp	r3, #34	; 0x22
 8003d90:	d105      	bne.n	8003d9e <USART_DMAError+0x7a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <USART_DMAError+0x7a>
  {
    USART_EndRxTransfer(husart);
 8003d98:	68b8      	ldr	r0, [r7, #8]
 8003d9a:	f000 f826 	bl	8003dea <USART_EndRxTransfer>
  }

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0210 	orr.w	r2, r3, #16
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f7ff ff6a 	bl	8003c8c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <USART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003dd6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e00:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ff24 	bl	8003c8c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b12      	cmp	r3, #18
 8003e5e:	d13e      	bne.n	8003ede <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d114      	bne.n	8003e94 <USART_Transmit_IT+0x48>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d110      	bne.n	8003e94 <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e86:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
 8003e92:	e008      	b.n	8003ea6 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c59      	adds	r1, r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	8551      	strh	r1, [r2, #42]	; 0x2a
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10f      	bne.n	8003eda <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec8:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f00:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe92 	bl	8003c44 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b22      	cmp	r3, #34	; 0x22
 8003f3c:	d176      	bne.n	800402c <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d117      	bne.n	8003f78 <USART_Receive_IT+0x4e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d113      	bne.n	8003f78 <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f76:	e026      	b.n	8003fc6 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d007      	beq.n	8003f9c <USART_Receive_IT+0x72>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <USART_Receive_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e008      	b.n	8003fbc <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d120      	bne.n	8004020 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0220 	bic.w	r2, r2, #32
 8003fec:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ffc:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe26 	bl	8003c68 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e006      	b.n	800402e <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	22ff      	movs	r2, #255	; 0xff
 8004026:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b32      	cmp	r3, #50	; 0x32
 8004048:	f040 80c4 	bne.w	80041d4 <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d03f      	beq.n	80040d6 <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d138      	bne.n	80040d6 <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d116      	bne.n	800409c <USART_TransmitReceive_IT+0x66>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d112      	bne.n	800409c <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800408e:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
 800409a:	e008      	b.n	80040ae <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c59      	adds	r1, r3, #1
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6251      	str	r1, [r2, #36]	; 0x24
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d4:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d051      	beq.n	8004184 <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d14a      	bne.n	8004184 <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d117      	bne.n	8004128 <USART_TransmitReceive_IT+0xf2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d113      	bne.n	8004128 <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004116:	b29a      	uxth	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c
 8004126:	e026      	b.n	8004176 <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413a:	d007      	beq.n	800414c <USART_TransmitReceive_IT+0x116>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <USART_TransmitReceive_IT+0x124>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e008      	b.n	800416c <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d120      	bne.n	80041d0 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0220 	bic.w	r2, r2, #32
 800419c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ac:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fd57 	bl	8003c7a <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e002      	b.n	80041d6 <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 020c 	bic.w	r2, r2, #12
 80041fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800420a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004214:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800422a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004242:	f023 030c 	bic.w	r3, r3, #12
 8004246:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004274:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a53      	ldr	r2, [pc, #332]	; (80043c8 <USART_SetConfig+0x1e8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d14f      	bne.n	8004320 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004280:	f7fe fe14 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8004284:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	4a4b      	ldr	r2, [pc, #300]	; (80043cc <USART_SetConfig+0x1ec>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	0119      	lsls	r1, r3, #4
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042bc:	4b43      	ldr	r3, [pc, #268]	; (80043cc <USART_SetConfig+0x1ec>)
 80042be:	fba3 0302 	umull	r0, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2064      	movs	r0, #100	; 0x64
 80042c6:	fb00 f303 	mul.w	r3, r0, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	; 0x32
 80042d0:	4a3e      	ldr	r2, [pc, #248]	; (80043cc <USART_SetConfig+0x1ec>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80042de:	4419      	add	r1, r3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f6:	4b35      	ldr	r3, [pc, #212]	; (80043cc <USART_SetConfig+0x1ec>)
 80042f8:	fba3 0302 	umull	r0, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2064      	movs	r0, #100	; 0x64
 8004300:	fb00 f303 	mul.w	r3, r0, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a30      	ldr	r2, [pc, #192]	; (80043cc <USART_SetConfig+0x1ec>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	440a      	add	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 800431e:	e04e      	b.n	80043be <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe fdb0 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8004324:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	4a23      	ldr	r2, [pc, #140]	; (80043cc <USART_SetConfig+0x1ec>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	0119      	lsls	r1, r3, #4
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f2f3 	udiv	r2, r2, r3
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <USART_SetConfig+0x1ec>)
 800435e:	fba3 0302 	umull	r0, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2064      	movs	r0, #100	; 0x64
 8004366:	fb00 f303 	mul.w	r3, r0, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3332      	adds	r3, #50	; 0x32
 8004370:	4a16      	ldr	r2, [pc, #88]	; (80043cc <USART_SetConfig+0x1ec>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800437e:	4419      	add	r1, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009a      	lsls	r2, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	fbb2 f2f3 	udiv	r2, r2, r3
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <USART_SetConfig+0x1ec>)
 8004398:	fba3 0302 	umull	r0, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2064      	movs	r0, #100	; 0x64
 80043a0:	fb00 f303 	mul.w	r3, r0, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <USART_SetConfig+0x1ec>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	440a      	add	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40013800 	.word	0x40013800
 80043cc:	51eb851f 	.word	0x51eb851f

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	2600      	movs	r6, #0
 80043d4:	4d0c      	ldr	r5, [pc, #48]	; (8004408 <__libc_init_array+0x38>)
 80043d6:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	f000 f830 	bl	8004444 <_init>
 80043e4:	2600      	movs	r6, #0
 80043e6:	4d0a      	ldr	r5, [pc, #40]	; (8004410 <__libc_init_array+0x40>)
 80043e8:	4c0a      	ldr	r4, [pc, #40]	; (8004414 <__libc_init_array+0x44>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08004484 	.word	0x08004484
 800440c:	08004484 	.word	0x08004484
 8004410:	08004484 	.word	0x08004484
 8004414:	08004488 	.word	0x08004488

08004418 <memcpy>:
 8004418:	440a      	add	r2, r1
 800441a:	4291      	cmp	r1, r2
 800441c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004420:	d100      	bne.n	8004424 <memcpy+0xc>
 8004422:	4770      	bx	lr
 8004424:	b510      	push	{r4, lr}
 8004426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800442a:	4291      	cmp	r1, r2
 800442c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004430:	d1f9      	bne.n	8004426 <memcpy+0xe>
 8004432:	bd10      	pop	{r4, pc}

08004434 <memset>:
 8004434:	4603      	mov	r3, r0
 8004436:	4402      	add	r2, r0
 8004438:	4293      	cmp	r3, r2
 800443a:	d100      	bne.n	800443e <memset+0xa>
 800443c:	4770      	bx	lr
 800443e:	f803 1b01 	strb.w	r1, [r3], #1
 8004442:	e7f9      	b.n	8004438 <memset+0x4>

08004444 <_init>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	bf00      	nop
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr

08004450 <_fini>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr
