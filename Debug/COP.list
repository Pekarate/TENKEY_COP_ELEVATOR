
COP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea0  08007ea0  000201b0  2**0
                  CONTENTS
  4 .ARM          00000000  08007ea0  08007ea0  000201b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ea0  08007ea0  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08007ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  200001b0  08008058  000201b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08008058  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015439  00000000  00000000  000201d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003018  00000000  00000000  00035612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00038630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00039730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddbe  00000000  00000000  0003a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144dc  00000000  00000000  000584e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5d6  00000000  00000000  0006c9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108f98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  00108fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001b0 	.word	0x200001b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e08 	.word	0x08007e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001b4 	.word	0x200001b4
 8000148:	08007e08 	.word	0x08007e08

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
/* High priority interrupt routine																*/
/************************************************************************************************/
extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Can1RxData[8] = {0};
 8000154:	2300      	movs	r3, #0
 8000156:	62bb      	str	r3, [r7, #40]	; 0x28
 8000158:	2300      	movs	r3, #0
 800015a:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef Can1RxHeader;
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Can1RxHeader, Can1RxData) != HAL_OK)
 800015c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000160:	f107 020c 	add.w	r2, r7, #12
 8000164:	2101      	movs	r1, #1
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f005 fc6a 	bl	8005a40 <HAL_CAN_GetRxMessage>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	  {
		/* Reception Error */
		  Error_Handler();
 8000172:	f004 fee1 	bl	8004f38 <Error_Handler>
								ri++;
							rc++;								// increment message counter
						}
				}
	  }
}
 8000176:	e077      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
			if ((rc == RX_SIZE))							//software buffer data overrun
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b08      	cmp	r3, #8
 8000180:	d107      	bne.n	8000192 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
						errorregister |= ER_COMMUNICATION;		//set error bits
 8000182:	4b3c      	ldr	r3, [pc, #240]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	f043 0310 	orr.w	r3, r3, #16
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b39      	ldr	r3, [pc, #228]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800018e:	701a      	strb	r2, [r3, #0]
}
 8000190:	e06a      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
					rx[ri][0] 	= (Can1RxHeader.StdId>>3) & 0xF0;				//read function code
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4a37      	ldr	r2, [pc, #220]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800019a:	7812      	ldrb	r2, [r2, #0]
 800019c:	b2d2      	uxtb	r2, r2
 800019e:	4611      	mov	r1, r2
 80001a0:	f023 030f 	bic.w	r3, r3, #15
 80001a4:	b2d8      	uxtb	r0, r3
 80001a6:	4a35      	ldr	r2, [pc, #212]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001a8:	460b      	mov	r3, r1
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	440b      	add	r3, r1
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	4413      	add	r3, r2
 80001b2:	4602      	mov	r2, r0
 80001b4:	701a      	strb	r2, [r3, #0]
					rx[ri][1] 	= Can1RxHeader.StdId & 0x3F;   //(RXB1SIDL >> 5) + ((RXB1SIDH & 0x0F) << 3);	// node ID
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	4a2f      	ldr	r2, [pc, #188]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001c6:	b2d8      	uxtb	r0, r3
 80001c8:	4a2c      	ldr	r2, [pc, #176]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	3301      	adds	r3, #1
 80001d6:	4602      	mov	r2, r0
 80001d8:	701a      	strb	r2, [r3, #0]
					if ((rx[ri][0] != RSDO) || (rx[ri][1] == node_id))
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a26      	ldr	r2, [pc, #152]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2bc0      	cmp	r3, #192	; 0xc0
 80001f4:	d110      	bne.n	8000218 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000200:	460b      	mov	r3, r1
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	4413      	add	r3, r2
 800020a:	3301      	adds	r3, #1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d127      	bne.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
						memcpy((void *)&rx[ri][2],Can1RxData,Can1RxHeader.DLC);
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	4613      	mov	r3, r2
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	3302      	adds	r3, #2
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800022c:	4413      	add	r3, r2
 800022e:	69fa      	ldr	r2, [r7, #28]
 8000230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f007 fdd1 	bl	8007ddc <memcpy>
							if (ri == (RX_SIZE-1))				//increment RX message write pointer
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2b07      	cmp	r3, #7
 8000242:	d103      	bne.n	800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
								ri = 0;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
 800024a:	e006      	b.n	800025a <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
								ri++;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	3301      	adds	r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000258:	701a      	strb	r2, [r3, #0]
							rc++;								// increment message counter
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	3301      	adds	r3, #1
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3730      	adds	r7, #48	; 0x30
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000284 	.word	0x20000284
 8000274:	200001f9 	.word	0x200001f9
 8000278:	20000352 	.word	0x20000352
 800027c:	20000290 	.word	0x20000290
 8000280:	200005fb 	.word	0x200005fb

08000284 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t hse_heartbeat_time = 0;
uint8_t CanRxData[8] = {0};
CAN_RxHeaderTypeDef CanRxHeader;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	static uint32_t Timettt = 0;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CanRxData) != HAL_OK)
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000290:	2100      	movs	r1, #0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f005 fbd4 	bl	8005a40 <HAL_CAN_GetRxMessage>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
	/* Reception Error */
	  Error_Handler();
 800029e:	f004 fe4b 	bl	8004f38 <Error_Handler>
 80002a2:	e01a      	b.n	80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	}
	else
	{
		if(((CanRxHeader.StdId>>3) & 0xF0 )== 0)
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			hsetime = HSETIME;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002b4:	2214      	movs	r2, #20
 80002b6:	701a      	strb	r2, [r3, #0]
		}
		if (((CanRxHeader.StdId & 0x3F) - 1) < MAX_LIFT)			// Heartbeat from HSE
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d803      	bhi.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
				hsetime = HSETIME;			// reset HSE supervisor time
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002c8:	2214      	movs	r2, #20
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e002      	b.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
		{
			hsetime = HSETIME-10;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	701a      	strb	r2, [r3, #0]

		}
		hse_heartbeat = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
	}
	hse_heartbeat_time = HAL_GetTick() - Timettt;
 80002da:	f005 f8a1 	bl	8005420 <HAL_GetTick>
 80002de:	4602      	mov	r2, r0
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80002e8:	6013      	str	r3, [r2, #0]
	 Timettt = HAL_GetTick();
 80002ea:	f005 f899 	bl	8005420 <HAL_GetTick>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200001d0 	.word	0x200001d0
 8000300:	200002e0 	.word	0x200002e0
 8000304:	20000884 	.word	0x20000884
 8000308:	200001f3 	.word	0x200001f3
 800030c:	200001e8 	.word	0x200001e8
 8000310:	200001cc 	.word	0x200001cc

08000314 <CAN_transmit_Interrupt>:

uint16_t mallbox[3] = {0};
uint16_t txmallbox =0;
uint16_t txmallbox_request =0;
void CAN_transmit_Interrupt(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
	if (tc)											// more messages to send
 800031a:	4b3b      	ldr	r3, [pc, #236]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d06d      	beq.n	8000400 <CAN_transmit_Interrupt+0xec>
	{
		CAN_TxHeaderTypeDef CanTxHeader;
		uint8_t CanTxData[8] = {0};
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
		CanTxHeader.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1] ;
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4a36      	ldr	r2, [pc, #216]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000336:	460b      	mov	r3, r1
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	492f      	ldr	r1, [pc, #188]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000354:	4603      	mov	r3, r0
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4403      	add	r3, r0
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	3301      	adds	r3, #1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4413      	add	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
		CanTxHeader.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	61bb      	str	r3, [r7, #24]
		CanTxHeader.IDE   = CAN_ID_STD;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
		CanTxHeader.RTR	= CAN_RTR_DATA;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
		memcpy(CanTxData,(void *)(tx[to]+2),8);
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 80003a0:	4413      	add	r3, r2
 80003a2:	1c9a      	adds	r2, r3, #2
 80003a4:	463b      	mov	r3, r7
 80003a6:	6810      	ldr	r0, [r2, #0]
 80003a8:	6851      	ldr	r1, [r2, #4]
 80003aa:	c303      	stmia	r3!, {r0, r1}
		if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &pTxMailbox) == HAL_OK)
 80003ac:	463a      	mov	r2, r7
 80003ae:	f107 0108 	add.w	r1, r7, #8
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <CAN_transmit_Interrupt+0x100>)
 80003b4:	4818      	ldr	r0, [pc, #96]	; (8000418 <CAN_transmit_Interrupt+0x104>)
 80003b6:	f005 fa69 	bl	800588c <HAL_CAN_AddTxMessage>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <CAN_transmit_Interrupt+0xba>
		{
			txmallbox++;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003ca:	801a      	strh	r2, [r3, #0]
 80003cc:	e001      	b.n	80003d2 <CAN_transmit_Interrupt+0xbe>
		}
		else
		{
			Error_Handler();
 80003ce:	f004 fdb3 	bl	8004f38 <Error_Handler>
		}
		tc--;														//decrement TX message counter
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003de:	701a      	strb	r2, [r3, #0]
		if (to == (TX_SIZE-1))					//increment TX message read pointer
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b07      	cmp	r3, #7
 80003e8:	d103      	bne.n	80003f2 <CAN_transmit_Interrupt+0xde>
			to = 0;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
		else
			to++;
	}
}
 80003f0:	e006      	b.n	8000400 <CAN_transmit_Interrupt+0xec>
			to++;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000028c 	.word	0x2000028c
 800040c:	20000350 	.word	0x20000350
 8000410:	200002fc 	.word	0x200002fc
 8000414:	20000288 	.word	0x20000288
 8000418:	200005c0 	.word	0x200005c0
 800041c:	200001de 	.word	0x200001de

08000420 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	mallbox[0]++;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8000432:	801a      	strh	r2, [r3, #0]
	CAN_transmit_Interrupt();
 8000434:	f7ff ff6e 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200001d8 	.word	0x200001d8

08000444 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	mallbox[1]++;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	3301      	adds	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000456:	805a      	strh	r2, [r3, #2]
	CAN_transmit_Interrupt();
 8000458:	f7ff ff5c 	bl	8000314 <CAN_transmit_Interrupt>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200001d8 	.word	0x200001d8

08000468 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	mallbox[2]++;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000472:	889b      	ldrh	r3, [r3, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800047a:	809a      	strh	r2, [r3, #4]
	CAN_transmit_Interrupt();
 800047c:	f7ff ff4a 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200001d8 	.word	0x200001d8

0800048c <Init_Can>:

void Init_Can (void){
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0
	uint8_t i, j;

	rc = 0;       							  //clear all CAN variables
 8000492:	4b77      	ldr	r3, [pc, #476]	; (8000670 <Init_Can+0x1e4>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	ri = 0;
 8000498:	4b76      	ldr	r3, [pc, #472]	; (8000674 <Init_Can+0x1e8>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	ro = 0;
 800049e:	4b76      	ldr	r3, [pc, #472]	; (8000678 <Init_Can+0x1ec>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	tc = 0;
 80004a4:	4b75      	ldr	r3, [pc, #468]	; (800067c <Init_Can+0x1f0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	ti = 0;
 80004aa:	4b75      	ldr	r3, [pc, #468]	; (8000680 <Init_Can+0x1f4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	to = 0;
 80004b0:	4b74      	ldr	r3, [pc, #464]	; (8000684 <Init_Can+0x1f8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < RX_SIZE; i++)	//clear rx buffer
 80004b6:	2300      	movs	r3, #0
 80004b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004bc:	e01e      	b.n	80004fc <Init_Can+0x70>
		{
			for (j = 0; j < 10; j++)
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80004c4:	e011      	b.n	80004ea <Init_Can+0x5e>
				rx[i][j] = 0;
 80004c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80004ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80004ce:	486e      	ldr	r0, [pc, #440]	; (8000688 <Init_Can+0x1fc>)
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4403      	add	r3, r0
 80004da:	440b      	add	r3, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++)
 80004e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004e4:	3301      	adds	r3, #1
 80004e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80004ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004ee:	2b09      	cmp	r3, #9
 80004f0:	d9e9      	bls.n	80004c6 <Init_Can+0x3a>
	for (i = 0; i < RX_SIZE; i++)	//clear rx buffer
 80004f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004f6:	3301      	adds	r3, #1
 80004f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	2b07      	cmp	r3, #7
 8000502:	d9dc      	bls.n	80004be <Init_Can+0x32>
		}
	for (i = 0; i < TX_SIZE; i++)	//clear tx buffer
 8000504:	2300      	movs	r3, #0
 8000506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800050a:	e01e      	b.n	800054a <Init_Can+0xbe>
		{
			for (j = 0; j < 10; j++)
 800050c:	2300      	movs	r3, #0
 800050e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000512:	e011      	b.n	8000538 <Init_Can+0xac>
				tx[i][j] = 0;
 8000514:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000518:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800051c:	485b      	ldr	r0, [pc, #364]	; (800068c <Init_Can+0x200>)
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4403      	add	r3, r0
 8000528:	440b      	add	r3, r1
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++)
 800052e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000532:	3301      	adds	r3, #1
 8000534:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000538:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800053c:	2b09      	cmp	r3, #9
 800053e:	d9e9      	bls.n	8000514 <Init_Can+0x88>
	for (i = 0; i < TX_SIZE; i++)	//clear tx buffer
 8000540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000544:	3301      	adds	r3, #1
 8000546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800054a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800054e:	2b07      	cmp	r3, #7
 8000550:	d9dc      	bls.n	800050c <Init_Can+0x80>
		}
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh =((HEARTBEAT<<3)+HSE_ID)<<5;
 800055e:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000562:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =((HEARTBEAT<<3)+HSE_ID)<<5;
 8000568:	f24e 0320 	movw	r3, #57376	; 0xe020
 800056c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = ENABLE;
 8000576:	2301      	movs	r3, #1
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 800057a:	230e      	movs	r3, #14
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4843      	ldr	r0, [pc, #268]	; (8000690 <Init_Can+0x204>)
 8000584:	f005 f875 	bl	8005672 <HAL_CAN_ConfigFilter>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <Init_Can+0x106>
	{
	/* Filter configuration Error */
		Error_Handler();
 800058e:	f004 fcd3 	bl	8004f38 <Error_Handler>
	}
	sFilterConfig.FilterBank = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh =PDO_OUT<<8;
 8000596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 80005a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005a4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4837      	ldr	r0, [pc, #220]	; (8000690 <Init_Can+0x204>)
 80005b4:	f005 f85d 	bl	8005672 <HAL_CAN_ConfigFilter>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <Init_Can+0x136>
	{
	/* Filter configuration Error */
		Error_Handler();
 80005be:	f004 fcbb 	bl	8004f38 <Error_Handler>
	}
	sFilterConfig.FilterBank = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = ((RSDO | (node_id >> 3)) << 8) + (node_id <<5);
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <Init_Can+0x208>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	021a      	lsls	r2, r3, #8
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <Init_Can+0x208>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	015b      	lsls	r3, r3, #5
 80005dc:	4413      	add	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 80005e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005e8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4827      	ldr	r0, [pc, #156]	; (8000690 <Init_Can+0x204>)
 80005f4:	f005 f83d 	bl	8005672 <HAL_CAN_ConfigFilter>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <Init_Can+0x176>
	{
	/* Filter configuration Error */
		Error_Handler();
 80005fe:	f004 fc9b 	bl	8004f38 <Error_Handler>
	}
	sFilterConfig.FilterBank = 3;
 8000602:	2303      	movs	r3, #3
 8000604:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = NMT <<8;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 800060e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000612:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	481c      	ldr	r0, [pc, #112]	; (8000690 <Init_Can+0x204>)
 800061e:	f005 f828 	bl	8005672 <HAL_CAN_ConfigFilter>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <Init_Can+0x1a0>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000628:	f004 fc86 	bl	8004f38 <Error_Handler>
	}
	sFilterConfig.FilterBank = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = (MPDO << 8) +(EMS_ID << 5);
 8000630:	f24a 1360 	movw	r3, #41312	; 0xa160
 8000634:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 800063a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800063e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <Init_Can+0x204>)
 800064a:	f005 f812 	bl	8005672 <HAL_CAN_ConfigFilter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <Init_Can+0x1cc>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000654:	f004 fc70 	bl	8004f38 <Error_Handler>

	INTCONbits.GIEH		= 1;					// low priority interrupts enable
#else
	#warning  add filter and enbale interrupt

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING|CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000658:	2113      	movs	r1, #19
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <Init_Can+0x204>)
 800065c:	f005 fb01 	bl	8005c62 <HAL_CAN_ActivateNotification>
	{

	}
	HAL_CAN_Start(&hcan);
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <Init_Can+0x204>)
 8000662:	f005 f8cf 	bl	8005804 <HAL_CAN_Start>
#endif
}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	; 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000284 	.word	0x20000284
 8000674:	20000352 	.word	0x20000352
 8000678:	20000351 	.word	0x20000351
 800067c:	2000028c 	.word	0x2000028c
 8000680:	20000353 	.word	0x20000353
 8000684:	20000350 	.word	0x20000350
 8000688:	20000290 	.word	0x20000290
 800068c:	200002fc 	.word	0x200002fc
 8000690:	200005c0 	.word	0x200005c0
 8000694:	200005fb 	.word	0x200005fb

08000698 <read_rx>:

void read_rx (void){
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
	uint8_t 	size;
	uint8_t	sub;
	uint32_t	value;
	uint8_t 	buffer [8];

	switch (rx [ro][0])
 800069e:	4bb3      	ldr	r3, [pc, #716]	; (800096c <read_rx+0x2d4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4ab2      	ldr	r2, [pc, #712]	; (8000970 <read_rx+0x2d8>)
 80006a6:	460b      	mov	r3, r1
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	440b      	add	r3, r1
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2bf0      	cmp	r3, #240	; 0xf0
 80006b6:	f000 83c0 	beq.w	8000e3a <read_rx+0x7a2>
 80006ba:	2bf0      	cmp	r3, #240	; 0xf0
 80006bc:	f300 846d 	bgt.w	8000f9a <read_rx+0x902>
 80006c0:	2bc0      	cmp	r3, #192	; 0xc0
 80006c2:	d043      	beq.n	800074c <read_rx+0xb4>
 80006c4:	2bc0      	cmp	r3, #192	; 0xc0
 80006c6:	f300 8468 	bgt.w	8000f9a <read_rx+0x902>
 80006ca:	2ba0      	cmp	r3, #160	; 0xa0
 80006cc:	f000 83e6 	beq.w	8000e9c <read_rx+0x804>
 80006d0:	2ba0      	cmp	r3, #160	; 0xa0
 80006d2:	f300 8462 	bgt.w	8000f9a <read_rx+0x902>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8374 	beq.w	8000dc4 <read_rx+0x72c>
 80006dc:	2b80      	cmp	r3, #128	; 0x80
 80006de:	f040 845c 	bne.w	8000f9a <read_rx+0x902>
		{// message function code
			case (PDO_OUT) :						//receive PDO virtual output
			 	index = rx[ro][2];				//read function code
 80006e2:	4ba2      	ldr	r3, [pc, #648]	; (800096c <read_rx+0x2d4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4aa1      	ldr	r2, [pc, #644]	; (8000970 <read_rx+0x2d8>)
 80006ea:	460b      	mov	r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	440b      	add	r3, r1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	3302      	adds	r3, #2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	81bb      	strh	r3, [r7, #12]
				if (index)								//function code > 0
 80006fc:	89bb      	ldrh	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	f000 8446 	beq.w	8000f90 <read_rx+0x8f8>
					{
						if (nmtstate == OPERATIONAL)				// only in operational state
 8000704:	4b9b      	ldr	r3, [pc, #620]	; (8000974 <read_rx+0x2dc>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b05      	cmp	r3, #5
 800070a:	f040 8441 	bne.w	8000f90 <read_rx+0x8f8>
							{
								for (i = 0; i < MAX_IO_TYPE; i++)					// read output function
 800070e:	2300      	movs	r3, #0
 8000710:	75fb      	strb	r3, [r7, #23]
 8000712:	e013      	b.n	800073c <read_rx+0xa4>
									virt_out [i] = rx[ro][i + 2];	// write to virtual output mapping
 8000714:	4b95      	ldr	r3, [pc, #596]	; (800096c <read_rx+0x2d4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461c      	mov	r4, r3
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	1c99      	adds	r1, r3, #2
 800071e:	7dfa      	ldrb	r2, [r7, #23]
 8000720:	4893      	ldr	r0, [pc, #588]	; (8000970 <read_rx+0x2d8>)
 8000722:	4623      	mov	r3, r4
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4423      	add	r3, r4
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4403      	add	r3, r0
 800072c:	440b      	add	r3, r1
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	4b91      	ldr	r3, [pc, #580]	; (8000978 <read_rx+0x2e0>)
 8000734:	5499      	strb	r1, [r3, r2]
								for (i = 0; i < MAX_IO_TYPE; i++)					// read output function
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	3301      	adds	r3, #1
 800073a:	75fb      	strb	r3, [r7, #23]
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	2b06      	cmp	r3, #6
 8000740:	d9e8      	bls.n	8000714 <read_rx+0x7c>
								set_output (virt_out);					// set physical outputs
 8000742:	488d      	ldr	r0, [pc, #564]	; (8000978 <read_rx+0x2e0>)
 8000744:	f001 f95c 	bl	8001a00 <set_output>
							}
					}
				break;
 8000748:	f000 bc22 	b.w	8000f90 <read_rx+0x8f8>

			case (RSDO) :									// receive SDO message
				type = rx [ro][2];					// read SDO type	(������)
 800074c:	4b87      	ldr	r3, [pc, #540]	; (800096c <read_rx+0x2d4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	4a87      	ldr	r2, [pc, #540]	; (8000970 <read_rx+0x2d8>)
 8000754:	460b      	mov	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	3302      	adds	r3, #2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
				switch (type & COMMAND_SPECIFIER)			// check command specifier of SDO
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800076a:	2b80      	cmp	r3, #128	; 0x80
 800076c:	f000 831a 	beq.w	8000da4 <read_rx+0x70c>
 8000770:	2b80      	cmp	r3, #128	; 0x80
 8000772:	f300 8321 	bgt.w	8000db8 <read_rx+0x720>
 8000776:	2b60      	cmp	r3, #96	; 0x60
 8000778:	f000 823a 	beq.w	8000bf0 <read_rx+0x558>
 800077c:	2b60      	cmp	r3, #96	; 0x60
 800077e:	f300 831b 	bgt.w	8000db8 <read_rx+0x720>
 8000782:	2b40      	cmp	r3, #64	; 0x40
 8000784:	f000 8196 	beq.w	8000ab4 <read_rx+0x41c>
 8000788:	2b40      	cmp	r3, #64	; 0x40
 800078a:	f300 8315 	bgt.w	8000db8 <read_rx+0x720>
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 809d 	beq.w	80008ce <read_rx+0x236>
 8000794:	2b20      	cmp	r3, #32
 8000796:	f040 830f 	bne.w	8000db8 <read_rx+0x720>
					{
						case (INIT_WRITE_REQ):							//init write or expedited write
							index = *(uint16_t *)&rx[ro][3];			//read object index
 800079a:	4b74      	ldr	r3, [pc, #464]	; (800096c <read_rx+0x2d4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	3303      	adds	r3, #3
 80007aa:	4a71      	ldr	r2, [pc, #452]	; (8000970 <read_rx+0x2d8>)
 80007ac:	4413      	add	r3, r2
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	81bb      	strh	r3, [r7, #12]
							subindex = rx[ro][5];							//read object subindex
 80007b2:	4b6e      	ldr	r3, [pc, #440]	; (800096c <read_rx+0x2d4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4a6d      	ldr	r2, [pc, #436]	; (8000970 <read_rx+0x2d8>)
 80007ba:	460b      	mov	r3, r1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	3305      	adds	r3, #5
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	72fb      	strb	r3, [r7, #11]
							value = search_dict(index, subindex, type, &pos);
 80007ca:	7bfa      	ldrb	r2, [r7, #15]
 80007cc:	7af9      	ldrb	r1, [r7, #11]
 80007ce:	89b8      	ldrh	r0, [r7, #12]
 80007d0:	4b6a      	ldr	r3, [pc, #424]	; (800097c <read_rx+0x2e4>)
 80007d2:	f002 fb3b 	bl	8002e4c <search_dict>
 80007d6:	6138      	str	r0, [r7, #16]
							if (value)							//wrong access to object dictionary
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <read_rx+0x14e>
								abort_sdo (value);		//abort SDO transfer
 80007de:	6938      	ldr	r0, [r7, #16]
 80007e0:	f000 fcd2 	bl	8001188 <abort_sdo>
													sdo_subindex = subindex;
													sdo_timer = SDO_TIMER;		// start SDO time out timer	(�ȴ��Է����Ͷ�д����)
												}
										}
								}
							break;
 80007e4:	e2ec      	b.n	8000dc0 <read_rx+0x728>
									if(index == PORT_OUT)
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d126      	bne.n	800083e <read_rx+0x1a6>
											*((uint8_t *)dict [pos].pointer + subindex) = rx[ro][6];
 80007f0:	4b5e      	ldr	r3, [pc, #376]	; (800096c <read_rx+0x2d4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	4b61      	ldr	r3, [pc, #388]	; (800097c <read_rx+0x2e4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4a61      	ldr	r2, [pc, #388]	; (8000980 <read_rx+0x2e8>)
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	3308      	adds	r3, #8
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	441a      	add	r2, r3
 8000808:	4959      	ldr	r1, [pc, #356]	; (8000970 <read_rx+0x2d8>)
 800080a:	4603      	mov	r3, r0
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4403      	add	r3, r0
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	440b      	add	r3, r1
 8000814:	3306      	adds	r3, #6
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	7013      	strb	r3, [r2, #0]
											sdo_response (INIT_WRITE_RESP, index, subindex, *(uint32_t *)&rx[ro][6]);
 800081c:	4b53      	ldr	r3, [pc, #332]	; (800096c <read_rx+0x2d4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	3306      	adds	r3, #6
 800082c:	4a50      	ldr	r2, [pc, #320]	; (8000970 <read_rx+0x2d8>)
 800082e:	4413      	add	r3, r2
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	7afa      	ldrb	r2, [r7, #11]
 8000834:	89b9      	ldrh	r1, [r7, #12]
 8000836:	2060      	movs	r0, #96	; 0x60
 8000838:	f000 fd54 	bl	80012e4 <sdo_response>
							break;
 800083c:	e2c0      	b.n	8000dc0 <read_rx+0x728>
									  	if (type & EXPEDITED_BIT)		// expedited transfer
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d032      	beq.n	80008ae <read_rx+0x216>
											  	value = write_dict (pos, subindex, *(uint32_t *)&rx[ro][6]);
 8000848:	4b4c      	ldr	r3, [pc, #304]	; (800097c <read_rx+0x2e4>)
 800084a:	7818      	ldrb	r0, [r3, #0]
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <read_rx+0x2d4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	3306      	adds	r3, #6
 800085c:	4a44      	ldr	r2, [pc, #272]	; (8000970 <read_rx+0x2d8>)
 800085e:	4413      	add	r3, r2
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	4619      	mov	r1, r3
 8000866:	f002 fa05 	bl	8002c74 <write_dict>
 800086a:	4603      	mov	r3, r0
 800086c:	613b      	str	r3, [r7, #16]
											  	if (value)						// value out of range
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d003      	beq.n	800087c <read_rx+0x1e4>
														abort_sdo (value);	// abort SDO transfer
 8000874:	6938      	ldr	r0, [r7, #16]
 8000876:	f000 fc87 	bl	8001188 <abort_sdo>
							break;
 800087a:	e2a1      	b.n	8000dc0 <read_rx+0x728>
															sdo_response (INIT_WRITE_RESP, index, subindex, *(uint32_t *)&rx[ro][6]);
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <read_rx+0x2d4>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	3306      	adds	r3, #6
 800088c:	4a38      	ldr	r2, [pc, #224]	; (8000970 <read_rx+0x2d8>)
 800088e:	4413      	add	r3, r2
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	7afa      	ldrb	r2, [r7, #11]
 8000894:	89b9      	ldrh	r1, [r7, #12]
 8000896:	2060      	movs	r0, #96	; 0x60
 8000898:	f000 fd24 	bl	80012e4 <sdo_response>
															if(index == ARROW_MODE)
 800089c:	89bb      	ldrh	r3, [r7, #12]
 800089e:	f242 42ca 	movw	r2, #9418	; 0x24ca
 80008a2:	4293      	cmp	r3, r2
 80008a4:	f040 828c 	bne.w	8000dc0 <read_rx+0x728>
																Arrow_Status( );
 80008a8:	f003 f896 	bl	80039d8 <Arrow_Status>
							break;
 80008ac:	e288      	b.n	8000dc0 <read_rx+0x728>
													sdo_response (INIT_WRITE_RESP, index, subindex, 0);
 80008ae:	7afa      	ldrb	r2, [r7, #11]
 80008b0:	89b9      	ldrh	r1, [r7, #12]
 80008b2:	2300      	movs	r3, #0
 80008b4:	2060      	movs	r0, #96	; 0x60
 80008b6:	f000 fd15 	bl	80012e4 <sdo_response>
													sdo_index = index;				// save object index and subindex
 80008ba:	4a32      	ldr	r2, [pc, #200]	; (8000984 <read_rx+0x2ec>)
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	8013      	strh	r3, [r2, #0]
													sdo_subindex = subindex;
 80008c0:	4a31      	ldr	r2, [pc, #196]	; (8000988 <read_rx+0x2f0>)
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	7013      	strb	r3, [r2, #0]
													sdo_timer = SDO_TIMER;		// start SDO time out timer	(�ȴ��Է����Ͷ�д����)
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <read_rx+0x2f4>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	701a      	strb	r2, [r3, #0]
							break;
 80008cc:	e278      	b.n	8000dc0 <read_rx+0x728>

						case (WRITE_SEGM_REQ):							// write segment
							if (!sdo_index)										// no init write request before
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <read_rx+0x2ec>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <read_rx+0x248>
								abort_sdo (SDO_UNSUPPORTED);
 80008d8:	482d      	ldr	r0, [pc, #180]	; (8000990 <read_rx+0x2f8>)
 80008da:	f000 fc55 	bl	8001188 <abort_sdo>
 80008de:	e0df      	b.n	8000aa0 <read_rx+0x408>
							else if (type & TOGGLE_BIT)				// toggle bit must be 0 for 1. segment
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <read_rx+0x25a>
								abort_sdo (SDO_TOGGLEBIT);
 80008ea:	482a      	ldr	r0, [pc, #168]	; (8000994 <read_rx+0x2fc>)
 80008ec:	f000 fc4c 	bl	8001188 <abort_sdo>
 80008f0:	e0d6      	b.n	8000aa0 <read_rx+0x408>
							else if (!(type & LAST_SEGM_BIT))// more segments to write
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <read_rx+0x26c>
								abort_sdo (SDO_L_TO_HIGH);
 80008fc:	4826      	ldr	r0, [pc, #152]	; (8000998 <read_rx+0x300>)
 80008fe:	f000 fc43 	bl	8001188 <abort_sdo>
 8000902:	e0cd      	b.n	8000aa0 <read_rx+0x408>
							else
								{
									switch (sdo_index)
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <read_rx+0x2ec>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800090e:	f000 8083 	beq.w	8000a18 <read_rx+0x380>
 8000912:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000916:	f300 80be 	bgt.w	8000a96 <read_rx+0x3fe>
 800091a:	f246 0211 	movw	r2, #24593	; 0x6011
 800091e:	4293      	cmp	r3, r2
 8000920:	d003      	beq.n	800092a <read_rx+0x292>
 8000922:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000926:	d01e      	beq.n	8000966 <read_rx+0x2ce>
 8000928:	e0b5      	b.n	8000a96 <read_rx+0x3fe>
										{
											case (VIRTUAL_OUTPUT) :	// virtual output mapping object
												for (i = 0; i < MAX_IO_TYPE; i++)
 800092a:	2300      	movs	r3, #0
 800092c:	75fb      	strb	r3, [r7, #23]
 800092e:	e013      	b.n	8000958 <read_rx+0x2c0>
													virt_out [i] = rx[ro][3 + i];
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <read_rx+0x2d4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461c      	mov	r4, r3
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	1cd9      	adds	r1, r3, #3
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <read_rx+0x2d8>)
 800093e:	4623      	mov	r3, r4
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4423      	add	r3, r4
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4403      	add	r3, r0
 8000948:	440b      	add	r3, r1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2d9      	uxtb	r1, r3
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <read_rx+0x2e0>)
 8000950:	5499      	strb	r1, [r3, r2]
												for (i = 0; i < MAX_IO_TYPE; i++)
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	3301      	adds	r3, #1
 8000956:	75fb      	strb	r3, [r7, #23]
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2b06      	cmp	r3, #6
 800095c:	d9e8      	bls.n	8000930 <read_rx+0x298>
												set_output (virt_out);
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <read_rx+0x2e0>)
 8000960:	f001 f84e 	bl	8001a00 <set_output>
												break;
 8000964:	e097      	b.n	8000a96 <read_rx+0x3fe>

											case (INPUT_GROUP):				// input group
												for (i = 0; i < 5; i++)	// dont write input state (uint8_t 5)
 8000966:	2300      	movs	r3, #0
 8000968:	75fb      	strb	r3, [r7, #23]
 800096a:	e051      	b.n	8000a10 <read_rx+0x378>
 800096c:	20000351 	.word	0x20000351
 8000970:	20000290 	.word	0x20000290
 8000974:	20000890 	.word	0x20000890
 8000978:	200005f4 	.word	0x200005f4
 800097c:	200001fc 	.word	0x200001fc
 8000980:	20000000 	.word	0x20000000
 8000984:	200001ee 	.word	0x200001ee
 8000988:	200001f0 	.word	0x200001f0
 800098c:	200001f1 	.word	0x200001f1
 8000990:	06010000 	.word	0x06010000
 8000994:	05030000 	.word	0x05030000
 8000998:	06070012 	.word	0x06070012
													{
														if (inpar [sdo_subindex - 1][i] != rx[ro][3 + i])
 800099c:	4b9d      	ldr	r3, [pc, #628]	; (8000c14 <read_rx+0x57c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	7df9      	ldrb	r1, [r7, #23]
 80009a6:	489c      	ldr	r0, [pc, #624]	; (8000c18 <read_rx+0x580>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	4403      	add	r3, r0
 80009b0:	440b      	add	r3, r1
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b99      	ldr	r3, [pc, #612]	; (8000c1c <read_rx+0x584>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461c      	mov	r4, r3
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	1cd9      	adds	r1, r3, #3
 80009be:	4898      	ldr	r0, [pc, #608]	; (8000c20 <read_rx+0x588>)
 80009c0:	4623      	mov	r3, r4
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4423      	add	r3, r4
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4403      	add	r3, r0
 80009ca:	440b      	add	r3, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d01a      	beq.n	8000a0a <read_rx+0x372>
															inpar [sdo_subindex - 1][i] = rx[ro][3 + i];
 80009d4:	4b91      	ldr	r3, [pc, #580]	; (8000c1c <read_rx+0x584>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461d      	mov	r5, r3
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	1cd8      	adds	r0, r3, #3
 80009de:	4b8d      	ldr	r3, [pc, #564]	; (8000c14 <read_rx+0x57c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	7df9      	ldrb	r1, [r7, #23]
 80009e8:	4c8d      	ldr	r4, [pc, #564]	; (8000c20 <read_rx+0x588>)
 80009ea:	462b      	mov	r3, r5
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	442b      	add	r3, r5
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4423      	add	r3, r4
 80009f4:	4403      	add	r3, r0
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2dc      	uxtb	r4, r3
 80009fa:	4887      	ldr	r0, [pc, #540]	; (8000c18 <read_rx+0x580>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	4403      	add	r3, r0
 8000a04:	440b      	add	r3, r1
 8000a06:	4622      	mov	r2, r4
 8000a08:	701a      	strb	r2, [r3, #0]
												for (i = 0; i < 5; i++)	// dont write input state (uint8_t 5)
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d9c2      	bls.n	800099c <read_rx+0x304>
													}
												break;
 8000a16:	e03e      	b.n	8000a96 <read_rx+0x3fe>

											case (OUTPUT_GROUP):			// output group
												for (i = 0; i < 5; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	e035      	b.n	8000a8a <read_rx+0x3f2>
													{
														if (outpar [sdo_subindex - 1][i] != rx[ro][3 + i])
 8000a1e:	4b7d      	ldr	r3, [pc, #500]	; (8000c14 <read_rx+0x57c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	497e      	ldr	r1, [pc, #504]	; (8000c24 <read_rx+0x58c>)
 8000a2a:	00d2      	lsls	r2, r2, #3
 8000a2c:	440a      	add	r2, r1
 8000a2e:	4413      	add	r3, r2
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <read_rx+0x584>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461c      	mov	r4, r3
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	1cd9      	adds	r1, r3, #3
 8000a3c:	4878      	ldr	r0, [pc, #480]	; (8000c20 <read_rx+0x588>)
 8000a3e:	4623      	mov	r3, r4
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4423      	add	r3, r4
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4403      	add	r3, r0
 8000a48:	440b      	add	r3, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d018      	beq.n	8000a84 <read_rx+0x3ec>
															outpar [sdo_subindex - 1][i] = rx[ro][3 + i];
 8000a52:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <read_rx+0x584>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461d      	mov	r5, r3
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	1cd8      	adds	r0, r3, #3
 8000a5c:	4b6d      	ldr	r3, [pc, #436]	; (8000c14 <read_rx+0x57c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	1e59      	subs	r1, r3, #1
 8000a64:	7dfa      	ldrb	r2, [r7, #23]
 8000a66:	4c6e      	ldr	r4, [pc, #440]	; (8000c20 <read_rx+0x588>)
 8000a68:	462b      	mov	r3, r5
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	442b      	add	r3, r5
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4423      	add	r3, r4
 8000a72:	4403      	add	r3, r0
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2dc      	uxtb	r4, r3
 8000a78:	486a      	ldr	r0, [pc, #424]	; (8000c24 <read_rx+0x58c>)
 8000a7a:	00cb      	lsls	r3, r1, #3
 8000a7c:	4403      	add	r3, r0
 8000a7e:	4413      	add	r3, r2
 8000a80:	4622      	mov	r2, r4
 8000a82:	701a      	strb	r2, [r3, #0]
												for (i = 0; i < 5; i++)
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	3301      	adds	r3, #1
 8000a88:	75fb      	strb	r3, [r7, #23]
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d9c6      	bls.n	8000a1e <read_rx+0x386>
													}
												set_io_config ();		// check if output is push output
 8000a90:	f001 ff9c 	bl	80029cc <set_io_config>
												break;
 8000a94:	bf00      	nop
										}
									sdo_segment (WRITE_SEGM_RESP, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2020      	movs	r0, #32
 8000a9c:	f000 fcca 	bl	8001434 <sdo_segment>
								}
							sdo_index    = 0;					// reset marker from init request
 8000aa0:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <read_rx+0x590>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000aa6:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <read_rx+0x57c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000aac:	4b5f      	ldr	r3, [pc, #380]	; (8000c2c <read_rx+0x594>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
							break;
 8000ab2:	e186      	b.n	8000dc2 <read_rx+0x72a>

						case (INIT_READ_REQ):						// init read or expedited read
							index = *(uint16_t *)&rx[ro][3];	// read object index
 8000ab4:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <read_rx+0x584>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	3303      	adds	r3, #3
 8000ac4:	4a56      	ldr	r2, [pc, #344]	; (8000c20 <read_rx+0x588>)
 8000ac6:	4413      	add	r3, r2
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	81bb      	strh	r3, [r7, #12]
							subindex = rx[ro][5];					// read object subindex
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <read_rx+0x584>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4a53      	ldr	r2, [pc, #332]	; (8000c20 <read_rx+0x588>)
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	440b      	add	r3, r1
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	3305      	adds	r3, #5
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	72fb      	strb	r3, [r7, #11]
							value = search_dict (index, subindex, type, &pos);
 8000ae4:	7bfa      	ldrb	r2, [r7, #15]
 8000ae6:	7af9      	ldrb	r1, [r7, #11]
 8000ae8:	89b8      	ldrh	r0, [r7, #12]
 8000aea:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <read_rx+0x598>)
 8000aec:	f002 f9ae 	bl	8002e4c <search_dict>
 8000af0:	6138      	str	r0, [r7, #16]
							if (value)										// wrong access to object dictionary
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <read_rx+0x468>
								abort_sdo (value);					// abort SDO transfer
 8000af8:	6938      	ldr	r0, [r7, #16]
 8000afa:	f000 fb45 	bl	8001188 <abort_sdo>
										  	 		value = read_dict (pos, subindex);
													sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
												}
										}
								}
							break;
 8000afe:	e160      	b.n	8000dc2 <read_rx+0x72a>
									if(index == PORT_IN)
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	f642 72fd 	movw	r2, #12285	; 0x2ffd
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d111      	bne.n	8000b2e <read_rx+0x496>
											value = (uint32_t)(*((uint8_t *)dict [pos].pointer + subindex));
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <read_rx+0x598>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4a49      	ldr	r2, [pc, #292]	; (8000c34 <read_rx+0x59c>)
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	4413      	add	r3, r2
 8000b14:	3308      	adds	r3, #8
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]
											sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000b20:	7afa      	ldrb	r2, [r7, #11]
 8000b22:	89b9      	ldrh	r1, [r7, #12]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2042      	movs	r0, #66	; 0x42
 8000b28:	f000 fbdc 	bl	80012e4 <sdo_response>
							break;
 8000b2c:	e149      	b.n	8000dc2 <read_rx+0x72a>
									else if(index == PORT_OUT)
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d111      	bne.n	8000b5c <read_rx+0x4c4>
											value = (uint32_t)(*((uint8_t *)dict [pos].pointer + subindex));
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <read_rx+0x598>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <read_rx+0x59c>)
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	4413      	add	r3, r2
 8000b42:	3308      	adds	r3, #8
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	613b      	str	r3, [r7, #16]
											sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000b4e:	7afa      	ldrb	r2, [r7, #11]
 8000b50:	89b9      	ldrh	r1, [r7, #12]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	2042      	movs	r0, #66	; 0x42
 8000b56:	f000 fbc5 	bl	80012e4 <sdo_response>
							break;
 8000b5a:	e132      	b.n	8000dc2 <read_rx+0x72a>
											size	= dict [pos].size;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <read_rx+0x598>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <read_rx+0x59c>)
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	4413      	add	r3, r2
 8000b66:	3304      	adds	r3, #4
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	72bb      	strb	r3, [r7, #10]
											sub  	= dict [pos].sub;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <read_rx+0x598>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <read_rx+0x59c>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3302      	adds	r3, #2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	727b      	strb	r3, [r7, #9]
											if (size > 4)							// normal transfer
 8000b7c:	7abb      	ldrb	r3, [r7, #10]
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d91c      	bls.n	8000bbc <read_rx+0x524>
													if ((!subindex) && sub)		// number of entries
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <read_rx+0x504>
 8000b88:	7a7b      	ldrb	r3, [r7, #9]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <read_rx+0x504>
														sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, sub);
 8000b8e:	7a7b      	ldrb	r3, [r7, #9]
 8000b90:	7afa      	ldrb	r2, [r7, #11]
 8000b92:	89b9      	ldrh	r1, [r7, #12]
 8000b94:	2042      	movs	r0, #66	; 0x42
 8000b96:	f000 fba5 	bl	80012e4 <sdo_response>
							break;
 8000b9a:	e112      	b.n	8000dc2 <read_rx+0x72a>
															sdo_response (INIT_READ_RESP, index, subindex, size);
 8000b9c:	7abb      	ldrb	r3, [r7, #10]
 8000b9e:	7afa      	ldrb	r2, [r7, #11]
 8000ba0:	89b9      	ldrh	r1, [r7, #12]
 8000ba2:	2040      	movs	r0, #64	; 0x40
 8000ba4:	f000 fb9e 	bl	80012e4 <sdo_response>
															sdo_index = index;		// save object index and subindex
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <read_rx+0x590>)
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	8013      	strh	r3, [r2, #0]
															sdo_subindex = subindex;
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <read_rx+0x57c>)
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	7013      	strb	r3, [r2, #0]
															sdo_timer = SDO_TIMER;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <read_rx+0x594>)
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	701a      	strb	r2, [r3, #0]
							break;
 8000bba:	e102      	b.n	8000dc2 <read_rx+0x72a>
													if ((!subindex) && sub)
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d107      	bne.n	8000bd2 <read_rx+0x53a>
 8000bc2:	7a7b      	ldrb	r3, [r7, #9]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <read_rx+0x53a>
															size = 1;				// size is 1 uint8_t
 8000bc8:	2301      	movs	r3, #1
 8000bca:	72bb      	strb	r3, [r7, #10]
															value = sub;
 8000bcc:	7a7b      	ldrb	r3, [r7, #9]
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	e007      	b.n	8000be2 <read_rx+0x54a>
										  	 		value = read_dict (pos, subindex);
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <read_rx+0x598>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	7afa      	ldrb	r2, [r7, #11]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 ff98 	bl	8002b10 <read_dict>
 8000be0:	6138      	str	r0, [r7, #16]
													sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000be2:	7afa      	ldrb	r2, [r7, #11]
 8000be4:	89b9      	ldrh	r1, [r7, #12]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2042      	movs	r0, #66	; 0x42
 8000bea:	f000 fb7b 	bl	80012e4 <sdo_response>
							break;
 8000bee:	e0e8      	b.n	8000dc2 <read_rx+0x72a>

						case (READ_SEGM_REQ):						//read segment
							if (!sdo_index)									//no init read request before
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <read_rx+0x590>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <read_rx+0x56a>
								abort_sdo (SDO_UNSUPPORTED);
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <read_rx+0x5a0>)
 8000bfc:	f000 fac4 	bl	8001188 <abort_sdo>
 8000c00:	e0c6      	b.n	8000d90 <read_rx+0x6f8>
							else if (type & TOGGLE_BIT)			// toggle bit must be 0 for 1. segment
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d019      	beq.n	8000c40 <read_rx+0x5a8>
								abort_sdo (SDO_TOGGLEBIT);
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <read_rx+0x5a4>)
 8000c0e:	f000 fabb 	bl	8001188 <abort_sdo>
 8000c12:	e0bd      	b.n	8000d90 <read_rx+0x6f8>
 8000c14:	200001f0 	.word	0x200001f0
 8000c18:	200003ac 	.word	0x200003ac
 8000c1c:	20000351 	.word	0x20000351
 8000c20:	20000290 	.word	0x20000290
 8000c24:	2000060c 	.word	0x2000060c
 8000c28:	200001ee 	.word	0x200001ee
 8000c2c:	200001f1 	.word	0x200001f1
 8000c30:	200001fc 	.word	0x200001fc
 8000c34:	20000000 	.word	0x20000000
 8000c38:	06010000 	.word	0x06010000
 8000c3c:	05030000 	.word	0x05030000
							else
								{
									switch (sdo_index)
 8000c40:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <read_rx+0x898>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000c4a:	f000 8094 	beq.w	8000d76 <read_rx+0x6de>
 8000c4e:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000c52:	f300 809d 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c56:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000c5a:	d07d      	beq.n	8000d58 <read_rx+0x6c0>
 8000c5c:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000c60:	f300 8096 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c64:	f246 0211 	movw	r2, #24593	; 0x6011
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d06f      	beq.n	8000d4c <read_rx+0x6b4>
 8000c6c:	f246 0211 	movw	r2, #24593	; 0x6011
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f300 808d 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c76:	f246 0210 	movw	r2, #24592	; 0x6010
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d060      	beq.n	8000d40 <read_rx+0x6a8>
 8000c7e:	f246 0210 	movw	r2, #24592	; 0x6010
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f300 8084 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c88:	f241 020a 	movw	r2, #4106	; 0x100a
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d03e      	beq.n	8000d0e <read_rx+0x676>
 8000c90:	f241 020a 	movw	r2, #4106	; 0x100a
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dc7b      	bgt.n	8000d90 <read_rx+0x6f8>
 8000c98:	f241 0208 	movw	r2, #4104	; 0x1008
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d004      	beq.n	8000caa <read_rx+0x612>
 8000ca0:	f241 0209 	movw	r2, #4105	; 0x1009
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d019      	beq.n	8000cdc <read_rx+0x644>
 8000ca8:	e072      	b.n	8000d90 <read_rx+0x6f8>
										{
											case (DEVICE_NAME) :		// device name
												for (i = 0; i < DV_SIZE; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	75fb      	strb	r3, [r7, #23]
 8000cae:	e00b      	b.n	8000cc8 <read_rx+0x630>
													buffer [i] = device_name[i];
 8000cb0:	7dfa      	ldrb	r2, [r7, #23]
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	499f      	ldr	r1, [pc, #636]	; (8000f34 <read_rx+0x89c>)
 8000cb6:	5c8a      	ldrb	r2, [r1, r2]
 8000cb8:	f107 0118 	add.w	r1, r7, #24
 8000cbc:	440b      	add	r3, r1
 8000cbe:	f803 2c18 	strb.w	r2, [r3, #-24]
												for (i = 0; i < DV_SIZE; i++)
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	75fb      	strb	r3, [r7, #23]
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d9f0      	bls.n	8000cb0 <read_rx+0x618>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 6, buffer);
 8000cce:	463b      	mov	r3, r7
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2106      	movs	r1, #6
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fbad 	bl	8001434 <sdo_segment>
												break;
 8000cda:	e059      	b.n	8000d90 <read_rx+0x6f8>

											case (HW_VERSION) :			// hardware version
												for (i = 0; i < HW_SIZE; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75fb      	strb	r3, [r7, #23]
 8000ce0:	e00b      	b.n	8000cfa <read_rx+0x662>
													buffer [i] = hardware_uea [i];
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	4994      	ldr	r1, [pc, #592]	; (8000f38 <read_rx+0x8a0>)
 8000ce8:	5c8a      	ldrb	r2, [r1, r2]
 8000cea:	f107 0118 	add.w	r1, r7, #24
 8000cee:	440b      	add	r3, r1
 8000cf0:	f803 2c18 	strb.w	r2, [r3, #-24]
												for (i = 0; i < HW_SIZE; i++)
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d9f0      	bls.n	8000ce2 <read_rx+0x64a>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 5, buffer);
 8000d00:	463b      	mov	r3, r7
 8000d02:	461a      	mov	r2, r3
 8000d04:	2105      	movs	r1, #5
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fb94 	bl	8001434 <sdo_segment>
												break;
 8000d0c:	e040      	b.n	8000d90 <read_rx+0x6f8>

											case (SW_VERSION) :			//* software version
												for (i = 0; i < SW_SIZE; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e00b      	b.n	8000d2c <read_rx+0x694>
													buffer [i] = version_uea [i];
 8000d14:	7dfa      	ldrb	r2, [r7, #23]
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	4988      	ldr	r1, [pc, #544]	; (8000f3c <read_rx+0x8a4>)
 8000d1a:	5c8a      	ldrb	r2, [r1, r2]
 8000d1c:	f107 0118 	add.w	r1, r7, #24
 8000d20:	440b      	add	r3, r1
 8000d22:	f803 2c18 	strb.w	r2, [r3, #-24]
												for (i = 0; i < SW_SIZE; i++)
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d9f0      	bls.n	8000d14 <read_rx+0x67c>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 5, buffer);
 8000d32:	463b      	mov	r3, r7
 8000d34:	461a      	mov	r2, r3
 8000d36:	2105      	movs	r1, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fb7b 	bl	8001434 <sdo_segment>
												break;
 8000d3e:	e027      	b.n	8000d90 <read_rx+0x6f8>

											case (VIRTUAL_INPUT)  :		// virtual input mapping object
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, virt_in);
 8000d40:	4a7f      	ldr	r2, [pc, #508]	; (8000f40 <read_rx+0x8a8>)
 8000d42:	2107      	movs	r1, #7
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fb75 	bl	8001434 <sdo_segment>
												break;
 8000d4a:	e021      	b.n	8000d90 <read_rx+0x6f8>

											case (VIRTUAL_OUTPUT)  :	// virtual output mapping object
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, virt_out);
 8000d4c:	4a7d      	ldr	r2, [pc, #500]	; (8000f44 <read_rx+0x8ac>)
 8000d4e:	2107      	movs	r1, #7
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 fb6f 	bl	8001434 <sdo_segment>
												break;
 8000d56:	e01b      	b.n	8000d90 <read_rx+0x6f8>

											case (INPUT_GROUP)    :		// input group
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, inpar [sdo_subindex - 1]);
 8000d58:	4b7b      	ldr	r3, [pc, #492]	; (8000f48 <read_rx+0x8b0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	4613      	mov	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	1a9b      	subs	r3, r3, r2
 8000d66:	4a79      	ldr	r2, [pc, #484]	; (8000f4c <read_rx+0x8b4>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 fb60 	bl	8001434 <sdo_segment>
												break;
 8000d74:	e00c      	b.n	8000d90 <read_rx+0x6f8>

											case (OUTPUT_GROUP)    :	// output group
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, outpar [sdo_subindex - 1]);
 8000d76:	4b74      	ldr	r3, [pc, #464]	; (8000f48 <read_rx+0x8b0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4a73      	ldr	r2, [pc, #460]	; (8000f50 <read_rx+0x8b8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	2107      	movs	r1, #7
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fb53 	bl	8001434 <sdo_segment>
												break;
 8000d8e:	bf00      	nop
										}
								}
							sdo_index    = 0;				// reset marker from init request
 8000d90:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <read_rx+0x898>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000d96:	4b6c      	ldr	r3, [pc, #432]	; (8000f48 <read_rx+0x8b0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	; (8000f54 <read_rx+0x8bc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
							break;
 8000da2:	e00e      	b.n	8000dc2 <read_rx+0x72a>

						case (ABORT_REQ):				// abort request
							sdo_index    = 0;				// reset marker from init request
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <read_rx+0x898>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000daa:	4b67      	ldr	r3, [pc, #412]	; (8000f48 <read_rx+0x8b0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <read_rx+0x8bc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
							break;
 8000db6:	e004      	b.n	8000dc2 <read_rx+0x72a>

						default:
							abort_sdo (SDO_NOT_VALID);	// unknown SDO command specifier
 8000db8:	4867      	ldr	r0, [pc, #412]	; (8000f58 <read_rx+0x8c0>)
 8000dba:	f000 f9e5 	bl	8001188 <abort_sdo>
							break;
 8000dbe:	e000      	b.n	8000dc2 <read_rx+0x72a>
							break;
 8000dc0:	bf00      	nop
					}
				break;
 8000dc2:	e0ea      	b.n	8000f9a <read_rx+0x902>

			case (NMT) :											// network management
				i = rx [ro][3]; 								// read node id
 8000dc4:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <read_rx+0x8c4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <read_rx+0x8c8>)
 8000dcc:	460b      	mov	r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	75fb      	strb	r3, [r7, #23]
				if ((!i) || (i == node_id)) 		// for this node or for all nodes
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <read_rx+0x754>
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <read_rx+0x8cc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	7dfa      	ldrb	r2, [r7, #23]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d122      	bne.n	8000e32 <read_rx+0x79a>
					{
						switch (rx [ro][2]) 					// command specifier
 8000dec:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <read_rx+0x8c4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4a5b      	ldr	r2, [pc, #364]	; (8000f60 <read_rx+0x8c8>)
 8000df4:	460b      	mov	r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2bf0      	cmp	r3, #240	; 0xf0
 8000e06:	d010      	beq.n	8000e2a <read_rx+0x792>
 8000e08:	2bf0      	cmp	r3, #240	; 0xf0
 8000e0a:	dc14      	bgt.n	8000e36 <read_rx+0x79e>
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d002      	beq.n	8000e16 <read_rx+0x77e>
 8000e10:	2b81      	cmp	r3, #129	; 0x81
 8000e12:	d004      	beq.n	8000e1e <read_rx+0x786>

								case (STOP_NODE)	 :						// reset node
								case (ENTER_PREOP) :						// reset node
								case (RESET_COMM)  :						// reset node
								default:
									break;				// do nothing (not implemented)
 8000e14:	e00f      	b.n	8000e36 <read_rx+0x79e>
									nmtstate = OPERATIONAL; 	// enter operational state
 8000e16:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <read_rx+0x8d0>)
 8000e18:	2205      	movs	r2, #5
 8000e1a:	701a      	strb	r2, [r3, #0]
									break;
 8000e1c:	e00c      	b.n	8000e38 <read_rx+0x7a0>
									merker = 0;
 8000e1e:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <read_rx+0x8d4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
									HAL_NVIC_SystemReset();
 8000e24:	f005 fa7f 	bl	8006326 <HAL_NVIC_SystemReset>
									break;
 8000e28:	e006      	b.n	8000e38 <read_rx+0x7a0>
									nmtstate = TEST_MODE;
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <read_rx+0x8d0>)
 8000e2c:	22f0      	movs	r2, #240	; 0xf0
 8000e2e:	701a      	strb	r2, [r3, #0]
									break;
 8000e30:	e002      	b.n	8000e38 <read_rx+0x7a0>
							}
					}
 8000e32:	bf00      	nop
 8000e34:	e0b1      	b.n	8000f9a <read_rx+0x902>
									break;				// do nothing (not implemented)
 8000e36:	bf00      	nop
				break;
 8000e38:	e0af      	b.n	8000f9a <read_rx+0x902>

			case (LSS) :										//LSS message for initialization
				type = rx [ro][2];						//read LSS service type
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <read_rx+0x8c4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4a47      	ldr	r2, [pc, #284]	; (8000f60 <read_rx+0x8c8>)
 8000e42:	460b      	mov	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	73fb      	strb	r3, [r7, #15]
				switch (type)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	f040 809d 	bne.w	8000f94 <read_rx+0x8fc>
					{
						case (SET_NODE_ID) :			//set new node id
							i = rx [ro][3];					//read new node id
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <read_rx+0x8c4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4a3f      	ldr	r2, [pc, #252]	; (8000f60 <read_rx+0x8c8>)
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3303      	adds	r3, #3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	75fb      	strb	r3, [r7, #23]
							if ((i > 127) || (!i))	//node id invalid
 8000e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db02      	blt.n	8000e80 <read_rx+0x7e8>
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <read_rx+0x7f2>
								lss_response (SET_NODE_ID, OUT_OF_RANGE);
 8000e80:	2101      	movs	r1, #1
 8000e82:	2011      	movs	r0, #17
 8000e84:	f000 fb4a 	bl	800151c <lss_response>
 8000e88:	e006      	b.n	8000e98 <read_rx+0x800>
							else
								{
									node_id = i;
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <read_rx+0x8cc>)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	7013      	strb	r3, [r2, #0]
									lss_response (SET_NODE_ID, 0);
 8000e90:	2100      	movs	r1, #0
 8000e92:	2011      	movs	r0, #17
 8000e94:	f000 fb42 	bl	800151c <lss_response>
								}
							break;
 8000e98:	bf00      	nop
					}
				break;
 8000e9a:	e07b      	b.n	8000f94 <read_rx+0x8fc>

//����Ϣ��ʱֻ������ͣ�����״̬��Ϣ		2017-11-15		
			case (MPDO) :					// time stamp message
				sub = rx [ro][1];
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <read_rx+0x8c4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <read_rx+0x8c8>)
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	3301      	adds	r3, #1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	727b      	strb	r3, [r7, #9]
				type = rx [ro][2];
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <read_rx+0x8c4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <read_rx+0x8c8>)
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	73fb      	strb	r3, [r7, #15]
				if((sub == EMS_ID) && (type == 0))
 8000ecc:	7a7b      	ldrb	r3, [r7, #9]
 8000ece:	2b0b      	cmp	r3, #11
 8000ed0:	d162      	bne.n	8000f98 <read_rx+0x900>
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d15f      	bne.n	8000f98 <read_rx+0x900>
					{
						for(i = 0; i < 8; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	e017      	b.n	8000f0e <read_rx+0x876>
							buffer[i] = rx [ro][2 + i];
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <read_rx+0x8c4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461c      	mov	r4, r3
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	1c99      	adds	r1, r3, #2
 8000ee8:	7dfa      	ldrb	r2, [r7, #23]
 8000eea:	481d      	ldr	r0, [pc, #116]	; (8000f60 <read_rx+0x8c8>)
 8000eec:	4623      	mov	r3, r4
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4423      	add	r3, r4
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4403      	add	r3, r0
 8000ef6:	440b      	add	r3, r1
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2d9      	uxtb	r1, r3
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4413      	add	r3, r2
 8000f02:	460a      	mov	r2, r1
 8000f04:	f803 2c18 	strb.w	r2, [r3, #-24]
						for(i = 0; i < 8; i++)
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	d9e4      	bls.n	8000ede <read_rx+0x846>
						if(buffer[6] & 0x0A)							
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	f003 030a 	and.w	r3, r3, #10
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d02a      	beq.n	8000f74 <read_rx+0x8dc>
							display[BUF_ARROW] |= OUT_OF_SERVICE;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <read_rx+0x8d8>)
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <read_rx+0x8d8>)
 8000f2c:	709a      	strb	r2, [r3, #2]
 8000f2e:	e029      	b.n	8000f84 <read_rx+0x8ec>
 8000f30:	200001ee 	.word	0x200001ee
 8000f34:	08007e80 	.word	0x08007e80
 8000f38:	08007e78 	.word	0x08007e78
 8000f3c:	08007e70 	.word	0x08007e70
 8000f40:	200005e8 	.word	0x200005e8
 8000f44:	200005f4 	.word	0x200005f4
 8000f48:	200001f0 	.word	0x200001f0
 8000f4c:	200003ac 	.word	0x200003ac
 8000f50:	2000060c 	.word	0x2000060c
 8000f54:	200001f1 	.word	0x200001f1
 8000f58:	05040001 	.word	0x05040001
 8000f5c:	20000351 	.word	0x20000351
 8000f60:	20000290 	.word	0x20000290
 8000f64:	200005fb 	.word	0x200005fb
 8000f68:	20000890 	.word	0x20000890
 8000f6c:	200001f8 	.word	0x200001f8
 8000f70:	20000364 	.word	0x20000364
						else
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <read_rx+0x978>)
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <read_rx+0x978>)
 8000f82:	709a      	strb	r2, [r3, #2]
						mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <read_rx+0x978>)
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <read_rx+0x97c>)
 8000f8c:	70da      	strb	r2, [r3, #3]
					}
				break;
 8000f8e:	e003      	b.n	8000f98 <read_rx+0x900>
				break;
 8000f90:	bf00      	nop
 8000f92:	e002      	b.n	8000f9a <read_rx+0x902>
				break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <read_rx+0x902>
				break;
 8000f98:	bf00      	nop
//����Ϣ��ʱֻ������ͣ�����״̬��Ϣ		2017-11-15		
		}
	if (HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000f9a:	2112      	movs	r1, #18
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <read_rx+0x980>)
 8000f9e:	f004 fe85 	bl	8005cac <HAL_CAN_DeactivateNotification>
	{

	}
	//INTCONbits.GIEH		= 0;		// low priority interrupts disable
	if (ro == (RX_SIZE-1))		// increment RX message read pointer
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <read_rx+0x984>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d103      	bne.n	8000fb2 <read_rx+0x91a>
		ro = 0;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <read_rx+0x984>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e005      	b.n	8000fbe <read_rx+0x926>
	else
		ro++;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <read_rx+0x984>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <read_rx+0x984>)
 8000fbc:	701a      	strb	r2, [r3, #0]
	rc--;											// decrement RX counter
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <read_rx+0x988>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <read_rx+0x988>)
 8000fca:	701a      	strb	r2, [r3, #0]
	i = ri;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <read_rx+0x98c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	75fb      	strb	r3, [r7, #23]
	size = rc;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <read_rx+0x988>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	72bb      	strb	r3, [r7, #10]
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000fd8:	2112      	movs	r1, #18
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <read_rx+0x980>)
 8000fdc:	f004 fe41 	bl	8005c62 <HAL_CAN_ActivateNotification>
	{

	}
	//INTCONbits.GIEH		= 1;		// low priority interrupts enable
	if (i < ro)
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <read_rx+0x984>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	7dfa      	ldrb	r2, [r7, #23]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d202      	bcs.n	8000ff0 <read_rx+0x958>
		i += RX_SIZE;
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	3308      	adds	r3, #8
 8000fee:	75fb      	strb	r3, [r7, #23]
	if ((i - ro) != (size % RX_SIZE))
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <read_rx+0x984>)
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	1a9a      	subs	r2, r3, r2
 8000ff8:	7abb      	ldrb	r3, [r7, #10]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d002      	beq.n	8001008 <read_rx+0x970>
		{
			merker = RC_MERKER;	// set rc counter error marker
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <read_rx+0x990>)
 8001004:	225a      	movs	r2, #90	; 0x5a
 8001006:	701a      	strb	r2, [r3, #0]
		}
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bdb0      	pop	{r4, r5, r7, pc}
 8001010:	20000364 	.word	0x20000364
 8001014:	20000368 	.word	0x20000368
 8001018:	200005c0 	.word	0x200005c0
 800101c:	20000351 	.word	0x20000351
 8001020:	20000284 	.word	0x20000284
 8001024:	20000352 	.word	0x20000352
 8001028:	200001f8 	.word	0x200001f8

0800102c <can_transmit>:
/*=============================  �����Ƿ��ͳ���   ================================*/
// transmit a message if TX register is free or write message to buffer


uint32_t timeeeee ;
void can_transmit (void){
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
	txmallbox_request++;
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <can_transmit+0x138>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <can_transmit+0x138>)
 800103c:	801a      	strh	r2, [r3, #0]
	if ((!hse_heartbeat) || (merker == BS_MERKER))		// û��MCU����������busoff�������κ���Ϣ
 800103e:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <can_transmit+0x13c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 808a 	beq.w	800115c <can_transmit+0x130>
 8001048:	4b48      	ldr	r3, [pc, #288]	; (800116c <can_transmit+0x140>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b55      	cmp	r3, #85	; 0x55
 800104e:	f000 8085 	beq.w	800115c <can_transmit+0x130>
		return;

	if (ti == (TX_SIZE-1))								/* increment TX message write pointer	*/
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <can_transmit+0x144>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d103      	bne.n	8001062 <can_transmit+0x36>
		ti = 0;
 800105a:	4b45      	ldr	r3, [pc, #276]	; (8001170 <can_transmit+0x144>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e005      	b.n	800106e <can_transmit+0x42>
	else
		ti++;
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <can_transmit+0x144>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <can_transmit+0x144>)
 800106c:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_DeactivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800106e:	2101      	movs	r1, #1
 8001070:	4840      	ldr	r0, [pc, #256]	; (8001174 <can_transmit+0x148>)
 8001072:	f004 fe1b 	bl	8005cac <HAL_CAN_DeactivateNotification>
	{

	}
	CAN_TxHeaderTypeDef CanTxHeader_t;
	uint8_t CanTxData_t[8] = {0};
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
	uint32_t Txmallbox;
	//INTCONbits.GIEH	= 0;								/* global interrupts disable			*/
	CanTxHeader_t.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1];
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <can_transmit+0x14c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4a3d      	ldr	r2, [pc, #244]	; (800117c <can_transmit+0x150>)
 8001088:	460b      	mov	r3, r1
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <can_transmit+0x14c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <can_transmit+0x150>)
 80010a6:	4603      	mov	r3, r0
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4403      	add	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	3301      	adds	r3, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
	CanTxHeader_t.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <can_transmit+0x14c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <can_transmit+0x150>)
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	623b      	str	r3, [r7, #32]
	CanTxHeader_t.IDE   = CAN_ID_STD;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	CanTxHeader_t.RTR	= CAN_RTR_DATA;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

	memcpy(CanTxData_t,(void *)(tx[to]+2),8);
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <can_transmit+0x14c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <can_transmit+0x150>)
 80010f2:	4413      	add	r3, r2
 80010f4:	1c9a      	adds	r2, r3, #2
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	6851      	ldr	r1, [r2, #4]
 80010fe:	c303      	stmia	r3!, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader_t, CanTxData_t, &Txmallbox) == HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	f107 0208 	add.w	r2, r7, #8
 8001106:	f107 0110 	add.w	r1, r7, #16
 800110a:	481a      	ldr	r0, [pc, #104]	; (8001174 <can_transmit+0x148>)
 800110c:	f004 fbbe 	bl	800588c <HAL_CAN_AddTxMessage>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <can_transmit+0x118>
	{
		txmallbox++;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <can_transmit+0x154>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <can_transmit+0x154>)
 8001120:	801a      	strh	r2, [r3, #0]
		if (to == (TX_SIZE-1))							/* increment TX message read pointer	*/
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <can_transmit+0x14c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b07      	cmp	r3, #7
 800112a:	d103      	bne.n	8001134 <can_transmit+0x108>
			to = 0;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <can_transmit+0x14c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e00e      	b.n	8001152 <can_transmit+0x126>
		else
			to++;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <can_transmit+0x14c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3301      	adds	r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <can_transmit+0x14c>)
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e006      	b.n	8001152 <can_transmit+0x126>
	}
	else
	{
		tc++;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <can_transmit+0x158>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <can_transmit+0x158>)
 8001150:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001152:	2101      	movs	r1, #1
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <can_transmit+0x148>)
 8001156:	f004 fd84 	bl	8005c62 <HAL_CAN_ActivateNotification>
 800115a:	e000      	b.n	800115e <can_transmit+0x132>
		return;
 800115c:	bf00      	nop
	{

	}


}
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200001e0 	.word	0x200001e0
 8001168:	200001f3 	.word	0x200001f3
 800116c:	200001f8 	.word	0x200001f8
 8001170:	20000353 	.word	0x20000353
 8001174:	200005c0 	.word	0x200005c0
 8001178:	20000350 	.word	0x20000350
 800117c:	200002fc 	.word	0x200002fc
 8001180:	200001de 	.word	0x200001de
 8001184:	2000028c 	.word	0x2000028c

08001188 <abort_sdo>:

// abort SDO transfer
void abort_sdo (uint32_t errorcode){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 8001190:	bf00      	nop
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <abort_sdo+0x144>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b08      	cmp	r3, #8
 800119a:	d0fa      	beq.n	8001192 <abort_sdo+0xa>

	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <abort_sdo+0x148>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <abort_sdo+0x14c>)
 80011a4:	460b      	mov	r3, r1
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	22b8      	movs	r2, #184	; 0xb8
 80011b0:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <abort_sdo+0x148>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <abort_sdo+0x150>)
 80011ba:	7818      	ldrb	r0, [r3, #0]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <abort_sdo+0x14c>)
 80011be:	460b      	mov	r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3301      	adds	r3, #1
 80011ca:	4602      	mov	r2, r0
 80011cc:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = ABORT_REQ;								/* write command specifier				*/
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <abort_sdo+0x148>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <abort_sdo+0x14c>)
 80011d6:	460b      	mov	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	3302      	adds	r3, #2
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = sdo_index;								/* Index of last RX SDO					*/
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <abort_sdo+0x154>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <abort_sdo+0x148>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	b2d0      	uxtb	r0, r2
 80011f4:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <abort_sdo+0x14c>)
 80011f6:	460b      	mov	r3, r1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	3303      	adds	r3, #3
 8001202:	4602      	mov	r2, r0
 8001204:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = sdo_index >> 8;
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <abort_sdo+0x154>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <abort_sdo+0x148>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	b2d0      	uxtb	r0, r2
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <abort_sdo+0x14c>)
 800121a:	460b      	mov	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3304      	adds	r3, #4
 8001226:	4602      	mov	r2, r0
 8001228:	701a      	strb	r2, [r3, #0]
	tx[ti][5] = sdo_subindex;							/* Sub-index last RX SDO				*/
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <abort_sdo+0x148>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <abort_sdo+0x158>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <abort_sdo+0x14c>)
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3305      	adds	r3, #5
 8001244:	4602      	mov	r2, r0
 8001246:	701a      	strb	r2, [r3, #0]
	tx[ti][6] = errorcode;								/* errorcode (reason for abort request	*/
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <abort_sdo+0x148>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <abort_sdo+0x14c>)
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	3306      	adds	r3, #6
 8001260:	4602      	mov	r2, r0
 8001262:	701a      	strb	r2, [r3, #0]
	tx[ti][7] = errorcode >>  8;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0a1a      	lsrs	r2, r3, #8
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <abort_sdo+0x148>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	b2d0      	uxtb	r0, r2
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <abort_sdo+0x14c>)
 8001272:	460b      	mov	r3, r1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	3307      	adds	r3, #7
 800127e:	4602      	mov	r2, r0
 8001280:	701a      	strb	r2, [r3, #0]
	tx[ti][8] = errorcode >> 16;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0c1a      	lsrs	r2, r3, #16
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <abort_sdo+0x148>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	b2d0      	uxtb	r0, r2
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <abort_sdo+0x14c>)
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	3308      	adds	r3, #8
 800129c:	4602      	mov	r2, r0
 800129e:	701a      	strb	r2, [r3, #0]
	tx[ti][9] = errorcode >> 24;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0e1a      	lsrs	r2, r3, #24
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <abort_sdo+0x148>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	b2d0      	uxtb	r0, r2
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <abort_sdo+0x14c>)
 80012ae:	460b      	mov	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	3309      	adds	r3, #9
 80012ba:	4602      	mov	r2, r0
 80012bc:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 80012be:	f7ff feb5 	bl	800102c <can_transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000028c 	.word	0x2000028c
 80012d0:	20000353 	.word	0x20000353
 80012d4:	200002fc 	.word	0x200002fc
 80012d8:	200005fb 	.word	0x200005fb
 80012dc:	200001ee 	.word	0x200001ee
 80012e0:	200001f0 	.word	0x200001f0

080012e4 <sdo_response>:

// SDO response
void sdo_response (uint8_t command, uint16_t index, uint8_t subindex, uint32_t value){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	460b      	mov	r3, r1
 80012f2:	80bb      	strh	r3, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80012f8:	bf00      	nop
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <sdo_response+0x140>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b08      	cmp	r3, #8
 8001302:	d0fa      	beq.n	80012fa <sdo_response+0x16>

	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 8001304:	4b48      	ldr	r3, [pc, #288]	; (8001428 <sdo_response+0x144>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <sdo_response+0x148>)
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	22b8      	movs	r2, #184	; 0xb8
 8001318:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <sdo_response+0x144>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	4b43      	ldr	r3, [pc, #268]	; (8001430 <sdo_response+0x14c>)
 8001322:	7818      	ldrb	r0, [r3, #0]
 8001324:	4a41      	ldr	r2, [pc, #260]	; (800142c <sdo_response+0x148>)
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3301      	adds	r3, #1
 8001332:	4602      	mov	r2, r0
 8001334:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <sdo_response+0x144>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	4a3b      	ldr	r2, [pc, #236]	; (800142c <sdo_response+0x148>)
 800133e:	460b      	mov	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3302      	adds	r3, #2
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = index;									/* write index 							*/
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <sdo_response+0x144>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	b2d8      	uxtb	r0, r3
 8001358:	4a34      	ldr	r2, [pc, #208]	; (800142c <sdo_response+0x148>)
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	3303      	adds	r3, #3
 8001366:	4602      	mov	r2, r0
 8001368:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = index >> 8;
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <sdo_response+0x144>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	b2d0      	uxtb	r0, r2
 8001378:	4a2c      	ldr	r2, [pc, #176]	; (800142c <sdo_response+0x148>)
 800137a:	460b      	mov	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
	tx[ti][5] = subindex;								/* write sub-index						*/
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <sdo_response+0x144>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <sdo_response+0x148>)
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	3305      	adds	r3, #5
 800139e:	79ba      	ldrb	r2, [r7, #6]
 80013a0:	701a      	strb	r2, [r3, #0]
	tx[ti][6] = value;									/* write value							*/
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <sdo_response+0x144>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2d8      	uxtb	r0, r3
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <sdo_response+0x148>)
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	3306      	adds	r3, #6
 80013ba:	4602      	mov	r2, r0
 80013bc:	701a      	strb	r2, [r3, #0]
	tx[ti][7] = value >>  8;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	0a1a      	lsrs	r2, r3, #8
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <sdo_response+0x144>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	b2d0      	uxtb	r0, r2
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <sdo_response+0x148>)
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	3307      	adds	r3, #7
 80013d8:	4602      	mov	r2, r0
 80013da:	701a      	strb	r2, [r3, #0]
	tx[ti][8] = value >> 16;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	0c1a      	lsrs	r2, r3, #16
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <sdo_response+0x144>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	b2d0      	uxtb	r0, r2
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <sdo_response+0x148>)
 80013ea:	460b      	mov	r3, r1
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	3308      	adds	r3, #8
 80013f6:	4602      	mov	r2, r0
 80013f8:	701a      	strb	r2, [r3, #0]
	tx[ti][9] = value >> 24;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	0e1a      	lsrs	r2, r3, #24
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <sdo_response+0x144>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	b2d0      	uxtb	r0, r2
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <sdo_response+0x148>)
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	3309      	adds	r3, #9
 8001414:	4602      	mov	r2, r0
 8001416:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 8001418:	f7ff fe08 	bl	800102c <can_transmit>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000028c 	.word	0x2000028c
 8001428:	20000353 	.word	0x20000353
 800142c:	200002fc 	.word	0x200002fc
 8001430:	200005fb 	.word	0x200005fb

08001434 <sdo_segment>:

//SDO segment
void sdo_segment (uint8_t command, uint8_t size, uint8_t *value){
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	603a      	str	r2, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	460b      	mov	r3, r1
 8001442:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 8001444:	bf00      	nop
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <sdo_segment+0xd8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b08      	cmp	r3, #8
 800144e:	d0fa      	beq.n	8001446 <sdo_segment+0x12>
	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <sdo_segment+0xdc>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <sdo_segment+0xe0>)
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	22b8      	movs	r2, #184	; 0xb8
 8001464:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <sdo_segment+0xdc>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <sdo_segment+0xe4>)
 800146e:	7818      	ldrb	r0, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <sdo_segment+0xe0>)
 8001472:	460b      	mov	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	3301      	adds	r3, #1
 800147e:	4602      	mov	r2, r0
 8001480:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <sdo_segment+0xdc>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <sdo_segment+0xe0>)
 800148a:	460b      	mov	r3, r1
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	3302      	adds	r3, #2
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e014      	b.n	80014ca <sdo_segment+0x96>
		tx[ti][3 + i] = *value++;						/* write value 							*/
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	603a      	str	r2, [r7, #0]
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <sdo_segment+0xdc>)
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	4610      	mov	r0, r2
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	3203      	adds	r2, #3
 80014b0:	781c      	ldrb	r4, [r3, #0]
 80014b2:	4918      	ldr	r1, [pc, #96]	; (8001514 <sdo_segment+0xe0>)
 80014b4:	4603      	mov	r3, r0
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4403      	add	r3, r0
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	4413      	add	r3, r2
 80014c0:	4622      	mov	r2, r4
 80014c2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3301      	adds	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3e6      	bcc.n	80014a0 <sdo_segment+0x6c>
	for (i = size; i < 7; i++)
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e010      	b.n	80014fa <sdo_segment+0xc6>
		tx[ti][3 + i] = 0;								/* set unused data bytes to 0			*/
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <sdo_segment+0xdc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	1cda      	adds	r2, r3, #3
 80014e2:	490c      	ldr	r1, [pc, #48]	; (8001514 <sdo_segment+0xe0>)
 80014e4:	4603      	mov	r3, r0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4403      	add	r3, r0
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
	for (i = size; i < 7; i++)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	3301      	adds	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d9eb      	bls.n	80014d8 <sdo_segment+0xa4>
	can_transmit ();									/* transmit message						*/
 8001500:	f7ff fd94 	bl	800102c <can_transmit>
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	2000028c 	.word	0x2000028c
 8001510:	20000353 	.word	0x20000353
 8001514:	200002fc 	.word	0x200002fc
 8001518:	200005fb 	.word	0x200005fb

0800151c <lss_response>:

//LSS response
void lss_response (uint8_t command, uint8_t value){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 800152c:	bf00      	nop
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <lss_response+0xb4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b08      	cmp	r3, #8
 8001536:	d0fa      	beq.n	800152e <lss_response+0x12>
	tx[ti][0] = LSS + 8; 								/* write function code + data length	*/
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <lss_response+0xb8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <lss_response+0xbc>)
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	22f8      	movs	r2, #248	; 0xf8
 800154c:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = LSS_RES_ID;								/* write node id part of identifier		*/
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <lss_response+0xb8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <lss_response+0xbc>)
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3301      	adds	r3, #1
 8001562:	2264      	movs	r2, #100	; 0x64
 8001564:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <lss_response+0xb8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <lss_response+0xbc>)
 800156e:	460b      	mov	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3302      	adds	r3, #2
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = value;									/* write index 							*/
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <lss_response+0xb8>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <lss_response+0xbc>)
 8001586:	460b      	mov	r3, r1
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	3303      	adds	r3, #3
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	701a      	strb	r2, [r3, #0]
	for (i = 4; i <= 9; i++)
 8001596:	2304      	movs	r3, #4
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e00f      	b.n	80015bc <lss_response+0xa0>
		tx[ti][i] = 0;									/* set unused data bytes to 0			*/
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <lss_response+0xb8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <lss_response+0xbc>)
 80015a6:	4603      	mov	r3, r0
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	440b      	add	r3, r1
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	for (i = 4; i <= 9; i++)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b09      	cmp	r3, #9
 80015c0:	d9ec      	bls.n	800159c <lss_response+0x80>
	can_transmit ();									/* transmit message						*/
 80015c2:	f7ff fd33 	bl	800102c <can_transmit>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000028c 	.word	0x2000028c
 80015d4:	20000353 	.word	0x20000353
 80015d8:	200002fc 	.word	0x200002fc

080015dc <transmit_error>:

// transmit emergency message
void transmit_error (void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80015e2:	bf00      	nop
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <transmit_error+0xd8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d0fa      	beq.n	80015e4 <transmit_error+0x8>
	tx[ti][0] = EMERGENCY + 8;							/* write function code + data length	*/
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <transmit_error+0xdc>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4a31      	ldr	r2, [pc, #196]	; (80016bc <transmit_error+0xe0>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	2218      	movs	r2, #24
 8001602:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <transmit_error+0xdc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <transmit_error+0xe4>)
 800160c:	7818      	ldrb	r0, [r3, #0]
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <transmit_error+0xe0>)
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	3301      	adds	r3, #1
 800161c:	4602      	mov	r2, r0
 800161e:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = errorcode;								/* write error code						*/
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <transmit_error+0xe8>)
 8001622:	881a      	ldrh	r2, [r3, #0]
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <transmit_error+0xdc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	b2d0      	uxtb	r0, r2
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <transmit_error+0xe0>)
 800162e:	460b      	mov	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	3302      	adds	r3, #2
 800163a:	4602      	mov	r2, r0
 800163c:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = errorcode >> 8;							/* write error code						*/
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <transmit_error+0xe8>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <transmit_error+0xdc>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	b2d0      	uxtb	r0, r2
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <transmit_error+0xe0>)
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3303      	adds	r3, #3
 800165c:	4602      	mov	r2, r0
 800165e:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = errorregister;							/* write error register					*/
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <transmit_error+0xdc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <transmit_error+0xec>)
 8001668:	7818      	ldrb	r0, [r3, #0]
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <transmit_error+0xe0>)
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	4602      	mov	r2, r0
 800167a:	701a      	strb	r2, [r3, #0]
	for (i = 5; i <= 9; i++)
 800167c:	2305      	movs	r3, #5
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	e00f      	b.n	80016a2 <transmit_error+0xc6>
		tx[ti][i] = 0;									/* manufacture specific part not used	*/
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <transmit_error+0xdc>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <transmit_error+0xe0>)
 800168c:	4603      	mov	r3, r0
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
	for (i = 5; i <= 9; i++)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3301      	adds	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d9ec      	bls.n	8001682 <transmit_error+0xa6>
	can_transmit ();									/* transmit message						*/
 80016a8:	f7ff fcc0 	bl	800102c <can_transmit>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000028c 	.word	0x2000028c
 80016b8:	20000353 	.word	0x20000353
 80016bc:	200002fc 	.word	0x200002fc
 80016c0:	200005fb 	.word	0x200005fb
 80016c4:	200001fa 	.word	0x200001fa
 80016c8:	200001f9 	.word	0x200001f9

080016cc <transmit_in>:

//ransmit special inputs and calls
 void transmit_in (uint8_t *input){
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80016d4:	bf00      	nop
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <transmit_in+0x88>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d0fa      	beq.n	80016d6 <transmit_in+0xa>
	tx[ti][0] = PDO_IN + MAX_IO_TYPE; 					/* write function code + data length	*/
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <transmit_in+0x8c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4a1d      	ldr	r2, [pc, #116]	; (800175c <transmit_in+0x90>)
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	2297      	movs	r2, #151	; 0x97
 80016f4:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <transmit_in+0x8c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <transmit_in+0x94>)
 80016fe:	7818      	ldrb	r0, [r3, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <transmit_in+0x90>)
 8001702:	460b      	mov	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3301      	adds	r3, #1
 800170e:	4602      	mov	r2, r0
 8001710:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_IO_TYPE; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e014      	b.n	8001742 <transmit_in+0x76>
		tx[ti][2 + i] = *input++;						/* write input function					*/
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <transmit_in+0x8c>)
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	4610      	mov	r0, r2
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	3202      	adds	r2, #2
 8001728:	781c      	ldrb	r4, [r3, #0]
 800172a:	490c      	ldr	r1, [pc, #48]	; (800175c <transmit_in+0x90>)
 800172c:	4603      	mov	r3, r0
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4403      	add	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	4413      	add	r3, r2
 8001738:	4622      	mov	r2, r4
 800173a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_IO_TYPE; i++)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b06      	cmp	r3, #6
 8001746:	d9e7      	bls.n	8001718 <transmit_in+0x4c>
	can_transmit ();									/* transmit message						*/
 8001748:	f7ff fc70 	bl	800102c <can_transmit>

}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	2000028c 	.word	0x2000028c
 8001758:	20000353 	.word	0x20000353
 800175c:	200002fc 	.word	0x200002fc
 8001760:	200005fb 	.word	0x200005fb

08001764 <transmit_load>:

//ransmit load measurement state
 void transmit_load (void){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t state;
	state = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < mInOut_Number; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e020      	b.n	80017b6 <transmit_load+0x52>
		{
			if (inpar [i][IO_BASIC_FUNC] == LOAD_IN)		/* load measurement input				*/
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	492a      	ldr	r1, [pc, #168]	; (8001820 <transmit_load+0xbc>)
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	440b      	add	r3, r1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b84      	cmp	r3, #132	; 0x84
 8001784:	d114      	bne.n	80017b0 <transmit_load+0x4c>
			if (inpar [i][IO_STATE])						/* input is on							*/
 8001786:	79fa      	ldrb	r2, [r7, #7]
 8001788:	4925      	ldr	r1, [pc, #148]	; (8001820 <transmit_load+0xbc>)
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	440b      	add	r3, r1
 8001792:	3305      	adds	r3, #5
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <transmit_load+0x4c>
				state |= inpar [i][IO_SUB_FUNC];			/* set load measurement state			*/
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	4920      	ldr	r1, [pc, #128]	; (8001820 <transmit_load+0xbc>)
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	3301      	adds	r3, #1
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < mInOut_Number; i++)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	3301      	adds	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <transmit_load+0xc0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3d9      	bcc.n	8001774 <transmit_load+0x10>
		}
	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 80017c0:	bf00      	nop
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <transmit_load+0xc4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d0fa      	beq.n	80017c2 <transmit_load+0x5e>
	tx[ti][0] = FC_3 + 1; 								/* write function code + data length	*/
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <transmit_load+0xc8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <transmit_load+0xcc>)
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	2231      	movs	r2, #49	; 0x31
 80017e0:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = LOAD_ID;								/* write second part of ID				*/
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <transmit_load+0xc8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4a11      	ldr	r2, [pc, #68]	; (8001830 <transmit_load+0xcc>)
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	3301      	adds	r3, #1
 80017f6:	2208      	movs	r2, #8
 80017f8:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = state;									/* write load measurment state			*/
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <transmit_load+0xc8>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <transmit_load+0xcc>)
 8001802:	460b      	mov	r3, r1
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	3302      	adds	r3, #2
 800180e:	79ba      	ldrb	r2, [r7, #6]
 8001810:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 8001812:	f7ff fc0b 	bl	800102c <can_transmit>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200003ac 	.word	0x200003ac
 8001824:	20000189 	.word	0x20000189
 8001828:	2000028c 	.word	0x2000028c
 800182c:	20000353 	.word	0x20000353
 8001830:	200002fc 	.word	0x200002fc

08001834 <CAN_transmit_heartbeat>:
 void CAN_transmit_heartbeat(void)
 {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
 	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 8001838:	bf00      	nop
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <CAN_transmit_heartbeat+0x68>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b08      	cmp	r3, #8
 8001842:	d0fa      	beq.n	800183a <CAN_transmit_heartbeat+0x6>

 	tx[ti][0] = HEARTBEAT + 1; 								/* write function code + data length	*/
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <CAN_transmit_heartbeat+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <CAN_transmit_heartbeat+0x70>)
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	22e1      	movs	r2, #225	; 0xe1
 8001858:	701a      	strb	r2, [r3, #0]
 	tx[ti][1] = node_id;								/* write node id of UEA					*/
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <CAN_transmit_heartbeat+0x6c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <CAN_transmit_heartbeat+0x74>)
 8001862:	7818      	ldrb	r0, [r3, #0]
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <CAN_transmit_heartbeat+0x70>)
 8001866:	460b      	mov	r3, r1
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	3301      	adds	r3, #1
 8001872:	4602      	mov	r2, r0
 8001874:	701a      	strb	r2, [r3, #0]
 	tx[ti][2] = nmtstate;								/* write command specifier				*/
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <CAN_transmit_heartbeat+0x6c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <CAN_transmit_heartbeat+0x78>)
 800187e:	7818      	ldrb	r0, [r3, #0]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <CAN_transmit_heartbeat+0x70>)
 8001882:	460b      	mov	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	3302      	adds	r3, #2
 800188e:	4602      	mov	r2, r0
 8001890:	701a      	strb	r2, [r3, #0]
 	can_transmit ();									/* transmit message						*/
 8001892:	f7ff fbcb 	bl	800102c <can_transmit>
 // 	TXB1SIDH 			= HEARTBEAT + (node_id >> 3);	// write ID bit 10 ... 3 for HEARTBEAT
 //	TXB1SIDL 			= node_id << 5;		// write ID bit  2 ... 0 for HEARTBEAT
 //	TXB1DLC	 			= 1;							// write data lenght code
 //	TXB1D0   			= nmtstate;				// write data uint8_t for HEARTBEAT
 }
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000028c 	.word	0x2000028c
 80018a0:	20000353 	.word	0x20000353
 80018a4:	200002fc 	.word	0x200002fc
 80018a8:	200005fb 	.word	0x200005fb
 80018ac:	20000890 	.word	0x20000890

080018b0 <check_for_call>:

//check if input/output is car call or hall call
uint8_t check_for_call (uint8_t value){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	switch (value)
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b91      	cmp	r3, #145	; 0x91
 80018be:	dc07      	bgt.n	80018d0 <check_for_call+0x20>
 80018c0:	2b8f      	cmp	r3, #143	; 0x8f
 80018c2:	da03      	bge.n	80018cc <check_for_call+0x1c>
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d001      	beq.n	80018cc <check_for_call+0x1c>
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d101      	bne.n	80018d0 <check_for_call+0x20>
			case (HALL_CALL)	 	  :						// standard hall call
			case (HALL_CALL_SPECIAL)  :				// special hall call
			case (HALL_CALL_ADVANCED) :			// advanced hall call
			case (HALL_CALL_EMERGENCY):			// emergency hall call
			case (CAR_CALL) 		  :
				return (1);			//car call
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <check_for_call+0x22>

			default:
				return (0);			//all other values
 80018d0:	2300      	movs	r3, #0
		}
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <buzzer_signal>:

//set or reset buzzer
void buzzer_signal (uint8_t state, uint8_t reason){
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	uint8_t buzzer_old;
	uint8_t i;
	buzzer_old = buzzer;			// save old state of buzzer
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <buzzer_signal+0x114>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	73bb      	strb	r3, [r7, #14]
	if (state)								// set buzzer
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <buzzer_signal+0x2c>
		buzzer |= reason;				// save reason for buzzer
 80018f8:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <buzzer_signal+0x114>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	4313      	orrs	r3, r2
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <buzzer_signal+0x114>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e00b      	b.n	8001920 <buzzer_signal+0x44>
	else
		buzzer &= ~reason;			// reset reason for buzzer
 8001908:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <buzzer_signal+0x114>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b25b      	sxtb	r3, r3
 8001916:	4013      	ands	r3, r2
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <buzzer_signal+0x114>)
 800191e:	701a      	strb	r2, [r3, #0]
	if ((buzzer  && (!buzzer_old)) || ((!buzzer) && buzzer_old))
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <buzzer_signal+0x114>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <buzzer_signal+0x52>
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <buzzer_signal+0x60>
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <buzzer_signal+0x114>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d157      	bne.n	80019e6 <buzzer_signal+0x10a>
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d054      	beq.n	80019e6 <buzzer_signal+0x10a>
		{
			for (i = 0; i < mInOut_Number; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e04c      	b.n	80019dc <buzzer_signal+0x100>
				{// search output parameter list
					if (outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC)
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <buzzer_signal+0x118>)
 8001946:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800194a:	2b0e      	cmp	r3, #14
 800194c:	d143      	bne.n	80019d6 <buzzer_signal+0xfa>
					if (outpar [i][IO_SUB_FUNC]   == BUZZER)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <buzzer_signal+0x118>)
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b80      	cmp	r3, #128	; 0x80
 800195a:	d13c      	bne.n	80019d6 <buzzer_signal+0xfa>
						{
							if (buzzer)
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <buzzer_signal+0x114>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01b      	beq.n	800199c <buzzer_signal+0xc0>
								{
						  		bit_set (out[i/8], (i%8));								// set output
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	08db      	lsrs	r3, r3, #3
 8001968:	b2d8      	uxtb	r0, r3
 800196a:	4602      	mov	r2, r0
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <buzzer_signal+0x11c>)
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b25a      	sxtb	r2, r3
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b25b      	sxtb	r3, r3
 8001986:	4602      	mov	r2, r0
 8001988:	b2d9      	uxtb	r1, r3
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <buzzer_signal+0x11c>)
 800198c:	5499      	strb	r1, [r3, r2]
						  		outpar [i][IO_STATE] = 1;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <buzzer_signal+0x118>)
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]
 800199a:	e01c      	b.n	80019d6 <buzzer_signal+0xfa>
						  	}
							else
								{
									bit_reset (out[i/8], (i%8));							// reset output
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	b2d8      	uxtb	r0, r3
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <buzzer_signal+0x11c>)
 80019a6:	5c9b      	ldrb	r3, [r3, r2]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b25a      	sxtb	r2, r3
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	4013      	ands	r3, r2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4602      	mov	r2, r0
 80019c4:	b2d9      	uxtb	r1, r3
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <buzzer_signal+0x11c>)
 80019c8:	5499      	strb	r1, [r3, r2]
						  		outpar [i][IO_STATE] = 0;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <buzzer_signal+0x118>)
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	2200      	movs	r2, #0
 80019d4:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	3301      	adds	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <buzzer_signal+0x120>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d3ad      	bcc.n	8001942 <buzzer_signal+0x66>
						  	}
						}
				}
		}
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	200001ec 	.word	0x200001ec
 80019f4:	2000060c 	.word	0x2000060c
 80019f8:	20000598 	.word	0x20000598
 80019fc:	20000189 	.word	0x20000189

08001a00 <set_output>:
uint8_t fire_alarm = 0;
uint8_t fire_evacuation = 0;
uint8_t fire_state = 0;

//set special outputs
void set_output (uint8_t *virt){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t iotype;
	uint8_t sub = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73bb      	strb	r3, [r7, #14]

	iotype = virt [IO_BASIC_FUNC];
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	737b      	strb	r3, [r7, #13]
	sub = virt [IO_SUB_FUNC];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	785b      	ldrb	r3, [r3, #1]
 8001a16:	73bb      	strb	r3, [r7, #14]
	if (check_for_call (iotype))
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff48 	bl	80018b0 <check_for_call>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 810a 	beq.w	8001c3c <set_output+0x23c>
		{// car call, hall call or priority call
			if (iotype == HALL_CALL)				// read floor number
 8001a28:	7b7b      	ldrb	r3, [r7, #13]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d103      	bne.n	8001a36 <set_output+0x36>
				i = virt [IO_FLOOR];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	78db      	ldrb	r3, [r3, #3]
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e002      	b.n	8001a3c <set_output+0x3c>
			else
				i = virt [IO_SUB_FUNC];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	73fb      	strb	r3, [r7, #15]
			if (i == 0xFF)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d153      	bne.n	8001aea <set_output+0xea>
				{// clear all calls
					for (i = 0; i < mInOut_Number; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e049      	b.n	8001adc <set_output+0xdc>
						{// search output parameter list
							if ((outpar [i][IO_BASIC_FUNC] == iotype) && (outpar [i][IO_ENABLE] == ENABLE))
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <set_output+0x230>)
 8001a4c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001a50:	7b7a      	ldrb	r2, [r7, #13]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d13f      	bne.n	8001ad6 <set_output+0xd6>
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	4a75      	ldr	r2, [pc, #468]	; (8001c30 <set_output+0x230>)
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	799b      	ldrb	r3, [r3, #6]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d138      	bne.n	8001ad6 <set_output+0xd6>
								{
									outpar [i][IO_ACK] &= ~virt [IO_LIFT];
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <set_output+0x230>)
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	79db      	ldrb	r3, [r3, #7]
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3302      	adds	r3, #2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	b2d1      	uxtb	r1, r2
 8001a84:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <set_output+0x230>)
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4a67      	ldr	r2, [pc, #412]	; (8001c30 <set_output+0x230>)
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d11c      	bne.n	8001ad6 <set_output+0xd6>
										{// all acknowledgements cancelled
				    					bit_reset (out[i/8], (i%8));				// clear output
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	b2d8      	uxtb	r0, r3
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <set_output+0x234>)
 8001aa6:	5c9b      	ldrb	r3, [r3, r2]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	b25a      	sxtb	r2, r3
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	b2d9      	uxtb	r1, r3
 8001ac6:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <set_output+0x234>)
 8001ac8:	5499      	strb	r1, [r3, r2]
				  						outpar [i][IO_STATE] = 0;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <set_output+0x230>)
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <set_output+0x238>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3b0      	bcc.n	8001a48 <set_output+0x48>
 8001ae6:	f000 bf51 	b.w	800298c <set_output+0xf8c>
								}
						}
				}
			else
				{// set or reset single call
					for (i = 0; i < mInOut_Number; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e097      	b.n	8001c20 <set_output+0x220>
						{// search output parameter list
							if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	494e      	ldr	r1, [pc, #312]	; (8001c30 <set_output+0x230>)
 8001af8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 808c 	bne.w	8001c1a <set_output+0x21a>
							if (virt [IO_SUB_FUNC]   == outpar [i][IO_SUB_FUNC])
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3301      	adds	r3, #1
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	4949      	ldr	r1, [pc, #292]	; (8001c30 <set_output+0x230>)
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	f040 8081 	bne.w	8001c1a <set_output+0x21a>
							if (virt [IO_FLOOR]      == outpar [i][IO_FLOOR])
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	4943      	ldr	r1, [pc, #268]	; (8001c30 <set_output+0x230>)
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	78db      	ldrb	r3, [r3, #3]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d176      	bne.n	8001c1a <set_output+0x21a>
							if (virt [IO_LIFT]       &  outpar [i][IO_LIFT])
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	493e      	ldr	r1, [pc, #248]	; (8001c30 <set_output+0x230>)
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d06a      	beq.n	8001c1a <set_output+0x21a>
							if (!((~virt [IO_DOOR])  & (outpar [i][IO_DOOR] & 0x0F)))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	4938      	ldr	r1, [pc, #224]	; (8001c30 <set_output+0x230>)
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d15c      	bne.n	8001c1a <set_output+0x21a>
							if (outpar [i][IO_ENABLE] == ENABLE)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <set_output+0x230>)
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	799b      	ldrb	r3, [r3, #6]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d155      	bne.n	8001c1a <set_output+0x21a>
								{// virtual output matches with physical
				  				if (virt [IO_STATE] & 0x01)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3305      	adds	r3, #5
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d02b      	beq.n	8001bd4 <set_output+0x1d4>
					  				{// set acknowledgement
											bit_set (out[i/8], i%8);				// set physical output
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	b2d8      	uxtb	r0, r3
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <set_output+0x234>)
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	b2d9      	uxtb	r1, r3
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <set_output+0x234>)
 8001ba4:	5499      	strb	r1, [r3, r2]
					  					outpar [i][IO_ACK] |= virt [IO_LIFT];
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <set_output+0x230>)
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	79d9      	ldrb	r1, [r3, #7]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <set_output+0x230>)
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	71da      	strb	r2, [r3, #7]
					  					outpar [i][IO_STATE] = 1;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <set_output+0x230>)
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	2201      	movs	r2, #1
 8001bd0:	715a      	strb	r2, [r3, #5]
 8001bd2:	e022      	b.n	8001c1a <set_output+0x21a>
					  				}
									else
										{// reset acknowledgement
					  					outpar [i][IO_ACK] = 0;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <set_output+0x230>)
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	71da      	strb	r2, [r3, #7]
											bit_reset (out[i/8], i%8);				// clear physical output
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	b2d8      	uxtb	r0, r3
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <set_output+0x234>)
 8001bea:	5c9b      	ldrb	r3, [r3, r2]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4013      	ands	r3, r2
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	4602      	mov	r2, r0
 8001c08:	b2d9      	uxtb	r1, r3
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <set_output+0x234>)
 8001c0c:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <set_output+0x230>)
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <set_output+0x238>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	f4ff af62 	bcc.w	8001af0 <set_output+0xf0>
 8001c2c:	f000 beae 	b.w	800298c <set_output+0xf8c>
 8001c30:	2000060c 	.word	0x2000060c
 8001c34:	20000598 	.word	0x20000598
 8001c38:	20000189 	.word	0x20000189
										}
								}
						}
				 }
		}
	else if (iotype == POSITION_INDICATOR)
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	2b40      	cmp	r3, #64	; 0x40
 8001c40:	f040 81a3 	bne.w	8001f8a <set_output+0x58a>
		{//��ʾ��Ϣ
			if (virt [IO_LIFT] == disp_lift)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3302      	adds	r3, #2
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <set_output+0x4c0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d179      	bne.n	8001d46 <set_output+0x346>
	  		{// display message is for this lift
					display [BUF_TEN] = virt [IO_DOOR];				// 1. digit; not CANopen compatible
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	791a      	ldrb	r2, [r3, #4]
 8001c56:	4b9b      	ldr	r3, [pc, #620]	; (8001ec4 <set_output+0x4c4>)
 8001c58:	701a      	strb	r2, [r3, #0]
					display [BUF_UNIT] = virt [IO_STATE];			// 2. digit; not CANopen compatible
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	795a      	ldrb	r2, [r3, #5]
 8001c5e:	4b99      	ldr	r3, [pc, #612]	; (8001ec4 <set_output+0x4c4>)
 8001c60:	705a      	strb	r2, [r3, #1]
					if(display [BUF_TEN] == 0x20)
 8001c62:	4b98      	ldr	r3, [pc, #608]	; (8001ec4 <set_output+0x4c4>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d102      	bne.n	8001c72 <set_output+0x272>
						display [BUF_TEN] = 0;
 8001c6c:	4b95      	ldr	r3, [pc, #596]	; (8001ec4 <set_output+0x4c4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
					if(display [BUF_UNIT] == 0x20)
 8001c72:	4b94      	ldr	r3, [pc, #592]	; (8001ec4 <set_output+0x4c4>)
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d102      	bne.n	8001c82 <set_output+0x282>
						display [BUF_UNIT] = 0;
 8001c7c:	4b91      	ldr	r3, [pc, #580]	; (8001ec4 <set_output+0x4c4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	705a      	strb	r2, [r3, #1]
					if (!display [BUF_UNIT] && !display [BUF_TEN])							// lift out of work
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <set_output+0x4c4>)
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <set_output+0x2a2>
 8001c8c:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <set_output+0x4c4>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <set_output+0x2a2>
					{
						display [BUF_TEN] = A_BETR;
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <set_output+0x4c4>)
 8001c98:	2226      	movs	r2, #38	; 0x26
 8001c9a:	701a      	strb	r2, [r3, #0]
						display [BUF_UNIT] = A_BETR;
 8001c9c:	4b89      	ldr	r3, [pc, #548]	; (8001ec4 <set_output+0x4c4>)
 8001c9e:	2226      	movs	r2, #38	; 0x26
 8001ca0:	705a      	strb	r2, [r3, #1]
					}
					if((display[BUF_UNIT] != 'J') && (display[BUF_TEN] != 'X'))
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <set_output+0x4c4>)
 8001ca4:	785b      	ldrb	r3, [r3, #1]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b4a      	cmp	r3, #74	; 0x4a
 8001caa:	d04c      	beq.n	8001d46 <set_output+0x346>
 8001cac:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <set_output+0x4c4>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b58      	cmp	r3, #88	; 0x58
 8001cb4:	d047      	beq.n	8001d46 <set_output+0x346>
					{
						if((virt[IO_SUB_FUNC]<56) &&(virt[IO_SUB_FUNC]))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b37      	cmp	r3, #55	; 0x37
 8001cbe:	d842      	bhi.n	8001d46 <set_output+0x346>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03d      	beq.n	8001d46 <set_output+0x346>
						{
							if((FloorName[virt[IO_SUB_FUNC]-1][0] !=display [BUF_TEN]) ||(FloorName[virt[IO_SUB_FUNC]-1][1] !=display [BUF_UNIT]))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	4a7d      	ldr	r2, [pc, #500]	; (8001ec8 <set_output+0x4c8>)
 8001cd4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001cd8:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <set_output+0x4c4>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d10c      	bne.n	8001cfc <set_output+0x2fc>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4a77      	ldr	r2, [pc, #476]	; (8001ec8 <set_output+0x4c8>)
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	785a      	ldrb	r2, [r3, #1]
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <set_output+0x4c4>)
 8001cf4:	785b      	ldrb	r3, [r3, #1]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d024      	beq.n	8001d46 <set_output+0x346>
							{
								if((display [BUF_TEN]!=A_BETR) &&(display [BUF_UNIT]!=A_BETR))
 8001cfc:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <set_output+0x4c4>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b26      	cmp	r3, #38	; 0x26
 8001d04:	d01f      	beq.n	8001d46 <set_output+0x346>
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <set_output+0x4c4>)
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b26      	cmp	r3, #38	; 0x26
 8001d0e:	d01a      	beq.n	8001d46 <set_output+0x346>
								{
									FloorName[virt[IO_SUB_FUNC]-1][0] =display [BUF_TEN];
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3301      	adds	r3, #1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <set_output+0x4c4>)
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	b2d1      	uxtb	r1, r2
 8001d1e:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <set_output+0x4c8>)
 8001d20:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
									FloorName[virt[IO_SUB_FUNC]-1][1] =display [BUF_UNIT];
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3301      	adds	r3, #1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <set_output+0x4c4>)
 8001d2e:	7852      	ldrb	r2, [r2, #1]
 8001d30:	b2d1      	uxtb	r1, r2
 8001d32:	4a65      	ldr	r2, [pc, #404]	; (8001ec8 <set_output+0x4c8>)
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	460a      	mov	r2, r1
 8001d3a:	705a      	strb	r2, [r3, #1]
									Flash_Write_Bytes(DATA_START_ADDRESS, (uint8_t *)&FloorName, sizeof(FloorName));
 8001d3c:	226e      	movs	r2, #110	; 0x6e
 8001d3e:	4962      	ldr	r1, [pc, #392]	; (8001ec8 <set_output+0x4c8>)
 8001d40:	4862      	ldr	r0, [pc, #392]	; (8001ecc <set_output+0x4cc>)
 8001d42:	f001 fecd 	bl	8003ae0 <Flash_Write_Bytes>
								}
							}
						}
					}
				}
			for (i = 0; i < mInOut_Number; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	e116      	b.n	8001f7a <set_output+0x57a>
				{// search output parameter list
					if ((outpar [i][IO_BASIC_FUNC] == POSITION_INDICATOR) &&
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	4a60      	ldr	r2, [pc, #384]	; (8001ed0 <set_output+0x4d0>)
 8001d50:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	f040 810c 	bne.w	8001f72 <set_output+0x572>
							(outpar [i][IO_LIFT] == virt [IO_LIFT]) &&
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	4a5c      	ldr	r2, [pc, #368]	; (8001ed0 <set_output+0x4d0>)
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	789a      	ldrb	r2, [r3, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3302      	adds	r3, #2
 8001d68:	781b      	ldrb	r3, [r3, #0]
					if ((outpar [i][IO_BASIC_FUNC] == POSITION_INDICATOR) &&
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	f040 8101 	bne.w	8001f72 <set_output+0x572>
							(outpar [i][IO_ENABLE] == ENABLE))
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4a57      	ldr	r2, [pc, #348]	; (8001ed0 <set_output+0x4d0>)
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	799b      	ldrb	r3, [r3, #6]
							(outpar [i][IO_LIFT] == virt [IO_LIFT]) &&
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f040 80f9 	bne.w	8001f72 <set_output+0x572>
						{// position ind. output for this lift
							switch (outpar [i][IO_SUB_FUNC])
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	4a53      	ldr	r2, [pc, #332]	; (8001ed0 <set_output+0x4d0>)
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	f000 80a4 	beq.w	8001ed8 <set_output+0x4d8>
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	f300 80ef 	bgt.w	8001f74 <set_output+0x574>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d002      	beq.n	8001da0 <set_output+0x3a0>
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d044      	beq.n	8001e28 <set_output+0x428>
 8001d9e:	e0e9      	b.n	8001f74 <set_output+0x574>
								{// type of output
									case (ONE_OF_N):					// 1 of n controlled display
										if (virt [IO_SUB_FUNC] == outpar [i][IO_FLOOR])
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	4949      	ldr	r1, [pc, #292]	; (8001ed0 <set_output+0x4d0>)
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	78db      	ldrb	r3, [r3, #3]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d11b      	bne.n	8001dec <set_output+0x3ec>
											{
												bit_set (out[i/8], i%8);		// set physical output
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	b2d8      	uxtb	r0, r3
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <set_output+0x4d4>)
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b25a      	sxtb	r2, r3
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	b2d9      	uxtb	r1, r3
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <set_output+0x4d4>)
 8001ddc:	5499      	strb	r1, [r3, r2]
												outpar [i][IO_STATE] = 1;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <set_output+0x4d0>)
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	2201      	movs	r2, #1
 8001de8:	715a      	strb	r2, [r3, #5]
					  				else
											{
							  				bit_reset (out[i/8], i%8);		// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001dea:	e0c3      	b.n	8001f74 <set_output+0x574>
							  				bit_reset (out[i/8], i%8);		// reset physical output
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	b2d8      	uxtb	r0, r3
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <set_output+0x4d4>)
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	b25a      	sxtb	r2, r3
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	4602      	mov	r2, r0
 8001e14:	b2d9      	uxtb	r1, r3
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <set_output+0x4d4>)
 8001e18:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <set_output+0x4d0>)
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	2200      	movs	r2, #0
 8001e24:	715a      	strb	r2, [r3, #5]
										break;
 8001e26:	e0a5      	b.n	8001f74 <set_output+0x574>

									case (BINARY):						// binary controlled display
										if ((virt [IO_SUB_FUNC] >> (outpar [i][IO_FLOOR] - 1)) & 0x01)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <set_output+0x4d0>)
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	fa41 f303 	asr.w	r3, r1, r3
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <set_output+0x482>
											{
												bit_set (out[i/8], i&8);			// set physical output
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	b2d8      	uxtb	r0, r3
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <set_output+0x4d4>)
 8001e52:	5c9b      	ldrb	r3, [r3, r2]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	b25a      	sxtb	r2, r3
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	b2d9      	uxtb	r1, r3
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <set_output+0x4d4>)
 8001e72:	5499      	strb	r1, [r3, r2]
					 							outpar [i][IO_STATE] = 1;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <set_output+0x4d0>)
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	715a      	strb	r2, [r3, #5]
					  				else
											{
							  				bit_reset (out[i/8], i%8);			// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001e80:	e078      	b.n	8001f74 <set_output+0x574>
							  				bit_reset (out[i/8], i%8);			// reset physical output
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	b2d8      	uxtb	r0, r3
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <set_output+0x4d4>)
 8001e8c:	5c9b      	ldrb	r3, [r3, r2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <set_output+0x4d4>)
 8001eae:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <set_output+0x4d0>)
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	715a      	strb	r2, [r3, #5]
										break;
 8001ebc:	e05a      	b.n	8001f74 <set_output+0x574>
 8001ebe:	bf00      	nop
 8001ec0:	20000994 	.word	0x20000994
 8001ec4:	20000364 	.word	0x20000364
 8001ec8:	20000204 	.word	0x20000204
 8001ecc:	0801fc00 	.word	0x0801fc00
 8001ed0:	2000060c 	.word	0x2000060c
 8001ed4:	20000598 	.word	0x20000598

									case (GRAY):						// gray code controlled display
										if ((graycode [virt [IO_SUB_FUNC]] >> (outpar [i][IO_FLOOR] - 1)) & 0x01)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3301      	adds	r3, #1
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4ba2      	ldr	r3, [pc, #648]	; (800216c <set_output+0x76c>)
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	4aa1      	ldr	r2, [pc, #644]	; (8002170 <set_output+0x770>)
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	78db      	ldrb	r3, [r3, #3]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	fa41 f303 	asr.w	r3, r1, r3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01b      	beq.n	8001f36 <set_output+0x536>
											{
												bit_set (out[i/8], i%8);			// set physical output
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	b2d8      	uxtb	r0, r3
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b9b      	ldr	r3, [pc, #620]	; (8002174 <set_output+0x774>)
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	b25a      	sxtb	r2, r3
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	4602      	mov	r2, r0
 8001f22:	b2d9      	uxtb	r1, r3
 8001f24:	4b93      	ldr	r3, [pc, #588]	; (8002174 <set_output+0x774>)
 8001f26:	5499      	strb	r1, [r3, r2]
												outpar [i][IO_STATE] = 1;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	4a91      	ldr	r2, [pc, #580]	; (8002170 <set_output+0x770>)
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	2201      	movs	r2, #1
 8001f32:	715a      	strb	r2, [r3, #5]
						  			else
											{
							  				bit_reset (out[i/8], i%8);			// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001f34:	e01e      	b.n	8001f74 <set_output+0x574>
							  				bit_reset (out[i/8], i%8);			// reset physical output
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	b2d8      	uxtb	r0, r3
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <set_output+0x774>)
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	b25b      	sxtb	r3, r3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	b2d9      	uxtb	r1, r3
 8001f60:	4b84      	ldr	r3, [pc, #528]	; (8002174 <set_output+0x774>)
 8001f62:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	4a82      	ldr	r2, [pc, #520]	; (8002170 <set_output+0x770>)
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	715a      	strb	r2, [r3, #5]
										break;
 8001f70:	e000      	b.n	8001f74 <set_output+0x574>
								}
						}
 8001f72:	bf00      	nop
			for (i = 0; i < mInOut_Number; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	4b7f      	ldr	r3, [pc, #508]	; (8002178 <set_output+0x778>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f4ff aee3 	bcc.w	8001d4c <set_output+0x34c>
 8001f86:	f000 bd01 	b.w	800298c <set_output+0xf8c>
				}
		}
	else if ((iotype == DIRECTION_IND) && (virt [IO_LIFT] == disp_lift))
 8001f8a:	7b7b      	ldrb	r3, [r7, #13]
 8001f8c:	2b42      	cmp	r3, #66	; 0x42
 8001f8e:	d144      	bne.n	800201a <set_output+0x61a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3302      	adds	r3, #2
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b79      	ldr	r3, [pc, #484]	; (800217c <set_output+0x77c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d13d      	bne.n	800201a <set_output+0x61a>
		{//�����
			if (!virt [IO_STATE] & 0x01)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3305      	adds	r3, #5
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <set_output+0x5ba>
				display[BUF_ARROW] &= 0xF0;
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <set_output+0x780>)
 8001faa:	789b      	ldrb	r3, [r3, #2]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f023 030f 	bic.w	r3, r3, #15
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b72      	ldr	r3, [pc, #456]	; (8002180 <set_output+0x780>)
 8001fb6:	709a      	strb	r2, [r3, #2]
 8001fb8:	e01d      	b.n	8001ff6 <set_output+0x5f6>
			else
				display[BUF_ARROW] = (display[BUF_ARROW] & 0xF0) | ((virt [IO_SUB_FUNC] & 0x03) | ((virt [IO_SUB_FUNC] >> 2) & 0x0C));
 8001fba:	4b71      	ldr	r3, [pc, #452]	; (8002180 <set_output+0x780>)
 8001fbc:	789b      	ldrb	r3, [r3, #2]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	f023 030f 	bic.w	r3, r3, #15
 8001fc6:	b25a      	sxtb	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	b259      	sxtb	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <set_output+0x780>)
 8001ff4:	709a      	strb	r2, [r3, #2]
			if ((display[BUF_ARROW] & 0x03) > 2)
 8001ff6:	4b62      	ldr	r3, [pc, #392]	; (8002180 <set_output+0x780>)
 8001ff8:	789b      	ldrb	r3, [r3, #2]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	f340 84c3 	ble.w	800298c <set_output+0xf8c>
				display[BUF_ARROW] &= 0xF0;
 8002006:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <set_output+0x780>)
 8002008:	789b      	ldrb	r3, [r3, #2]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f023 030f 	bic.w	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b5b      	ldr	r3, [pc, #364]	; (8002180 <set_output+0x780>)
 8002014:	709a      	strb	r2, [r3, #2]
			if ((display[BUF_ARROW] & 0x03) > 2)
 8002016:	f000 bcb9 	b.w	800298c <set_output+0xf8c>
		}
	else if((iotype == LIGHT_FUNC) &&
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	2b49      	cmp	r3, #73	; 0x49
 800201e:	f040 80d8 	bne.w	80021d2 <set_output+0x7d2>
			(sub & (HALL_LANTERN_UP | HALL_LANTERN_DN | DIRECTION_IND_UP | DIRECTION_IND_DN)))
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	f003 030f 	and.w	r3, r3, #15
	else if((iotype == LIGHT_FUNC) &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80d2 	beq.w	80021d2 <set_output+0x7d2>
		{			
			for (i = 0; i < mInOut_Number; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e0c7      	b.n	80021c4 <set_output+0x7c4>
				{// search output parameter list
					if ((virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC]) &&
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	494d      	ldr	r1, [pc, #308]	; (8002170 <set_output+0x770>)
 800203c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 80bc 	bne.w	80021be <set_output+0x7be>
							(virt [IO_LIFT]  	  == outpar [i][IO_LIFT]) &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3302      	adds	r3, #2
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4948      	ldr	r1, [pc, #288]	; (8002170 <set_output+0x770>)
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	789b      	ldrb	r3, [r3, #2]
					if ((virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC]) &&
 8002056:	429a      	cmp	r2, r3
 8002058:	f040 80b1 	bne.w	80021be <set_output+0x7be>
							(outpar [i][IO_ENABLE] == ENABLE))
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	4a44      	ldr	r2, [pc, #272]	; (8002170 <set_output+0x770>)
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	799b      	ldrb	r3, [r3, #6]
							(virt [IO_LIFT]  	  == outpar [i][IO_LIFT]) &&
 8002066:	2b01      	cmp	r3, #1
 8002068:	f040 80a9 	bne.w	80021be <set_output+0x7be>
						{
							if (((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x0F) || (!outpar [i][IO_SUB_FUNC])) &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	493e      	ldr	r1, [pc, #248]	; (8002170 <set_output+0x770>)
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	4013      	ands	r3, r2
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <set_output+0x696>
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4a39      	ldr	r2, [pc, #228]	; (8002170 <set_output+0x770>)
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d176      	bne.n	8002184 <set_output+0x784>
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3303      	adds	r3, #3
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4934      	ldr	r1, [pc, #208]	; (8002170 <set_output+0x770>)
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	78db      	ldrb	r3, [r3, #3]
							if (((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x0F) || (!outpar [i][IO_SUB_FUNC])) &&
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d00b      	beq.n	80020c2 <set_output+0x6c2>
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3303      	adds	r3, #3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2bff      	cmp	r3, #255	; 0xff
 80020b2:	d006      	beq.n	80020c2 <set_output+0x6c2>
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <set_output+0x770>)
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d160      	bne.n	8002184 <set_output+0x784>
								  ((virt [IO_DOOR]   & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR])))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	4929      	ldr	r1, [pc, #164]	; (8002170 <set_output+0x770>)
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	4013      	ands	r3, r2
 80020d4:	b2db      	uxtb	r3, r3
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <set_output+0x6e8>
								  ((virt [IO_DOOR]   & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR])))
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <set_output+0x770>)
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d14d      	bne.n	8002184 <set_output+0x784>
								{
									if (virt [IO_STATE] & 0x01)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3305      	adds	r3, #5
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01b      	beq.n	800212e <set_output+0x72e>
										{
											bit_set (out[i/8], i % 8);							//set physical output
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	b2d8      	uxtb	r0, r3
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <set_output+0x774>)
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	b25a      	sxtb	r2, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	b25b      	sxtb	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b25b      	sxtb	r3, r3
 8002118:	4602      	mov	r2, r0
 800211a:	b2d9      	uxtb	r1, r3
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <set_output+0x774>)
 800211e:	5499      	strb	r1, [r3, r2]
					  		 			outpar [i][IO_STATE] = 1;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <set_output+0x770>)
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	2201      	movs	r2, #1
 800212a:	715a      	strb	r2, [r3, #5]
									if (virt [IO_STATE] & 0x01)
 800212c:	e047      	b.n	80021be <set_output+0x7be>
										}
									else
										{
											bit_reset (out[i/8], i % 8);						//reset physical output
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	4602      	mov	r2, r0
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <set_output+0x774>)
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	b25a      	sxtb	r2, r3
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	b25b      	sxtb	r3, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	b25b      	sxtb	r3, r3
 8002150:	4013      	ands	r3, r2
 8002152:	b25b      	sxtb	r3, r3
 8002154:	4602      	mov	r2, r0
 8002156:	b2d9      	uxtb	r1, r3
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <set_output+0x774>)
 800215a:	5499      	strb	r1, [r3, r2]
					    				outpar [i][IO_STATE] = 0;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <set_output+0x770>)
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	2200      	movs	r2, #0
 8002166:	715a      	strb	r2, [r3, #5]
									if (virt [IO_STATE] & 0x01)
 8002168:	e029      	b.n	80021be <set_output+0x7be>
 800216a:	bf00      	nop
 800216c:	08007e30 	.word	0x08007e30
 8002170:	2000060c 	.word	0x2000060c
 8002174:	20000598 	.word	0x20000598
 8002178:	20000189 	.word	0x20000189
 800217c:	20000994 	.word	0x20000994
 8002180:	20000364 	.word	0x20000364
										}
							 	}
							else
								{// reset all not matching indications
									bit_reset (out[i/8], i % 8);								//reset physical output
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	b2d8      	uxtb	r0, r3
 800218a:	4602      	mov	r2, r0
 800218c:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <set_output+0x9a0>)
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	b25a      	sxtb	r2, r3
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	4013      	ands	r3, r2
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	4602      	mov	r2, r0
 80021ac:	b2d9      	uxtb	r1, r3
 80021ae:	4b7c      	ldr	r3, [pc, #496]	; (80023a0 <set_output+0x9a0>)
 80021b0:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_STATE] = 0;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	4a7b      	ldr	r2, [pc, #492]	; (80023a4 <set_output+0x9a4>)
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	3301      	adds	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <set_output+0x9a8>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	f4ff af32 	bcc.w	8002034 <set_output+0x634>
	else if((iotype == LIGHT_FUNC) &&
 80021d0:	e3dc      	b.n	800298c <set_output+0xf8c>
								}
						}
				}
		}
	else if (iotype == SPEAKER_BUZ)
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	2b4c      	cmp	r3, #76	; 0x4c
 80021d6:	d153      	bne.n	8002280 <set_output+0x880>
		{//��վ��
			switch(sub)
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d01c      	beq.n	8002218 <set_output+0x818>
 80021de:	2b10      	cmp	r3, #16
 80021e0:	f300 83d4 	bgt.w	800298c <set_output+0xf8c>
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d002      	beq.n	80021ee <set_output+0x7ee>
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	f040 83cf 	bne.w	800298c <set_output+0xf8c>
				{
					case BUZZER_FIRE:
					case BUZZER_LEVELING:						
						if(virt[IO_STATE])					
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3305      	adds	r3, #5
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <set_output+0x808>
							buzzer |= BUZ_WORKING;
 80021f8:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <set_output+0x9ac>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <set_output+0x9ac>)
 8002204:	701a      	strb	r2, [r3, #0]
						else
							buzzer &= ~BUZ_WORKING;
						break;
 8002206:	e3c1      	b.n	800298c <set_output+0xf8c>
							buzzer &= ~BUZ_WORKING;
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <set_output+0x9ac>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b66      	ldr	r3, [pc, #408]	; (80023ac <set_output+0x9ac>)
 8002214:	701a      	strb	r2, [r3, #0]
						break;
 8002216:	e3b9      	b.n	800298c <set_output+0xf8c>

					case BUZZER_NORMAL:
						if(virt[IO_STATE])		
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3305      	adds	r3, #5
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d026      	beq.n	8002270 <set_output+0x870>
							{
								if(virt[IO_DOOR] & BIT_0)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01b      	beq.n	8002268 <set_output+0x868>
									{
										buzzer |= (BUZ_WORKING | BUZ_PULSE);
 8002230:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <set_output+0x9ac>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f043 0303 	orr.w	r3, r3, #3
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <set_output+0x9ac>)
 800223c:	701a      	strb	r2, [r3, #0]
										bFunc.buz_state = true;
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <set_output+0x9b0>)
 8002240:	7813      	ldrb	r3, [r2, #0]
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	7013      	strb	r3, [r2, #0]
										att_alarm_timer = virt[IO_FLOOR];
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	78da      	ldrb	r2, [r3, #3]
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <set_output+0x9b4>)
 800224e:	701a      	strb	r2, [r3, #0]
										buz_alarm_timer = att_alarm_timer;
 8002250:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <set_output+0x9b4>)
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <set_output+0x9b8>)
 8002256:	701a      	strb	r2, [r3, #0]
										buz_alarm_totaltimer = virt[IO_DOOR] >> 1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b56      	ldr	r3, [pc, #344]	; (80023bc <set_output+0x9bc>)
 8002264:	701a      	strb	r2, [r3, #0]
									buzzer = BUZ_WORKING;
							}
						else
							buzzer &= ~(BUZ_WORKING | BUZ_PULSE);

						break;
 8002266:	e391      	b.n	800298c <set_output+0xf8c>
									buzzer = BUZ_WORKING;
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <set_output+0x9ac>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
						break;
 800226e:	e38d      	b.n	800298c <set_output+0xf8c>
							buzzer &= ~(BUZ_WORKING | BUZ_PULSE);
 8002270:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <set_output+0x9ac>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f023 0303 	bic.w	r3, r3, #3
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <set_output+0x9ac>)
 800227c:	701a      	strb	r2, [r3, #0]
						break;
 800227e:	e385      	b.n	800298c <set_output+0xf8c>
				}
		}
	else if (iotype == ARRIVAL_INDICATION)
 8002280:	7b7b      	ldrb	r3, [r7, #13]
 8002282:	2b44      	cmp	r3, #68	; 0x44
 8002284:	f040 809c 	bne.w	80023c0 <set_output+0x9c0>
		{//��վ��
			for (i = 0; i < mInOut_Number; i++)
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e081      	b.n	8002392 <set_output+0x992>
				{// search output parameter list
					if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4943      	ldr	r1, [pc, #268]	; (80023a4 <set_output+0x9a4>)
 8002296:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800229a:	429a      	cmp	r2, r3
 800229c:	d176      	bne.n	800238c <set_output+0x98c>
					if ((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x03) || (!outpar [i][IO_SUB_FUNC]))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	493f      	ldr	r1, [pc, #252]	; (80023a4 <set_output+0x9a4>)
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	4013      	ands	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <set_output+0x8c8>
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <set_output+0x9a4>)
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d161      	bne.n	800238c <set_output+0x98c>
					if ((virt [IO_FLOOR]     == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR]))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3303      	adds	r3, #3
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	4934      	ldr	r1, [pc, #208]	; (80023a4 <set_output+0x9a4>)
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	78db      	ldrb	r3, [r3, #3]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d00b      	beq.n	80022f4 <set_output+0x8f4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3303      	adds	r3, #3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2bff      	cmp	r3, #255	; 0xff
 80022e4:	d006      	beq.n	80022f4 <set_output+0x8f4>
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <set_output+0x9a4>)
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	78db      	ldrb	r3, [r3, #3]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d14b      	bne.n	800238c <set_output+0x98c>
					if (virt [IO_LIFT]       == outpar [i][IO_LIFT])
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3302      	adds	r3, #2
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4929      	ldr	r1, [pc, #164]	; (80023a4 <set_output+0x9a4>)
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	789b      	ldrb	r3, [r3, #2]
 8002304:	429a      	cmp	r2, r3
 8002306:	d141      	bne.n	800238c <set_output+0x98c>
					if ((virt [IO_DOOR]       & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	4924      	ldr	r1, [pc, #144]	; (80023a4 <set_output+0x9a4>)
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	4013      	ands	r3, r2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <set_output+0x92e>
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <set_output+0x9a4>)
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	791b      	ldrb	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d12e      	bne.n	800238c <set_output+0x98c>
					if (outpar [i][IO_ENABLE] == ENABLE)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <set_output+0x9a4>)
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	799b      	ldrb	r3, [r3, #6]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d127      	bne.n	800238c <set_output+0x98c>
						{
							if (virt [IO_STATE] & 0x01)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3305      	adds	r3, #5
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d020      	beq.n	800238c <set_output+0x98c>
								{
									bit_set (out[i/8], i%8);							// set physical output
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	b2d8      	uxtb	r0, r3
 8002350:	4602      	mov	r2, r0
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <set_output+0x9a0>)
 8002354:	5c9b      	ldrb	r3, [r3, r2]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	b25a      	sxtb	r2, r3
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	b25b      	sxtb	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4602      	mov	r2, r0
 800236e:	b2d9      	uxtb	r1, r3
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <set_output+0x9a0>)
 8002372:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_ACK] = 20;			// set on timer 20 * 500 ms = 10 s	(��վ�Ƴ�����20s)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <set_output+0x9a4>)
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	2214      	movs	r2, #20
 800237e:	71da      	strb	r2, [r3, #7]
									outpar [i][IO_STATE] = 1;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <set_output+0x9a4>)
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	2201      	movs	r2, #1
 800238a:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	3301      	adds	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <set_output+0x9a8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	429a      	cmp	r2, r3
 800239a:	f4ff af78 	bcc.w	800228e <set_output+0x88e>
 800239e:	e2f5      	b.n	800298c <set_output+0xf8c>
 80023a0:	20000598 	.word	0x20000598
 80023a4:	2000060c 	.word	0x2000060c
 80023a8:	20000189 	.word	0x20000189
 80023ac:	200001ec 	.word	0x200001ec
 80023b0:	20000930 	.word	0x20000930
 80023b4:	200001f5 	.word	0x200001f5
 80023b8:	200001f6 	.word	0x200001f6
 80023bc:	200001f7 	.word	0x200001f7
								}
						}
				}
		}
	else if((iotype == SPECIAL_FUNC) || (iotype == FIRE_FUNCTION))
 80023c0:	7b7b      	ldrb	r3, [r7, #13]
 80023c2:	2b0e      	cmp	r3, #14
 80023c4:	d003      	beq.n	80023ce <set_output+0x9ce>
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	2b14      	cmp	r3, #20
 80023ca:	f040 8220 	bne.w	800280e <set_output+0xe0e>
		{//���⹦��
			switch(sub)
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d061      	beq.n	8002498 <set_output+0xa98>
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	f2c0 8139 	blt.w	800264c <set_output+0xc4c>
 80023da:	2bae      	cmp	r3, #174	; 0xae
 80023dc:	f300 8136 	bgt.w	800264c <set_output+0xc4c>
 80023e0:	2b86      	cmp	r3, #134	; 0x86
 80023e2:	f2c0 8133 	blt.w	800264c <set_output+0xc4c>
 80023e6:	3b86      	subs	r3, #134	; 0x86
 80023e8:	2b28      	cmp	r3, #40	; 0x28
 80023ea:	f200 812f 	bhi.w	800264c <set_output+0xc4c>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <set_output+0x9f4>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800261f 	.word	0x0800261f
 80023f8:	08002511 	.word	0x08002511
 80023fc:	08002567 	.word	0x08002567
 8002400:	0800264d 	.word	0x0800264d
 8002404:	0800264d 	.word	0x0800264d
 8002408:	0800264d 	.word	0x0800264d
 800240c:	0800264d 	.word	0x0800264d
 8002410:	0800264d 	.word	0x0800264d
 8002414:	0800264d 	.word	0x0800264d
 8002418:	08002567 	.word	0x08002567
 800241c:	08002567 	.word	0x08002567
 8002420:	0800264d 	.word	0x0800264d
 8002424:	0800264d 	.word	0x0800264d
 8002428:	0800264d 	.word	0x0800264d
 800242c:	0800264d 	.word	0x0800264d
 8002430:	0800264d 	.word	0x0800264d
 8002434:	0800264d 	.word	0x0800264d
 8002438:	0800264d 	.word	0x0800264d
 800243c:	0800264d 	.word	0x0800264d
 8002440:	0800264d 	.word	0x0800264d
 8002444:	0800264d 	.word	0x0800264d
 8002448:	0800264d 	.word	0x0800264d
 800244c:	0800264d 	.word	0x0800264d
 8002450:	0800264d 	.word	0x0800264d
 8002454:	0800264d 	.word	0x0800264d
 8002458:	0800264d 	.word	0x0800264d
 800245c:	0800264d 	.word	0x0800264d
 8002460:	0800264d 	.word	0x0800264d
 8002464:	0800264d 	.word	0x0800264d
 8002468:	0800264d 	.word	0x0800264d
 800246c:	0800264d 	.word	0x0800264d
 8002470:	0800264d 	.word	0x0800264d
 8002474:	0800264d 	.word	0x0800264d
 8002478:	0800264d 	.word	0x0800264d
 800247c:	080024c7 	.word	0x080024c7
 8002480:	0800264d 	.word	0x0800264d
 8002484:	0800264d 	.word	0x0800264d
 8002488:	0800264d 	.word	0x0800264d
 800248c:	0800264d 	.word	0x0800264d
 8002490:	080025d5 	.word	0x080025d5
 8002494:	08002511 	.word	0x08002511
				{
					case OUT_OF_ORDER:
						if(virt[IO_STATE])
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3305      	adds	r3, #5
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <set_output+0xab4>
							display[BUF_ARROW] |= OUT_OF_SERVICE;
 80024a2:	4b78      	ldr	r3, [pc, #480]	; (8002684 <set_output+0xc84>)
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b75      	ldr	r3, [pc, #468]	; (8002684 <set_output+0xc84>)
 80024b0:	709a      	strb	r2, [r3, #2]
						else
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
						break;
 80024b2:	e1ab      	b.n	800280c <set_output+0xe0c>
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
 80024b4:	4b73      	ldr	r3, [pc, #460]	; (8002684 <set_output+0xc84>)
 80024b6:	789b      	ldrb	r3, [r3, #2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b70      	ldr	r3, [pc, #448]	; (8002684 <set_output+0xc84>)
 80024c2:	709a      	strb	r2, [r3, #2]
						break;
 80024c4:	e1a2      	b.n	800280c <set_output+0xe0c>

					case UPS_EVAC_READY_SPEAKER:
						if(virt[IO_STATE])
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3305      	adds	r3, #5
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00f      	beq.n	80024f0 <set_output+0xaf0>
							{
								bTime.Time_alarm_fg = 1;
 80024d0:	4a6d      	ldr	r2, [pc, #436]	; (8002688 <set_output+0xc88>)
 80024d2:	7813      	ldrb	r3, [r2, #0]
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 10;
 80024da:	4b6c      	ldr	r3, [pc, #432]	; (800268c <set_output+0xc8c>)
 80024dc:	220a      	movs	r2, #10
 80024de:	701a      	strb	r2, [r3, #0]
								buzzer |= BUZ_WORKING;
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <set_output+0xc90>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b69      	ldr	r3, [pc, #420]	; (8002690 <set_output+0xc90>)
 80024ec:	701a      	strb	r2, [r3, #0]
							{
								bTime.Time_alarm_fg = 0;
								att_alarm_timer = 0;
								buzzer &= ~BUZ_WORKING;
							}
						break;
 80024ee:	e18d      	b.n	800280c <set_output+0xe0c>
								bTime.Time_alarm_fg = 0;
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <set_output+0xc88>)
 80024f2:	7813      	ldrb	r3, [r2, #0]
 80024f4:	f36f 1345 	bfc	r3, #5, #1
 80024f8:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 0;
 80024fa:	4b64      	ldr	r3, [pc, #400]	; (800268c <set_output+0xc8c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
								buzzer &= ~BUZ_WORKING;
 8002500:	4b63      	ldr	r3, [pc, #396]	; (8002690 <set_output+0xc90>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b61      	ldr	r3, [pc, #388]	; (8002690 <set_output+0xc90>)
 800250c:	701a      	strb	r2, [r3, #0]
						break;
 800250e:	e17d      	b.n	800280c <set_output+0xe0c>
						
					case OVER_LOAD_STATE:					
					case DOOR_CONN_ALARM:
						if(virt[IO_STATE])
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3305      	adds	r3, #5
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <set_output+0xb40>
							{
								if(sub == OVER_LOAD_STATE)
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	2b87      	cmp	r3, #135	; 0x87
 800251e:	d107      	bne.n	8002530 <set_output+0xb30>
									display[BUF_ARROW] |= OVER_LOAD;
 8002520:	4b58      	ldr	r3, [pc, #352]	; (8002684 <set_output+0xc84>)
 8002522:	789b      	ldrb	r3, [r3, #2]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0310 	orr.w	r3, r3, #16
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b55      	ldr	r3, [pc, #340]	; (8002684 <set_output+0xc84>)
 800252e:	709a      	strb	r2, [r3, #2]
								buzzer |= BUZ_WORKING;
 8002530:	4b57      	ldr	r3, [pc, #348]	; (8002690 <set_output+0xc90>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <set_output+0xc90>)
 800253c:	701a      	strb	r2, [r3, #0]
							{
								if(sub == OVER_LOAD_STATE)
									display[BUF_ARROW] &= ~OVER_LOAD;
								buzzer &= ~BUZ_WORKING;
							}
						break;
 800253e:	e165      	b.n	800280c <set_output+0xe0c>
								if(sub == OVER_LOAD_STATE)
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	2b87      	cmp	r3, #135	; 0x87
 8002544:	d107      	bne.n	8002556 <set_output+0xb56>
									display[BUF_ARROW] &= ~OVER_LOAD;
 8002546:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <set_output+0xc84>)
 8002548:	789b      	ldrb	r3, [r3, #2]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f023 0310 	bic.w	r3, r3, #16
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <set_output+0xc84>)
 8002554:	709a      	strb	r2, [r3, #2]
								buzzer &= ~BUZ_WORKING;
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <set_output+0xc90>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <set_output+0xc90>)
 8002562:	701a      	strb	r2, [r3, #0]
						break;
 8002564:	e152      	b.n	800280c <set_output+0xe0c>
						
					case FIRE_ALARM:
					case FIRE_EVACUATION:
					case FIRE_STATE:
						switch(sub)
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	2b90      	cmp	r3, #144	; 0x90
 800256a:	d006      	beq.n	800257a <set_output+0xb7a>
 800256c:	2b90      	cmp	r3, #144	; 0x90
 800256e:	dc13      	bgt.n	8002598 <set_output+0xb98>
 8002570:	2b88      	cmp	r3, #136	; 0x88
 8002572:	d00c      	beq.n	800258e <set_output+0xb8e>
 8002574:	2b8f      	cmp	r3, #143	; 0x8f
 8002576:	d005      	beq.n	8002584 <set_output+0xb84>
 8002578:	e00e      	b.n	8002598 <set_output+0xb98>
							{
								case FIRE_ALARM:
									fire_alarm = virt[IO_STATE];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	795a      	ldrb	r2, [r3, #5]
 800257e:	4b45      	ldr	r3, [pc, #276]	; (8002694 <set_output+0xc94>)
 8002580:	701a      	strb	r2, [r3, #0]
									break;
 8002582:	e009      	b.n	8002598 <set_output+0xb98>
								case FIRE_EVACUATION:
									fire_evacuation = virt[IO_STATE];
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	795a      	ldrb	r2, [r3, #5]
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <set_output+0xc98>)
 800258a:	701a      	strb	r2, [r3, #0]
									break;
 800258c:	e004      	b.n	8002598 <set_output+0xb98>
								case FIRE_STATE:
									fire_state = virt[IO_STATE];
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	795a      	ldrb	r2, [r3, #5]
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <set_output+0xc9c>)
 8002594:	701a      	strb	r2, [r3, #0]
									break;
 8002596:	bf00      	nop
							}
						if(fire_alarm | fire_evacuation | fire_state)
 8002598:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <set_output+0xc94>)
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <set_output+0xc98>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b3d      	ldr	r3, [pc, #244]	; (800269c <set_output+0xc9c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <set_output+0xbc2>
							display[BUF_ARROW] |= FIRE_CASE;
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <set_output+0xc84>)
 80025b2:	789b      	ldrb	r3, [r3, #2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0320 	orr.w	r3, r3, #32
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <set_output+0xc84>)
 80025be:	709a      	strb	r2, [r3, #2]
						else
							display[BUF_ARROW] &= ~FIRE_CASE;
						break;
 80025c0:	e124      	b.n	800280c <set_output+0xe0c>
							display[BUF_ARROW] &= ~FIRE_CASE;
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <set_output+0xc84>)
 80025c4:	789b      	ldrb	r3, [r3, #2]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f023 0320 	bic.w	r3, r3, #32
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <set_output+0xc84>)
 80025d0:	709a      	strb	r2, [r3, #2]
						break;
 80025d2:	e11b      	b.n	800280c <set_output+0xe0c>

					case ATT_BUZ_ALARM:				
						if(virt[IO_STATE])
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3305      	adds	r3, #5
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00f      	beq.n	80025fe <set_output+0xbfe>
							{						
								buzzer |= BUZ_WORKING;
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <set_output+0xc90>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <set_output+0xc90>)
 80025ea:	701a      	strb	r2, [r3, #0]
								bTime.Time_alarm_fg = 1;
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <set_output+0xc88>)
 80025ee:	7813      	ldrb	r3, [r2, #0]
 80025f0:	f043 0320 	orr.w	r3, r3, #32
 80025f4:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 3;
 80025f6:	4b25      	ldr	r3, [pc, #148]	; (800268c <set_output+0xc8c>)
 80025f8:	2203      	movs	r2, #3
 80025fa:	701a      	strb	r2, [r3, #0]
							{
								buzzer &= ~BUZ_WORKING;
								bTime.Time_alarm_fg = 0;
								att_alarm_timer = 0;
							}
						break;					
 80025fc:	e106      	b.n	800280c <set_output+0xe0c>
								buzzer &= ~BUZ_WORKING;
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <set_output+0xc90>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <set_output+0xc90>)
 800260a:	701a      	strb	r2, [r3, #0]
								bTime.Time_alarm_fg = 0;
 800260c:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <set_output+0xc88>)
 800260e:	7813      	ldrb	r3, [r2, #0]
 8002610:	f36f 1345 	bfc	r3, #5, #1
 8002614:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 0;
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <set_output+0xc8c>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
						break;					
 800261c:	e0f6      	b.n	800280c <set_output+0xe0c>
						
					case FULL_LOAD_STATE: 					
						if(virt[IO_STATE])
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3305      	adds	r3, #5
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <set_output+0xc3a>
							display[BUF_MESSAGE] |= FULLLOAD;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <set_output+0xc84>)
 800262a:	78db      	ldrb	r3, [r3, #3]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002632:	b2da      	uxtb	r2, r3
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <set_output+0xc84>)
 8002636:	70da      	strb	r2, [r3, #3]
						else
							display[BUF_MESSAGE] &= ~FULLLOAD;
						break;		
 8002638:	e0e8      	b.n	800280c <set_output+0xe0c>
							display[BUF_MESSAGE] &= ~FULLLOAD;
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <set_output+0xc84>)
 800263c:	78db      	ldrb	r3, [r3, #3]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <set_output+0xc84>)
 8002648:	70da      	strb	r2, [r3, #3]
						break;		
 800264a:	e0df      	b.n	800280c <set_output+0xe0c>

					default:
						if(sub == DOOR_STOP)
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	2ba1      	cmp	r3, #161	; 0xa1
 8002650:	d115      	bne.n	800267e <set_output+0xc7e>
							{
								if(virt[IO_STATE])
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3305      	adds	r3, #5
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <set_output+0xc6e>
									display[BUF_ARROW] |= IN_USE;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <set_output+0xc84>)
 800265e:	789b      	ldrb	r3, [r3, #2]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002666:	b2da      	uxtb	r2, r3
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <set_output+0xc84>)
 800266a:	709a      	strb	r2, [r3, #2]
 800266c:	e007      	b.n	800267e <set_output+0xc7e>
								else
									display[BUF_ARROW] &= ~IN_USE;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <set_output+0xc84>)
 8002670:	789b      	ldrb	r3, [r3, #2]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4b02      	ldr	r3, [pc, #8]	; (8002684 <set_output+0xc84>)
 800267c:	709a      	strb	r2, [r3, #2]
							}
						for (i = 0; i < mInOut_Number; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e0aa      	b.n	80027da <set_output+0xdda>
 8002684:	20000364 	.word	0x20000364
 8002688:	2000038c 	.word	0x2000038c
 800268c:	200001f5 	.word	0x200001f5
 8002690:	200001ec 	.word	0x200001ec
 8002694:	200001e2 	.word	0x200001e2
 8002698:	200001e3 	.word	0x200001e3
 800269c:	200001e4 	.word	0x200001e4
							{// search output parameter list
								if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	499a      	ldr	r1, [pc, #616]	; (8002910 <set_output+0xf10>)
 80026a8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8091 	bne.w	80027d4 <set_output+0xdd4>
								if ((virt [IO_SUB_FUNC]  == outpar [i][IO_SUB_FUNC]) || (!virt [IO_SUB_FUNC]))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3301      	adds	r3, #1
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	4995      	ldr	r1, [pc, #596]	; (8002910 <set_output+0xf10>)
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d005      	beq.n	80026d2 <set_output+0xcd2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3301      	adds	r3, #1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 8081 	bne.w	80027d4 <set_output+0xdd4>
								if (virt [IO_FLOOR] 		 == outpar [i][IO_FLOOR])
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3303      	adds	r3, #3
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	498d      	ldr	r1, [pc, #564]	; (8002910 <set_output+0xf10>)
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	78db      	ldrb	r3, [r3, #3]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d176      	bne.n	80027d4 <set_output+0xdd4>
								if (virt [IO_LIFT]			 == outpar [i][IO_LIFT])
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3302      	adds	r3, #2
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	4988      	ldr	r1, [pc, #544]	; (8002910 <set_output+0xf10>)
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	789b      	ldrb	r3, [r3, #2]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d16c      	bne.n	80027d4 <set_output+0xdd4>
								if ((virt [IO_DOOR] &  outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4983      	ldr	r1, [pc, #524]	; (8002910 <set_output+0xf10>)
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	791b      	ldrb	r3, [r3, #4]
 800270a:	4013      	ands	r3, r2
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <set_output+0xd20>
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <set_output+0xf10>)
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d159      	bne.n	80027d4 <set_output+0xdd4>
								if (outpar [i][IO_ENABLE] == ENABLE)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <set_output+0xf10>)
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	799b      	ldrb	r3, [r3, #6]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d152      	bne.n	80027d4 <set_output+0xdd4>
									{
										if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == BUZZER))
 800272e:	7b7b      	ldrb	r3, [r7, #13]
 8002730:	2b0e      	cmp	r3, #14
 8002732:	d10f      	bne.n	8002754 <set_output+0xd54>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3301      	adds	r3, #1
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d10a      	bne.n	8002754 <set_output+0xd54>
											buzzer_signal (virt [IO_STATE] & 0x01, 0x01);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3305      	adds	r3, #5
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f8c5 	bl	80018dc <buzzer_signal>
 8002752:	e03f      	b.n	80027d4 <set_output+0xdd4>
										else
											{
												if (virt [IO_STATE] & 0x01)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3305      	adds	r3, #5
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01b      	beq.n	800279a <set_output+0xd9a>
													{
														bit_set (out[i/8], i%8); 				// set physical output
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	b2d8      	uxtb	r0, r3
 8002768:	4602      	mov	r2, r0
 800276a:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <set_output+0xf14>)
 800276c:	5c9b      	ldrb	r3, [r3, r2]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	b25a      	sxtb	r2, r3
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	b25b      	sxtb	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b25b      	sxtb	r3, r3
 8002784:	4602      	mov	r2, r0
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	4b62      	ldr	r3, [pc, #392]	; (8002914 <set_output+0xf14>)
 800278a:	5499      	strb	r1, [r3, r2]
														outpar [i][IO_STATE] = 1;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	4a60      	ldr	r2, [pc, #384]	; (8002910 <set_output+0xf10>)
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	2201      	movs	r2, #1
 8002796:	715a      	strb	r2, [r3, #5]
 8002798:	e01c      	b.n	80027d4 <set_output+0xdd4>
													}
												else
													{
														bit_reset (out[i/8], i%8); 			// reset physical output
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	b2d8      	uxtb	r0, r3
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <set_output+0xf14>)
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	b25a      	sxtb	r2, r3
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	4602      	mov	r2, r0
 80027c2:	b2d9      	uxtb	r1, r3
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <set_output+0xf14>)
 80027c6:	5499      	strb	r1, [r3, r2]
														outpar [i][IO_STATE] = 0;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4a51      	ldr	r2, [pc, #324]	; (8002910 <set_output+0xf10>)
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	2200      	movs	r2, #0
 80027d2:	715a      	strb	r2, [r3, #5]
						for (i = 0; i < mInOut_Number; i++)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	3301      	adds	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <set_output+0xf18>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f4ff af5d 	bcc.w	80026a0 <set_output+0xca0>
													}
											}
									}
							}
						if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == OVER_LOAD_STATE))
 80027e6:	7b7b      	ldrb	r3, [r7, #13]
 80027e8:	2b0e      	cmp	r3, #14
 80027ea:	d10e      	bne.n	800280a <set_output+0xe0a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b87      	cmp	r3, #135	; 0x87
 80027f4:	d109      	bne.n	800280a <set_output+0xe0a>
							buzzer_signal (virt [IO_STATE] & 0x01, 0x80);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3305      	adds	r3, #5
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f869 	bl	80018dc <buzzer_signal>
						break;
 800280a:	bf00      	nop
			switch(sub)
 800280c:	e0be      	b.n	800298c <set_output+0xf8c>
				}
		}	
	else
		{//�����ź�
			for (i = 0; i < mInOut_Number; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	e0a3      	b.n	800295c <set_output+0xf5c>
				{// search output parameter list
					if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	493d      	ldr	r1, [pc, #244]	; (8002910 <set_output+0xf10>)
 800281c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8098 	bne.w	8002956 <set_output+0xf56>
					if ((virt [IO_SUB_FUNC]  == outpar [i][IO_SUB_FUNC]) || (!virt [IO_SUB_FUNC]))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3301      	adds	r3, #1
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	4938      	ldr	r1, [pc, #224]	; (8002910 <set_output+0xf10>)
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	429a      	cmp	r2, r3
 8002838:	d005      	beq.n	8002846 <set_output+0xe46>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3301      	adds	r3, #1
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 8088 	bne.w	8002956 <set_output+0xf56>
					if (virt [IO_FLOOR]      == outpar [i][IO_FLOOR])
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3303      	adds	r3, #3
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	4930      	ldr	r1, [pc, #192]	; (8002910 <set_output+0xf10>)
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	78db      	ldrb	r3, [r3, #3]
 8002856:	429a      	cmp	r2, r3
 8002858:	d17d      	bne.n	8002956 <set_output+0xf56>
					if (virt [IO_LIFT]       == outpar [i][IO_LIFT])
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3302      	adds	r3, #2
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	492b      	ldr	r1, [pc, #172]	; (8002910 <set_output+0xf10>)
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	789b      	ldrb	r3, [r3, #2]
 800286a:	429a      	cmp	r2, r3
 800286c:	d173      	bne.n	8002956 <set_output+0xf56>
					if ((virt [IO_DOOR] &  outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	4926      	ldr	r1, [pc, #152]	; (8002910 <set_output+0xf10>)
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	791b      	ldrb	r3, [r3, #4]
 800287e:	4013      	ands	r3, r2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <set_output+0xe94>
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	4a21      	ldr	r2, [pc, #132]	; (8002910 <set_output+0xf10>)
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d160      	bne.n	8002956 <set_output+0xf56>
					if (outpar [i][IO_ENABLE] == ENABLE)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <set_output+0xf10>)
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	799b      	ldrb	r3, [r3, #6]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d159      	bne.n	8002956 <set_output+0xf56>
						{
							if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == BUZZER))
 80028a2:	7b7b      	ldrb	r3, [r7, #13]
 80028a4:	2b0e      	cmp	r3, #14
 80028a6:	d10f      	bne.n	80028c8 <set_output+0xec8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3301      	adds	r3, #1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b80      	cmp	r3, #128	; 0x80
 80028b0:	d10a      	bne.n	80028c8 <set_output+0xec8>
								buzzer_signal (virt [IO_STATE] & 0x01, 0x01);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3305      	adds	r3, #5
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f80b 	bl	80018dc <buzzer_signal>
 80028c6:	e046      	b.n	8002956 <set_output+0xf56>
							else
								{
									if (virt [IO_STATE] & 0x01)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3305      	adds	r3, #5
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d022      	beq.n	800291c <set_output+0xf1c>
										{
											bit_set (out[i/8], i%8);					// set physical output
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	08db      	lsrs	r3, r3, #3
 80028da:	b2d8      	uxtb	r0, r3
 80028dc:	4602      	mov	r2, r0
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <set_output+0xf14>)
 80028e0:	5c9b      	ldrb	r3, [r3, r2]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	b25a      	sxtb	r2, r3
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	4602      	mov	r2, r0
 80028fa:	b2d9      	uxtb	r1, r3
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <set_output+0xf14>)
 80028fe:	5499      	strb	r1, [r3, r2]
					 						outpar [i][IO_STATE] = 1;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4a03      	ldr	r2, [pc, #12]	; (8002910 <set_output+0xf10>)
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	2201      	movs	r2, #1
 800290a:	715a      	strb	r2, [r3, #5]
 800290c:	e023      	b.n	8002956 <set_output+0xf56>
 800290e:	bf00      	nop
 8002910:	2000060c 	.word	0x2000060c
 8002914:	20000598 	.word	0x20000598
 8002918:	20000189 	.word	0x20000189
										}
									else
										{
											bit_reset (out[i/8], i%8);				// reset physical output
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	b2d8      	uxtb	r0, r3
 8002922:	4602      	mov	r2, r0
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <set_output+0xfb8>)
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	b25a      	sxtb	r2, r3
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	b25b      	sxtb	r3, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	b25b      	sxtb	r3, r3
 800293e:	4013      	ands	r3, r2
 8002940:	b25b      	sxtb	r3, r3
 8002942:	4602      	mov	r2, r0
 8002944:	b2d9      	uxtb	r1, r3
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <set_output+0xfb8>)
 8002948:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <set_output+0xfbc>)
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3301      	adds	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <set_output+0xfc0>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	429a      	cmp	r2, r3
 8002964:	f4ff af56 	bcc.w	8002814 <set_output+0xe14>
										}
								}
						}
				}
			if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == OVER_LOAD_STATE))
 8002968:	7b7b      	ldrb	r3, [r7, #13]
 800296a:	2b0e      	cmp	r3, #14
 800296c:	d10e      	bne.n	800298c <set_output+0xf8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3301      	adds	r3, #1
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b87      	cmp	r3, #135	; 0x87
 8002976:	d109      	bne.n	800298c <set_output+0xf8c>
				buzzer_signal (virt [IO_STATE] & 0x01, 0x80);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3305      	adds	r3, #5
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ffa8 	bl	80018dc <buzzer_signal>
		}
	mDisp_buf[BUF_TEN + 1] = display[BUF_TEN];
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <set_output+0xfc4>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <set_output+0xfc8>)
 8002994:	705a      	strb	r2, [r3, #1]
	mDisp_buf[BUF_UNIT + 1] = display[BUF_UNIT];
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <set_output+0xfc4>)
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <set_output+0xfc8>)
 800299e:	709a      	strb	r2, [r3, #2]
	mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <set_output+0xfc4>)
 80029a2:	789b      	ldrb	r3, [r3, #2]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <set_output+0xfc8>)
 80029a8:	70da      	strb	r2, [r3, #3]
	Display_device();
 80029aa:	f000 fff1 	bl	8003990 <Display_device>
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000598 	.word	0x20000598
 80029bc:	2000060c 	.word	0x2000060c
 80029c0:	20000189 	.word	0x20000189
 80029c4:	20000364 	.word	0x20000364
 80029c8:	20000368 	.word	0x20000368

080029cc <set_io_config>:

// set configuration of IO
void set_io_config (void){
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for(i=0; i<MAX_IN_BYTE; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	71fb      	strb	r3, [r7, #7]
 80029d6:	e006      	b.n	80029e6 <set_io_config+0x1a>
		outpush[i] = 0;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	4a4a      	ldr	r2, [pc, #296]	; (8002b04 <set_io_config+0x138>)
 80029dc:	2100      	movs	r1, #0
 80029de:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<MAX_IN_BYTE; i++)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	3301      	adds	r3, #1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d9f5      	bls.n	80029d8 <set_io_config+0xc>

	for (i = 0; i < mInOut_Number; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	e07c      	b.n	8002aec <set_io_config+0x120>
		{
			switch (outpar [i][IO_BASIC_FUNC])
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4a44      	ldr	r2, [pc, #272]	; (8002b08 <set_io_config+0x13c>)
 80029f6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80029fa:	2b91      	cmp	r3, #145	; 0x91
 80029fc:	dc5d      	bgt.n	8002aba <set_io_config+0xee>
 80029fe:	2b8f      	cmp	r3, #143	; 0x8f
 8002a00:	da47      	bge.n	8002a92 <set_io_config+0xc6>
 8002a02:	2b0e      	cmp	r3, #14
 8002a04:	d006      	beq.n	8002a14 <set_io_config+0x48>
 8002a06:	2b0e      	cmp	r3, #14
 8002a08:	dc57      	bgt.n	8002aba <set_io_config+0xee>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d041      	beq.n	8002a92 <set_io_config+0xc6>
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d03f      	beq.n	8002a92 <set_io_config+0xc6>
 8002a12:	e052      	b.n	8002aba <set_io_config+0xee>
				{
					case (SPECIAL_FUNC):
						switch (outpar [i][IO_SUB_FUNC])
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4a3c      	ldr	r2, [pc, #240]	; (8002b08 <set_io_config+0x13c>)
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	2ba1      	cmp	r3, #161	; 0xa1
 8002a20:	d00c      	beq.n	8002a3c <set_io_config+0x70>
 8002a22:	2ba1      	cmp	r3, #161	; 0xa1
 8002a24:	dc1e      	bgt.n	8002a64 <set_io_config+0x98>
 8002a26:	2b9a      	cmp	r3, #154	; 0x9a
 8002a28:	d008      	beq.n	8002a3c <set_io_config+0x70>
 8002a2a:	2b9a      	cmp	r3, #154	; 0x9a
 8002a2c:	dc1a      	bgt.n	8002a64 <set_io_config+0x98>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d004      	beq.n	8002a3c <set_io_config+0x70>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	dd16      	ble.n	8002a64 <set_io_config+0x98>
 8002a36:	3b09      	subs	r3, #9
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d813      	bhi.n	8002a64 <set_io_config+0x98>
								case (FAN_1) :
								case (HALLCALL_BYPASS) :
								case (DOOR_OPEN) :
								case (DOOR_CLOSE):
								case (DOOR_STOP) :
									bit_set (outpush[i/8], i);
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	b2d8      	uxtb	r0, r3
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <set_io_config+0x138>)
 8002a46:	5c9b      	ldrb	r3, [r3, r2]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	b25a      	sxtb	r2, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	b2d9      	uxtb	r1, r3
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <set_io_config+0x138>)
 8002a60:	5499      	strb	r1, [r3, r2]
									break;
 8002a62:	e015      	b.n	8002a90 <set_io_config+0xc4>

								default:
									bit_reset (outpush[i/8], i);
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	b2d8      	uxtb	r0, r3
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <set_io_config+0x138>)
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	b25a      	sxtb	r2, r3
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	4013      	ands	r3, r2
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	4602      	mov	r2, r0
 8002a88:	b2d9      	uxtb	r1, r3
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <set_io_config+0x138>)
 8002a8c:	5499      	strb	r1, [r3, r2]
									break;
 8002a8e:	bf00      	nop
							}
						break;
 8002a90:	e029      	b.n	8002ae6 <set_io_config+0x11a>
					case (CAR_CALL):
					case (HALL_CALL):
					case (HALL_CALL_SPECIAL):
					case (HALL_CALL_ADVANCED):
					case (HALL_CALL_EMERGENCY):
						bit_set (outpush[i/8], i);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <set_io_config+0x138>)
 8002a9c:	5c9b      	ldrb	r3, [r3, r2]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <set_io_config+0x138>)
 8002ab6:	5499      	strb	r1, [r3, r2]
						break;
 8002ab8:	e015      	b.n	8002ae6 <set_io_config+0x11a>

					default:
						bit_reset (outpush[i/8], i);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	08db      	lsrs	r3, r3, #3
 8002abe:	b2d8      	uxtb	r0, r3
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <set_io_config+0x138>)
 8002ac4:	5c9b      	ldrb	r3, [r3, r2]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	b25a      	sxtb	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	4602      	mov	r2, r0
 8002ade:	b2d9      	uxtb	r1, r3
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <set_io_config+0x138>)
 8002ae2:	5499      	strb	r1, [r3, r2]
						break;
 8002ae4:	bf00      	nop
	for (i = 0; i < mInOut_Number; i++)
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <set_io_config+0x140>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	79fa      	ldrb	r2, [r7, #7]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	f4ff af7d 	bcc.w	80029f2 <set_io_config+0x26>
				}
		}
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000980 	.word	0x20000980
 8002b08:	2000060c 	.word	0x2000060c
 8002b0c:	20000189 	.word	0x20000189

08002b10 <read_dict>:
};

/************************************************************************************************/
/* Read object dictionary																		*/
/************************************************************************************************/
uint32_t read_dict (uint8_t pos, uint8_t subindex){
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	460a      	mov	r2, r1
 8002b1a:	71fb      	strb	r3, [r7, #7]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	71bb      	strb	r3, [r7, #6]
	uint16_t address;
	uint8_t ee_addr = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	757b      	strb	r3, [r7, #21]
	uint8_t i;
	uint8_t value [4];
	uint8_t size;
	size = dict [pos].size;
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <read_dict+0x160>)
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	74fb      	strb	r3, [r7, #19]

	if (subindex)										/* more than 1 subindex					*/
 8002b32:	79bb      	ldrb	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <read_dict+0x40>
		{
			address = (subindex - 1) * size;
 8002b38:	79bb      	ldrb	r3, [r7, #6]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	7cfa      	ldrb	r2, [r7, #19]
 8002b40:	b292      	uxth	r2, r2
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	82fb      	strh	r3, [r7, #22]
			ee_addr = subindex - 1;
 8002b48:	79bb      	ldrb	r3, [r7, #6]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	757b      	strb	r3, [r7, #21]
 8002b4e:	e003      	b.n	8002b58 <read_dict+0x48>
		}
	else
		{
			ee_addr = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	757b      	strb	r3, [r7, #21]
			address = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	82fb      	strh	r3, [r7, #22]
		}
	switch (dict [pos].object)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	4a45      	ldr	r2, [pc, #276]	; (8002c70 <read_dict+0x160>)
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002b66:	d03d      	beq.n	8002be4 <read_dict+0xd4>
 8002b68:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002b6c:	dc4e      	bgt.n	8002c0c <read_dict+0xfc>
 8002b6e:	f246 2260 	movw	r2, #25184	; 0x6260
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d011      	beq.n	8002b9a <read_dict+0x8a>
 8002b76:	f246 2260 	movw	r2, #25184	; 0x6260
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	dc46      	bgt.n	8002c0c <read_dict+0xfc>
 8002b7e:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8002b82:	d01e      	beq.n	8002bc2 <read_dict+0xb2>
 8002b84:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8002b88:	dc40      	bgt.n	8002c0c <read_dict+0xfc>
 8002b8a:	f241 0216 	movw	r2, #4118	; 0x1016
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d036      	beq.n	8002c00 <read_dict+0xf0>
 8002b92:	f246 1260 	movw	r2, #24928	; 0x6160
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d138      	bne.n	8002c0c <read_dict+0xfc>
		{
			case (INPUT_PARA3):
			case (OUTPUT_PARA3):
				return (((uint32_t)bit_select (*((uint8_t *)dict [pos].pointer + ee_addr/8), ee_addr%8)) << 15);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <read_dict+0x160>)
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	7d7a      	ldrb	r2, [r7, #21]
 8002ba8:	08d2      	lsrs	r2, r2, #3
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	7d7b      	ldrb	r3, [r7, #21]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	fa42 f303 	asr.w	r3, r2, r3
 8002bbc:	03db      	lsls	r3, r3, #15
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	e050      	b.n	8002c64 <read_dict+0x154>

			case (INPUT_PARA4):
				return (*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1) * MAX_IO_TYPE)));
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <read_dict+0x160>)
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	3308      	adds	r3, #8
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	79bb      	ldrb	r3, [r7, #6]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a5b      	subs	r3, r3, r1
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	e03f      	b.n	8002c64 <read_dict+0x154>

			case (OUTPUT_PARA4):
				return (*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1) * (MAX_IO_TYPE + 1))));
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <read_dict+0x160>)
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4413      	add	r3, r2
 8002bec:	3308      	adds	r3, #8
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	79ba      	ldrb	r2, [r7, #6]
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	b292      	uxth	r2, r2
 8002bf8:	00d2      	lsls	r2, r2, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	e031      	b.n	8002c64 <read_dict+0x154>

			case (CONS_HB_TIME):
				return ((((uint32_t)subindex) << 16) + (HSETIME * 500));
 8002c00:	79bb      	ldrb	r3, [r7, #6]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002c08:	3310      	adds	r3, #16
 8002c0a:	e02b      	b.n	8002c64 <read_dict+0x154>

			default:
				*(uint32_t *)value = 0;						/* clear variable						*/
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
				if (dict [pos].pointer)				/* object in RAM						*/
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <read_dict+0x160>)
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01e      	beq.n	8002c62 <read_dict+0x152>
					{
						for (i = 0; i < size; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	753b      	strb	r3, [r7, #20]
 8002c28:	e013      	b.n	8002c52 <read_dict+0x142>
		        	value [i] = *((uint8_t *)dict [pos].pointer + address + i);
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <read_dict+0x160>)
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	4413      	add	r3, r2
 8002c32:	3308      	adds	r3, #8
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	8af9      	ldrh	r1, [r7, #22]
 8002c38:	7d3b      	ldrb	r3, [r7, #20]
 8002c3a:	440b      	add	r3, r1
 8002c3c:	441a      	add	r2, r3
 8002c3e:	7d3b      	ldrb	r3, [r7, #20]
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	f107 0118 	add.w	r1, r7, #24
 8002c46:	440b      	add	r3, r1
 8002c48:	f803 2c0c 	strb.w	r2, [r3, #-12]
						for (i = 0; i < size; i++)
 8002c4c:	7d3b      	ldrb	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	753b      	strb	r3, [r7, #20]
 8002c52:	7d3a      	ldrb	r2, [r7, #20]
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3e7      	bcc.n	8002c2a <read_dict+0x11a>
						return (*(uint32_t *)value);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e000      	b.n	8002c64 <read_dict+0x154>
					}
				else
					return (0);
 8002c62:	2300      	movs	r3, #0
		}
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <write_dict>:

/************************************************************************************************/
/* Write object dictionary																		*/
/************************************************************************************************/
uint8_t write_dict (uint8_t pos, uint8_t subindex, uint32_t value){
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	603a      	str	r2, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	460b      	mov	r3, r1
 8002c82:	71bb      	strb	r3, [r7, #6]
	uint8_t j;
	uint16_t address;
	uint8_t ee_addr;
	uint8_t size;

	size = dict [pos].size;
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <write_dict+0x1d4>)
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	72bb      	strb	r3, [r7, #10]

	if (subindex)			// more than 1 subindex
 8002c92:	79bb      	ldrb	r3, [r7, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <write_dict+0x3e>
		{
			address = ((uint16_t)(subindex - 1)) * size;
 8002c98:	79bb      	ldrb	r3, [r7, #6]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	7aba      	ldrb	r2, [r7, #10]
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	fb02 f303 	mul.w	r3, r2, r3
 8002ca8:	81bb      	strh	r3, [r7, #12]
			ee_addr = subindex - 1;
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	72fb      	strb	r3, [r7, #11]
 8002cb0:	e003      	b.n	8002cba <write_dict+0x46>
		}
	else
		{
			ee_addr = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
			address = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	81bb      	strh	r3, [r7, #12]
		}
	switch (dict [pos].object)
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4a62      	ldr	r2, [pc, #392]	; (8002e48 <write_dict+0x1d4>)
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002cc8:	d078      	beq.n	8002dbc <write_dict+0x148>
 8002cca:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002cce:	f300 808d 	bgt.w	8002dec <write_dict+0x178>
 8002cd2:	f246 2260 	movw	r2, #25184	; 0x6260
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00c      	beq.n	8002cf4 <write_dict+0x80>
 8002cda:	f246 2260 	movw	r2, #25184	; 0x6260
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f300 8084 	bgt.w	8002dec <write_dict+0x178>
 8002ce4:	f246 1260 	movw	r2, #24928	; 0x6160
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <write_dict+0x80>
 8002cec:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8002cf0:	d049      	beq.n	8002d86 <write_dict+0x112>
 8002cf2:	e07b      	b.n	8002dec <write_dict+0x178>
		{
			case (INPUT_PARA3):
			case (OUTPUT_PARA3):
				i = *((uint8_t *)dict [pos].pointer + ee_addr/8);
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	4a54      	ldr	r2, [pc, #336]	; (8002e48 <write_dict+0x1d4>)
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	7afa      	ldrb	r2, [r7, #11]
 8002d02:	08d2      	lsrs	r2, r2, #3
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	73fb      	strb	r3, [r7, #15]
				j = (value >> 15) & 1;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	0bdb      	lsrs	r3, r3, #15
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	727b      	strb	r3, [r7, #9]
				if (((i >> (ee_addr % 8)) & 1) != j)
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	7afb      	ldrb	r3, [r7, #11]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	fa42 f303 	asr.w	r3, r2, r3
 8002d24:	f003 0201 	and.w	r2, r3, #1
 8002d28:	7a7b      	ldrb	r3, [r7, #9]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d01d      	beq.n	8002d6a <write_dict+0xf6>
					{
						if (j)
 8002d2e:	7a7b      	ldrb	r3, [r7, #9]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <write_dict+0xda>
							bit_set (i, ee_addr % 8);
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	b25a      	sxtb	r2, r3
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e00d      	b.n	8002d6a <write_dict+0xf6>
						else
							bit_reset (i, ee_addr % 8);
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	2201      	movs	r2, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	b25a      	sxtb	r2, r3
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	73fb      	strb	r3, [r7, #15]
					}
				*((uint8_t *)dict [pos].pointer + ee_addr/8) = i;
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <write_dict+0x1d4>)
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4413      	add	r3, r2
 8002d72:	3308      	adds	r3, #8
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	7afa      	ldrb	r2, [r7, #11]
 8002d78:	08d2      	lsrs	r2, r2, #3
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	701a      	strb	r2, [r3, #0]
				return (0);
 8002d82:	2300      	movs	r3, #0
 8002d84:	e05a      	b.n	8002e3c <write_dict+0x1c8>

			case (INPUT_PARA4):
				if (dict[pos].pointer)
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4a2f      	ldr	r2, [pc, #188]	; (8002e48 <write_dict+0x1d4>)
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3308      	adds	r3, #8
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04c      	beq.n	8002e30 <write_dict+0x1bc>
					{
						*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1)) * MAX_IO_TYPE) = (uint8_t)value;
 8002d96:	6838      	ldr	r0, [r7, #0]
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <write_dict+0x1d4>)
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	4413      	add	r3, r2
 8002da0:	3308      	adds	r3, #8
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	79bb      	ldrb	r3, [r7, #6]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4619      	mov	r1, r3
 8002dae:	460b      	mov	r3, r1
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	1a5b      	subs	r3, r3, r1
 8002db4:	4413      	add	r3, r2
 8002db6:	b2c2      	uxtb	r2, r0
 8002db8:	701a      	strb	r2, [r3, #0]
					}
				break;
 8002dba:	e039      	b.n	8002e30 <write_dict+0x1bc>

			case (OUTPUT_PARA4):
				if (dict[pos].pointer)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <write_dict+0x1d4>)
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d033      	beq.n	8002e34 <write_dict+0x1c0>
					{
						*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1)) * (MAX_IO_TYPE + 1)) = (uint8_t)value;
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <write_dict+0x1d4>)
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	79ba      	ldrb	r2, [r7, #6]
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	3a01      	subs	r2, #1
 8002de0:	b292      	uxth	r2, r2
 8002de2:	00d2      	lsls	r2, r2, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	b2ca      	uxtb	r2, r1
 8002de8:	701a      	strb	r2, [r3, #0]
					}
				break;
 8002dea:	e023      	b.n	8002e34 <write_dict+0x1c0>

			default:
				if (dict [pos].pointer)						/* object in RAM						*/
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <write_dict+0x1d4>)
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4413      	add	r3, r2
 8002df4:	3308      	adds	r3, #8
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01d      	beq.n	8002e38 <write_dict+0x1c4>
					{
						for (i = 0; i < size; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e011      	b.n	8002e26 <write_dict+0x1b2>
		     		 	*((uint8_t *)dict [pos].pointer + address + i) = *((uint8_t *)&value+i);
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	463a      	mov	r2, r7
 8002e06:	441a      	add	r2, r3
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	490f      	ldr	r1, [pc, #60]	; (8002e48 <write_dict+0x1d4>)
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	440b      	add	r3, r1
 8002e10:	3308      	adds	r3, #8
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	89b8      	ldrh	r0, [r7, #12]
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	4403      	add	r3, r0
 8002e1a:	440b      	add	r3, r1
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
						for (i = 0; i < size; i++)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	3301      	adds	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3e9      	bcc.n	8002e02 <write_dict+0x18e>
					}
				break;
 8002e2e:	e003      	b.n	8002e38 <write_dict+0x1c4>
				break;
 8002e30:	bf00      	nop
 8002e32:	e002      	b.n	8002e3a <write_dict+0x1c6>
				break;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <write_dict+0x1c6>
				break;
 8002e38:	bf00      	nop
		}
	return (0);
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <search_dict>:


/************************************************************************************************/
/* Search object dictionary for an entry														*/
/************************************************************************************************/
uint32_t search_dict (uint16_t index, uint8_t subindex, uint8_t type, uint8_t *pos){
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	717b      	strb	r3, [r7, #5]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	713b      	strb	r3, [r7, #4]
	uint8_t i;
	uint8_t index_exists;
	uint8_t subindex_exists;
	uint8_t size;
	i = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
	index_exists = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73bb      	strb	r3, [r7, #14]
	subindex_exists = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	737b      	strb	r3, [r7, #13]
	while (dict [i].object != ENDSTRING)		//search whole dictionary
 8002e6c:	e06b      	b.n	8002f46 <search_dict+0xfa>
		{
			if (dict [i].object == index)					//found object
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <search_dict+0x12c>)
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d160      	bne.n	8002f40 <search_dict+0xf4>
				{
					if (subindex <= dict [i].sub)				//subindex of object valid
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	4a3d      	ldr	r2, [pc, #244]	; (8002f78 <search_dict+0x12c>)
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	3302      	adds	r3, #2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	797a      	ldrb	r2, [r7, #5]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d855      	bhi.n	8002f3c <search_dict+0xf0>
						{
							if ((type & COMMAND_SPECIFIER) == INIT_WRITE_REQ)
 8002e90:	793b      	ldrb	r3, [r7, #4]
 8002e92:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d14b      	bne.n	8002f32 <search_dict+0xe6>
								{/// write access to object dictionary
									size = dict [i].size;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	4a36      	ldr	r2, [pc, #216]	; (8002f78 <search_dict+0x12c>)
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	733b      	strb	r3, [r7, #12]
									if ((type & EXPEDITED_BIT) && (size > 4) &&	 (subindex || (!dict [i].sub)))
 8002ea8:	793b      	ldrb	r3, [r7, #4]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00f      	beq.n	8002ed2 <search_dict+0x86>
 8002eb2:	7b3b      	ldrb	r3, [r7, #12]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d90c      	bls.n	8002ed2 <search_dict+0x86>
 8002eb8:	797b      	ldrb	r3, [r7, #5]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <search_dict+0x82>
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <search_dict+0x12c>)
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <search_dict+0x86>
										return (SDO_UNSUPPORTED);		// exped. transfer to object > 4 uint8_ts
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <search_dict+0x130>)
 8002ed0:	e04d      	b.n	8002f6e <search_dict+0x122>
									else if (!((type & EXPEDITED_BIT)) && (size <= 4))
 8002ed2:	793b      	ldrb	r3, [r7, #4]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <search_dict+0x9a>
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d801      	bhi.n	8002ee6 <search_dict+0x9a>
										return (SDO_UNSUPPORTED);		// normal transfer to object <= 4 uint8_ts
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <search_dict+0x130>)
 8002ee4:	e043      	b.n	8002f6e <search_dict+0x122>
									else if (!dict [i].access)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <search_dict+0x12c>)
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	3303      	adds	r3, #3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <search_dict+0xae>
										return (SDO_WRITE_OF_RO);		// write access to read only object
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <search_dict+0x134>)
 8002ef8:	e039      	b.n	8002f6e <search_dict+0x122>
									else if ((!subindex) && dict [i].sub && index != PORT_OUT && index != PORT_IN)
 8002efa:	797b      	ldrb	r3, [r7, #5]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <search_dict+0xdc>
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <search_dict+0x12c>)
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4413      	add	r3, r2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <search_dict+0xdc>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d006      	beq.n	8002f28 <search_dict+0xdc>
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f642 72fd 	movw	r2, #12285	; 0x2ffd
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d001      	beq.n	8002f28 <search_dict+0xdc>
										return (SDO_WRITE_OF_RO);		// write access to number of entries
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <search_dict+0x134>)
 8002f26:	e022      	b.n	8002f6e <search_dict+0x122>
									*pos = i;							//set number of entry in dictionary
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	701a      	strb	r2, [r3, #0]
									return (0);						//write access possible
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e01d      	b.n	8002f6e <search_dict+0x122>
								}
							else										//read access
								{
									*pos = i;							//set number of entry in dictionary
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	701a      	strb	r2, [r3, #0]
									return (0);						//read access possible
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e018      	b.n	8002f6e <search_dict+0x122>
								}
							subindex_exists = 1;		//object exists,but access not valid
						}
					index_exists = 1;					//object exists,but subindex not valid
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73bb      	strb	r3, [r7, #14]
				}
			i++;												//go to next dictionary entry
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	3301      	adds	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
	while (dict [i].object != ENDSTRING)		//search whole dictionary
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <search_dict+0x12c>)
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	4413      	add	r3, r2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d18a      	bne.n	8002e6e <search_dict+0x22>
		}
	if (subindex_exists)					// object exists,but access not valid
 8002f58:	7b7b      	ldrb	r3, [r7, #13]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <search_dict+0x116>
		return (SDO_WRITE_OF_RO);	// set error code
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <search_dict+0x134>)
 8002f60:	e005      	b.n	8002f6e <search_dict+0x122>
	if (index_exists)							// object exists,but subindex not valid
 8002f62:	7bbb      	ldrb	r3, [r7, #14]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <search_dict+0x120>
		return (SDO_SUB_WRONG);		// set error code
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <search_dict+0x138>)
 8002f6a:	e000      	b.n	8002f6e <search_dict+0x122>
	return (SDO_NOT_EXIST);				// no entry in object dictionary
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <search_dict+0x13c>)
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	06010000 	.word	0x06010000
 8002f80:	06010002 	.word	0x06010002
 8002f84:	06090011 	.word	0x06090011
 8002f88:	06020000 	.word	0x06020000

08002f8c <Get_NodeID>:

#define	_SUBPROG_C_
#include	"AllHeader.h"
extern uint16_t Led_virt;

uint8_t Get_NodeID(void){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
	uint8_t i, dat1 = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<10; i++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	e015      	b.n	8002fc8 <Get_NodeID+0x3c>
		{
			if(HAL_GPIO_ReadPin(NODE_ID_GPIO_Port,NODE_ID_Pin))
 8002f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <Get_NodeID+0x5c>)
 8002fa2:	f003 fc9d 	bl	80068e0 <HAL_GPIO_ReadPin>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <Get_NodeID+0x26>
				dat1++;
 8002fac:	79bb      	ldrb	r3, [r7, #6]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	71bb      	strb	r3, [r7, #6]
			__NOP();__NOP();__NOP();__NOP();
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
			__NOP();__NOP();__NOP();__NOP();
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
	for(i=0; i<10; i++)
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d9e6      	bls.n	8002f9c <Get_NodeID+0x10>
		}
	if(dat1 >= 7)
 8002fce:	79bb      	ldrb	r3, [r7, #6]
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d902      	bls.n	8002fda <Get_NodeID+0x4e>
		i =  0x10;
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	71fb      	strb	r3, [r7, #7]
 8002fd8:	e001      	b.n	8002fde <Get_NodeID+0x52>
	else
		i =  0x11;
 8002fda:	2311      	movs	r3, #17
 8002fdc:	71fb      	strb	r3, [r7, #7]

	return i;
 8002fde:	79fb      	ldrb	r3, [r7, #7]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40010c00 	.word	0x40010c00

08002fec <Check_InChange>:


uint8_t Check_InChange(uint8_t* buf1, uint8_t* buf2){
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for(i=0; i<mMax_InByte; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	e00e      	b.n	800301a <Check_InChange+0x2e>
		{
			if(buf1[i] != buf2[i])
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	440b      	add	r3, r1
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <Check_InChange+0x28>
				return 1;
 8003010:	2301      	movs	r3, #1
 8003012:	e008      	b.n	8003026 <Check_InChange+0x3a>
	for(i=0; i<mMax_InByte; i++)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	3301      	adds	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <Check_InChange+0x44>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	429a      	cmp	r2, r3
 8003022:	d3eb      	bcc.n	8002ffc <Check_InChange+0x10>
		}
	return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	2000097c 	.word	0x2000097c

08003034 <SPI_SendOneByte>:

void Init_SPI(void){

}

uint8_t SPI_SendOneByte(uint8_t dat){
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
	SCK = 0;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <SPI_SendOneByte+0x58>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
	__NOP();
 8003044:	bf00      	nop
	for(int i=7;i>=0;i--)
 8003046:	2307      	movs	r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e016      	b.n	800307a <SPI_SendOneByte+0x46>
	{
		PIN_A7 = (dat >> i) &0x01;
 800304c:	79fa      	ldrb	r2, [r7, #7]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	fa42 f303 	asr.w	r3, r2, r3
 8003054:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <SPI_SendOneByte+0x5c>)
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]
		__NOP();
 800305c:	bf00      	nop
		SCK =1;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <SPI_SendOneByte+0x58>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
		__NOP();
 8003064:	bf00      	nop
		__NOP();
 8003066:	bf00      	nop
		SCK =0;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <SPI_SendOneByte+0x58>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
		__NOP();
 800306e:	bf00      	nop
		__NOP();
 8003070:	bf00      	nop
		__NOP();
 8003072:	bf00      	nop
	for(int i=7;i>=0;i--)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3b01      	subs	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	dae5      	bge.n	800304c <SPI_SendOneByte+0x18>
//	SSPBUF = dat;
//	while(!(SSPSTAT & 0x01))
//		ClrWdt();
//	dat = SSPBUF;

	return dat;
 8003080:	79fb      	ldrb	r3, [r7, #7]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	42210194 	.word	0x42210194
 8003090:	4221019c 	.word	0x4221019c

08003094 <ReadInput>:
 														>0:  ���ڰ�ť�壬������166��ʱ�����(1�鰴ť��16���������)
 2��һ��SPI����: ����9���ֽڣ�һ��Ƭѡ��Ч(Ƭѡÿ��ѭ���ƶ�һ�ֽ�)���ܹ�9��ѭ��
 3��9��ѭ����ϣ�����һ��ѭ���ر���������Ƭѡ
============================================================================================================*/
uint8_t 	volatile	Userin[MAX_IN_BYTE];								/* variable for input after debouncing	*/
void ReadInput(void){
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
//	memcpy((void *)in,(void *)Userin,MAX_IN_BYTE);
//	return ;
	uint8_t i, j, temp;
	uint32_t kCode[3] = {0,0,0};
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
//			(((uint32_t)PORTE & 0x07) << 4) |			// PE0~PE2
//			((uint32_t)PORTD << 7) |					// PD0~PD7
//			(((uint32_t)PORTB & 0x03) << 15) |			// PB0~PB1
//			(((uint32_t)PORTB & 0x30) << 13) |			// PB4~PB5
//			(((uint32_t)PORTC & 0x07) << 19));			// PC0~PC2
	kCode[0] = ((GPIOB->IDR) & 0x3FFF);
 80030a6:	4b64      	ldr	r3, [pc, #400]	; (8003238 <ReadInput+0x1a4>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80030ae:	603b      	str	r3, [r7, #0]

	HC166_PARA_EN(); __NOP();__NOP();__NOP();__NOP();
 80030b0:	4b62      	ldr	r3, [pc, #392]	; (800323c <ReadInput+0x1a8>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
	HC166_CLK_LOW();__NOP();__NOP();__NOP();__NOP();
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <ReadInput+0x1ac>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
	HC166_CLK_HIGH();__NOP();__NOP();__NOP();__NOP();
 80030cc:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <ReadInput+0x1ac>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
	HC166_CLK_LOW();__NOP();__NOP();__NOP();__NOP();
 80030da:	4b59      	ldr	r3, [pc, #356]	; (8003240 <ReadInput+0x1ac>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
	HC166_SERI_EN(); __NOP();__NOP();__NOP();__NOP();
 80030e8:	4b54      	ldr	r3, [pc, #336]	; (800323c <ReadInput+0x1a8>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
	HC595_LUCK_DIS();
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <ReadInput+0x1b0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

	temp =21;
 80030fc:	2315      	movs	r3, #21
 80030fe:	737b      	strb	r3, [r7, #13]
	for(j=0; j<8; j++)
 8003100:	2300      	movs	r3, #0
 8003102:	73bb      	strb	r3, [r7, #14]
 8003104:	e02d      	b.n	8003162 <ReadInput+0xce>
		{
			if (PIN_A6)
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <ReadInput+0x1b4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d017      	beq.n	800313e <ReadInput+0xaa>
				kCode[temp / 32] |= (0x01ul << (temp % 32));
 800310e:	7b7b      	ldrb	r3, [r7, #13]
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	b2d8      	uxtb	r0, r3
 8003114:	4603      	mov	r3, r0
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f107 0210 	add.w	r2, r7, #16
 800311c:	4413      	add	r3, r2
 800311e:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003122:	7b7b      	ldrb	r3, [r7, #13]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2101      	movs	r1, #1
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	4601      	mov	r1, r0
 8003130:	431a      	orrs	r2, r3
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	f107 0110 	add.w	r1, r7, #16
 8003138:	440b      	add	r3, r1
 800313a:	f843 2c10 	str.w	r2, [r3, #-16]
			HC166_CLK_HIGH();__NOP();__NOP();__NOP();__NOP();
 800313e:	4b40      	ldr	r3, [pc, #256]	; (8003240 <ReadInput+0x1ac>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	bf00      	nop
			HC166_CLK_LOW();__NOP();__NOP();
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <ReadInput+0x1ac>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	bf00      	nop
 8003154:	bf00      	nop
			--temp;
 8003156:	7b7b      	ldrb	r3, [r7, #13]
 8003158:	3b01      	subs	r3, #1
 800315a:	737b      	strb	r3, [r7, #13]
	for(j=0; j<8; j++)
 800315c:	7bbb      	ldrb	r3, [r7, #14]
 800315e:	3301      	adds	r3, #1
 8003160:	73bb      	strb	r3, [r7, #14]
 8003162:	7bbb      	ldrb	r3, [r7, #14]
 8003164:	2b07      	cmp	r3, #7
 8003166:	d9ce      	bls.n	8003106 <ReadInput+0x72>
		}

	__NOP();__NOP();__NOP();__NOP();
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	bf00      	nop
	__NOP();__NOP();__NOP();__NOP();
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	bf00      	nop
	__NOP();__NOP();__NOP();__NOP();
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	bf00      	nop
			__NOP();__NOP();__NOP();__NOP();
			__NOP();__NOP();__NOP();__NOP();
//			SSPCON1 = 0x32;
		}
#endif
	for (i=0; i<MAX_IN_BYTE; ++i)
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e015      	b.n	80031b2 <ReadInput+0x11e>
		{	
			input[2][i] = input[1][i];
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	4930      	ldr	r1, [pc, #192]	; (800324c <ReadInput+0x1b8>)
 800318c:	440a      	add	r2, r1
 800318e:	7a52      	ldrb	r2, [r2, #9]
 8003190:	b2d1      	uxtb	r1, r2
 8003192:	4a2e      	ldr	r2, [pc, #184]	; (800324c <ReadInput+0x1b8>)
 8003194:	4413      	add	r3, r2
 8003196:	460a      	mov	r2, r1
 8003198:	749a      	strb	r2, [r3, #18]
			input[1][i] = input[0][i];
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	492b      	ldr	r1, [pc, #172]	; (800324c <ReadInput+0x1b8>)
 80031a0:	5c8a      	ldrb	r2, [r1, r2]
 80031a2:	b2d1      	uxtb	r1, r2
 80031a4:	4a29      	ldr	r2, [pc, #164]	; (800324c <ReadInput+0x1b8>)
 80031a6:	4413      	add	r3, r2
 80031a8:	460a      	mov	r2, r1
 80031aa:	725a      	strb	r2, [r3, #9]
	for (i=0; i<MAX_IN_BYTE; ++i)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	3301      	adds	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d9e6      	bls.n	8003186 <ReadInput+0xf2>
		}
	input[0][0] = (uint8_t)kCode[0];
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <ReadInput+0x1b8>)
 80031be:	701a      	strb	r2, [r3, #0]
	input[0][1] = (uint8_t)(kCode[0] >> 8);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <ReadInput+0x1b8>)
 80031c8:	705a      	strb	r2, [r3, #1]
	input[0][2] = (uint8_t)(kCode[0] >> 16);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	4b1e      	ldr	r3, [pc, #120]	; (800324c <ReadInput+0x1b8>)
 80031d2:	709a      	strb	r2, [r3, #2]
	j = 3;
 80031d4:	2303      	movs	r3, #3
 80031d6:	73bb      	strb	r3, [r7, #14]
				input[0][8] = (uint8_t)kCode[2];
				j = 9;
				break;				
		}
#endif
	for (i=0; i<j; ++i)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e021      	b.n	8003222 <ReadInput+0x18e>
		{	
			if (input[2][i] == input[1][i] && input[1][i] == input[0][i])
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	; (800324c <ReadInput+0x1b8>)
 80031e2:	4413      	add	r3, r2
 80031e4:	7c9b      	ldrb	r3, [r3, #18]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	4918      	ldr	r1, [pc, #96]	; (800324c <ReadInput+0x1b8>)
 80031ec:	440b      	add	r3, r1
 80031ee:	7a5b      	ldrb	r3, [r3, #9]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d112      	bne.n	800321c <ReadInput+0x188>
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <ReadInput+0x1b8>)
 80031fa:	4413      	add	r3, r2
 80031fc:	7a5b      	ldrb	r3, [r3, #9]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	4912      	ldr	r1, [pc, #72]	; (800324c <ReadInput+0x1b8>)
 8003204:	5ccb      	ldrb	r3, [r1, r3]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <ReadInput+0x188>
				in[i] = input[2][i];
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <ReadInput+0x1b8>)
 8003212:	440a      	add	r2, r1
 8003214:	7c92      	ldrb	r2, [r2, #18]
 8003216:	b2d1      	uxtb	r1, r2
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <ReadInput+0x1bc>)
 800321a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<j; ++i)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	3301      	adds	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	429a      	cmp	r2, r3
 8003228:	d3d9      	bcc.n	80031de <ReadInput+0x14a>
		}
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010c00 	.word	0x40010c00
 800323c:	422101bc 	.word	0x422101bc
 8003240:	42210194 	.word	0x42210194
 8003244:	42210184 	.word	0x42210184
 8003248:	42210118 	.word	0x42210118
 800324c:	200005a4 	.word	0x200005a4
 8003250:	20000390 	.word	0x20000390

08003254 <Out_Prog>:

/*========================         ����źŴ���          ===================================
	1������ź�: ֻ����70����ť�ƣ�������2����վ�ӣ�1�����ط���������������ĳ�����
	2���ߵ�ƽ����
==============================================================================================*/
void Out_Prog(void){
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
	uint8_t i, j, temp;
	uint16_t shift = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	817b      	strh	r3, [r7, #10]
	uint8_t out_state[MAX_IN_BYTE];
	static uint8_t out_old[MAX_IN_BYTE] = {0xFF,0xFF,0xFF,0,0,0,0,0,0};

	for(i=2; i<mMax_InByte; i++)
 800325e:	2302      	movs	r3, #2
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e011      	b.n	8003288 <Out_Prog+0x34>
		out_state[i] = out[i] ^ out_polarity[i];		// read input state; invert if desired
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	4a8b      	ldr	r2, [pc, #556]	; (8003494 <Out_Prog+0x240>)
 8003268:	5cd3      	ldrb	r3, [r2, r3]
 800326a:	b2d9      	uxtb	r1, r3
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	4a8a      	ldr	r2, [pc, #552]	; (8003498 <Out_Prog+0x244>)
 8003270:	5cd2      	ldrb	r2, [r2, r3]
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	404a      	eors	r2, r1
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f107 0110 	add.w	r1, r7, #16
 800327c:	440b      	add	r3, r1
 800327e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i=2; i<mMax_InByte; i++)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	3301      	adds	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	4b84      	ldr	r3, [pc, #528]	; (800349c <Out_Prog+0x248>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	429a      	cmp	r2, r3
 8003290:	d3e8      	bcc.n	8003264 <Out_Prog+0x10>
	out_state[0] = ((out[0]&0x03) | (uint8_t)Led_virt) ^  out_polarity[0];
 8003292:	4b80      	ldr	r3, [pc, #512]	; (8003494 <Out_Prog+0x240>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	b25b      	sxtb	r3, r3
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	b25a      	sxtb	r2, r3
 80032a0:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <Out_Prog+0x24c>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b25a      	sxtb	r2, r3
 80032aa:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <Out_Prog+0x244>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	4053      	eors	r3, r2
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	703b      	strb	r3, [r7, #0]
	out_state[1] = (uint8_t)(Led_virt>>8) ^  out_polarity[1];
 80032b8:	4b79      	ldr	r3, [pc, #484]	; (80034a0 <Out_Prog+0x24c>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	b29b      	uxth	r3, r3
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b75      	ldr	r3, [pc, #468]	; (8003498 <Out_Prog+0x244>)
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	4053      	eors	r3, r2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	707b      	strb	r3, [r7, #1]
	if(Check_InChange(out_state, out_old) == 0)	return;
 80032cc:	463b      	mov	r3, r7
 80032ce:	4975      	ldr	r1, [pc, #468]	; (80034a4 <Out_Prog+0x250>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fe8b 	bl	8002fec <Check_InChange>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80d7 	beq.w	800348c <Out_Prog+0x238>

	HC595_LUCK_DIS();
 80032de:	4b72      	ldr	r3, [pc, #456]	; (80034a8 <Out_Prog+0x254>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

	if( mExtern_Number )
 80032e4:	4b71      	ldr	r3, [pc, #452]	; (80034ac <Out_Prog+0x258>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8084 	beq.w	80033f6 <Out_Prog+0x1a2>
		{//������չ��
			for(i=mExtern_Number; i>0; i--)
 80032ee:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <Out_Prog+0x258>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e041      	b.n	800337a <Out_Prog+0x126>
				{
					shift = (((uint16_t)out_state[i * 2 + 2] << 8) | out_state[i * 2 + 1]) << 2;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	3301      	adds	r3, #1
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	f107 0210 	add.w	r2, r7, #16
 8003300:	4413      	add	r3, r2
 8003302:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	b21a      	sxth	r2, r3
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	3301      	adds	r3, #1
 8003310:	f107 0110 	add.w	r1, r7, #16
 8003314:	440b      	add	r3, r1
 8003316:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21b      	sxth	r3, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	817b      	strh	r3, [r7, #10]
					temp = out_state[i * 2] & 0xC0; 	//ȡ����2λ
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	f107 0210 	add.w	r2, r7, #16
 800332e:	4413      	add	r3, r2
 8003330:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003338:	737b      	strb	r3, [r7, #13]
					shift |= (temp >> 6);
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	b2db      	uxtb	r3, r3
 8003340:	b29a      	uxth	r2, r3
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	4313      	orrs	r3, r2
 8003346:	817b      	strh	r3, [r7, #10]
					out_state[i * 2 + 2] = (uint8_t)(shift >> 8);
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29a      	uxth	r2, r3
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3301      	adds	r3, #1
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f107 0110 	add.w	r1, r7, #16
 800335a:	440b      	add	r3, r1
 800335c:	f803 2c10 	strb.w	r2, [r3, #-16]
					out_state[i * 2 + 1] = ((uint8_t)shift);
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	3301      	adds	r3, #1
 8003366:	897a      	ldrh	r2, [r7, #10]
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	f107 0110 	add.w	r1, r7, #16
 800336e:	440b      	add	r3, r1
 8003370:	f803 2c10 	strb.w	r2, [r3, #-16]
			for(i=mExtern_Number; i>0; i--)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	3b01      	subs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ba      	bne.n	80032f6 <Out_Prog+0xa2>
				}
			for(i = mExtern_Number * 2 + 3; i > 0; i--)
 8003380:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <Out_Prog+0x258>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3303      	adds	r3, #3
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e027      	b.n	80033de <Out_Prog+0x18a>
				{
					temp = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8003392:	2300      	movs	r3, #0
 8003394:	73bb      	strb	r3, [r7, #14]
 8003396:	e018      	b.n	80033ca <Out_Prog+0x176>
						{
							temp <<= 1;
 8003398:	7b7b      	ldrb	r3, [r7, #13]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	737b      	strb	r3, [r7, #13]
							if(out_state[i-1] & (1 << j))
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	f107 0210 	add.w	r2, r7, #16
 80033a6:	4413      	add	r3, r2
 80033a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80033ac:	461a      	mov	r2, r3
 80033ae:	7bbb      	ldrb	r3, [r7, #14]
 80033b0:	fa42 f303 	asr.w	r3, r2, r3
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <Out_Prog+0x170>
								temp |= 0x01;
 80033bc:	7b7b      	ldrb	r3, [r7, #13]
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	3301      	adds	r3, #1
 80033c8:	73bb      	strb	r3, [r7, #14]
 80033ca:	7bbb      	ldrb	r3, [r7, #14]
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d9e3      	bls.n	8003398 <Out_Prog+0x144>
						}
					SPI_SendOneByte(temp);
 80033d0:	7b7b      	ldrb	r3, [r7, #13]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fe2e 	bl	8003034 <SPI_SendOneByte>
			for(i = mExtern_Number * 2 + 3; i > 0; i--)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	3b01      	subs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1d4      	bne.n	800338e <Out_Prog+0x13a>
				}
			HC595_LUCK_EN();
 80033e4:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <Out_Prog+0x254>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
			__NOP();__NOP();
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
			HC595_LUCK_DIS();
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <Out_Prog+0x254>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e035      	b.n	8003462 <Out_Prog+0x20e>
		}
	else
		{//û����չ��
			for(i=3; i>0; i--)
 80033f6:	2303      	movs	r3, #3
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	e027      	b.n	800344c <Out_Prog+0x1f8>
				{
					temp = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8003400:	2300      	movs	r3, #0
 8003402:	73bb      	strb	r3, [r7, #14]
 8003404:	e018      	b.n	8003438 <Out_Prog+0x1e4>
						{
							temp <<= 1;
 8003406:	7b7b      	ldrb	r3, [r7, #13]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	737b      	strb	r3, [r7, #13]
							if(out_state[i-1] & (1 << j))
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	3b01      	subs	r3, #1
 8003410:	f107 0210 	add.w	r2, r7, #16
 8003414:	4413      	add	r3, r2
 8003416:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800341a:	461a      	mov	r2, r3
 800341c:	7bbb      	ldrb	r3, [r7, #14]
 800341e:	fa42 f303 	asr.w	r3, r2, r3
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <Out_Prog+0x1de>
								temp |= 0x01;
 800342a:	7b7b      	ldrb	r3, [r7, #13]
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	3301      	adds	r3, #1
 8003436:	73bb      	strb	r3, [r7, #14]
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	2b07      	cmp	r3, #7
 800343c:	d9e3      	bls.n	8003406 <Out_Prog+0x1b2>
						}
					SPI_SendOneByte(temp);
 800343e:	7b7b      	ldrb	r3, [r7, #13]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fdf7 	bl	8003034 <SPI_SendOneByte>
			for(i=3; i>0; i--)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	3b01      	subs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1d4      	bne.n	80033fc <Out_Prog+0x1a8>
				}
			HC595_LUCK_EN();
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <Out_Prog+0x254>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
			__NOP();__NOP();
 8003458:	bf00      	nop
 800345a:	bf00      	nop
			HC595_LUCK_DIS();
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <Out_Prog+0x254>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
		}
	for(i=0; i<mMax_InByte; i++)
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e00b      	b.n	8003480 <Out_Prog+0x22c>
		out_old[i] = out_state[i];
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	f107 0110 	add.w	r1, r7, #16
 8003470:	440a      	add	r2, r1
 8003472:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8003476:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <Out_Prog+0x250>)
 8003478:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<mMax_InByte; i++)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	3301      	adds	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <Out_Prog+0x248>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	429a      	cmp	r2, r3
 8003488:	d3ee      	bcc.n	8003468 <Out_Prog+0x214>
 800348a:	e000      	b.n	800348e <Out_Prog+0x23a>
	if(Check_InChange(out_state, out_old) == 0)	return;
 800348c:	bf00      	nop
}
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000598 	.word	0x20000598
 8003498:	2000039c 	.word	0x2000039c
 800349c:	2000097c 	.word	0x2000097c
 80034a0:	20000274 	.word	0x20000274
 80034a4:	20000180 	.word	0x20000180
 80034a8:	42210184 	.word	0x42210184
 80034ac:	200001f2 	.word	0x200001f2

080034b0 <test_mode>:

void test_mode(void){
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t help;
	uint8_t instate[MAX_IN_BYTE];
	uint8_t testno = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75bb      	strb	r3, [r7, #22]
	uint8_t pBuf[5];

	for(i=0; i<MAX_IN_BYTE; i++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
 80034be:	e015      	b.n	80034ec <test_mode+0x3c>
	{
		in_polarity[i] = 0;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	4aab      	ldr	r2, [pc, #684]	; (8003770 <test_mode+0x2c0>)
 80034c4:	2100      	movs	r1, #0
 80034c6:	54d1      	strb	r1, [r2, r3]
		out_polarity[i] = 0;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	4aaa      	ldr	r2, [pc, #680]	; (8003774 <test_mode+0x2c4>)
 80034cc:	2100      	movs	r1, #0
 80034ce:	54d1      	strb	r1, [r2, r3]
		outpush[i] = 0;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	4aa9      	ldr	r2, [pc, #676]	; (8003778 <test_mode+0x2c8>)
 80034d4:	2100      	movs	r1, #0
 80034d6:	54d1      	strb	r1, [r2, r3]
		instate[i] = 0;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	f107 0218 	add.w	r2, r7, #24
 80034de:	4413      	add	r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i=0; i<MAX_IN_BYTE; i++)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	3301      	adds	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d9e6      	bls.n	80034c0 <test_mode+0x10>
	}

	for (i = 1; i < MAX_IO_TYPE; i++)
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
 80034f6:	e006      	b.n	8003506 <test_mode+0x56>
  	virt_in  [i] = 0;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	4aa0      	ldr	r2, [pc, #640]	; (800377c <test_mode+0x2cc>)
 80034fc:	2100      	movs	r1, #0
 80034fe:	54d1      	strb	r1, [r2, r3]
	for (i = 1; i < MAX_IO_TYPE; i++)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	3301      	adds	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d9f5      	bls.n	80034f8 <test_mode+0x48>
	virt_in  [IO_BASIC_FUNC] = TEST_IO;
 800350c:	4b9b      	ldr	r3, [pc, #620]	; (800377c <test_mode+0x2cc>)
 800350e:	22f0      	movs	r2, #240	; 0xf0
 8003510:	701a      	strb	r2, [r3, #0]
	heartbeat = 200;
 8003512:	4b9b      	ldr	r3, [pc, #620]	; (8003780 <test_mode+0x2d0>)
 8003514:	22c8      	movs	r2, #200	; 0xc8
 8003516:	701a      	strb	r2, [r3, #0]
//	TRISCbits.TRISC7	= 0;			//RC7 is output
//	LATCbits.LATC6 = 0;
//	LATCbits.LATC7 = 0;

	//����ģʽĬ��Ϊ3����չ��
	mExtern_Number = 3;
 8003518:	4b9a      	ldr	r3, [pc, #616]	; (8003784 <test_mode+0x2d4>)
 800351a:	2203      	movs	r2, #3
 800351c:	701a      	strb	r2, [r3, #0]
	mInOut_Number = (mExtern_Number*16 + 22) % (MAX_IN + 1);
 800351e:	4b99      	ldr	r3, [pc, #612]	; (8003784 <test_mode+0x2d4>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	f103 0216 	add.w	r2, r3, #22
 8003528:	4b97      	ldr	r3, [pc, #604]	; (8003788 <test_mode+0x2d8>)
 800352a:	fb83 1302 	smull	r1, r3, r3, r2
 800352e:	4413      	add	r3, r2
 8003530:	1199      	asrs	r1, r3, #6
 8003532:	17d3      	asrs	r3, r2, #31
 8003534:	1ac9      	subs	r1, r1, r3
 8003536:	460b      	mov	r3, r1
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a5b      	subs	r3, r3, r1
 8003540:	1ad1      	subs	r1, r2, r3
 8003542:	b2ca      	uxtb	r2, r1
 8003544:	4b91      	ldr	r3, [pc, #580]	; (800378c <test_mode+0x2dc>)
 8003546:	701a      	strb	r2, [r3, #0]
	mMax_InByte = (mInOut_Number >> 3) + 1;
 8003548:	4b90      	ldr	r3, [pc, #576]	; (800378c <test_mode+0x2dc>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	4b8e      	ldr	r3, [pc, #568]	; (8003790 <test_mode+0x2e0>)
 8003556:	701a      	strb	r2, [r3, #0]

	while (1)
		{
			if (!heartbeat)
 8003558:	4b89      	ldr	r3, [pc, #548]	; (8003780 <test_mode+0x2d0>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <test_mode+0xb6>
				{
//					TXB1D0    = nmtstate;							/* write data uint8_t for HEARTBEAT		*/
//					TXB1CONbits.TXREQ = 1;							// transmit request
					heartbeat = 200;
 8003560:	4b87      	ldr	r3, [pc, #540]	; (8003780 <test_mode+0x2d0>)
 8003562:	22c8      	movs	r2, #200	; 0xc8
 8003564:	701a      	strb	r2, [r3, #0]
				}
			ClrWdt();
 8003566:	f000 fd95 	bl	8004094 <ClrWdt>

			if ( Check_InChange(instate, (uint8_t *)in) )					// input state changed
 800356a:	f107 0308 	add.w	r3, r7, #8
 800356e:	4989      	ldr	r1, [pc, #548]	; (8003794 <test_mode+0x2e4>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fd3b 	bl	8002fec <Check_InChange>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8085 	beq.w	8003688 <test_mode+0x1d8>
				{
					for(i=0; i<mInOut_Number; i++)
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]
 8003582:	e067      	b.n	8003654 <test_mode+0x1a4>
						{
							help = bit_select (instate[i/8], i%8);
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f107 0218 	add.w	r2, r7, #24
 800358e:	4413      	add	r3, r2
 8003590:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003594:	461a      	mov	r2, r3
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	fa42 f303 	asr.w	r3, r2, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	757b      	strb	r3, [r7, #21]
							if (help != bit_select (in[i/8], i%8))
 80035a8:	7d7a      	ldrb	r2, [r7, #21]
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	08db      	lsrs	r3, r3, #3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	4b78      	ldr	r3, [pc, #480]	; (8003794 <test_mode+0x2e4>)
 80035b4:	5c5b      	ldrb	r3, [r3, r1]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	fa41 f303 	asr.w	r3, r1, r3
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d040      	beq.n	800364e <test_mode+0x19e>
								{// input has changed
									virt_in[IO_BASIC_FUNC] = CAR_CALL;
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <test_mode+0x2cc>)
 80035ce:	2205      	movs	r2, #5
 80035d0:	701a      	strb	r2, [r3, #0]
									virt_in[IO_SUB_FUNC] = i + 1;
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <test_mode+0x2cc>)
 80035da:	705a      	strb	r2, [r3, #1]
									virt_in[IO_LIFT] = LIFT1;
 80035dc:	4b67      	ldr	r3, [pc, #412]	; (800377c <test_mode+0x2cc>)
 80035de:	2201      	movs	r2, #1
 80035e0:	709a      	strb	r2, [r3, #2]
									virt_in[IO_STATE] = help;
 80035e2:	4a66      	ldr	r2, [pc, #408]	; (800377c <test_mode+0x2cc>)
 80035e4:	7d7b      	ldrb	r3, [r7, #21]
 80035e6:	7153      	strb	r3, [r2, #5]

									if (help)
 80035e8:	7d7b      	ldrb	r3, [r7, #21]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01a      	beq.n	8003624 <test_mode+0x174>
										{
											transmit_in (virt_in);
 80035ee:	4863      	ldr	r0, [pc, #396]	; (800377c <test_mode+0x2cc>)
 80035f0:	f7fe f86c 	bl	80016cc <transmit_in>
											bit_reset(out[i/8], i % 8);
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	08db      	lsrs	r3, r3, #3
 80035f8:	b2d8      	uxtb	r0, r3
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <test_mode+0x2e8>)
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	b25a      	sxtb	r2, r3
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	b25b      	sxtb	r3, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	b25b      	sxtb	r3, r3
 8003616:	4013      	ands	r3, r2
 8003618:	b25b      	sxtb	r3, r3
 800361a:	4602      	mov	r2, r0
 800361c:	b2d9      	uxtb	r1, r3
 800361e:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <test_mode+0x2e8>)
 8003620:	5499      	strb	r1, [r3, r2]
 8003622:	e014      	b.n	800364e <test_mode+0x19e>
										}
									else
										bit_set(out[i/8], i % 8);
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	b2d8      	uxtb	r0, r3
 800362a:	4602      	mov	r2, r0
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <test_mode+0x2e8>)
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	b25a      	sxtb	r2, r3
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	b25b      	sxtb	r3, r3
 8003642:	4313      	orrs	r3, r2
 8003644:	b25b      	sxtb	r3, r3
 8003646:	4602      	mov	r2, r0
 8003648:	b2d9      	uxtb	r1, r3
 800364a:	4b53      	ldr	r3, [pc, #332]	; (8003798 <test_mode+0x2e8>)
 800364c:	5499      	strb	r1, [r3, r2]
					for(i=0; i<mInOut_Number; i++)
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	3301      	adds	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
 8003654:	4b4d      	ldr	r3, [pc, #308]	; (800378c <test_mode+0x2dc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	7dfa      	ldrb	r2, [r7, #23]
 800365a:	429a      	cmp	r2, r3
 800365c:	d392      	bcc.n	8003584 <test_mode+0xd4>
								}
						}

					for(i=0; i<mMax_InByte; i++)
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
 8003662:	e00c      	b.n	800367e <test_mode+0x1ce>
						instate[i] = in[i];
 8003664:	7dfa      	ldrb	r2, [r7, #23]
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	494a      	ldr	r1, [pc, #296]	; (8003794 <test_mode+0x2e4>)
 800366a:	5c8a      	ldrb	r2, [r1, r2]
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f107 0118 	add.w	r1, r7, #24
 8003672:	440b      	add	r3, r1
 8003674:	f803 2c10 	strb.w	r2, [r3, #-16]
					for(i=0; i<mMax_InByte; i++)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	3301      	adds	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
 800367e:	4b44      	ldr	r3, [pc, #272]	; (8003790 <test_mode+0x2e0>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	7dfa      	ldrb	r2, [r7, #23]
 8003684:	429a      	cmp	r2, r3
 8003686:	d3ed      	bcc.n	8003664 <test_mode+0x1b4>
				}
			if (rc)
 8003688:	4b44      	ldr	r3, [pc, #272]	; (800379c <test_mode+0x2ec>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8139 	beq.w	8003906 <test_mode+0x456>
				{
					if (rx [ro][0] == PDO_OUT)
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <test_mode+0x2f0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	4a42      	ldr	r2, [pc, #264]	; (80037a4 <test_mode+0x2f4>)
 800369c:	460b      	mov	r3, r1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	f040 80f6 	bne.w	800389c <test_mode+0x3ec>
						{
							if(rx [ro][2] == CAR_CALL)
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <test_mode+0x2f0>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4619      	mov	r1, r3
 80036b6:	4a3b      	ldr	r2, [pc, #236]	; (80037a4 <test_mode+0x2f4>)
 80036b8:	460b      	mov	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	3302      	adds	r3, #2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d16f      	bne.n	80037ac <test_mode+0x2fc>
								{
									for (i = 0; i < MAX_IO_TYPE; i++) 				// read output function
 80036cc:	2300      	movs	r3, #0
 80036ce:	75fb      	strb	r3, [r7, #23]
 80036d0:	e013      	b.n	80036fa <test_mode+0x24a>
										virt_out [i] = rx[ro][i + 2]; // write to virtual output mapping
 80036d2:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <test_mode+0x2f0>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461c      	mov	r4, r3
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	1c99      	adds	r1, r3, #2
 80036dc:	7dfa      	ldrb	r2, [r7, #23]
 80036de:	4831      	ldr	r0, [pc, #196]	; (80037a4 <test_mode+0x2f4>)
 80036e0:	4623      	mov	r3, r4
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4423      	add	r3, r4
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4403      	add	r3, r0
 80036ea:	440b      	add	r3, r1
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b2d9      	uxtb	r1, r3
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <test_mode+0x2f8>)
 80036f2:	5499      	strb	r1, [r3, r2]
									for (i = 0; i < MAX_IO_TYPE; i++) 				// read output function
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	3301      	adds	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d9e8      	bls.n	80036d2 <test_mode+0x222>
									j = virt_out[IO_SUB_FUNC] - 1;
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <test_mode+0x2f8>)
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	3b01      	subs	r3, #1
 8003706:	753b      	strb	r3, [r7, #20]

									// virtual output matches with physical
									if (virt_out[IO_STATE] & 0x01)
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <test_mode+0x2f8>)
 800370a:	795b      	ldrb	r3, [r3, #5]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <test_mode+0x290>
										{// set acknowledgement
											bit_set (out[j/8], j%8);				// set physical output
 8003714:	7d3b      	ldrb	r3, [r7, #20]
 8003716:	08db      	lsrs	r3, r3, #3
 8003718:	b2d8      	uxtb	r0, r3
 800371a:	4602      	mov	r2, r0
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <test_mode+0x2e8>)
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	b25a      	sxtb	r2, r3
 8003724:	7d3b      	ldrb	r3, [r7, #20]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	b25b      	sxtb	r3, r3
 8003732:	4313      	orrs	r3, r2
 8003734:	b25b      	sxtb	r3, r3
 8003736:	4602      	mov	r2, r0
 8003738:	b2d9      	uxtb	r1, r3
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <test_mode+0x2e8>)
 800373c:	5499      	strb	r1, [r3, r2]
 800373e:	e0cd      	b.n	80038dc <test_mode+0x42c>
										}
									else
										{// reset acknowledgement
											bit_reset (out[j/8], j%8);				// clear physical output
 8003740:	7d3b      	ldrb	r3, [r7, #20]
 8003742:	08db      	lsrs	r3, r3, #3
 8003744:	b2d8      	uxtb	r0, r3
 8003746:	4602      	mov	r2, r0
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <test_mode+0x2e8>)
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	b25a      	sxtb	r2, r3
 8003750:	7d3b      	ldrb	r3, [r7, #20]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	b25b      	sxtb	r3, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	b25b      	sxtb	r3, r3
 8003762:	4013      	ands	r3, r2
 8003764:	b25b      	sxtb	r3, r3
 8003766:	4602      	mov	r2, r0
 8003768:	b2d9      	uxtb	r1, r3
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <test_mode+0x2e8>)
 800376c:	5499      	strb	r1, [r3, r2]
 800376e:	e0b5      	b.n	80038dc <test_mode+0x42c>
 8003770:	20000380 	.word	0x20000380
 8003774:	2000039c 	.word	0x2000039c
 8003778:	20000980 	.word	0x20000980
 800377c:	200005e8 	.word	0x200005e8
 8003780:	2000097d 	.word	0x2000097d
 8003784:	200001f2 	.word	0x200001f2
 8003788:	e6c2b449 	.word	0xe6c2b449
 800378c:	20000189 	.word	0x20000189
 8003790:	2000097c 	.word	0x2000097c
 8003794:	20000390 	.word	0x20000390
 8003798:	20000598 	.word	0x20000598
 800379c:	20000284 	.word	0x20000284
 80037a0:	20000351 	.word	0x20000351
 80037a4:	20000290 	.word	0x20000290
 80037a8:	200005f4 	.word	0x200005f4
										}
								}
							else if(rx [ro][2] == ARRIVAL_INDICATION)
 80037ac:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <test_mode+0x4a8>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	4a6a      	ldr	r2, [pc, #424]	; (800395c <test_mode+0x4ac>)
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	3302      	adds	r3, #2
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b44      	cmp	r3, #68	; 0x44
 80037c6:	d12f      	bne.n	8003828 <test_mode+0x378>
								{//��վ��
									if(rx [ro][IO_STATE + 2])
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <test_mode+0x4a8>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4a63      	ldr	r2, [pc, #396]	; (800395c <test_mode+0x4ac>)
 80037d0:	460b      	mov	r3, r1
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	3307      	adds	r3, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <test_mode+0x356>
										{
											bit_set (out[2], 6);				// set physical output
 80037e4:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <test_mode+0x4b0>)
 80037e6:	789b      	ldrb	r3, [r3, #2]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <test_mode+0x4b0>)
 80037f2:	709a      	strb	r2, [r3, #2]
											bit_set (out[2], 7);				// set physical output
 80037f4:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <test_mode+0x4b0>)
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b57      	ldr	r3, [pc, #348]	; (8003960 <test_mode+0x4b0>)
 8003802:	709a      	strb	r2, [r3, #2]
 8003804:	e06a      	b.n	80038dc <test_mode+0x42c>
//											LATCbits.LATC6 = 1;
//											LATCbits.LATC7 = 1;
										}
									else
										{
											bit_reset (out[2], 6);				// set physical output
 8003806:	4b56      	ldr	r3, [pc, #344]	; (8003960 <test_mode+0x4b0>)
 8003808:	789b      	ldrb	r3, [r3, #2]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b53      	ldr	r3, [pc, #332]	; (8003960 <test_mode+0x4b0>)
 8003814:	709a      	strb	r2, [r3, #2]
											bit_reset (out[2], 7);				// set physical output
 8003816:	4b52      	ldr	r3, [pc, #328]	; (8003960 <test_mode+0x4b0>)
 8003818:	789b      	ldrb	r3, [r3, #2]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <test_mode+0x4b0>)
 8003824:	709a      	strb	r2, [r3, #2]
 8003826:	e059      	b.n	80038dc <test_mode+0x42c>
//											LATCbits.LATC6 = 0;
//											LATCbits.LATC7 = 0;
										}
								}
							else if((rx [ro][2] == SPECIAL_FUNC) && (rx [ro][3] == BUZZER))
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <test_mode+0x4a8>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	4a4b      	ldr	r2, [pc, #300]	; (800395c <test_mode+0x4ac>)
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	3302      	adds	r3, #2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b0e      	cmp	r3, #14
 8003842:	d14b      	bne.n	80038dc <test_mode+0x42c>
 8003844:	4b44      	ldr	r3, [pc, #272]	; (8003958 <test_mode+0x4a8>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4619      	mov	r1, r3
 800384a:	4a44      	ldr	r2, [pc, #272]	; (800395c <test_mode+0x4ac>)
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	3303      	adds	r3, #3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d13d      	bne.n	80038dc <test_mode+0x42c>
								{
									if(rx [ro][IO_STATE + 2])
 8003860:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <test_mode+0x4a8>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <test_mode+0x4ac>)
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	3307      	adds	r3, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <test_mode+0x3dc>
										buzzer |= BUZ_WORKING;
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <test_mode+0x4b4>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <test_mode+0x4b4>)
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e027      	b.n	80038dc <test_mode+0x42c>
									else
										buzzer &= ~BUZ_WORKING;
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <test_mode+0x4b4>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b33      	ldr	r3, [pc, #204]	; (8003964 <test_mode+0x4b4>)
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e01f      	b.n	80038dc <test_mode+0x42c>
								}
						}
					else if ((rx [ro][0] == NMT) && (rx [ro][2] == RESET_NODE))
 800389c:	4b2e      	ldr	r3, [pc, #184]	; (8003958 <test_mode+0x4a8>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	4a2e      	ldr	r2, [pc, #184]	; (800395c <test_mode+0x4ac>)
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d112      	bne.n	80038dc <test_mode+0x42c>
 80038b6:	4b28      	ldr	r3, [pc, #160]	; (8003958 <test_mode+0x4a8>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <test_mode+0x4ac>)
 80038be:	460b      	mov	r3, r1
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	3302      	adds	r3, #2
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b81      	cmp	r3, #129	; 0x81
 80038d0:	d104      	bne.n	80038dc <test_mode+0x42c>
						{
							merker = 0;
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <test_mode+0x4b8>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
							HAL_NVIC_SystemReset();
 80038d8:	f002 fd25 	bl	8006326 <HAL_NVIC_SystemReset>
							//Reset();
						}
					if (ro == (RX_SIZE-1))						/* increment RX message read pointer	*/
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <test_mode+0x4a8>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	d103      	bne.n	80038ec <test_mode+0x43c>
						ro = 0;
 80038e4:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <test_mode+0x4a8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e005      	b.n	80038f8 <test_mode+0x448>
					else
						ro++;
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <test_mode+0x4a8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <test_mode+0x4a8>)
 80038f6:	701a      	strb	r2, [r3, #0]
					rc--;										/* decrement RX counter					*/
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <test_mode+0x4bc>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <test_mode+0x4bc>)
 8003904:	701a      	strb	r2, [r3, #0]
				}

			if(bTime.Time_10ms)
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <test_mode+0x4c0>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	f43f ae21 	beq.w	8003558 <test_mode+0xa8>
				{
					ReadInput();		//��ȡ���еİ�ť����
 8003916:	f7ff fbbd 	bl	8003094 <ReadInput>
					Out_Prog(); 					//�������е����(������ʾ���)
 800391a:	f7ff fc9b 	bl	8003254 <Out_Prog>
					bTime.Time_10ms = 0;
 800391e:	4a14      	ldr	r2, [pc, #80]	; (8003970 <test_mode+0x4c0>)
 8003920:	7813      	ldrb	r3, [r2, #0]
 8003922:	f36f 0300 	bfc	r3, #0, #1
 8003926:	7013      	strb	r3, [r2, #0]
					if((++testno % 10) == 0)
 8003928:	7dbb      	ldrb	r3, [r7, #22]
 800392a:	3301      	adds	r3, #1
 800392c:	75bb      	strb	r3, [r7, #22]
 800392e:	7dba      	ldrb	r2, [r7, #22]
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <test_mode+0x4c4>)
 8003932:	fba3 1302 	umull	r1, r3, r3, r2
 8003936:	08d9      	lsrs	r1, r3, #3
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f ae07 	bne.w	8003558 <test_mode+0xa8>
						{
							pBuf[0] = 0xA0;
 800394a:	23a0      	movs	r3, #160	; 0xa0
 800394c:	703b      	strb	r3, [r7, #0]
							pBuf[1]++;
 800394e:	787b      	ldrb	r3, [r7, #1]
 8003950:	3301      	adds	r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	707b      	strb	r3, [r7, #1]
			if (!heartbeat)
 8003956:	e5ff      	b.n	8003558 <test_mode+0xa8>
 8003958:	20000351 	.word	0x20000351
 800395c:	20000290 	.word	0x20000290
 8003960:	20000598 	.word	0x20000598
 8003964:	200001ec 	.word	0x200001ec
 8003968:	200001f8 	.word	0x200001f8
 800396c:	20000284 	.word	0x20000284
 8003970:	2000038c 	.word	0x2000038c
 8003974:	cccccccd 	.word	0xcccccccd

08003978 <UART_SendBuf>:

#define	_DISPLAY_C_
#include	"AllHeader.h"


void UART_SendBuf(uint8_t* pBuf, uint8_t len){
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
//		-- uart_send_len;
//		bFunc.uart_send_busy = true;
//	}
//	PIE1bits.TXIE		= 1;
//	INTCONbits.GIEL	= 1;
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
	...

08003990 <Display_device>:

void Display_device(void){
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
	uint8_t i, checksum;

	checksum = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	71bb      	strb	r3, [r7, #6]
	mDisp_buf[0] = 0xB0;	
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <Display_device+0x44>)
 800399c:	22b0      	movs	r2, #176	; 0xb0
 800399e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<4; ++i)
 80039a0:	2300      	movs	r3, #0
 80039a2:	71fb      	strb	r3, [r7, #7]
 80039a4:	e008      	b.n	80039b8 <Display_device+0x28>
		checksum += mDisp_buf[i];
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <Display_device+0x44>)
 80039aa:	5cd2      	ldrb	r2, [r2, r3]
 80039ac:	79bb      	ldrb	r3, [r7, #6]
 80039ae:	4413      	add	r3, r2
 80039b0:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<4; ++i)
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	3301      	adds	r3, #1
 80039b6:	71fb      	strb	r3, [r7, #7]
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d9f3      	bls.n	80039a6 <Display_device+0x16>
	mDisp_buf[4] = checksum;
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <Display_device+0x44>)
 80039c0:	79bb      	ldrb	r3, [r7, #6]
 80039c2:	7113      	strb	r3, [r2, #4]
	UART_SendBuf(mDisp_buf, 5);
 80039c4:	2105      	movs	r1, #5
 80039c6:	4803      	ldr	r0, [pc, #12]	; (80039d4 <Display_device+0x44>)
 80039c8:	f7ff ffd6 	bl	8003978 <UART_SendBuf>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000368 	.word	0x20000368

080039d8 <Arrow_Status>:

void Arrow_Status(void){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	uint8_t buf[5], checksum = 0, i;
 80039de:	2300      	movs	r3, #0
 80039e0:	71fb      	strb	r3, [r7, #7]

	buf[0] = 0xA0;
 80039e2:	23a0      	movs	r3, #160	; 0xa0
 80039e4:	703b      	strb	r3, [r7, #0]
	buf[1] = display[BUF_MESSAGE];
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <Arrow_Status+0x6c>)
 80039e8:	78db      	ldrb	r3, [r3, #3]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	70bb      	strb	r3, [r7, #2]
	buf[3] = mArrow_State % 3;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Arrow_Status+0x70>)
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <Arrow_Status+0x74>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	0859      	lsrs	r1, r3, #1
 80039fe:	460b      	mov	r3, r1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	440b      	add	r3, r1
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<4; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	71bb      	strb	r3, [r7, #6]
 8003a0e:	e00b      	b.n	8003a28 <Arrow_Status+0x50>
		checksum += buf[i];
 8003a10:	79bb      	ldrb	r3, [r7, #6]
 8003a12:	f107 0208 	add.w	r2, r7, #8
 8003a16:	4413      	add	r3, r2
 8003a18:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	4413      	add	r3, r2
 8003a20:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<4; i++)
 8003a22:	79bb      	ldrb	r3, [r7, #6]
 8003a24:	3301      	adds	r3, #1
 8003a26:	71bb      	strb	r3, [r7, #6]
 8003a28:	79bb      	ldrb	r3, [r7, #6]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d9f0      	bls.n	8003a10 <Arrow_Status+0x38>
	buf[4] = checksum;
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	713b      	strb	r3, [r7, #4]
	UART_SendBuf(buf, 5);
 8003a32:	463b      	mov	r3, r7
 8003a34:	2105      	movs	r1, #5
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ff9e 	bl	8003978 <UART_SendBuf>
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000364 	.word	0x20000364
 8003a48:	20000370 	.word	0x20000370
 8003a4c:	aaaaaaab 	.word	0xaaaaaaab

08003a50 <Flash_Unlock>:
{
	HAL_FLASH_Lock();
}

void Flash_Unlock()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8003a54:	f002 fce8 	bl	8006428 <HAL_FLASH_Unlock>
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <Flash_Erase>:

void Flash_Erase(uint32_t addr)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  while((FLASH->SR&FLASH_SR_BSY));
 8003a64:	bf00      	nop
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <Flash_Erase+0x64>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f9      	bne.n	8003a66 <Flash_Erase+0xa>
  FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <Flash_Erase+0x64>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <Flash_Erase+0x64>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	6113      	str	r3, [r2, #16]
  FLASH->AR = addr; //Page Address
 8003a7e:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <Flash_Erase+0x64>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6153      	str	r3, [r2, #20]
  FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <Flash_Erase+0x64>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <Flash_Erase+0x64>)
 8003a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8e:	6113      	str	r3, [r2, #16]
  while((FLASH->SR&FLASH_SR_BSY));
 8003a90:	bf00      	nop
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <Flash_Erase+0x64>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f9      	bne.n	8003a92 <Flash_Erase+0x36>
	FLASH->CR &= ~FLASH_SR_BSY;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <Flash_Erase+0x64>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <Flash_Erase+0x64>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6113      	str	r3, [r2, #16]
  FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <Flash_Erase+0x64>)
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <Flash_Erase+0x64>)
 8003ab0:	f023 0302 	bic.w	r3, r3, #2
 8003ab4:	6113      	str	r3, [r2, #16]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40022000 	.word	0x40022000

08003ac4 <Flash_Read_Int>:
	FLASH->CR &= ~FLASH_CR_PG;
	Flash_Lock();
}

uint16_t Flash_Read_Int(uint32_t addr)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	uint16_t* val = (uint16_t *)addr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60fb      	str	r3, [r7, #12]
	return *val;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	881b      	ldrh	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
	...

08003ae0 <Flash_Write_Bytes>:
  FLASH->CR &= ~FLASH_CR_PG;
  FLASH->CR |= FLASH_CR_LOCK;
}

void Flash_Write_Bytes(uint32_t addr, uint8_t* data,uint16_t len)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  Flash_Unlock();
 8003aee:	f7ff ffaf 	bl	8003a50 <Flash_Unlock>
  Flash_Erase(addr);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ffb2 	bl	8003a5c <Flash_Erase>
  FLASH->CR |= FLASH_CR_PG;
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6113      	str	r3, [r2, #16]
	uint16_t var = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	827b      	strh	r3, [r7, #18]

  for(int i=0; i<len; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e012      	b.n	8003b34 <Flash_Write_Bytes+0x54>
  {
	  var = (uint16_t)data[i];
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	827b      	strh	r3, [r7, #18]
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (addr + i*2), var);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	18d1      	adds	r1, r2, r3
 8003b22:	8a7a      	ldrh	r2, [r7, #18]
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f002 fc0d 	bl	8006348 <HAL_FLASH_Program>
  for(int i=0; i<len; i++)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	3301      	adds	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	dbe8      	blt.n	8003b0e <Flash_Write_Bytes+0x2e>
//    while(FLASH->SR &  FLASH_SR_BSY)
//    {}
//
//    *(__IO uint16_t*)(addr + i*2) = var;
  }
	while((FLASH->SR&FLASH_SR_BSY)){};
 8003b3c:	bf00      	nop
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <Flash_Write_Bytes+0x5e>
  FLASH->CR &= ~FLASH_CR_PG;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_LOCK;
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <Flash_Write_Bytes+0x8c>)
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	6113      	str	r3, [r2, #16]
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40022000 	.word	0x40022000

08003b70 <Flash_Read_Bytes>:
void Flash_Read_Bytes(uint8_t* dataOut, uint32_t addr1, uint16_t len)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]

	for(int i = 0; i < len; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e011      	b.n	8003ba8 <Flash_Read_Bytes+0x38>
	{
		dataOut[i] = Flash_Read_Int(addr1 + (uint32_t)(i*2));
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff ff98 	bl	8003ac4 <Flash_Read_Int>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4619      	mov	r1, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	b2ca      	uxtb	r2, r1
 8003ba0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dbe9      	blt.n	8003b84 <Flash_Read_Bytes+0x14>
	}
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_PeriodElapsedCallback>:

static uint32_t time1_cnt = 0;

uint32_t inspection_time;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]

	static uint32_t time0_cnt = 0;
	static uint32_t reloadtime =0;
	if(htim->Instance == htim1.Instance)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4ba4      	ldr	r3, [pc, #656]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d161      	bne.n	8003c98 <HAL_TIM_PeriodElapsedCallback+0xdc>
	{
		bTime.Time_10ms = 1;
 8003bd4:	4aa3      	ldr	r2, [pc, #652]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003bd6:	7813      	ldrb	r3, [r2, #0]
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	7013      	strb	r3, [r2, #0]
		time1_cnt++;
 8003bde:	4ba2      	ldr	r3, [pc, #648]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	4aa0      	ldr	r2, [pc, #640]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003be6:	6013      	str	r3, [r2, #0]
		time10ms = HAL_GetTick() - reloadtime;
 8003be8:	f001 fc1a 	bl	8005420 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b9f      	ldr	r3, [pc, #636]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	4a9e      	ldr	r2, [pc, #632]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003bf6:	6013      	str	r3, [r2, #0]
		reloadtime = HAL_GetTick();
 8003bf8:	f001 fc12 	bl	8005420 <HAL_GetTick>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4a9b      	ldr	r2, [pc, #620]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003c00:	6013      	str	r3, [r2, #0]
		Keytimout --;
 8003c02:	4b9c      	ldr	r3, [pc, #624]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a9a      	ldr	r2, [pc, #616]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003c0a:	6013      	str	r3, [r2, #0]
		LedOfftimout --;
 8003c0c:	4b9a      	ldr	r3, [pc, #616]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	4a99      	ldr	r2, [pc, #612]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003c14:	6013      	str	r3, [r2, #0]
		if((time1_cnt % 10) == 0)
 8003c16:	4b94      	ldr	r3, [pc, #592]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003c1c:	fba3 2301 	umull	r2, r3, r3, r1
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	1aca      	subs	r2, r1, r3
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d120      	bne.n	8003c72 <HAL_TIM_PeriodElapsedCallback+0xb6>
			{//100ms
				bTime.Time_100ms = 1;
 8003c30:	4a8c      	ldr	r2, [pc, #560]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003c32:	7813      	ldrb	r3, [r2, #0]
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	7013      	strb	r3, [r2, #0]
				if (bBusOffTimer)
 8003c3a:	4b91      	ldr	r3, [pc, #580]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_TIM_PeriodElapsedCallback+0x94>
					-- bBusOffTimer;
 8003c42:	4b8f      	ldr	r3, [pc, #572]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4b8d      	ldr	r3, [pc, #564]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e010      	b.n	8003c72 <HAL_TIM_PeriodElapsedCallback+0xb6>
				else
					{
						if(bFunc.buz_set_id)
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <HAL_TIM_PeriodElapsedCallback+0xb6>
							{
								Disable_BUZ();
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2101      	movs	r1, #1
 8003c62:	4889      	ldr	r0, [pc, #548]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003c64:	f002 fe53 	bl	800690e <HAL_GPIO_WritePin>
								bFunc.buz_set_id = 0;
 8003c68:	4a86      	ldr	r2, [pc, #536]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003c6a:	7813      	ldrb	r3, [r2, #0]
 8003c6c:	f36f 0300 	bfc	r3, #0, #1
 8003c70:	7013      	strb	r3, [r2, #0]
							}
					}
			}
		if((time1_cnt % 200) == 0)
 8003c72:	4b7d      	ldr	r3, [pc, #500]	; (8003e68 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b85      	ldr	r3, [pc, #532]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003c78:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	21c8      	movs	r1, #200	; 0xc8
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 80e5 	bne.w	8003e56 <HAL_TIM_PeriodElapsedCallback+0x29a>
			bTime.Time_2s = 1;
 8003c8c:	4a75      	ldr	r2, [pc, #468]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003c8e:	7813      	ldrb	r3, [r2, #0]
 8003c90:	f043 0308 	orr.w	r3, r3, #8
 8003c94:	7013      	strb	r3, [r2, #0]
										}
								}
						}

	}
}
 8003c96:	e0de      	b.n	8003e56 <HAL_TIM_PeriodElapsedCallback+0x29a>
	else if(htim->Instance == htim2.Instance)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	f040 80d8 	bne.w	8003e56 <HAL_TIM_PeriodElapsedCallback+0x29a>
					bTime.Time_500ms = true;
 8003ca6:	4a6f      	ldr	r2, [pc, #444]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003ca8:	7813      	ldrb	r3, [r2, #0]
 8003caa:	f043 0304 	orr.w	r3, r3, #4
 8003cae:	7013      	strb	r3, [r2, #0]
					bTime.flash_floor_500ms = true;
 8003cb0:	4a6c      	ldr	r2, [pc, #432]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003cb2:	7813      	ldrb	r3, [r2, #0]
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb8:	7013      	strb	r3, [r2, #0]
					time0_cnt++;
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a74      	ldr	r2, [pc, #464]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003cc2:	6013      	str	r3, [r2, #0]
					if (!nmtstate)						// only during Boot up
 8003cc4:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <HAL_TIM_PeriodElapsedCallback+0x128>
							if (nmtwait)					// waiting time for first heartbeat
 8003ccc:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_TIM_PeriodElapsedCallback+0x128>
								nmtwait--;
 8003cd6:	4b71      	ldr	r3, [pc, #452]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003ce2:	701a      	strb	r2, [r3, #0]
					if (heartbeat)						// decrement heartbeat timer
 8003ce4:	4b6e      	ldr	r3, [pc, #440]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_TIM_PeriodElapsedCallback+0x13c>
						heartbeat--;
 8003cec:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003cf6:	701a      	strb	r2, [r3, #0]
					if (sdo_timer)			// check for SDO transfer time out
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_TIM_PeriodElapsedCallback+0x150>
						sdo_timer--;
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003d0a:	701a      	strb	r2, [r3, #0]
					if (hsetime)
 8003d0c:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_TIM_PeriodElapsedCallback+0x17c>
							hsetime--;
 8003d16:	4b64      	ldr	r3, [pc, #400]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003d22:	701a      	strb	r2, [r3, #0]
							if (!hsetime) 		// HSE heartbeat time out
 8003d24:	4b60      	ldr	r3, [pc, #384]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <HAL_TIM_PeriodElapsedCallback+0x17c>
								bFunc.hsecheck = true; 	// HSE check necessary
 8003d2e:	4a55      	ldr	r2, [pc, #340]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003d30:	7813      	ldrb	r3, [r2, #0]
 8003d32:	f043 0320 	orr.w	r3, r3, #32
 8003d36:	7013      	strb	r3, [r2, #0]
					if((time0_cnt % 10) == 0)
 8003d38:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d42:	08da      	lsrs	r2, r3, #3
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	1aca      	subs	r2, r1, r3
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_TIM_PeriodElapsedCallback+0x1a0>
						bTime.Time_5s = 1;
 8003d52:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003d54:	7813      	ldrb	r3, [r2, #0]
 8003d56:	f043 0310 	orr.w	r3, r3, #16
 8003d5a:	7013      	strb	r3, [r2, #0]
					if(att_alarm_timer)
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d026      	beq.n	8003db2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
							--att_alarm_timer;
 8003d64:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003d6e:	701a      	strb	r2, [r3, #0]
							if(!att_alarm_timer)
 8003d70:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11c      	bne.n	8003db2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
									if(bTime.Time_alarm_fg)
 8003d78:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <HAL_TIM_PeriodElapsedCallback+0x1d8>
										buzzer &= ~BUZ_WORKING;
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003d92:	701a      	strb	r2, [r3, #0]
									bFunc.buz_state = !bFunc.buz_state;
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2d9      	uxtb	r1, r3
 8003da8:	4a36      	ldr	r2, [pc, #216]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003daa:	7813      	ldrb	r3, [r2, #0]
 8003dac:	f361 0341 	bfi	r3, r1, #1, #1
 8003db0:	7013      	strb	r3, [r2, #0]
					if(buz_alarm_totaltimer)
 8003db2:	4b40      	ldr	r3, [pc, #256]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_TIM_PeriodElapsedCallback+0x20a>
						--buz_alarm_totaltimer;
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003dc4:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < mInOut_Number; i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e03f      	b.n	8003e4c <HAL_TIM_PeriodElapsedCallback+0x290>
							if (outpar [i][IO_BASIC_FUNC] == ARRIVAL_INDICATION)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003dd0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003dd4:	2b44      	cmp	r3, #68	; 0x44
 8003dd6:	d136      	bne.n	8003e46 <HAL_TIM_PeriodElapsedCallback+0x28a>
							if (outpar [i][IO_ACK])
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	79db      	ldrb	r3, [r3, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02f      	beq.n	8003e46 <HAL_TIM_PeriodElapsedCallback+0x28a>
									outpar [i][IO_ACK]--; 			//decrement time counter
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	4933      	ldr	r1, [pc, #204]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003dea:	00d3      	lsls	r3, r2, #3
 8003dec:	440b      	add	r3, r1
 8003dee:	79db      	ldrb	r3, [r3, #7]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	4930      	ldr	r1, [pc, #192]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003df6:	00d3      	lsls	r3, r2, #3
 8003df8:	440b      	add	r3, r1
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])		//time out
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	79db      	ldrb	r3, [r3, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11c      	bne.n	8003e46 <HAL_TIM_PeriodElapsedCallback+0x28a>
											bit_reset (out[i/8], i % 8);			// switch off output
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	b2d8      	uxtb	r0, r3
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	b25a      	sxtb	r2, r3
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	2101      	movs	r1, #1
 8003e24:	fa01 f303 	lsl.w	r3, r1, r3
 8003e28:	b25b      	sxtb	r3, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	4602      	mov	r2, r0
 8003e34:	b2d9      	uxtb	r1, r3
 8003e36:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003e38:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d3ba      	bcc.n	8003dcc <HAL_TIM_PeriodElapsedCallback+0x210>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000894 	.word	0x20000894
 8003e64:	2000038c 	.word	0x2000038c
 8003e68:	20000278 	.word	0x20000278
 8003e6c:	2000027c 	.word	0x2000027c
 8003e70:	2000088c 	.word	0x2000088c
 8003e74:	2000018c 	.word	0x2000018c
 8003e78:	20000190 	.word	0x20000190
 8003e7c:	cccccccd 	.word	0xcccccccd
 8003e80:	200001f4 	.word	0x200001f4
 8003e84:	20000930 	.word	0x20000930
 8003e88:	40010800 	.word	0x40010800
 8003e8c:	51eb851f 	.word	0x51eb851f
 8003e90:	20000934 	.word	0x20000934
 8003e94:	20000280 	.word	0x20000280
 8003e98:	20000890 	.word	0x20000890
 8003e9c:	200008dd 	.word	0x200008dd
 8003ea0:	2000097d 	.word	0x2000097d
 8003ea4:	200001f1 	.word	0x200001f1
 8003ea8:	20000884 	.word	0x20000884
 8003eac:	200001f5 	.word	0x200001f5
 8003eb0:	200001ec 	.word	0x200001ec
 8003eb4:	200001f7 	.word	0x200001f7
 8003eb8:	2000060c 	.word	0x2000060c
 8003ebc:	20000598 	.word	0x20000598
 8003ec0:	20000189 	.word	0x20000189

08003ec4 <check_hse>:
void check_hse (uint8_t mode){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t help;
	uint8_t i;

	help = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
	if (!hsetime)								/* 5s no heartbeat from HSE				*/
 8003ed2:	4b69      	ldr	r3, [pc, #420]	; (8004078 <check_hse+0x1b4>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d122      	bne.n	8003f22 <check_hse+0x5e>
		{
			help = 1;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
			hsetime  = HSETIME;						/* restart HSE heartbeat timer			*/
 8003ee0:	4b65      	ldr	r3, [pc, #404]	; (8004078 <check_hse+0x1b4>)
 8003ee2:	2214      	movs	r2, #20
 8003ee4:	701a      	strb	r2, [r3, #0]
			display[BUF_TEN] = 'N';			//A_BETR;
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <check_hse+0x1b8>)
 8003ee8:	224e      	movs	r2, #78	; 0x4e
 8003eea:	701a      	strb	r2, [r3, #0]
			display[BUF_UNIT] = 'C';		//A_BETR;
 8003eec:	4b63      	ldr	r3, [pc, #396]	; (800407c <check_hse+0x1b8>)
 8003eee:	2243      	movs	r2, #67	; 0x43
 8003ef0:	705a      	strb	r2, [r3, #1]
			display[BUF_ARROW] = 0;
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <check_hse+0x1b8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	709a      	strb	r2, [r3, #2]
			display[BUF_MESSAGE] = 0;
 8003ef8:	4b60      	ldr	r3, [pc, #384]	; (800407c <check_hse+0x1b8>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	70da      	strb	r2, [r3, #3]
			hse_heartbeat = 0;
 8003efe:	4b60      	ldr	r3, [pc, #384]	; (8004080 <check_hse+0x1bc>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
			mDisp_buf[BUF_TEN + 1] = display[BUF_TEN];
 8003f04:	4b5d      	ldr	r3, [pc, #372]	; (800407c <check_hse+0x1b8>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b5e      	ldr	r3, [pc, #376]	; (8004084 <check_hse+0x1c0>)
 8003f0c:	705a      	strb	r2, [r3, #1]
			mDisp_buf[BUF_UNIT + 1] = display[BUF_UNIT];
 8003f0e:	4b5b      	ldr	r3, [pc, #364]	; (800407c <check_hse+0x1b8>)
 8003f10:	785b      	ldrb	r3, [r3, #1]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <check_hse+0x1c0>)
 8003f16:	709a      	strb	r2, [r3, #2]
			mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8003f18:	4b58      	ldr	r3, [pc, #352]	; (800407c <check_hse+0x1b8>)
 8003f1a:	789b      	ldrb	r3, [r3, #2]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4b59      	ldr	r3, [pc, #356]	; (8004084 <check_hse+0x1c0>)
 8003f20:	70da      	strb	r2, [r3, #3]
		}

	if (help && mode)											/* one or more HSE not available		*/
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80a2 	beq.w	800406e <check_hse+0x1aa>
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 809e 	beq.w	800406e <check_hse+0x1aa>
		{
			for (i = 0; i < mInOut_Number; i++)					/* check all call indications			*/
 8003f32:	2300      	movs	r3, #0
 8003f34:	73bb      	strb	r3, [r7, #14]
 8003f36:	e094      	b.n	8004062 <check_hse+0x19e>
				{
					if (check_for_call (outpar [i][IO_BASIC_FUNC]))
 8003f38:	7bbb      	ldrb	r3, [r7, #14]
 8003f3a:	4a53      	ldr	r2, [pc, #332]	; (8004088 <check_hse+0x1c4>)
 8003f3c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fd fcb5 	bl	80018b0 <check_for_call>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d037      	beq.n	8003fbc <check_hse+0xf8>
						{											/* output is call acknowledgement		*/
				  		outpar [i][IO_ACK] &= ~help;
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <check_hse+0x1c4>)
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	79db      	ldrb	r3, [r3, #7]
 8003f56:	b25a      	sxtb	r2, r3
 8003f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	4013      	ands	r3, r2
 8003f62:	b25a      	sxtb	r2, r3
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	b2d1      	uxtb	r1, r2
 8003f68:	4a47      	ldr	r2, [pc, #284]	; (8004088 <check_hse+0x1c4>)
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	460a      	mov	r2, r1
 8003f70:	71da      	strb	r2, [r3, #7]
							if (!outpar [i][IO_ACK])				/* all acknowledgements cancelled		*/
 8003f72:	7bbb      	ldrb	r3, [r7, #14]
 8003f74:	4a44      	ldr	r2, [pc, #272]	; (8004088 <check_hse+0x1c4>)
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	79db      	ldrb	r3, [r3, #7]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d16d      	bne.n	800405c <check_hse+0x198>
								{
									bit_reset (out[i/8], i%8);					/* clear output							*/
 8003f80:	7bbb      	ldrb	r3, [r7, #14]
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	b2d8      	uxtb	r0, r3
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b40      	ldr	r3, [pc, #256]	; (800408c <check_hse+0x1c8>)
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	b25a      	sxtb	r2, r3
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	b2d9      	uxtb	r1, r3
 8003faa:	4b38      	ldr	r3, [pc, #224]	; (800408c <check_hse+0x1c8>)
 8003fac:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_STATE] = 0;
 8003fae:	7bbb      	ldrb	r3, [r7, #14]
 8003fb0:	4a35      	ldr	r2, [pc, #212]	; (8004088 <check_hse+0x1c4>)
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	715a      	strb	r2, [r3, #5]
 8003fba:	e04f      	b.n	800405c <check_hse+0x198>
								}
						}
					else										/* all other output functions			*/
						{
							if (outpar [i][IO_LIFT] & help)			/* output for this lift					*/
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	4a32      	ldr	r2, [pc, #200]	; (8004088 <check_hse+0x1c4>)
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	789a      	ldrb	r2, [r3, #2]
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d045      	beq.n	800405c <check_hse+0x198>
								{
									if ((outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC) &&
 8003fd0:	7bbb      	ldrb	r3, [r7, #14]
 8003fd2:	4a2d      	ldr	r2, [pc, #180]	; (8004088 <check_hse+0x1c4>)
 8003fd4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003fd8:	2b0e      	cmp	r3, #14
 8003fda:	d122      	bne.n	8004022 <check_hse+0x15e>
									    (outpar [i][IO_SUB_FUNC]	  == OUT_OF_ORDER))
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <check_hse+0x1c4>)
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	785b      	ldrb	r3, [r3, #1]
									if ((outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC) &&
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d11b      	bne.n	8004022 <check_hse+0x15e>
										{
											bit_set (out[i/8], i%8);				/* set physical output					*/
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	b2d8      	uxtb	r0, r3
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <check_hse+0x1c8>)
 8003ff4:	5c9b      	ldrb	r3, [r3, r2]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	b25a      	sxtb	r2, r3
 8003ffa:	7bbb      	ldrb	r3, [r7, #14]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	2101      	movs	r1, #1
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	b25b      	sxtb	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b25b      	sxtb	r3, r3
 800400c:	4602      	mov	r2, r0
 800400e:	b2d9      	uxtb	r1, r3
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <check_hse+0x1c8>)
 8004012:	5499      	strb	r1, [r3, r2]
					 						outpar [i][IO_STATE] = 1;
 8004014:	7bbb      	ldrb	r3, [r7, #14]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <check_hse+0x1c4>)
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	2201      	movs	r2, #1
 800401e:	715a      	strb	r2, [r3, #5]
 8004020:	e01c      	b.n	800405c <check_hse+0x198>
										}
									else
										{
											bit_reset (out[i/8], i%8);				/* reset physical output				*/
 8004022:	7bbb      	ldrb	r3, [r7, #14]
 8004024:	08db      	lsrs	r3, r3, #3
 8004026:	b2d8      	uxtb	r0, r3
 8004028:	4602      	mov	r2, r0
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <check_hse+0x1c8>)
 800402c:	5c9b      	ldrb	r3, [r3, r2]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	b25a      	sxtb	r2, r3
 8004032:	7bbb      	ldrb	r3, [r7, #14]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	b25b      	sxtb	r3, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	b25b      	sxtb	r3, r3
 8004044:	4013      	ands	r3, r2
 8004046:	b25b      	sxtb	r3, r3
 8004048:	4602      	mov	r2, r0
 800404a:	b2d9      	uxtb	r1, r3
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <check_hse+0x1c8>)
 800404e:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <check_hse+0x1c4>)
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	2200      	movs	r2, #0
 800405a:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)					/* check all call indications			*/
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	3301      	adds	r3, #1
 8004060:	73bb      	strb	r3, [r7, #14]
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <check_hse+0x1cc>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	7bba      	ldrb	r2, [r7, #14]
 8004068:	429a      	cmp	r2, r3
 800406a:	f4ff af65 	bcc.w	8003f38 <check_hse+0x74>
										}
								}
						}
				}
		}
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000884 	.word	0x20000884
 800407c:	20000364 	.word	0x20000364
 8004080:	200001f3 	.word	0x200001f3
 8004084:	20000368 	.word	0x20000368
 8004088:	2000060c 	.word	0x2000060c
 800408c:	20000598 	.word	0x20000598
 8004090:	20000189 	.word	0x20000189

08004094 <ClrWdt>:
void ClrWdt (void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0

}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <Find_target_Floor>:
int Find_target_Floor(int len)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	if(len ==1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <Find_target_Floor+0x1e>
	{
		virt_key[1] = virt_key[0];
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <Find_target_Floor+0x80>)
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <Find_target_Floor+0x80>)
 80040b4:	705a      	strb	r2, [r3, #1]
		virt_key[0] = 0;
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <Find_target_Floor+0x80>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e006      	b.n	80040cc <Find_target_Floor+0x2c>
	}
	else
	{
		if(virt_key[0] == '0')
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <Find_target_Floor+0x80>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d102      	bne.n	80040cc <Find_target_Floor+0x2c>
			virt_key[0] =0;
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <Find_target_Floor+0x80>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
	}
	for(int icc=0;icc<TOTAL_FLOOR;icc++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e01c      	b.n	800410c <Find_target_Floor+0x6c>
	{
		if((FloorName[icc][0] == virt_key[0]) && (FloorName[icc][1] == virt_key[1]) )
 80040d2:	4a14      	ldr	r2, [pc, #80]	; (8004124 <Find_target_Floor+0x84>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <Find_target_Floor+0x80>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d111      	bne.n	8004106 <Find_target_Floor+0x66>
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <Find_target_Floor+0x84>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	785a      	ldrb	r2, [r3, #1]
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <Find_target_Floor+0x80>)
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d108      	bne.n	8004106 <Find_target_Floor+0x66>
		{
			targetfloor = icc+1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <Find_target_Floor+0x88>)
 80040fe:	701a      	strb	r2, [r3, #0]
			return targetfloor;
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <Find_target_Floor+0x88>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	e007      	b.n	8004116 <Find_target_Floor+0x76>
	for(int icc=0;icc<TOTAL_FLOOR;icc++)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b36      	cmp	r3, #54	; 0x36
 8004110:	dddf      	ble.n	80040d2 <Find_target_Floor+0x32>
		}
	}
	return -1;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	20000200 	.word	0x20000200
 8004124:	20000204 	.word	0x20000204
 8004128:	20000272 	.word	0x20000272

0800412c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004132:	f001 f91d 	bl	8005370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004136:	f000 fd1b 	bl	8004b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800413a:	f000 fe89 	bl	8004e50 <MX_GPIO_Init>
  MX_CAN_Init();
 800413e:	f000 fd5d 	bl	8004bfc <MX_CAN_Init>
  MX_TIM1_Init();
 8004142:	f000 fd91 	bl	8004c68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004146:	f000 fddf 	bl	8004d08 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800414a:	f000 fe2b 	bl	8004da4 <MX_USART1_UART_Init>
  MX_USART2_Init();
 800414e:	f000 fe53 	bl	8004df8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  Flash_Read_Bytes((uint8_t *)&FloorName, DATA_START_ADDRESS, sizeof(FloorName));
 8004152:	226e      	movs	r2, #110	; 0x6e
 8004154:	4960      	ldr	r1, [pc, #384]	; (80042d8 <main+0x1ac>)
 8004156:	4861      	ldr	r0, [pc, #388]	; (80042dc <main+0x1b0>)
 8004158:	f7ff fd0a 	bl	8003b70 <Flash_Read_Bytes>

 	//Flash_ReadChar(data,DATA_START_ADDRESS,LENGTH_START_ADDRESS);

  HAL_Delay(50);
 800415c:	2032      	movs	r0, #50	; 0x32
 800415e:	f001 f969 	bl	8005434 <HAL_Delay>


  	uint8_t i, j;

	if (merker == RC_MERKER)									// restart by after Rx counter error
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <main+0x1b4>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b5a      	cmp	r3, #90	; 0x5a
 8004168:	d106      	bne.n	8004178 <main+0x4c>
		{
			errorregister |= ER_COMMUNICATION;						// set error bits
 800416a:	4b5e      	ldr	r3, [pc, #376]	; (80042e4 <main+0x1b8>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	f043 0310 	orr.w	r3, r3, #16
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b5b      	ldr	r3, [pc, #364]	; (80042e4 <main+0x1b8>)
 8004176:	701a      	strb	r2, [r3, #0]
		}
	nmtstate  	= BOOT_UP;		// set CAN NMT state to Boot up
 8004178:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <main+0x1bc>)
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
	nmtwait = 2;	// waiting time to 1. heartbeat in INI-Mode waiting time	1s
 800417e:	4b5b      	ldr	r3, [pc, #364]	; (80042ec <main+0x1c0>)
 8004180:	2202      	movs	r2, #2
 8004182:	701a      	strb	r2, [r3, #0]

	hsetime = HSETIME;
 8004184:	4b5a      	ldr	r3, [pc, #360]	; (80042f0 <main+0x1c4>)
 8004186:	2214      	movs	r2, #20
 8004188:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_IN_BYTE; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	e028      	b.n	80041e2 <main+0xb6>
	{
		out[i] = 0;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <main+0x1c8>)
 8004194:	2100      	movs	r1, #0
 8004196:	54d1      	strb	r1, [r2, r3]
		in[i] = 0x00;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4a57      	ldr	r2, [pc, #348]	; (80042f8 <main+0x1cc>)
 800419c:	2100      	movs	r1, #0
 800419e:	54d1      	strb	r1, [r2, r3]
		input[0][i] = 0x00;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	4a56      	ldr	r2, [pc, #344]	; (80042fc <main+0x1d0>)
 80041a4:	2100      	movs	r1, #0
 80041a6:	54d1      	strb	r1, [r2, r3]
		input[1][i] = 0x00;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	4a54      	ldr	r2, [pc, #336]	; (80042fc <main+0x1d0>)
 80041ac:	4413      	add	r3, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	725a      	strb	r2, [r3, #9]
		input[2][i] = 0x00;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	4a51      	ldr	r2, [pc, #324]	; (80042fc <main+0x1d0>)
 80041b6:	4413      	add	r3, r2
 80041b8:	2200      	movs	r2, #0
 80041ba:	749a      	strb	r2, [r3, #18]
		inold[i] = 0x00;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	4a50      	ldr	r2, [pc, #320]	; (8004300 <main+0x1d4>)
 80041c0:	2100      	movs	r1, #0
 80041c2:	54d1      	strb	r1, [r2, r3]
		instate[i] = 0;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	4a4f      	ldr	r2, [pc, #316]	; (8004304 <main+0x1d8>)
 80041c8:	2100      	movs	r1, #0
 80041ca:	54d1      	strb	r1, [r2, r3]
		in_polarity[i] = 0;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	4a4e      	ldr	r2, [pc, #312]	; (8004308 <main+0x1dc>)
 80041d0:	2100      	movs	r1, #0
 80041d2:	54d1      	strb	r1, [r2, r3]
		out_polarity[i] = 0;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	4a4d      	ldr	r2, [pc, #308]	; (800430c <main+0x1e0>)
 80041d8:	2100      	movs	r1, #0
 80041da:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < MAX_IN_BYTE; i++)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	3301      	adds	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d9d3      	bls.n	8004190 <main+0x64>
	}
	for (i = 0; i < MAX_IN; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e024      	b.n	8004238 <main+0x10c>
	{
		inpar  [i][IO_STATE] = 0;
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	4947      	ldr	r1, [pc, #284]	; (8004310 <main+0x1e4>)
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	3305      	adds	r3, #5
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
		outpar [i][IO_STATE] = 0;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	4a44      	ldr	r2, [pc, #272]	; (8004314 <main+0x1e8>)
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	2200      	movs	r2, #0
 800420a:	715a      	strb	r2, [r3, #5]
		inpar  [i][IO_BASIC_FUNC] = 0;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	4940      	ldr	r1, [pc, #256]	; (8004310 <main+0x1e4>)
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	440b      	add	r3, r1
 8004218:	2200      	movs	r2, #0
 800421a:	701a      	strb	r2, [r3, #0]
		outpar [i][IO_BASIC_FUNC] = 0;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	4a3d      	ldr	r2, [pc, #244]	; (8004314 <main+0x1e8>)
 8004220:	2100      	movs	r1, #0
 8004222:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		outpar [i][IO_ACK] = 0;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	4a3a      	ldr	r2, [pc, #232]	; (8004314 <main+0x1e8>)
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	2200      	movs	r2, #0
 8004230:	71da      	strb	r2, [r3, #7]
	for (i = 0; i < MAX_IN; i++)
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	3301      	adds	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b45      	cmp	r3, #69	; 0x45
 800423c:	d9d7      	bls.n	80041ee <main+0xc2>
	}
	for(i = 0; i < 4; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
 8004242:	e006      	b.n	8004252 <main+0x126>
		display[i] = 0;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	4a34      	ldr	r2, [pc, #208]	; (8004318 <main+0x1ec>)
 8004248:	2100      	movs	r1, #0
 800424a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 4; i++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d9f5      	bls.n	8004244 <main+0x118>
	for(i = 0; i < 5; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e006      	b.n	800426c <main+0x140>
		mDisp_buf[i] = 0;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	4a2e      	ldr	r2, [pc, #184]	; (800431c <main+0x1f0>)
 8004262:	2100      	movs	r1, #0
 8004264:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 5; i++)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	3301      	adds	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d9f5      	bls.n	800425e <main+0x132>

	mArrow_State = 0;
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <main+0x1f4>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
	mExtern_Number = 0;
 8004278:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <main+0x1f8>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 800427e:	482a      	ldr	r0, [pc, #168]	; (8004328 <main+0x1fc>)
 8004280:	f002 ffc8 	bl	8007214 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8004284:	4829      	ldr	r0, [pc, #164]	; (800432c <main+0x200>)
 8004286:	f002 ffc5 	bl	8007214 <HAL_TIM_Base_Start_IT>
	while (nmtwait)				// waiting time to 1. heartbeat
 800428a:	e00d      	b.n	80042a8 <main+0x17c>
		{
			if(bTime.Time_10ms)
 800428c:	4b28      	ldr	r3, [pc, #160]	; (8004330 <main+0x204>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <main+0x17c>
				{
					ReadInput();
 800429a:	f7fe fefb 	bl	8003094 <ReadInput>
					bTime.Time_10ms = 0;
 800429e:	4a24      	ldr	r2, [pc, #144]	; (8004330 <main+0x204>)
 80042a0:	7813      	ldrb	r3, [r2, #0]
 80042a2:	f36f 0300 	bfc	r3, #0, #1
 80042a6:	7013      	strb	r3, [r2, #0]
	while (nmtwait)				// waiting time to 1. heartbeat
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <main+0x1c0>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ec      	bne.n	800428c <main+0x160>
				}
		}
	node_id = Get_NodeID();
 80042b2:	f7fe fe6b 	bl	8002f8c <Get_NodeID>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <main+0x208>)
 80042bc:	701a      	strb	r2, [r3, #0]

	Init_Can();
 80042be:	f7fc f8e5 	bl	800048c <Init_Can>


	heartbeat = HEARTBEAT_TIME;
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <main+0x20c>)
 80042c4:	2204      	movs	r2, #4
 80042c6:	701a      	strb	r2, [r3, #0]

	nmtstate = PRE_OP;						// set state pre-operational
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <main+0x1bc>)
 80042ca:	227f      	movs	r2, #127	; 0x7f
 80042cc:	701a      	strb	r2, [r3, #0]
	disp_lift = LIFT1;
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <main+0x210>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]

	while (nmtstate == PRE_OP)
 80042d4:	e096      	b.n	8004404 <main+0x2d8>
 80042d6:	bf00      	nop
 80042d8:	0801fc00 	.word	0x0801fc00
 80042dc:	20000204 	.word	0x20000204
 80042e0:	200001f8 	.word	0x200001f8
 80042e4:	200001f9 	.word	0x200001f9
 80042e8:	20000890 	.word	0x20000890
 80042ec:	200008dd 	.word	0x200008dd
 80042f0:	20000884 	.word	0x20000884
 80042f4:	20000598 	.word	0x20000598
 80042f8:	20000390 	.word	0x20000390
 80042fc:	200005a4 	.word	0x200005a4
 8004300:	20000374 	.word	0x20000374
 8004304:	20000600 	.word	0x20000600
 8004308:	20000380 	.word	0x20000380
 800430c:	2000039c 	.word	0x2000039c
 8004310:	200003ac 	.word	0x200003ac
 8004314:	2000060c 	.word	0x2000060c
 8004318:	20000364 	.word	0x20000364
 800431c:	20000368 	.word	0x20000368
 8004320:	20000370 	.word	0x20000370
 8004324:	200001f2 	.word	0x200001f2
 8004328:	20000894 	.word	0x20000894
 800432c:	20000934 	.word	0x20000934
 8004330:	2000038c 	.word	0x2000038c
 8004334:	200005fb 	.word	0x200005fb
 8004338:	2000097d 	.word	0x2000097d
 800433c:	20000994 	.word	0x20000994
	{//�ȴ������������ָ��
		ClrWdt ();
 8004340:	f7ff fea8 	bl	8004094 <ClrWdt>
		if (rc)					// Message in receive buffer
 8004344:	4ba6      	ldr	r3, [pc, #664]	; (80045e0 <main+0x4b4>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <main+0x226>
			read_rx ();		// read and handle message
 800434e:	f7fc f9a3 	bl	8000698 <read_rx>
		if (sdo_index && !sdo_timer)
 8004352:	4ba4      	ldr	r3, [pc, #656]	; (80045e4 <main+0x4b8>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <main+0x244>
 800435c:	4ba2      	ldr	r3, [pc, #648]	; (80045e8 <main+0x4bc>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <main+0x244>
			{// SDO segment transfer time out
				sdo_index = 0;
 8004364:	4b9f      	ldr	r3, [pc, #636]	; (80045e4 <main+0x4b8>)
 8004366:	2200      	movs	r2, #0
 8004368:	801a      	strh	r2, [r3, #0]
				abort_sdo (SDO_TIMEOUT);						//send SDO abort request
 800436a:	48a0      	ldr	r0, [pc, #640]	; (80045ec <main+0x4c0>)
 800436c:	f7fc ff0c 	bl	8001188 <abort_sdo>
			}

		if (bFunc.hsecheck)
 8004370:	4b9f      	ldr	r3, [pc, #636]	; (80045f0 <main+0x4c4>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <main+0x262>
			{// HSE heartbeat check necessary
				bFunc.hsecheck = false;
 800437e:	4a9c      	ldr	r2, [pc, #624]	; (80045f0 <main+0x4c4>)
 8004380:	7813      	ldrb	r3, [r2, #0]
 8004382:	f36f 1345 	bfc	r3, #5, #1
 8004386:	7013      	strb	r3, [r2, #0]
				check_hse (0);									// check if a HSE is not available
 8004388:	2000      	movs	r0, #0
 800438a:	f7ff fd9b 	bl	8003ec4 <check_hse>
			}
		if ((!heartbeat) && (hse_heartbeat) && (!bBusOffTimer))	//time to send heartbeat message
 800438e:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <main+0x4c8>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10c      	bne.n	80043b0 <main+0x284>
 8004396:	4b98      	ldr	r3, [pc, #608]	; (80045f8 <main+0x4cc>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <main+0x284>
 800439e:	4b97      	ldr	r3, [pc, #604]	; (80045fc <main+0x4d0>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <main+0x284>
			{
				heartbeat = HEARTBEAT_TIME;
 80043a6:	4b93      	ldr	r3, [pc, #588]	; (80045f4 <main+0x4c8>)
 80043a8:	2204      	movs	r2, #4
 80043aa:	701a      	strb	r2, [r3, #0]
				CAN_transmit_heartbeat();
 80043ac:	f7fd fa42 	bl	8001834 <CAN_transmit_heartbeat>
			}

		if (errorcode)
 80043b0:	4b93      	ldr	r3, [pc, #588]	; (8004600 <main+0x4d4>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <main+0x29c>
			{// error occured
				transmit_error ();	// send emergency message
 80043b8:	f7fd f910 	bl	80015dc <transmit_error>
				errorregister = 0;	// reset error
 80043bc:	4b91      	ldr	r3, [pc, #580]	; (8004604 <main+0x4d8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
				errorcode = 0;
 80043c2:	4b8f      	ldr	r3, [pc, #572]	; (8004600 <main+0x4d4>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	801a      	strh	r2, [r3, #0]
			}
		if ((merker == BS_MERKER) && (!bBusOffTimer))
 80043c8:	4b8f      	ldr	r3, [pc, #572]	; (8004608 <main+0x4dc>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b55      	cmp	r3, #85	; 0x55
 80043ce:	d113      	bne.n	80043f8 <main+0x2cc>
 80043d0:	4b8a      	ldr	r3, [pc, #552]	; (80045fc <main+0x4d0>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10f      	bne.n	80043f8 <main+0x2cc>
			{
				Init_Can();
 80043d8:	f7fc f858 	bl	800048c <Init_Can>
				errorregister |= ER_COMMUNICATION;			// set error bits
 80043dc:	4b89      	ldr	r3, [pc, #548]	; (8004604 <main+0x4d8>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f043 0310 	orr.w	r3, r3, #16
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4b87      	ldr	r3, [pc, #540]	; (8004604 <main+0x4d8>)
 80043e8:	701a      	strb	r2, [r3, #0]
				errorcode = E_BUS_OFF_A;									// set error code
 80043ea:	4b85      	ldr	r3, [pc, #532]	; (8004600 <main+0x4d4>)
 80043ec:	f248 1240 	movw	r2, #33088	; 0x8140
 80043f0:	801a      	strh	r2, [r3, #0]
				merker = 0;
 80043f2:	4b85      	ldr	r3, [pc, #532]	; (8004608 <main+0x4dc>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
			}
		if(nmtstate == TEST_MODE)
 80043f8:	4b84      	ldr	r3, [pc, #528]	; (800460c <main+0x4e0>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2bf0      	cmp	r3, #240	; 0xf0
 80043fe:	d101      	bne.n	8004404 <main+0x2d8>
			{
				test_mode();
 8004400:	f7ff f856 	bl	80034b0 <test_mode>
	while (nmtstate == PRE_OP)
 8004404:	4b81      	ldr	r3, [pc, #516]	; (800460c <main+0x4e0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b7f      	cmp	r3, #127	; 0x7f
 800440a:	d099      	beq.n	8004340 <main+0x214>
			}
	}
	hsetime = HSETIME ;		//start timer with different times
 800440c:	4b80      	ldr	r3, [pc, #512]	; (8004610 <main+0x4e4>)
 800440e:	2214      	movs	r2, #20
 8004410:	701a      	strb	r2, [r3, #0]
	bFunc.hsecheck = false;					//no HSE check now
 8004412:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <main+0x4c4>)
 8004414:	7813      	ldrb	r3, [r2, #0]
 8004416:	f36f 1345 	bfc	r3, #5, #1
 800441a:	7013      	strb	r3, [r2, #0]
	ClrWdt();							//reset watchdog timer
 800441c:	f7ff fe3a 	bl	8004094 <ClrWdt>

	mInOut_Number = (mExtern_Number * 16 + 22) % (MAX_IN + 1);
 8004420:	4b7c      	ldr	r3, [pc, #496]	; (8004614 <main+0x4e8>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	f103 0216 	add.w	r2, r3, #22
 800442a:	4b7b      	ldr	r3, [pc, #492]	; (8004618 <main+0x4ec>)
 800442c:	fb83 1302 	smull	r1, r3, r3, r2
 8004430:	4413      	add	r3, r2
 8004432:	1199      	asrs	r1, r3, #6
 8004434:	17d3      	asrs	r3, r2, #31
 8004436:	1ac9      	subs	r1, r1, r3
 8004438:	460b      	mov	r3, r1
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1a5b      	subs	r3, r3, r1
 8004442:	1ad1      	subs	r1, r2, r3
 8004444:	b2ca      	uxtb	r2, r1
 8004446:	4b75      	ldr	r3, [pc, #468]	; (800461c <main+0x4f0>)
 8004448:	701a      	strb	r2, [r3, #0]
	mMax_InByte = (mInOut_Number >> 3) + 1;
 800444a:	4b74      	ldr	r3, [pc, #464]	; (800461c <main+0x4f0>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	08db      	lsrs	r3, r3, #3
 8004450:	b2db      	uxtb	r3, r3
 8004452:	3301      	adds	r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b72      	ldr	r3, [pc, #456]	; (8004620 <main+0x4f4>)
 8004458:	701a      	strb	r2, [r3, #0]

	set_io_config ();
 800445a:	f7fe fab7 	bl	80029cc <set_io_config>
	Arrow_Status();
 800445e:	f7ff fabb 	bl	80039d8 <Arrow_Status>
	int cntt =0;
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (rc)													// Message in receive buffer
 8004466:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <main+0x4b4>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <main+0x348>
			read_rx ();										// read and handle message
 8004470:	f7fc f912 	bl	8000698 <read_rx>
		if ((!heartbeat) && (hse_heartbeat) && (!bBusOffTimer))	//time to send heartbeat message
 8004474:	4b5f      	ldr	r3, [pc, #380]	; (80045f4 <main+0x4c8>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10c      	bne.n	8004496 <main+0x36a>
 800447c:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <main+0x4cc>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <main+0x36a>
 8004484:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <main+0x4d0>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <main+0x36a>
			{// time to send heartbeat message
				heartbeat = HEARTBEAT_TIME;
 800448c:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <main+0x4c8>)
 800448e:	2204      	movs	r2, #4
 8004490:	701a      	strb	r2, [r3, #0]
				CAN_transmit_heartbeat();
 8004492:	f7fd f9cf 	bl	8001834 <CAN_transmit_heartbeat>
			}
		if (bFunc.hsecheck)
 8004496:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <main+0x4c4>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <main+0x388>
			{// HSE heartbeat check necessary
				bFunc.hsecheck = false;
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <main+0x4c4>)
 80044a6:	7813      	ldrb	r3, [r2, #0]
 80044a8:	f36f 1345 	bfc	r3, #5, #1
 80044ac:	7013      	strb	r3, [r2, #0]
				check_hse (1);									// check if a HSE is not available
 80044ae:	2001      	movs	r0, #1
 80044b0:	f7ff fd08 	bl	8003ec4 <check_hse>
			}

		if(bTime.Time_100ms)
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <main+0x4f8>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03f      	beq.n	8004542 <main+0x416>
			{
				Display_device();			//100ms ����һ����ʾ��Ϣ
 80044c2:	f7ff fa65 	bl	8003990 <Display_device>
				if(!(buzzer & BUZ_WORKING))
 80044c6:	4b58      	ldr	r3, [pc, #352]	; (8004628 <main+0x4fc>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <main+0x3b2>
					Disable_BUZ();
 80044d2:	2200      	movs	r2, #0
 80044d4:	2101      	movs	r1, #1
 80044d6:	4855      	ldr	r0, [pc, #340]	; (800462c <main+0x500>)
 80044d8:	f002 fa19 	bl	800690e <HAL_GPIO_WritePin>
 80044dc:	e02c      	b.n	8004538 <main+0x40c>
				else if(buzzer & BUZ_PULSE)
 80044de:	4b52      	ldr	r3, [pc, #328]	; (8004628 <main+0x4fc>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d021      	beq.n	800452e <main+0x402>
					{
						if(bFunc.buz_state)
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <main+0x4c4>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <main+0x3d8>
							Enable_BUZ();
 80044f8:	2201      	movs	r2, #1
 80044fa:	2101      	movs	r1, #1
 80044fc:	484b      	ldr	r0, [pc, #300]	; (800462c <main+0x500>)
 80044fe:	f002 fa06 	bl	800690e <HAL_GPIO_WritePin>
 8004502:	e00c      	b.n	800451e <main+0x3f2>
						else if(!att_alarm_timer)
 8004504:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <main+0x504>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d108      	bne.n	800451e <main+0x3f2>
							{
								Disable_BUZ();
 800450c:	2200      	movs	r2, #0
 800450e:	2101      	movs	r1, #1
 8004510:	4846      	ldr	r0, [pc, #280]	; (800462c <main+0x500>)
 8004512:	f002 f9fc 	bl	800690e <HAL_GPIO_WritePin>
								att_alarm_timer = buz_alarm_timer;
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <main+0x508>)
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	4b45      	ldr	r3, [pc, #276]	; (8004630 <main+0x504>)
 800451c:	701a      	strb	r2, [r3, #0]
							}
						if(!buz_alarm_totaltimer)
 800451e:	4b46      	ldr	r3, [pc, #280]	; (8004638 <main+0x50c>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d108      	bne.n	8004538 <main+0x40c>
							buzzer &= !(BUZ_WORKING | BUZ_PULSE);
 8004526:	4b40      	ldr	r3, [pc, #256]	; (8004628 <main+0x4fc>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e004      	b.n	8004538 <main+0x40c>
					}
				else
					Enable_BUZ();
 800452e:	2201      	movs	r2, #1
 8004530:	2101      	movs	r1, #1
 8004532:	483e      	ldr	r0, [pc, #248]	; (800462c <main+0x500>)
 8004534:	f002 f9eb 	bl	800690e <HAL_GPIO_WritePin>
				bTime.Time_100ms = 0;
 8004538:	4a3a      	ldr	r2, [pc, #232]	; (8004624 <main+0x4f8>)
 800453a:	7813      	ldrb	r3, [r2, #0]
 800453c:	f36f 0341 	bfc	r3, #1, #1
 8004540:	7013      	strb	r3, [r2, #0]
			}
		if(bTime.Time_2s)
 8004542:	4b38      	ldr	r3, [pc, #224]	; (8004624 <main+0x4f8>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <main+0x432>
			{
				Arrow_Status();
 8004550:	f7ff fa42 	bl	80039d8 <Arrow_Status>
				bTime.Time_2s = 0;
 8004554:	4a33      	ldr	r2, [pc, #204]	; (8004624 <main+0x4f8>)
 8004556:	7813      	ldrb	r3, [r2, #0]
 8004558:	f36f 03c3 	bfc	r3, #3, #1
 800455c:	7013      	strb	r3, [r2, #0]
			}
		if(bTime.Time_10ms)
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <main+0x4f8>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <main+0x452>
			{
				ReadInput();		//��ȡ���еİ�ť����
 800456c:	f7fe fd92 	bl	8003094 <ReadInput>
				Out_Prog(); 					//�������е����(������ʾ���)
 8004570:	f7fe fe70 	bl	8003254 <Out_Prog>
				bTime.Time_10ms = 0;
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <main+0x4f8>)
 8004576:	7813      	ldrb	r3, [r2, #0]
 8004578:	f36f 0300 	bfc	r3, #0, #1
 800457c:	7013      	strb	r3, [r2, #0]
			}

		for(i = 0; i < mMax_InByte; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e00e      	b.n	80045a2 <main+0x476>
			instate_Pre[i] = in[i] ^ in_polarity[i];		// read input state; invert if desired
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	4a2d      	ldr	r2, [pc, #180]	; (800463c <main+0x510>)
 8004588:	5cd3      	ldrb	r3, [r2, r3]
 800458a:	b2d9      	uxtb	r1, r3
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <main+0x514>)
 8004590:	5cd2      	ldrb	r2, [r2, r3]
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	404a      	eors	r2, r1
 8004596:	b2d1      	uxtb	r1, r2
 8004598:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <main+0x518>)
 800459a:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i < mMax_InByte; i++)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	3301      	adds	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <main+0x4f4>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3eb      	bcc.n	8004584 <main+0x458>
		instate[0] = (instate_Pre[0] & 0x3);      //close and openbutton
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <main+0x518>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <main+0x51c>)
 80045b8:	701a      	strb	r2, [r3, #0]
		uint16_t keytmp = (uint16_t)((instate_Pre[0] | ((uint16_t)instate_Pre[1]<<8)) >>2); //BTN start IN3
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <main+0x518>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	4b20      	ldr	r3, [pc, #128]	; (8004644 <main+0x518>)
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4313      	orrs	r3, r2
 80045c8:	109b      	asrs	r3, r3, #2
 80045ca:	80bb      	strh	r3, [r7, #4]
		if(inold_Pre != keytmp)
 80045cc:	88ba      	ldrh	r2, [r7, #4]
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <main+0x520>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	f000 808d 	beq.w	80046f2 <main+0x5c6>
		{
			for (i = 0; i < 16; i++)
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	e083      	b.n	80046e6 <main+0x5ba>
 80045de:	bf00      	nop
 80045e0:	20000284 	.word	0x20000284
 80045e4:	200001ee 	.word	0x200001ee
 80045e8:	200001f1 	.word	0x200001f1
 80045ec:	05040000 	.word	0x05040000
 80045f0:	20000930 	.word	0x20000930
 80045f4:	2000097d 	.word	0x2000097d
 80045f8:	200001f3 	.word	0x200001f3
 80045fc:	200001f4 	.word	0x200001f4
 8004600:	200001fa 	.word	0x200001fa
 8004604:	200001f9 	.word	0x200001f9
 8004608:	200001f8 	.word	0x200001f8
 800460c:	20000890 	.word	0x20000890
 8004610:	20000884 	.word	0x20000884
 8004614:	200001f2 	.word	0x200001f2
 8004618:	e6c2b449 	.word	0xe6c2b449
 800461c:	20000189 	.word	0x20000189
 8004620:	2000097c 	.word	0x2000097c
 8004624:	2000038c 	.word	0x2000038c
 8004628:	200001ec 	.word	0x200001ec
 800462c:	40010800 	.word	0x40010800
 8004630:	200001f5 	.word	0x200001f5
 8004634:	200001f6 	.word	0x200001f6
 8004638:	200001f7 	.word	0x200001f7
 800463c:	20000390 	.word	0x20000390
 8004640:	20000380 	.word	0x20000380
 8004644:	200008e0 	.word	0x200008e0
 8004648:	20000600 	.word	0x20000600
 800464c:	2000098c 	.word	0x2000098c
			{
				if((!(keytmp>>i)&0x01) && ((inold_Pre>>i) &0x01))   //now 0,pre 1
 8004650:	88ba      	ldrh	r2, [r7, #4]
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	fa42 f303 	asr.w	r3, r2, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d141      	bne.n	80046e0 <main+0x5b4>
 800465c:	4b91      	ldr	r3, [pc, #580]	; (80048a4 <main+0x778>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d038      	beq.n	80046e0 <main+0x5b4>
				{
						Led_virt = (Led_virt|(1<<(i+2))) & 0xFFFC;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	3302      	adds	r3, #2
 8004672:	2201      	movs	r2, #1
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	b21a      	sxth	r2, r3
 800467a:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <main+0x77c>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b21b      	sxth	r3, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	b21b      	sxth	r3, r3
 8004684:	b29b      	uxth	r3, r3
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	b29a      	uxth	r2, r3
 800468c:	4b86      	ldr	r3, [pc, #536]	; (80048a8 <main+0x77c>)
 800468e:	801a      	strh	r2, [r3, #0]
						virt_key[virt_key_cnt] = IOName[i];
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	4a86      	ldr	r2, [pc, #536]	; (80048ac <main+0x780>)
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	4611      	mov	r1, r2
 8004698:	4a85      	ldr	r2, [pc, #532]	; (80048b0 <main+0x784>)
 800469a:	5cd2      	ldrb	r2, [r2, r3]
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <main+0x788>)
 800469e:	545a      	strb	r2, [r3, r1]
						virt_key_cnt++ ;
 80046a0:	4b82      	ldr	r3, [pc, #520]	; (80048ac <main+0x780>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b80      	ldr	r3, [pc, #512]	; (80048ac <main+0x780>)
 80046aa:	701a      	strb	r2, [r3, #0]
						if ( virt_key_cnt == 2 )
 80046ac:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <main+0x780>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d104      	bne.n	80046be <main+0x592>
						{
							Keytimout = -1;
 80046b4:	4b80      	ldr	r3, [pc, #512]	; (80048b8 <main+0x78c>)
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e007      	b.n	80046ce <main+0x5a2>
						}
						else
						{
							Keytimout = KEYTIMOUT/10;
 80046be:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <main+0x78c>)
 80046c0:	2296      	movs	r2, #150	; 0x96
 80046c2:	601a      	str	r2, [r3, #0]
							inspection_time = HAL_GetTick();
 80046c4:	f000 feac 	bl	8005420 <HAL_GetTick>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4a7c      	ldr	r2, [pc, #496]	; (80048bc <main+0x790>)
 80046cc:	6013      	str	r3, [r2, #0]
						}
						if(IOName[i] == 'C')
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	4a77      	ldr	r2, [pc, #476]	; (80048b0 <main+0x784>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	2b43      	cmp	r3, #67	; 0x43
 80046d6:	d103      	bne.n	80046e0 <main+0x5b4>
						{
							Keytimout = -1;
 80046d8:	4b77      	ldr	r3, [pc, #476]	; (80048b8 <main+0x78c>)
 80046da:	f04f 32ff 	mov.w	r2, #4294967295
 80046de:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 16; i++)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	3301      	adds	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b0f      	cmp	r3, #15
 80046ea:	d9b1      	bls.n	8004650 <main+0x524>
						}

				}
			}
			inold_Pre = keytmp;
 80046ec:	88bb      	ldrh	r3, [r7, #4]
 80046ee:	4a6d      	ldr	r2, [pc, #436]	; (80048a4 <main+0x778>)
 80046f0:	6013      	str	r3, [r2, #0]
		}
		if(LedOfftimout <0)
 80046f2:	4b73      	ldr	r3, [pc, #460]	; (80048c0 <main+0x794>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da06      	bge.n	8004708 <main+0x5dc>
		{
			Led_virt = 0x00;
 80046fa:	4b6b      	ldr	r3, [pc, #428]	; (80048a8 <main+0x77c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	801a      	strh	r2, [r3, #0]
			LedOfftimout = INT32_MAX;
 8004700:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <main+0x794>)
 8004702:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004706:	601a      	str	r2, [r3, #0]
		}
		if(Keytimout <= 0)
 8004708:	4b6b      	ldr	r3, [pc, #428]	; (80048b8 <main+0x78c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f300 814d 	bgt.w	80049ac <main+0x880>
		{
			inspection_time = HAL_GetTick() - inspection_time;
 8004712:	f000 fe85 	bl	8005420 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	4b68      	ldr	r3, [pc, #416]	; (80048bc <main+0x790>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	4a67      	ldr	r2, [pc, #412]	; (80048bc <main+0x790>)
 8004720:	6013      	str	r3, [r2, #0]
			if((virt_key[0] != 'C') && (virt_key[1] != 'C'))
 8004722:	4b64      	ldr	r3, [pc, #400]	; (80048b4 <main+0x788>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b43      	cmp	r3, #67	; 0x43
 8004728:	d062      	beq.n	80047f0 <main+0x6c4>
 800472a:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <main+0x788>)
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b43      	cmp	r3, #67	; 0x43
 8004730:	d05e      	beq.n	80047f0 <main+0x6c4>
			{
				targetfloor = Find_target_Floor(virt_key_cnt);
 8004732:	4b5e      	ldr	r3, [pc, #376]	; (80048ac <main+0x780>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fcb2 	bl	80040a0 <Find_target_Floor>
 800473c:	4603      	mov	r3, r0
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b60      	ldr	r3, [pc, #384]	; (80048c4 <main+0x798>)
 8004742:	701a      	strb	r2, [r3, #0]
				if((targetfloor !=  0) && (targetfloor < 55))
 8004744:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <main+0x798>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 811f 	beq.w	800498c <main+0x860>
 800474e:	4b5d      	ldr	r3, [pc, #372]	; (80048c4 <main+0x798>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b36      	cmp	r3, #54	; 0x36
 8004754:	f200 811a 	bhi.w	800498c <main+0x860>
				{

					for ( cntt = 0; cntt < mInOut_Number; cntt++)
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	e037      	b.n	80047ce <main+0x6a2>
					{
						if (inpar [cntt][IO_BASIC_FUNC] == CAR_CALL)
 800475e:	495a      	ldr	r1, [pc, #360]	; (80048c8 <main+0x79c>)
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	440b      	add	r3, r1
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b05      	cmp	r3, #5
 800476e:	d12b      	bne.n	80047c8 <main+0x69c>
						{
							if(inpar [cntt][IO_SUB_FUNC] == targetfloor)
 8004770:	4955      	ldr	r1, [pc, #340]	; (80048c8 <main+0x79c>)
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	440b      	add	r3, r1
 800477c:	3301      	adds	r3, #1
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <main+0x798>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d11f      	bne.n	80047c8 <main+0x69c>
							{

								bit_set(instate[cntt/8],cntt%8);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	da00      	bge.n	8004790 <main+0x664>
 800478e:	3307      	adds	r3, #7
 8004790:	10db      	asrs	r3, r3, #3
 8004792:	461a      	mov	r2, r3
 8004794:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <main+0x7a0>)
 8004796:	5c9b      	ldrb	r3, [r3, r2]
 8004798:	b259      	sxtb	r1, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4258      	negs	r0, r3
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	f000 0007 	and.w	r0, r0, #7
 80047a6:	bf58      	it	pl
 80047a8:	4243      	negpl	r3, r0
 80047aa:	2001      	movs	r0, #1
 80047ac:	fa00 f303 	lsl.w	r3, r0, r3
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	430b      	orrs	r3, r1
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	b2d9      	uxtb	r1, r3
 80047b8:	4b44      	ldr	r3, [pc, #272]	; (80048cc <main+0x7a0>)
 80047ba:	5499      	strb	r1, [r3, r2]
								lastest_call_time = time1_cnt + KEYTIMOUT/10;
 80047bc:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <main+0x7a4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3396      	adds	r3, #150	; 0x96
 80047c2:	4a44      	ldr	r2, [pc, #272]	; (80048d4 <main+0x7a8>)
 80047c4:	6013      	str	r3, [r2, #0]
								break;
 80047c6:	e008      	b.n	80047da <main+0x6ae>
					for ( cntt = 0; cntt < mInOut_Number; cntt++)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3301      	adds	r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <main+0x7ac>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4293      	cmp	r3, r2
 80047d8:	dbc1      	blt.n	800475e <main+0x632>
							}

						}
					}
					if(cntt == mInOut_Number)
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <main+0x7ac>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f040 80d2 	bne.w	800498c <main+0x860>
					{
						cntt = -1;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ec:	60bb      	str	r3, [r7, #8]
				if((targetfloor !=  0) && (targetfloor < 55))
 80047ee:	e0cd      	b.n	800498c <main+0x860>
					}
				}
			}
			else
			{
				if(virt_key[0] == 'C')
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <main+0x788>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b43      	cmp	r3, #67	; 0x43
 80047f6:	d10a      	bne.n	800480e <main+0x6e2>
				{
					//del target_floor_reg
					if(time1_cnt < lastest_call_time)
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <main+0x7a4>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <main+0x7a8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d214      	bcs.n	800482e <main+0x702>
					{
						targetfloor = targetfloor_reg;
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <main+0x7b0>)
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <main+0x798>)
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e00f      	b.n	800482e <main+0x702>
					}
				}
				else if(virt_key[1] == 'C')
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <main+0x788>)
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b43      	cmp	r3, #67	; 0x43
 8004814:	d10b      	bne.n	800482e <main+0x702>
				{
					//del target_floor virt_key[1]
					virt_key_cnt =1;
 8004816:	4b25      	ldr	r3, [pc, #148]	; (80048ac <main+0x780>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
					targetfloor = Find_target_Floor(virt_key_cnt);
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <main+0x780>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fc3d 	bl	80040a0 <Find_target_Floor>
 8004826:	4603      	mov	r3, r0
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <main+0x798>)
 800482c:	701a      	strb	r2, [r3, #0]
				}
				if(targetfloor>0)
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <main+0x798>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80ab 	beq.w	800498e <main+0x862>
				{
					uint8_t outindex ;
					for ( outindex = 0; outindex < mInOut_Number; outindex++)
 8004838:	2300      	movs	r3, #0
 800483a:	71fb      	strb	r3, [r7, #7]
 800483c:	e011      	b.n	8004862 <main+0x736>
					{
						if (outpar [outindex][IO_BASIC_FUNC] == CAR_CALL)
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <main+0x7b4>)
 8004842:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d108      	bne.n	800485c <main+0x730>
						{
							if(outpar [outindex][IO_SUB_FUNC] == targetfloor)
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <main+0x7b4>)
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	785a      	ldrb	r2, [r3, #1]
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <main+0x798>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d008      	beq.n	800486e <main+0x742>
					for ( outindex = 0; outindex < mInOut_Number; outindex++)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	3301      	adds	r3, #1
 8004860:	71fb      	strb	r3, [r7, #7]
 8004862:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <main+0x7ac>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	79fa      	ldrb	r2, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d3e8      	bcc.n	800483e <main+0x712>
 800486c:	e000      	b.n	8004870 <main+0x744>
							{
								break;
 800486e:	bf00      	nop
							}

						}
					}
					if(outindex != mInOut_Number)
 8004870:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <main+0x7ac>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	79fa      	ldrb	r2, [r7, #7]
 8004876:	429a      	cmp	r2, r3
 8004878:	f000 8089 	beq.w	800498e <main+0x862>
					{
						if( bit_select(out[outindex/8],outindex%8))	//alread call
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	08db      	lsrs	r3, r3, #3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <main+0x7b8>)
 8004886:	5c9b      	ldrb	r3, [r3, r2]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	fa42 f303 	asr.w	r3, r2, r3
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d077      	beq.n	800498e <main+0x862>
						{
							for ( cntt = 0; cntt < mInOut_Number; cntt++)
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	e06c      	b.n	800497e <main+0x852>
 80048a4:	2000098c 	.word	0x2000098c
 80048a8:	20000274 	.word	0x20000274
 80048ac:	20000202 	.word	0x20000202
 80048b0:	20000194 	.word	0x20000194
 80048b4:	20000200 	.word	0x20000200
 80048b8:	2000018c 	.word	0x2000018c
 80048bc:	20000888 	.word	0x20000888
 80048c0:	20000190 	.word	0x20000190
 80048c4:	20000272 	.word	0x20000272
 80048c8:	200003ac 	.word	0x200003ac
 80048cc:	20000600 	.word	0x20000600
 80048d0:	20000278 	.word	0x20000278
 80048d4:	200005f0 	.word	0x200005f0
 80048d8:	20000189 	.word	0x20000189
 80048dc:	20000273 	.word	0x20000273
 80048e0:	2000060c 	.word	0x2000060c
 80048e4:	20000598 	.word	0x20000598
							{
								if (inpar [cntt][IO_BASIC_FUNC] == CAR_CALL)
 80048e8:	4993      	ldr	r1, [pc, #588]	; (8004b38 <main+0xa0c>)
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	440b      	add	r3, r1
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d13e      	bne.n	8004978 <main+0x84c>
								{
									if(inpar [cntt][IO_SUB_FUNC] == targetfloor)
 80048fa:	498f      	ldr	r1, [pc, #572]	; (8004b38 <main+0xa0c>)
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	440b      	add	r3, r1
 8004906:	3301      	adds	r3, #1
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	4b8c      	ldr	r3, [pc, #560]	; (8004b3c <main+0xa10>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d132      	bne.n	8004978 <main+0x84c>
									{
										bit_set(instate[cntt/8],cntt%8);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da00      	bge.n	800491a <main+0x7ee>
 8004918:	3307      	adds	r3, #7
 800491a:	10db      	asrs	r3, r3, #3
 800491c:	461a      	mov	r2, r3
 800491e:	4b88      	ldr	r3, [pc, #544]	; (8004b40 <main+0xa14>)
 8004920:	5c9b      	ldrb	r3, [r3, r2]
 8004922:	b259      	sxtb	r1, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4258      	negs	r0, r3
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	f000 0007 	and.w	r0, r0, #7
 8004930:	bf58      	it	pl
 8004932:	4243      	negpl	r3, r0
 8004934:	2001      	movs	r0, #1
 8004936:	fa00 f303 	lsl.w	r3, r0, r3
 800493a:	b25b      	sxtb	r3, r3
 800493c:	430b      	orrs	r3, r1
 800493e:	b25b      	sxtb	r3, r3
 8004940:	b2d9      	uxtb	r1, r3
 8004942:	4b7f      	ldr	r3, [pc, #508]	; (8004b40 <main+0xa14>)
 8004944:	5499      	strb	r1, [r3, r2]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8004946:	2300      	movs	r3, #0
 8004948:	73bb      	strb	r3, [r7, #14]
 800494a:	e00e      	b.n	800496a <main+0x83e>
												virt_in [j] = inpar [cntt][j];
 800494c:	7bb8      	ldrb	r0, [r7, #14]
 800494e:	7bb9      	ldrb	r1, [r7, #14]
 8004950:	4c79      	ldr	r4, [pc, #484]	; (8004b38 <main+0xa0c>)
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	4423      	add	r3, r4
 800495c:	4403      	add	r3, r0
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	4b78      	ldr	r3, [pc, #480]	; (8004b44 <main+0xa18>)
 8004962:	545a      	strb	r2, [r3, r1]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8004964:	7bbb      	ldrb	r3, [r7, #14]
 8004966:	3301      	adds	r3, #1
 8004968:	73bb      	strb	r3, [r7, #14]
 800496a:	7bbb      	ldrb	r3, [r7, #14]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d9ed      	bls.n	800494c <main+0x820>
										transmit_in (virt_in);  //tran first package
 8004970:	4874      	ldr	r0, [pc, #464]	; (8004b44 <main+0xa18>)
 8004972:	f7fc feab 	bl	80016cc <transmit_in>
										break;
 8004976:	e00a      	b.n	800498e <main+0x862>
							for ( cntt = 0; cntt < mInOut_Number; cntt++)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	3301      	adds	r3, #1
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <main+0xa1c>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4293      	cmp	r3, r2
 8004988:	dbae      	blt.n	80048e8 <main+0x7bc>
 800498a:	e000      	b.n	800498e <main+0x862>
				if((targetfloor !=  0) && (targetfloor < 55))
 800498c:	bf00      	nop
							}
						}
					}
				}
			}
			virt_key_cnt =0;
 800498e:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <main+0xa20>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
			Keytimout = MAXLONGVALUE;
 8004994:	4b6e      	ldr	r3, [pc, #440]	; (8004b50 <main+0xa24>)
 8004996:	4a6f      	ldr	r2, [pc, #444]	; (8004b54 <main+0xa28>)
 8004998:	601a      	str	r2, [r3, #0]
			LedOfftimout = LEDTIMEOUT/10;
 800499a:	4b6f      	ldr	r3, [pc, #444]	; (8004b58 <main+0xa2c>)
 800499c:	2214      	movs	r2, #20
 800499e:	601a      	str	r2, [r3, #0]
			virt_key[0] = 0;
 80049a0:	4b6e      	ldr	r3, [pc, #440]	; (8004b5c <main+0xa30>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
			virt_key[1] = 0;
 80049a6:	4b6d      	ldr	r3, [pc, #436]	; (8004b5c <main+0xa30>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	705a      	strb	r2, [r3, #1]
		}
		if (Check_InChange(instate, inold))					// input state changed
 80049ac:	496c      	ldr	r1, [pc, #432]	; (8004b60 <main+0xa34>)
 80049ae:	4864      	ldr	r0, [pc, #400]	; (8004b40 <main+0xa14>)
 80049b0:	f7fe fb1c 	bl	8002fec <Check_InChange>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f43f ad55 	beq.w	8004466 <main+0x33a>
			{
				for (i = 0; i < mInOut_Number; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e0a1      	b.n	8004b06 <main+0x9da>
					{// check all inputs
						help = bit_select (instate[i/8], i%8);
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	08db      	lsrs	r3, r3, #3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b5d      	ldr	r3, [pc, #372]	; (8004b40 <main+0xa14>)
 80049cc:	5c9b      	ldrb	r3, [r3, r2]
 80049ce:	461a      	mov	r2, r3
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	fa42 f303 	asr.w	r3, r2, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <main+0xa38>)
 80049e4:	701a      	strb	r2, [r3, #0]
						if (help != bit_select (inold[i/8], i%8))
 80049e6:	4b5f      	ldr	r3, [pc, #380]	; (8004b64 <main+0xa38>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	4b5a      	ldr	r3, [pc, #360]	; (8004b60 <main+0xa34>)
 80049f6:	5c5b      	ldrb	r3, [r3, r1]
 80049f8:	4619      	mov	r1, r3
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	fa41 f303 	asr.w	r3, r1, r3
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d074      	beq.n	8004af6 <main+0x9ca>
							{// input has changed
								inpar [i][IO_STATE] = help;					// set input state
 8004a0c:	7bfa      	ldrb	r2, [r7, #15]
 8004a0e:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <main+0xa38>)
 8004a10:	7818      	ldrb	r0, [r3, #0]
 8004a12:	4949      	ldr	r1, [pc, #292]	; (8004b38 <main+0xa0c>)
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3305      	adds	r3, #5
 8004a1e:	4602      	mov	r2, r0
 8004a20:	701a      	strb	r2, [r3, #0]
								if (inpar [i][IO_BASIC_FUNC])				// input has a function
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	4944      	ldr	r1, [pc, #272]	; (8004b38 <main+0xa0c>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d060      	beq.n	8004af6 <main+0x9ca>
									{
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8004a34:	2300      	movs	r3, #0
 8004a36:	73bb      	strb	r3, [r7, #14]
 8004a38:	e00e      	b.n	8004a58 <main+0x92c>
											virt_in [j] = inpar [i][j];
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	7bb8      	ldrb	r0, [r7, #14]
 8004a3e:	7bb9      	ldrb	r1, [r7, #14]
 8004a40:	4c3d      	ldr	r4, [pc, #244]	; (8004b38 <main+0xa0c>)
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	4423      	add	r3, r4
 8004a4a:	4403      	add	r3, r0
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <main+0xa18>)
 8004a50:	545a      	strb	r2, [r3, r1]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8004a52:	7bbb      	ldrb	r3, [r7, #14]
 8004a54:	3301      	adds	r3, #1
 8004a56:	73bb      	strb	r3, [r7, #14]
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	2b06      	cmp	r3, #6
 8004a5c:	d9ed      	bls.n	8004a3a <main+0x90e>
										switch (inpar [i][IO_BASIC_FUNC])
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	4935      	ldr	r1, [pc, #212]	; (8004b38 <main+0xa0c>)
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	440b      	add	r3, r1
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b84      	cmp	r3, #132	; 0x84
 8004a6e:	d03b      	beq.n	8004ae8 <main+0x9bc>
 8004a70:	2b84      	cmp	r3, #132	; 0x84
 8004a72:	dc3c      	bgt.n	8004aee <main+0x9c2>
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d02f      	beq.n	8004ad8 <main+0x9ac>
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d138      	bne.n	8004aee <main+0x9c2>
											{
												case (CAR_CALL):						// standard car call
													if (help)
 8004a7c:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <main+0xa38>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03a      	beq.n	8004afa <main+0x9ce>
													{
														transmit_in (virt_in);
 8004a84:	482f      	ldr	r0, [pc, #188]	; (8004b44 <main+0xa18>)
 8004a86:	f7fc fe21 	bl	80016cc <transmit_in>
														if(cntt >= 0)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db34      	blt.n	8004afa <main+0x9ce>
														{
															bit_reset(instate[cntt/8],cntt%8);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	da00      	bge.n	8004a98 <main+0x96c>
 8004a96:	3307      	adds	r3, #7
 8004a98:	10db      	asrs	r3, r3, #3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <main+0xa14>)
 8004a9e:	5c9b      	ldrb	r3, [r3, r2]
 8004aa0:	b259      	sxtb	r1, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4258      	negs	r0, r3
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	f000 0007 	and.w	r0, r0, #7
 8004aae:	bf58      	it	pl
 8004ab0:	4243      	negpl	r3, r0
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	fa00 f303 	lsl.w	r3, r0, r3
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	b25b      	sxtb	r3, r3
 8004abe:	400b      	ands	r3, r1
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	b2d9      	uxtb	r1, r3
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <main+0xa14>)
 8004ac6:	5499      	strb	r1, [r3, r2]
															targetfloor_reg = targetfloor;
 8004ac8:	4b1c      	ldr	r3, [pc, #112]	; (8004b3c <main+0xa10>)
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <main+0xa3c>)
 8004ace:	701a      	strb	r2, [r3, #0]
															targetfloor = -1;
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <main+0xa10>)
 8004ad2:	22ff      	movs	r2, #255	; 0xff
 8004ad4:	701a      	strb	r2, [r3, #0]
														}

													}
													break;
 8004ad6:	e010      	b.n	8004afa <main+0x9ce>

												case (HALL_CALL):						// standard hall call
													if (help)
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <main+0xa38>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <main+0x9d2>
														{// landing call misuse
															transmit_in (virt_in);
 8004ae0:	4818      	ldr	r0, [pc, #96]	; (8004b44 <main+0xa18>)
 8004ae2:	f7fc fdf3 	bl	80016cc <transmit_in>
														}
													break;
 8004ae6:	e00a      	b.n	8004afe <main+0x9d2>

												case (LOAD_IN):							// load measurement input
													transmit_load ();
 8004ae8:	f7fc fe3c 	bl	8001764 <transmit_load>
													break;
 8004aec:	e008      	b.n	8004b00 <main+0x9d4>

												default:
													transmit_in (virt_in);
 8004aee:	4815      	ldr	r0, [pc, #84]	; (8004b44 <main+0xa18>)
 8004af0:	f7fc fdec 	bl	80016cc <transmit_in>
													break;
 8004af4:	e004      	b.n	8004b00 <main+0x9d4>
											}
				 					}
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <main+0x9d4>
													break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <main+0x9d4>
													break;
 8004afe:	bf00      	nop
				for (i = 0; i < mInOut_Number; i++)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	3301      	adds	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <main+0xa1c>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f4ff af58 	bcc.w	80049c2 <main+0x896>
							}
					}
				for(i=0; i<mMax_InByte; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
 8004b16:	e008      	b.n	8004b2a <main+0x9fe>
					inold[i] = instate[i];
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	4908      	ldr	r1, [pc, #32]	; (8004b40 <main+0xa14>)
 8004b1e:	5c89      	ldrb	r1, [r1, r2]
 8004b20:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <main+0xa34>)
 8004b22:	54d1      	strb	r1, [r2, r3]
				for(i=0; i<mMax_InByte; i++)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	3301      	adds	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <main+0xa40>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3f1      	bcc.n	8004b18 <main+0x9ec>
  {
 8004b34:	e497      	b.n	8004466 <main+0x33a>
 8004b36:	bf00      	nop
 8004b38:	200003ac 	.word	0x200003ac
 8004b3c:	20000272 	.word	0x20000272
 8004b40:	20000600 	.word	0x20000600
 8004b44:	200005e8 	.word	0x200005e8
 8004b48:	20000189 	.word	0x20000189
 8004b4c:	20000202 	.word	0x20000202
 8004b50:	2000018c 	.word	0x2000018c
 8004b54:	77359400 	.word	0x77359400
 8004b58:	20000190 	.word	0x20000190
 8004b5c:	20000200 	.word	0x20000200
 8004b60:	20000374 	.word	0x20000374
 8004b64:	200008dc 	.word	0x200008dc
 8004b68:	20000273 	.word	0x20000273
 8004b6c:	2000097c 	.word	0x2000097c

08004b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b090      	sub	sp, #64	; 0x40
 8004b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b76:	f107 0318 	add.w	r3, r7, #24
 8004b7a:	2228      	movs	r2, #40	; 0x28
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f003 f93a 	bl	8007df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b92:	2301      	movs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004bae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bb4:	f107 0318 	add.w	r3, r7, #24
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 fec1 	bl	8006940 <HAL_RCC_OscConfig>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004bc4:	f000 f9b8 	bl	8004f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bc8:	230f      	movs	r3, #15
 8004bca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f002 f92b 	bl	8006e40 <HAL_RCC_ClockConfig>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004bf0:	f000 f9a2 	bl	8004f38 <Error_Handler>
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3740      	adds	r7, #64	; 0x40
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <MX_CAN_Init+0x68>)
 8004c04:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c08:	2210      	movs	r2, #16
 8004c0a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c1a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004c1e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c26:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004c4c:	4804      	ldr	r0, [pc, #16]	; (8004c60 <MX_CAN_Init+0x64>)
 8004c4e:	f000 fc15 	bl	800547c <HAL_CAN_Init>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004c58:	f000 f96e 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8004c5c:	bf00      	nop
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200005c0 	.word	0x200005c0
 8004c64:	40006400 	.word	0x40006400

08004c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <MX_TIM1_Init+0x9c>)
 8004c88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004c8c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004c90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004c9a:	2263      	movs	r2, #99	; 0x63
 8004c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cb0:	4813      	ldr	r0, [pc, #76]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004cb2:	f002 fa5f 	bl	8007174 <HAL_TIM_Base_Init>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004cbc:	f000 f93c 	bl	8004f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	4619      	mov	r1, r3
 8004ccc:	480c      	ldr	r0, [pc, #48]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004cce:	f002 fbfb 	bl	80074c8 <HAL_TIM_ConfigClockSource>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004cd8:	f000 f92e 	bl	8004f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4805      	ldr	r0, [pc, #20]	; (8004d00 <MX_TIM1_Init+0x98>)
 8004cea:	f002 fdcd 	bl	8007888 <HAL_TIMEx_MasterConfigSynchronization>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004cf4:	f000 f920 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000894 	.word	0x20000894
 8004d04:	40012c00 	.word	0x40012c00

08004d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d0e:	f107 0308 	add.w	r3, r7, #8
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d2e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d34:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d3c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004d40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d4e:	4814      	ldr	r0, [pc, #80]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d50:	f002 fa10 	bl	8007174 <HAL_TIM_Base_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004d5a:	f000 f8ed 	bl	8004f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	4619      	mov	r1, r3
 8004d6a:	480d      	ldr	r0, [pc, #52]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d6c:	f002 fbac 	bl	80074c8 <HAL_TIM_ConfigClockSource>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004d76:	f000 f8df 	bl	8004f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d82:	463b      	mov	r3, r7
 8004d84:	4619      	mov	r1, r3
 8004d86:	4806      	ldr	r0, [pc, #24]	; (8004da0 <MX_TIM2_Init+0x98>)
 8004d88:	f002 fd7e 	bl	8007888 <HAL_TIMEx_MasterConfigSynchronization>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004d92:	f000 f8d1 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d96:	bf00      	nop
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000934 	.word	0x20000934

08004da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <MX_USART1_UART_Init+0x50>)
 8004dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004dca:	220c      	movs	r2, #12
 8004dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dda:	4805      	ldr	r0, [pc, #20]	; (8004df0 <MX_USART1_UART_Init+0x4c>)
 8004ddc:	f002 fdc4 	bl	8007968 <HAL_UART_Init>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004de6:	f000 f8a7 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000840 	.word	0x20000840
 8004df4:	40013800 	.word	0x40013800

08004df8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <MX_USART2_Init+0x50>)
 8004dfe:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <MX_USART2_Init+0x54>)
 8004e00:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e08:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e1e:	220c      	movs	r2, #12
 8004e20:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8004e34:	4804      	ldr	r0, [pc, #16]	; (8004e48 <MX_USART2_Init+0x50>)
 8004e36:	f002 fe73 	bl	8007b20 <HAL_USART_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8004e40:	f000 f87a 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	200008ec 	.word	0x200008ec
 8004e4c:	40004400 	.word	0x40004400

08004e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e56:	f107 0310 	add.w	r3, r7, #16
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4a30      	ldr	r2, [pc, #192]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e6a:	f043 0320 	orr.w	r3, r3, #32
 8004e6e:	6193      	str	r3, [r2, #24]
 8004e70:	4b2e      	ldr	r3, [pc, #184]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e82:	f043 0304 	orr.w	r3, r3, #4
 8004e86:	6193      	str	r3, [r2, #24]
 8004e88:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	4a24      	ldr	r2, [pc, #144]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004e9a:	f043 0308 	orr.w	r3, r3, #8
 8004e9e:	6193      	str	r3, [r2, #24]
 8004ea0:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <MX_GPIO_Init+0xdc>)
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Out_Pin|HC595_SEL_Pin|SCK_Pin|MOSI_Pin
 8004eac:	2200      	movs	r2, #0
 8004eae:	f248 11a3 	movw	r1, #33187	; 0x81a3
 8004eb2:	481f      	ldr	r0, [pc, #124]	; (8004f30 <MX_GPIO_Init+0xe0>)
 8004eb4:	f001 fd2b 	bl	800690e <HAL_GPIO_WritePin>
                          |UART_DE_Pin|HC166_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Buzzer_Out_Pin HC595_SEL_Pin SCK_Pin MOSI_Pin
                           UART_DE_Pin HC166_SEL_Pin */
  GPIO_InitStruct.Pin = Buzzer_Out_Pin|HC595_SEL_Pin|SCK_Pin|MOSI_Pin
 8004eb8:	f248 13a3 	movw	r3, #33187	; 0x81a3
 8004ebc:	613b      	str	r3, [r7, #16]
                          |UART_DE_Pin|HC166_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eca:	f107 0310 	add.w	r3, r7, #16
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4817      	ldr	r0, [pc, #92]	; (8004f30 <MX_GPIO_Init+0xe0>)
 8004ed2:	f001 fb81 	bl	80065d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8004ee2:	f107 0310 	add.w	r3, r7, #16
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4811      	ldr	r0, [pc, #68]	; (8004f30 <MX_GPIO_Init+0xe0>)
 8004eea:	f001 fb75 	bl	80065d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IC_IN1_Pin IC_IN2_Pin IC_IN3_Pin IC_IN11_Pin
                           IC_IN12_Pin IC_IN13_Pin IC_IN14_Pin IC_IN4_Pin
                           IC_IN5_Pin IC_IN6_Pin IC_IN7_Pin IC_IN8_Pin
                           IC_IN9_Pin IC_IN10_Pin */
  GPIO_InitStruct.Pin = IC_IN1_Pin|IC_IN2_Pin|IC_IN3_Pin|IC_IN11_Pin
 8004eee:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004ef2:	613b      	str	r3, [r7, #16]
                          |IC_IN12_Pin|IC_IN13_Pin|IC_IN14_Pin|IC_IN4_Pin
                          |IC_IN5_Pin|IC_IN6_Pin|IC_IN7_Pin|IC_IN8_Pin
                          |IC_IN9_Pin|IC_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	4619      	mov	r1, r3
 8004f02:	480c      	ldr	r0, [pc, #48]	; (8004f34 <MX_GPIO_Init+0xe4>)
 8004f04:	f001 fb68 	bl	80065d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NODE_ID_Pin */
  GPIO_InitStruct.Pin = NODE_ID_Pin;
 8004f08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NODE_ID_GPIO_Port, &GPIO_InitStruct);
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4805      	ldr	r0, [pc, #20]	; (8004f34 <MX_GPIO_Init+0xe4>)
 8004f1e:	f001 fb5b 	bl	80065d8 <HAL_GPIO_Init>

}
 8004f22:	bf00      	nop
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40010800 	.word	0x40010800
 8004f34:	40010c00 	.word	0x40010c00

08004f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f3c:	b672      	cpsid	i
}
 8004f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f40:	e7fe      	b.n	8004f40 <Error_Handler+0x8>
	...

08004f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <HAL_MspInit+0x5c>)
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <HAL_MspInit+0x5c>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6193      	str	r3, [r2, #24]
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <HAL_MspInit+0x5c>)
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <HAL_MspInit+0x5c>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <HAL_MspInit+0x5c>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	61d3      	str	r3, [r2, #28]
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_MspInit+0x5c>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <HAL_MspInit+0x60>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_MspInit+0x60>)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40010000 	.word	0x40010000

08004fa8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <HAL_CAN_MspInit+0xcc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d151      	bne.n	800506c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <HAL_CAN_MspInit+0xd0>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_CAN_MspInit+0xd0>)
 8004fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	61d3      	str	r3, [r2, #28]
 8004fd4:	4b28      	ldr	r3, [pc, #160]	; (8005078 <HAL_CAN_MspInit+0xd0>)
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <HAL_CAN_MspInit+0xd0>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <HAL_CAN_MspInit+0xd0>)
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	6193      	str	r3, [r2, #24]
 8004fec:	4b22      	ldr	r3, [pc, #136]	; (8005078 <HAL_CAN_MspInit+0xd0>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005006:	f107 0310 	add.w	r3, r7, #16
 800500a:	4619      	mov	r1, r3
 800500c:	481b      	ldr	r0, [pc, #108]	; (800507c <HAL_CAN_MspInit+0xd4>)
 800500e:	f001 fae3 	bl	80065d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005018:	2302      	movs	r3, #2
 800501a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800501c:	2303      	movs	r3, #3
 800501e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	4619      	mov	r1, r3
 8005026:	4815      	ldr	r0, [pc, #84]	; (800507c <HAL_CAN_MspInit+0xd4>)
 8005028:	f001 fad6 	bl	80065d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	2013      	movs	r0, #19
 8005032:	f001 f94e 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8005036:	2013      	movs	r0, #19
 8005038:	f001 f967 	bl	800630a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800503c:	2200      	movs	r2, #0
 800503e:	2100      	movs	r1, #0
 8005040:	2014      	movs	r0, #20
 8005042:	f001 f946 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005046:	2014      	movs	r0, #20
 8005048:	f001 f95f 	bl	800630a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800504c:	2200      	movs	r2, #0
 800504e:	2100      	movs	r1, #0
 8005050:	2015      	movs	r0, #21
 8005052:	f001 f93e 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8005056:	2015      	movs	r0, #21
 8005058:	f001 f957 	bl	800630a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800505c:	2200      	movs	r2, #0
 800505e:	2100      	movs	r1, #0
 8005060:	2016      	movs	r0, #22
 8005062:	f001 f936 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8005066:	2016      	movs	r0, #22
 8005068:	f001 f94f 	bl	800630a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40006400 	.word	0x40006400
 8005078:	40021000 	.word	0x40021000
 800507c:	40010800 	.word	0x40010800

08005080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_Base_MspInit+0x88>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d11c      	bne.n	80050cc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <HAL_TIM_Base_MspInit+0x8c>)
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	4a1d      	ldr	r2, [pc, #116]	; (800510c <HAL_TIM_Base_MspInit+0x8c>)
 8005098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800509c:	6193      	str	r3, [r2, #24]
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <HAL_TIM_Base_MspInit+0x8c>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	2018      	movs	r0, #24
 80050b0:	f001 f90f 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80050b4:	2018      	movs	r0, #24
 80050b6:	f001 f928 	bl	800630a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80050ba:	2200      	movs	r2, #0
 80050bc:	2100      	movs	r1, #0
 80050be:	2019      	movs	r0, #25
 80050c0:	f001 f907 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80050c4:	2019      	movs	r0, #25
 80050c6:	f001 f920 	bl	800630a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80050ca:	e018      	b.n	80050fe <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d113      	bne.n	80050fe <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <HAL_TIM_Base_MspInit+0x8c>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <HAL_TIM_Base_MspInit+0x8c>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	61d3      	str	r3, [r2, #28]
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_TIM_Base_MspInit+0x8c>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2100      	movs	r1, #0
 80050f2:	201c      	movs	r0, #28
 80050f4:	f001 f8ed 	bl	80062d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050f8:	201c      	movs	r0, #28
 80050fa:	f001 f906 	bl	800630a <HAL_NVIC_EnableIRQ>
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40021000 	.word	0x40021000

08005110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005118:	f107 0310 	add.w	r3, r7, #16
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_UART_MspInit+0x8c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d131      	bne.n	8005194 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <HAL_UART_MspInit+0x90>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <HAL_UART_MspInit+0x90>)
 8005136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800513a:	6193      	str	r3, [r2, #24]
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_UART_MspInit+0x90>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_UART_MspInit+0x90>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <HAL_UART_MspInit+0x90>)
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	6193      	str	r3, [r2, #24]
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_UART_MspInit+0x90>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800516a:	2303      	movs	r3, #3
 800516c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516e:	f107 0310 	add.w	r3, r7, #16
 8005172:	4619      	mov	r1, r3
 8005174:	480b      	ldr	r0, [pc, #44]	; (80051a4 <HAL_UART_MspInit+0x94>)
 8005176:	f001 fa2f 	bl	80065d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800517a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005184:	2300      	movs	r3, #0
 8005186:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005188:	f107 0310 	add.w	r3, r7, #16
 800518c:	4619      	mov	r1, r3
 800518e:	4805      	ldr	r0, [pc, #20]	; (80051a4 <HAL_UART_MspInit+0x94>)
 8005190:	f001 fa22 	bl	80065d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005194:	bf00      	nop
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40013800 	.word	0x40013800
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40010800 	.word	0x40010800

080051a8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b0:	f107 0310 	add.w	r3, r7, #16
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_USART_MspInit+0x88>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d12f      	bne.n	8005228 <HAL_USART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <HAL_USART_MspInit+0x8c>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_USART_MspInit+0x8c>)
 80051ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d2:	61d3      	str	r3, [r2, #28]
 80051d4:	4b17      	ldr	r3, [pc, #92]	; (8005234 <HAL_USART_MspInit+0x8c>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <HAL_USART_MspInit+0x8c>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <HAL_USART_MspInit+0x8c>)
 80051e6:	f043 0304 	orr.w	r3, r3, #4
 80051ea:	6193      	str	r3, [r2, #24]
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_USART_MspInit+0x8c>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80051f8:	2314      	movs	r3, #20
 80051fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fc:	2302      	movs	r3, #2
 80051fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005200:	2303      	movs	r3, #3
 8005202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005204:	f107 0310 	add.w	r3, r7, #16
 8005208:	4619      	mov	r1, r3
 800520a:	480b      	ldr	r0, [pc, #44]	; (8005238 <HAL_USART_MspInit+0x90>)
 800520c:	f001 f9e4 	bl	80065d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005210:	2308      	movs	r3, #8
 8005212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521c:	f107 0310 	add.w	r3, r7, #16
 8005220:	4619      	mov	r1, r3
 8005222:	4805      	ldr	r0, [pc, #20]	; (8005238 <HAL_USART_MspInit+0x90>)
 8005224:	f001 f9d8 	bl	80065d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005228:	bf00      	nop
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40004400 	.word	0x40004400
 8005234:	40021000 	.word	0x40021000
 8005238:	40010800 	.word	0x40010800

0800523c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005240:	e7fe      	b.n	8005240 <NMI_Handler+0x4>

08005242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005246:	e7fe      	b.n	8005246 <HardFault_Handler+0x4>

08005248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800524c:	e7fe      	b.n	800524c <MemManage_Handler+0x4>

0800524e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005252:	e7fe      	b.n	8005252 <BusFault_Handler+0x4>

08005254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005258:	e7fe      	b.n	8005258 <UsageFault_Handler+0x4>

0800525a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005266:	b480      	push	{r7}
 8005268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005276:	bf00      	nop
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005282:	f000 f8bb 	bl	80053fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8005290:	4802      	ldr	r0, [pc, #8]	; (800529c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8005292:	f000 fd31 	bl	8005cf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200005c0 	.word	0x200005c0

080052a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80052a6:	f000 fd27 	bl	8005cf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200005c0 	.word	0x200005c0

080052b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <CAN1_RX1_IRQHandler+0x10>)
 80052ba:	f000 fd1d 	bl	8005cf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200005c0 	.word	0x200005c0

080052c8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80052cc:	4802      	ldr	r0, [pc, #8]	; (80052d8 <CAN1_SCE_IRQHandler+0x10>)
 80052ce:	f000 fd13 	bl	8005cf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	200005c0 	.word	0x200005c0

080052dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <TIM1_BRK_IRQHandler+0x10>)
 80052e2:	f001 ffe9 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000894 	.word	0x20000894

080052f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <TIM1_UP_IRQHandler+0x10>)
 80052f6:	f001 ffdf 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000894 	.word	0x20000894

08005304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005308:	4802      	ldr	r0, [pc, #8]	; (8005314 <TIM2_IRQHandler+0x10>)
 800530a:	f001 ffd5 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000934 	.word	0x20000934

08005318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005324:	480c      	ldr	r0, [pc, #48]	; (8005358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005326:	490d      	ldr	r1, [pc, #52]	; (800535c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800532a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800532c:	e002      	b.n	8005334 <LoopCopyDataInit>

0800532e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800532e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005332:	3304      	adds	r3, #4

08005334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005338:	d3f9      	bcc.n	800532e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800533c:	4c0a      	ldr	r4, [pc, #40]	; (8005368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800533e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005340:	e001      	b.n	8005346 <LoopFillZerobss>

08005342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005344:	3204      	adds	r2, #4

08005346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005348:	d3fb      	bcc.n	8005342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800534a:	f7ff ffe5 	bl	8005318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800534e:	f002 fd21 	bl	8007d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005352:	f7fe feeb 	bl	800412c <main>
  bx lr
 8005356:	4770      	bx	lr
  ldr r0, =_sdata
 8005358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800535c:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8005360:	08007ea8 	.word	0x08007ea8
  ldr r2, =_sbss
 8005364:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8005368:	200009c0 	.word	0x200009c0

0800536c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800536c:	e7fe      	b.n	800536c <ADC1_2_IRQHandler>
	...

08005370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_Init+0x28>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_Init+0x28>)
 800537a:	f043 0310 	orr.w	r3, r3, #16
 800537e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005380:	2003      	movs	r0, #3
 8005382:	f000 ff9b 	bl	80062bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005386:	2000      	movs	r0, #0
 8005388:	f000 f808 	bl	800539c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800538c:	f7ff fdda 	bl	8004f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40022000 	.word	0x40022000

0800539c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_InitTick+0x54>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_InitTick+0x58>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 ffb7 	bl	800632e <HAL_SYSTICK_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00e      	b.n	80053e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d80a      	bhi.n	80053e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d0:	2200      	movs	r2, #0
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f000 ff7b 	bl	80062d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <HAL_InitTick+0x5c>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	200001a4 	.word	0x200001a4
 80053f4:	200001ac 	.word	0x200001ac
 80053f8:	200001a8 	.word	0x200001a8

080053fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_IncTick+0x1c>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_IncTick+0x20>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4413      	add	r3, r2
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <HAL_IncTick+0x20>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	200001ac 	.word	0x200001ac
 800541c:	20000998 	.word	0x20000998

08005420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return uwTick;
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <HAL_GetTick+0x10>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	20000998 	.word	0x20000998

08005434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800543c:	f7ff fff0 	bl	8005420 <HAL_GetTick>
 8005440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d005      	beq.n	800545a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <HAL_Delay+0x44>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800545a:	bf00      	nop
 800545c:	f7ff ffe0 	bl	8005420 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d8f7      	bhi.n	800545c <HAL_Delay+0x28>
  {
  }
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200001ac 	.word	0x200001ac

0800547c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e0ed      	b.n	800566a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fd84 	bl	8004fa8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054b0:	f7ff ffb6 	bl	8005420 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054b6:	e012      	b.n	80054de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054b8:	f7ff ffb2 	bl	8005420 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b0a      	cmp	r3, #10
 80054c4:	d90b      	bls.n	80054de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2205      	movs	r2, #5
 80054d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e0c5      	b.n	800566a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0e5      	beq.n	80054b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0202 	bic.w	r2, r2, #2
 80054fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054fc:	f7ff ff90 	bl	8005420 <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005502:	e012      	b.n	800552a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005504:	f7ff ff8c 	bl	8005420 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b0a      	cmp	r3, #10
 8005510:	d90b      	bls.n	800552a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2205      	movs	r2, #5
 8005522:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e09f      	b.n	800566a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7e1b      	ldrb	r3, [r3, #24]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d108      	bne.n	8005552 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e007      	b.n	8005562 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005560:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7e5b      	ldrb	r3, [r3, #25]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d108      	bne.n	800557c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e007      	b.n	800558c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7e9b      	ldrb	r3, [r3, #26]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d108      	bne.n	80055a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0220 	orr.w	r2, r2, #32
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e007      	b.n	80055b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0220 	bic.w	r2, r2, #32
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7edb      	ldrb	r3, [r3, #27]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d108      	bne.n	80055d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0210 	bic.w	r2, r2, #16
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e007      	b.n	80055e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0210 	orr.w	r2, r2, #16
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7f1b      	ldrb	r3, [r3, #28]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d108      	bne.n	80055fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0208 	orr.w	r2, r2, #8
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e007      	b.n	800560a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0208 	bic.w	r2, r2, #8
 8005608:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7f5b      	ldrb	r3, [r3, #29]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d108      	bne.n	8005624 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0204 	orr.w	r2, r2, #4
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e007      	b.n	8005634 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0204 	bic.w	r2, r2, #4
 8005632:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	ea42 0103 	orr.w	r1, r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005688:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d003      	beq.n	8005698 <HAL_CAN_ConfigFilter+0x26>
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b02      	cmp	r3, #2
 8005694:	f040 80aa 	bne.w	80057ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2201      	movs	r2, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d123      	bne.n	800571a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	43db      	mvns	r3, r3
 80056dc:	401a      	ands	r2, r3
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80056f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	3248      	adds	r2, #72	; 0x48
 80056fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800570e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	3348      	adds	r3, #72	; 0x48
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d122      	bne.n	8005768 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	431a      	orrs	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005742:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	3248      	adds	r2, #72	; 0x48
 8005748:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800575c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800575e:	6979      	ldr	r1, [r7, #20]
 8005760:	3348      	adds	r3, #72	; 0x48
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	440b      	add	r3, r1
 8005766:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005782:	e007      	b.n	8005794 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	431a      	orrs	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80057ae:	e007      	b.n	80057c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e006      	b.n	80057fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d12e      	bne.n	8005876 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005830:	f7ff fdf6 	bl	8005420 <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005836:	e012      	b.n	800585e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005838:	f7ff fdf2 	bl	8005420 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b0a      	cmp	r3, #10
 8005844:	d90b      	bls.n	800585e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2205      	movs	r2, #5
 8005856:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e012      	b.n	8005884 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e5      	bne.n	8005838 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e006      	b.n	8005884 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80058aa:	7ffb      	ldrb	r3, [r7, #31]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d003      	beq.n	80058b8 <HAL_CAN_AddTxMessage+0x2c>
 80058b0:	7ffb      	ldrb	r3, [r7, #31]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	f040 80b8 	bne.w	8005a28 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80a0 	beq.w	8005a18 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	0e1b      	lsrs	r3, r3, #24
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d907      	bls.n	80058f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e09e      	b.n	8005a36 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80058f8:	2201      	movs	r2, #1
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	409a      	lsls	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	6809      	ldr	r1, [r1, #0]
 8005918:	431a      	orrs	r2, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3318      	adds	r3, #24
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	440b      	add	r3, r1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e00f      	b.n	8005946 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005930:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800593a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3318      	adds	r3, #24
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	440b      	add	r3, r1
 8005944:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3318      	adds	r3, #24
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	440b      	add	r3, r1
 8005956:	3304      	adds	r3, #4
 8005958:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	7d1b      	ldrb	r3, [r3, #20]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d111      	bne.n	8005986 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3318      	adds	r3, #24
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	4413      	add	r3, r2
 800596e:	3304      	adds	r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	6811      	ldr	r1, [r2, #0]
 8005976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	3318      	adds	r3, #24
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	440b      	add	r3, r1
 8005982:	3304      	adds	r3, #4
 8005984:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3307      	adds	r3, #7
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	061a      	lsls	r2, r3, #24
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3306      	adds	r3, #6
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3305      	adds	r3, #5
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	4313      	orrs	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	3204      	adds	r2, #4
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	4610      	mov	r0, r2
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	ea43 0200 	orr.w	r2, r3, r0
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	440b      	add	r3, r1
 80059b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80059bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3303      	adds	r3, #3
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	061a      	lsls	r2, r3, #24
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3302      	adds	r3, #2
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	4313      	orrs	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	4610      	mov	r0, r2
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6811      	ldr	r1, [r2, #0]
 80059e4:	ea43 0200 	orr.w	r2, r3, r0
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	440b      	add	r3, r1
 80059ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80059f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	3318      	adds	r3, #24
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	4413      	add	r3, r2
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	6811      	ldr	r1, [r2, #0]
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	440b      	add	r3, r1
 8005a12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e00e      	b.n	8005a36 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e006      	b.n	8005a36 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d003      	beq.n	8005a64 <HAL_CAN_GetRxMessage+0x24>
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	f040 80f3 	bne.w	8005c4a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10e      	bne.n	8005a88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d116      	bne.n	8005aa6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0e7      	b.n	8005c58 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0d8      	b.n	8005c58 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	331b      	adds	r3, #27
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	4413      	add	r3, r2
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0204 	and.w	r2, r3, #4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10c      	bne.n	8005ade <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	331b      	adds	r3, #27
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4413      	add	r3, r2
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0d5b      	lsrs	r3, r3, #21
 8005ad4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e00b      	b.n	8005af6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	331b      	adds	r3, #27
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	4413      	add	r3, r2
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	331b      	adds	r3, #27
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	4413      	add	r3, r2
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0202 	and.w	r2, r3, #2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	331b      	adds	r3, #27
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4413      	add	r3, r2
 8005b18:	3304      	adds	r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	331b      	adds	r3, #27
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	331b      	adds	r3, #27
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	0a1a      	lsrs	r2, r3, #8
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	0c1a      	lsrs	r2, r3, #16
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	3302      	adds	r3, #2
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	0e1a      	lsrs	r2, r3, #24
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	3303      	adds	r3, #3
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	0a1a      	lsrs	r2, r3, #8
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	3305      	adds	r3, #5
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	0c1a      	lsrs	r2, r3, #16
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	3306      	adds	r3, #6
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	0e1a      	lsrs	r2, r3, #24
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3307      	adds	r3, #7
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d108      	bne.n	8005c36 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0220 	orr.w	r2, r2, #32
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	e007      	b.n	8005c46 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0220 	orr.w	r2, r2, #32
 8005c44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e006      	b.n	8005c58 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c72:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d002      	beq.n	8005c80 <HAL_CAN_ActivateNotification+0x1e>
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d109      	bne.n	8005c94 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6959      	ldr	r1, [r3, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e006      	b.n	8005ca2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cbc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d002      	beq.n	8005cca <HAL_CAN_DeactivateNotification+0x1e>
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6959      	ldr	r1, [r3, #20]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	43da      	mvns	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	400a      	ands	r2, r1
 8005cda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e006      	b.n	8005cee <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d07c      	beq.n	8005e38 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d023      	beq.n	8005d90 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fa fb60 	bl	8000420 <HAL_CAN_TxMailbox0CompleteCallback>
 8005d60:	e016      	b.n	8005d90 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
 8005d74:	e00c      	b.n	8005d90 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	e002      	b.n	8005d90 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f96b 	bl	8006066 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d024      	beq.n	8005de4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005da2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fa fb48 	bl	8000444 <HAL_CAN_TxMailbox1CompleteCallback>
 8005db4:	e016      	b.n	8005de4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc8:	e00c      	b.n	8005de4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
 8005ddc:	e002      	b.n	8005de4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f94a 	bl	8006078 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d024      	beq.n	8005e38 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005df6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fa fb30 	bl	8000468 <HAL_CAN_TxMailbox2CompleteCallback>
 8005e08:	e016      	b.n	8005e38 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	e00c      	b.n	8005e38 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	e002      	b.n	8005e38 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f929 	bl	800608a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d006      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2208      	movs	r2, #8
 8005e76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f90f 	bl	800609c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fa f9f4 	bl	8000284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8e6 	bl	80060ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fa f926 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f8cf 	bl	80060c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2208      	movs	r2, #8
 8005f3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8c7 	bl	80060d2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d07b      	beq.n	8006046 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d072      	beq.n	800603e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d008      	beq.n	8005f74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	f043 0302 	orr.w	r3, r3, #2
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	f043 0304 	orr.w	r3, r3, #4
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d043      	beq.n	800603e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d03e      	beq.n	800603e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fc6:	2b60      	cmp	r3, #96	; 0x60
 8005fc8:	d02b      	beq.n	8006022 <HAL_CAN_IRQHandler+0x32a>
 8005fca:	2b60      	cmp	r3, #96	; 0x60
 8005fcc:	d82e      	bhi.n	800602c <HAL_CAN_IRQHandler+0x334>
 8005fce:	2b50      	cmp	r3, #80	; 0x50
 8005fd0:	d022      	beq.n	8006018 <HAL_CAN_IRQHandler+0x320>
 8005fd2:	2b50      	cmp	r3, #80	; 0x50
 8005fd4:	d82a      	bhi.n	800602c <HAL_CAN_IRQHandler+0x334>
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d019      	beq.n	800600e <HAL_CAN_IRQHandler+0x316>
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d826      	bhi.n	800602c <HAL_CAN_IRQHandler+0x334>
 8005fde:	2b30      	cmp	r3, #48	; 0x30
 8005fe0:	d010      	beq.n	8006004 <HAL_CAN_IRQHandler+0x30c>
 8005fe2:	2b30      	cmp	r3, #48	; 0x30
 8005fe4:	d822      	bhi.n	800602c <HAL_CAN_IRQHandler+0x334>
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d002      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x2f8>
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d005      	beq.n	8005ffa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005fee:	e01d      	b.n	800602c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f043 0308 	orr.w	r3, r3, #8
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ff8:	e019      	b.n	800602e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	f043 0310 	orr.w	r3, r3, #16
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006002:	e014      	b.n	800602e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	f043 0320 	orr.w	r3, r3, #32
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800600c:	e00f      	b.n	800602e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006016:	e00a      	b.n	800602e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006020:	e005      	b.n	800602e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800602a:	e000      	b.n	800602e <HAL_CAN_IRQHandler+0x336>
            break;
 800602c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800603c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2204      	movs	r2, #4
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f843 	bl	80060e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800605e:	bf00      	nop
 8006060:	3728      	adds	r7, #40	; 0x28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr

080060d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
	...

080060f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006108:	4b0c      	ldr	r3, [pc, #48]	; (800613c <__NVIC_SetPriorityGrouping+0x44>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006114:	4013      	ands	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800612a:	4a04      	ldr	r2, [pc, #16]	; (800613c <__NVIC_SetPriorityGrouping+0x44>)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	60d3      	str	r3, [r2, #12]
}
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <__NVIC_GetPriorityGrouping+0x18>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f003 0307 	and.w	r3, r3, #7
}
 800614e:	4618      	mov	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	db0b      	blt.n	8006186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	4906      	ldr	r1, [pc, #24]	; (8006190 <__NVIC_EnableIRQ+0x34>)
 8006176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2001      	movs	r0, #1
 800617e:	fa00 f202 	lsl.w	r2, r0, r2
 8006182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	e000e100 	.word	0xe000e100

08006194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	6039      	str	r1, [r7, #0]
 800619e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db0a      	blt.n	80061be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	490c      	ldr	r1, [pc, #48]	; (80061e0 <__NVIC_SetPriority+0x4c>)
 80061ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b2:	0112      	lsls	r2, r2, #4
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	440b      	add	r3, r1
 80061b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061bc:	e00a      	b.n	80061d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	4908      	ldr	r1, [pc, #32]	; (80061e4 <__NVIC_SetPriority+0x50>)
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	3b04      	subs	r3, #4
 80061cc:	0112      	lsls	r2, r2, #4
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	440b      	add	r3, r1
 80061d2:	761a      	strb	r2, [r3, #24]
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000e100 	.word	0xe000e100
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	; 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f1c3 0307 	rsb	r3, r3, #7
 8006202:	2b04      	cmp	r3, #4
 8006204:	bf28      	it	cs
 8006206:	2304      	movcs	r3, #4
 8006208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	3304      	adds	r3, #4
 800620e:	2b06      	cmp	r3, #6
 8006210:	d902      	bls.n	8006218 <NVIC_EncodePriority+0x30>
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3b03      	subs	r3, #3
 8006216:	e000      	b.n	800621a <NVIC_EncodePriority+0x32>
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800621c:	f04f 32ff 	mov.w	r2, #4294967295
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43da      	mvns	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	401a      	ands	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006230:	f04f 31ff 	mov.w	r1, #4294967295
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	43d9      	mvns	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006240:	4313      	orrs	r3, r2
         );
}
 8006242:	4618      	mov	r0, r3
 8006244:	3724      	adds	r7, #36	; 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006250:	f3bf 8f4f 	dsb	sy
}
 8006254:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <__NVIC_SystemReset+0x24>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800625e:	4904      	ldr	r1, [pc, #16]	; (8006270 <__NVIC_SystemReset+0x24>)
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <__NVIC_SystemReset+0x28>)
 8006262:	4313      	orrs	r3, r2
 8006264:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006266:	f3bf 8f4f 	dsb	sy
}
 800626a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800626c:	bf00      	nop
 800626e:	e7fd      	b.n	800626c <__NVIC_SystemReset+0x20>
 8006270:	e000ed00 	.word	0xe000ed00
 8006274:	05fa0004 	.word	0x05fa0004

08006278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3b01      	subs	r3, #1
 8006284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006288:	d301      	bcc.n	800628e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800628a:	2301      	movs	r3, #1
 800628c:	e00f      	b.n	80062ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800628e:	4a0a      	ldr	r2, [pc, #40]	; (80062b8 <SysTick_Config+0x40>)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3b01      	subs	r3, #1
 8006294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006296:	210f      	movs	r1, #15
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	f7ff ff7a 	bl	8006194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <SysTick_Config+0x40>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062a6:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <SysTick_Config+0x40>)
 80062a8:	2207      	movs	r2, #7
 80062aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	e000e010 	.word	0xe000e010

080062bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ff17 	bl	80060f8 <__NVIC_SetPriorityGrouping>
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b086      	sub	sp, #24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	4603      	mov	r3, r0
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062e4:	f7ff ff2c 	bl	8006140 <__NVIC_GetPriorityGrouping>
 80062e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	6978      	ldr	r0, [r7, #20]
 80062f0:	f7ff ff7a 	bl	80061e8 <NVIC_EncodePriority>
 80062f4:	4602      	mov	r2, r0
 80062f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff ff49 	bl	8006194 <__NVIC_SetPriority>
}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	4603      	mov	r3, r0
 8006312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff ff1f 	bl	800615c <__NVIC_EnableIRQ>
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800632a:	f7ff ff8f 	bl	800624c <__NVIC_SystemReset>

0800632e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ff9e 	bl	8006278 <SysTick_Config>
 800633c:	4603      	mov	r3, r0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006362:	4b2f      	ldr	r3, [pc, #188]	; (8006420 <HAL_FLASH_Program+0xd8>)
 8006364:	7e1b      	ldrb	r3, [r3, #24]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_FLASH_Program+0x26>
 800636a:	2302      	movs	r3, #2
 800636c:	e054      	b.n	8006418 <HAL_FLASH_Program+0xd0>
 800636e:	4b2c      	ldr	r3, [pc, #176]	; (8006420 <HAL_FLASH_Program+0xd8>)
 8006370:	2201      	movs	r2, #1
 8006372:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006374:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006378:	f000 f898 	bl	80064ac <FLASH_WaitForLastOperation>
 800637c:	4603      	mov	r3, r0
 800637e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d144      	bne.n	8006410 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d102      	bne.n	8006392 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800638c:	2301      	movs	r3, #1
 800638e:	757b      	strb	r3, [r7, #21]
 8006390:	e007      	b.n	80063a2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d102      	bne.n	800639e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006398:	2302      	movs	r3, #2
 800639a:	757b      	strb	r3, [r7, #21]
 800639c:	e001      	b.n	80063a2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800639e:	2304      	movs	r3, #4
 80063a0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	75bb      	strb	r3, [r7, #22]
 80063a6:	e02d      	b.n	8006404 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80063a8:	7dbb      	ldrb	r3, [r7, #22]
 80063aa:	005a      	lsls	r2, r3, #1
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	eb02 0c03 	add.w	ip, r2, r3
 80063b2:	7dbb      	ldrb	r3, [r7, #22]
 80063b4:	0119      	lsls	r1, r3, #4
 80063b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ba:	f1c1 0620 	rsb	r6, r1, #32
 80063be:	f1a1 0020 	sub.w	r0, r1, #32
 80063c2:	fa22 f401 	lsr.w	r4, r2, r1
 80063c6:	fa03 f606 	lsl.w	r6, r3, r6
 80063ca:	4334      	orrs	r4, r6
 80063cc:	fa23 f000 	lsr.w	r0, r3, r0
 80063d0:	4304      	orrs	r4, r0
 80063d2:	fa23 f501 	lsr.w	r5, r3, r1
 80063d6:	b2a3      	uxth	r3, r4
 80063d8:	4619      	mov	r1, r3
 80063da:	4660      	mov	r0, ip
 80063dc:	f000 f84a 	bl	8006474 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80063e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063e4:	f000 f862 	bl	80064ac <FLASH_WaitForLastOperation>
 80063e8:	4603      	mov	r3, r0
 80063ea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <HAL_FLASH_Program+0xdc>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <HAL_FLASH_Program+0xdc>)
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d107      	bne.n	800640e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80063fe:	7dbb      	ldrb	r3, [r7, #22]
 8006400:	3301      	adds	r3, #1
 8006402:	75bb      	strb	r3, [r7, #22]
 8006404:	7dba      	ldrb	r2, [r7, #22]
 8006406:	7d7b      	ldrb	r3, [r7, #21]
 8006408:	429a      	cmp	r2, r3
 800640a:	d3cd      	bcc.n	80063a8 <HAL_FLASH_Program+0x60>
 800640c:	e000      	b.n	8006410 <HAL_FLASH_Program+0xc8>
      {
        break;
 800640e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <HAL_FLASH_Program+0xd8>)
 8006412:	2200      	movs	r2, #0
 8006414:	761a      	strb	r2, [r3, #24]

  return status;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
}
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006420:	200009a0 	.word	0x200009a0
 8006424:	40022000 	.word	0x40022000

08006428 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <HAL_FLASH_Unlock+0x40>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00d      	beq.n	800645a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800643e:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <HAL_FLASH_Unlock+0x40>)
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <HAL_FLASH_Unlock+0x44>)
 8006442:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <HAL_FLASH_Unlock+0x40>)
 8006446:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <HAL_FLASH_Unlock+0x48>)
 8006448:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <HAL_FLASH_Unlock+0x40>)
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800645a:	79fb      	ldrb	r3, [r7, #7]
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40022000 	.word	0x40022000
 800646c:	45670123 	.word	0x45670123
 8006470:	cdef89ab 	.word	0xcdef89ab

08006474 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006480:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <FLASH_Program_HalfWord+0x30>)
 8006482:	2200      	movs	r2, #0
 8006484:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006486:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <FLASH_Program_HalfWord+0x34>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <FLASH_Program_HalfWord+0x34>)
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	801a      	strh	r2, [r3, #0]
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	200009a0 	.word	0x200009a0
 80064a8:	40022000 	.word	0x40022000

080064ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80064b4:	f7fe ffb4 	bl	8005420 <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80064ba:	e010      	b.n	80064de <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d00c      	beq.n	80064de <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <FLASH_WaitForLastOperation+0x2e>
 80064ca:	f7fe ffa9 	bl	8005420 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d201      	bcs.n	80064de <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e025      	b.n	800652a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <FLASH_WaitForLastOperation+0x88>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e8      	bne.n	80064bc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <FLASH_WaitForLastOperation+0x88>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <FLASH_WaitForLastOperation+0x88>)
 80064f8:	2220      	movs	r2, #32
 80064fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <FLASH_WaitForLastOperation+0x88>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <FLASH_WaitForLastOperation+0x88>)
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006514:	4b07      	ldr	r3, [pc, #28]	; (8006534 <FLASH_WaitForLastOperation+0x88>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006520:	f000 f80a 	bl	8006538 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40022000 	.word	0x40022000

08006538 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <FLASH_SetErrorCode+0x9c>)
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f043 0302 	orr.w	r3, r3, #2
 8006556:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <FLASH_SetErrorCode+0x9c>)
 8006558:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f043 0310 	orr.w	r3, r3, #16
 8006560:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <FLASH_SetErrorCode+0x9c>)
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <FLASH_SetErrorCode+0x9c>)
 8006578:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f043 0304 	orr.w	r3, r3, #4
 8006580:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <FLASH_SetErrorCode+0x9c>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	4a0f      	ldr	r2, [pc, #60]	; (80065d4 <FLASH_SetErrorCode+0x9c>)
 8006598:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f240 1201 	movw	r2, #257	; 0x101
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d106      	bne.n	80065be <FLASH_SetErrorCode+0x86>
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4a06      	ldr	r2, [pc, #24]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	61d3      	str	r3, [r2, #28]
}  
 80065bc:	e002      	b.n	80065c4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80065be:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <FLASH_SetErrorCode+0x98>)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60d3      	str	r3, [r2, #12]
}  
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40022000 	.word	0x40022000
 80065d4:	200009a0 	.word	0x200009a0

080065d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065d8:	b480      	push	{r7}
 80065da:	b08b      	sub	sp, #44	; 0x2c
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065e2:	2300      	movs	r3, #0
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80065e6:	2300      	movs	r3, #0
 80065e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065ea:	e169      	b.n	80068c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80065ec:	2201      	movs	r2, #1
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	4013      	ands	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	429a      	cmp	r2, r3
 8006606:	f040 8158 	bne.w	80068ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4a9a      	ldr	r2, [pc, #616]	; (8006878 <HAL_GPIO_Init+0x2a0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d05e      	beq.n	80066d2 <HAL_GPIO_Init+0xfa>
 8006614:	4a98      	ldr	r2, [pc, #608]	; (8006878 <HAL_GPIO_Init+0x2a0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d875      	bhi.n	8006706 <HAL_GPIO_Init+0x12e>
 800661a:	4a98      	ldr	r2, [pc, #608]	; (800687c <HAL_GPIO_Init+0x2a4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d058      	beq.n	80066d2 <HAL_GPIO_Init+0xfa>
 8006620:	4a96      	ldr	r2, [pc, #600]	; (800687c <HAL_GPIO_Init+0x2a4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d86f      	bhi.n	8006706 <HAL_GPIO_Init+0x12e>
 8006626:	4a96      	ldr	r2, [pc, #600]	; (8006880 <HAL_GPIO_Init+0x2a8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d052      	beq.n	80066d2 <HAL_GPIO_Init+0xfa>
 800662c:	4a94      	ldr	r2, [pc, #592]	; (8006880 <HAL_GPIO_Init+0x2a8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d869      	bhi.n	8006706 <HAL_GPIO_Init+0x12e>
 8006632:	4a94      	ldr	r2, [pc, #592]	; (8006884 <HAL_GPIO_Init+0x2ac>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d04c      	beq.n	80066d2 <HAL_GPIO_Init+0xfa>
 8006638:	4a92      	ldr	r2, [pc, #584]	; (8006884 <HAL_GPIO_Init+0x2ac>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d863      	bhi.n	8006706 <HAL_GPIO_Init+0x12e>
 800663e:	4a92      	ldr	r2, [pc, #584]	; (8006888 <HAL_GPIO_Init+0x2b0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d046      	beq.n	80066d2 <HAL_GPIO_Init+0xfa>
 8006644:	4a90      	ldr	r2, [pc, #576]	; (8006888 <HAL_GPIO_Init+0x2b0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d85d      	bhi.n	8006706 <HAL_GPIO_Init+0x12e>
 800664a:	2b12      	cmp	r3, #18
 800664c:	d82a      	bhi.n	80066a4 <HAL_GPIO_Init+0xcc>
 800664e:	2b12      	cmp	r3, #18
 8006650:	d859      	bhi.n	8006706 <HAL_GPIO_Init+0x12e>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <HAL_GPIO_Init+0x80>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	080066d3 	.word	0x080066d3
 800665c:	080066ad 	.word	0x080066ad
 8006660:	080066bf 	.word	0x080066bf
 8006664:	08006701 	.word	0x08006701
 8006668:	08006707 	.word	0x08006707
 800666c:	08006707 	.word	0x08006707
 8006670:	08006707 	.word	0x08006707
 8006674:	08006707 	.word	0x08006707
 8006678:	08006707 	.word	0x08006707
 800667c:	08006707 	.word	0x08006707
 8006680:	08006707 	.word	0x08006707
 8006684:	08006707 	.word	0x08006707
 8006688:	08006707 	.word	0x08006707
 800668c:	08006707 	.word	0x08006707
 8006690:	08006707 	.word	0x08006707
 8006694:	08006707 	.word	0x08006707
 8006698:	08006707 	.word	0x08006707
 800669c:	080066b5 	.word	0x080066b5
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	4a79      	ldr	r2, [pc, #484]	; (800688c <HAL_GPIO_Init+0x2b4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80066aa:	e02c      	b.n	8006706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	623b      	str	r3, [r7, #32]
          break;
 80066b2:	e029      	b.n	8006708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	3304      	adds	r3, #4
 80066ba:	623b      	str	r3, [r7, #32]
          break;
 80066bc:	e024      	b.n	8006708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	3308      	adds	r3, #8
 80066c4:	623b      	str	r3, [r7, #32]
          break;
 80066c6:	e01f      	b.n	8006708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	330c      	adds	r3, #12
 80066ce:	623b      	str	r3, [r7, #32]
          break;
 80066d0:	e01a      	b.n	8006708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80066da:	2304      	movs	r3, #4
 80066dc:	623b      	str	r3, [r7, #32]
          break;
 80066de:	e013      	b.n	8006708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d105      	bne.n	80066f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80066e8:	2308      	movs	r3, #8
 80066ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	611a      	str	r2, [r3, #16]
          break;
 80066f2:	e009      	b.n	8006708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80066f4:	2308      	movs	r3, #8
 80066f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	615a      	str	r2, [r3, #20]
          break;
 80066fe:	e003      	b.n	8006708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006700:	2300      	movs	r3, #0
 8006702:	623b      	str	r3, [r7, #32]
          break;
 8006704:	e000      	b.n	8006708 <HAL_GPIO_Init+0x130>
          break;
 8006706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2bff      	cmp	r3, #255	; 0xff
 800670c:	d801      	bhi.n	8006712 <HAL_GPIO_Init+0x13a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	e001      	b.n	8006716 <HAL_GPIO_Init+0x13e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3304      	adds	r3, #4
 8006716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2bff      	cmp	r3, #255	; 0xff
 800671c:	d802      	bhi.n	8006724 <HAL_GPIO_Init+0x14c>
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	e002      	b.n	800672a <HAL_GPIO_Init+0x152>
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	3b08      	subs	r3, #8
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	210f      	movs	r1, #15
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	43db      	mvns	r3, r3
 800673a:	401a      	ands	r2, r3
 800673c:	6a39      	ldr	r1, [r7, #32]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	431a      	orrs	r2, r3
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80b1 	beq.w	80068ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006758:	4b4d      	ldr	r3, [pc, #308]	; (8006890 <HAL_GPIO_Init+0x2b8>)
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	4a4c      	ldr	r2, [pc, #304]	; (8006890 <HAL_GPIO_Init+0x2b8>)
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	6193      	str	r3, [r2, #24]
 8006764:	4b4a      	ldr	r3, [pc, #296]	; (8006890 <HAL_GPIO_Init+0x2b8>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006770:	4a48      	ldr	r2, [pc, #288]	; (8006894 <HAL_GPIO_Init+0x2bc>)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	089b      	lsrs	r3, r3, #2
 8006776:	3302      	adds	r3, #2
 8006778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	220f      	movs	r2, #15
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43db      	mvns	r3, r3
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4013      	ands	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a40      	ldr	r2, [pc, #256]	; (8006898 <HAL_GPIO_Init+0x2c0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_GPIO_Init+0x1ec>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a3f      	ldr	r2, [pc, #252]	; (800689c <HAL_GPIO_Init+0x2c4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00d      	beq.n	80067c0 <HAL_GPIO_Init+0x1e8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a3e      	ldr	r2, [pc, #248]	; (80068a0 <HAL_GPIO_Init+0x2c8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d007      	beq.n	80067bc <HAL_GPIO_Init+0x1e4>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3d      	ldr	r2, [pc, #244]	; (80068a4 <HAL_GPIO_Init+0x2cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <HAL_GPIO_Init+0x1e0>
 80067b4:	2303      	movs	r3, #3
 80067b6:	e006      	b.n	80067c6 <HAL_GPIO_Init+0x1ee>
 80067b8:	2304      	movs	r3, #4
 80067ba:	e004      	b.n	80067c6 <HAL_GPIO_Init+0x1ee>
 80067bc:	2302      	movs	r3, #2
 80067be:	e002      	b.n	80067c6 <HAL_GPIO_Init+0x1ee>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <HAL_GPIO_Init+0x1ee>
 80067c4:	2300      	movs	r3, #0
 80067c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c8:	f002 0203 	and.w	r2, r2, #3
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	4093      	lsls	r3, r2
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80067d6:	492f      	ldr	r1, [pc, #188]	; (8006894 <HAL_GPIO_Init+0x2bc>)
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	3302      	adds	r3, #2
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80067f0:	4b2d      	ldr	r3, [pc, #180]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	492c      	ldr	r1, [pc, #176]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]
 80067fc:	e006      	b.n	800680c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80067fe:	4b2a      	ldr	r3, [pc, #168]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	43db      	mvns	r3, r3
 8006806:	4928      	ldr	r1, [pc, #160]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006808:	4013      	ands	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d006      	beq.n	8006826 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006818:	4b23      	ldr	r3, [pc, #140]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4922      	ldr	r1, [pc, #136]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	4313      	orrs	r3, r2
 8006822:	604b      	str	r3, [r1, #4]
 8006824:	e006      	b.n	8006834 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	43db      	mvns	r3, r3
 800682e:	491e      	ldr	r1, [pc, #120]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006830:	4013      	ands	r3, r2
 8006832:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d006      	beq.n	800684e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	4918      	ldr	r1, [pc, #96]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	4313      	orrs	r3, r2
 800684a:	608b      	str	r3, [r1, #8]
 800684c:	e006      	b.n	800685c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	43db      	mvns	r3, r3
 8006856:	4914      	ldr	r1, [pc, #80]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 8006858:	4013      	ands	r3, r2
 800685a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d021      	beq.n	80068ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	490e      	ldr	r1, [pc, #56]	; (80068a8 <HAL_GPIO_Init+0x2d0>)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4313      	orrs	r3, r2
 8006872:	60cb      	str	r3, [r1, #12]
 8006874:	e021      	b.n	80068ba <HAL_GPIO_Init+0x2e2>
 8006876:	bf00      	nop
 8006878:	10320000 	.word	0x10320000
 800687c:	10310000 	.word	0x10310000
 8006880:	10220000 	.word	0x10220000
 8006884:	10210000 	.word	0x10210000
 8006888:	10120000 	.word	0x10120000
 800688c:	10110000 	.word	0x10110000
 8006890:	40021000 	.word	0x40021000
 8006894:	40010000 	.word	0x40010000
 8006898:	40010800 	.word	0x40010800
 800689c:	40010c00 	.word	0x40010c00
 80068a0:	40011000 	.word	0x40011000
 80068a4:	40011400 	.word	0x40011400
 80068a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_GPIO_Init+0x304>)
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	4909      	ldr	r1, [pc, #36]	; (80068dc <HAL_GPIO_Init+0x304>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	3301      	adds	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f47f ae8e 	bne.w	80065ec <HAL_GPIO_Init+0x14>
  }
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	372c      	adds	r7, #44	; 0x2c
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	40010400 	.word	0x40010400

080068e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	887b      	ldrh	r3, [r7, #2]
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
 80068fc:	e001      	b.n	8006902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	807b      	strh	r3, [r7, #2]
 800691a:	4613      	mov	r3, r2
 800691c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800691e:	787b      	ldrb	r3, [r7, #1]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006924:	887a      	ldrh	r2, [r7, #2]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800692a:	e003      	b.n	8006934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800692c:	887b      	ldrh	r3, [r7, #2]
 800692e:	041a      	lsls	r2, r3, #16
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	611a      	str	r2, [r3, #16]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr
	...

08006940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e26c      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8087 	beq.w	8006a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006960:	4b92      	ldr	r3, [pc, #584]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b04      	cmp	r3, #4
 800696a:	d00c      	beq.n	8006986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800696c:	4b8f      	ldr	r3, [pc, #572]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b08      	cmp	r3, #8
 8006976:	d112      	bne.n	800699e <HAL_RCC_OscConfig+0x5e>
 8006978:	4b8c      	ldr	r3, [pc, #560]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006984:	d10b      	bne.n	800699e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006986:	4b89      	ldr	r3, [pc, #548]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d06c      	beq.n	8006a6c <HAL_RCC_OscConfig+0x12c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d168      	bne.n	8006a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e246      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a6:	d106      	bne.n	80069b6 <HAL_RCC_OscConfig+0x76>
 80069a8:	4b80      	ldr	r3, [pc, #512]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7f      	ldr	r2, [pc, #508]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	e02e      	b.n	8006a14 <HAL_RCC_OscConfig+0xd4>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x98>
 80069be:	4b7b      	ldr	r3, [pc, #492]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7a      	ldr	r2, [pc, #488]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b78      	ldr	r3, [pc, #480]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a77      	ldr	r2, [pc, #476]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e01d      	b.n	8006a14 <HAL_RCC_OscConfig+0xd4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e0:	d10c      	bne.n	80069fc <HAL_RCC_OscConfig+0xbc>
 80069e2:	4b72      	ldr	r3, [pc, #456]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a71      	ldr	r2, [pc, #452]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e00b      	b.n	8006a14 <HAL_RCC_OscConfig+0xd4>
 80069fc:	4b6b      	ldr	r3, [pc, #428]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6a      	ldr	r2, [pc, #424]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4b68      	ldr	r3, [pc, #416]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a67      	ldr	r2, [pc, #412]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1c:	f7fe fd00 	bl	8005420 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a24:	f7fe fcfc 	bl	8005420 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b64      	cmp	r3, #100	; 0x64
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e1fa      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	4b5d      	ldr	r3, [pc, #372]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0xe4>
 8006a42:	e014      	b.n	8006a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a44:	f7fe fcec 	bl	8005420 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a4c:	f7fe fce8 	bl	8005420 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b64      	cmp	r3, #100	; 0x64
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e1e6      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5e:	4b53      	ldr	r3, [pc, #332]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x10c>
 8006a6a:	e000      	b.n	8006a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d063      	beq.n	8006b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a7a:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a86:	4b49      	ldr	r3, [pc, #292]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d11c      	bne.n	8006acc <HAL_RCC_OscConfig+0x18c>
 8006a92:	4b46      	ldr	r3, [pc, #280]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d116      	bne.n	8006acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	4b43      	ldr	r3, [pc, #268]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x176>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d001      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e1ba      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4939      	ldr	r1, [pc, #228]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aca:	e03a      	b.n	8006b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d020      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad4:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <HAL_RCC_OscConfig+0x270>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ada:	f7fe fca1 	bl	8005420 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae2:	f7fe fc9d 	bl	8005420 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e19b      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af4:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b00:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4927      	ldr	r1, [pc, #156]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
 8006b14:	e015      	b.n	8006b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b16:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <HAL_RCC_OscConfig+0x270>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1c:	f7fe fc80 	bl	8005420 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b24:	f7fe fc7c 	bl	8005420 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e17a      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03a      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d019      	beq.n	8006b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b56:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <HAL_RCC_OscConfig+0x274>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5c:	f7fe fc60 	bl	8005420 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b64:	f7fe fc5c 	bl	8005420 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e15a      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <HAL_RCC_OscConfig+0x26c>)
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b82:	2001      	movs	r0, #1
 8006b84:	f000 fad8 	bl	8007138 <RCC_Delay>
 8006b88:	e01c      	b.n	8006bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <HAL_RCC_OscConfig+0x274>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b90:	f7fe fc46 	bl	8005420 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b96:	e00f      	b.n	8006bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b98:	f7fe fc42 	bl	8005420 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d908      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e140      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	42420000 	.word	0x42420000
 8006bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb8:	4b9e      	ldr	r3, [pc, #632]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e9      	bne.n	8006b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a6 	beq.w	8006d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd6:	4b97      	ldr	r3, [pc, #604]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10d      	bne.n	8006bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be2:	4b94      	ldr	r3, [pc, #592]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4a93      	ldr	r2, [pc, #588]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bec:	61d3      	str	r3, [r2, #28]
 8006bee:	4b91      	ldr	r3, [pc, #580]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfe:	4b8e      	ldr	r3, [pc, #568]	; (8006e38 <HAL_RCC_OscConfig+0x4f8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d118      	bne.n	8006c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c0a:	4b8b      	ldr	r3, [pc, #556]	; (8006e38 <HAL_RCC_OscConfig+0x4f8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a8a      	ldr	r2, [pc, #552]	; (8006e38 <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c16:	f7fe fc03 	bl	8005420 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1e:	f7fe fbff 	bl	8005420 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b64      	cmp	r3, #100	; 0x64
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e0fd      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c30:	4b81      	ldr	r3, [pc, #516]	; (8006e38 <HAL_RCC_OscConfig+0x4f8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d106      	bne.n	8006c52 <HAL_RCC_OscConfig+0x312>
 8006c44:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	4a7a      	ldr	r2, [pc, #488]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	6213      	str	r3, [r2, #32]
 8006c50:	e02d      	b.n	8006cae <HAL_RCC_OscConfig+0x36e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCC_OscConfig+0x334>
 8006c5a:	4b76      	ldr	r3, [pc, #472]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	4a75      	ldr	r2, [pc, #468]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	6213      	str	r3, [r2, #32]
 8006c66:	4b73      	ldr	r3, [pc, #460]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	4a72      	ldr	r2, [pc, #456]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	6213      	str	r3, [r2, #32]
 8006c72:	e01c      	b.n	8006cae <HAL_RCC_OscConfig+0x36e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d10c      	bne.n	8006c96 <HAL_RCC_OscConfig+0x356>
 8006c7c:	4b6d      	ldr	r3, [pc, #436]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	4a6c      	ldr	r2, [pc, #432]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	6213      	str	r3, [r2, #32]
 8006c88:	4b6a      	ldr	r3, [pc, #424]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	4a69      	ldr	r2, [pc, #420]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6213      	str	r3, [r2, #32]
 8006c94:	e00b      	b.n	8006cae <HAL_RCC_OscConfig+0x36e>
 8006c96:	4b67      	ldr	r3, [pc, #412]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	4a66      	ldr	r2, [pc, #408]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	6213      	str	r3, [r2, #32]
 8006ca2:	4b64      	ldr	r3, [pc, #400]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	4a63      	ldr	r2, [pc, #396]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006ca8:	f023 0304 	bic.w	r3, r3, #4
 8006cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d015      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb6:	f7fe fbb3 	bl	8005420 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	e00a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbe:	f7fe fbaf 	bl	8005420 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e0ab      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ee      	beq.n	8006cbe <HAL_RCC_OscConfig+0x37e>
 8006ce0:	e014      	b.n	8006d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce2:	f7fe fb9d 	bl	8005420 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fe fb99 	bl	8005420 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e095      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d00:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1ee      	bne.n	8006cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d105      	bne.n	8006d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d12:	4b48      	ldr	r3, [pc, #288]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	4a47      	ldr	r2, [pc, #284]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8081 	beq.w	8006e2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d061      	beq.n	8006df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d146      	bne.n	8006dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3c:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <HAL_RCC_OscConfig+0x4fc>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d42:	f7fe fb6d 	bl	8005420 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4a:	f7fe fb69 	bl	8005420 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e067      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d70:	d108      	bne.n	8006d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d72:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	492d      	ldr	r1, [pc, #180]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d84:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a19      	ldr	r1, [r3, #32]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	430b      	orrs	r3, r1
 8006d96:	4927      	ldr	r1, [pc, #156]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d9c:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <HAL_RCC_OscConfig+0x4fc>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da2:	f7fe fb3d 	bl	8005420 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006daa:	f7fe fb39 	bl	8005420 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e037      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dbc:	4b1d      	ldr	r3, [pc, #116]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0f0      	beq.n	8006daa <HAL_RCC_OscConfig+0x46a>
 8006dc8:	e02f      	b.n	8006e2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dca:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <HAL_RCC_OscConfig+0x4fc>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7fe fb26 	bl	8005420 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd8:	f7fe fb22 	bl	8005420 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e020      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f0      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x498>
 8006df6:	e018      	b.n	8006e2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e013      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCC_OscConfig+0x4f4>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d106      	bne.n	8006e26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d001      	beq.n	8006e2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40007000 	.word	0x40007000
 8006e3c:	42420060 	.word	0x42420060

08006e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0d0      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e54:	4b6a      	ldr	r3, [pc, #424]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d910      	bls.n	8006e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e62:	4b67      	ldr	r3, [pc, #412]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f023 0207 	bic.w	r2, r3, #7
 8006e6a:	4965      	ldr	r1, [pc, #404]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e72:	4b63      	ldr	r3, [pc, #396]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0b8      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d020      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e9c:	4b59      	ldr	r3, [pc, #356]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a58      	ldr	r2, [pc, #352]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ea6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eb4:	4b53      	ldr	r3, [pc, #332]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a52      	ldr	r2, [pc, #328]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006eba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ebe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec0:	4b50      	ldr	r3, [pc, #320]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	494d      	ldr	r1, [pc, #308]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d040      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ee6:	4b47      	ldr	r3, [pc, #284]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d115      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e07f      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efe:	4b41      	ldr	r3, [pc, #260]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e073      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f0e:	4b3d      	ldr	r3, [pc, #244]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e06b      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f1e:	4b39      	ldr	r3, [pc, #228]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f023 0203 	bic.w	r2, r3, #3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	4936      	ldr	r1, [pc, #216]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f30:	f7fe fa76 	bl	8005420 <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f36:	e00a      	b.n	8006f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f38:	f7fe fa72 	bl	8005420 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e053      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4e:	4b2d      	ldr	r3, [pc, #180]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 020c 	and.w	r2, r3, #12
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d1eb      	bne.n	8006f38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f60:	4b27      	ldr	r3, [pc, #156]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d210      	bcs.n	8006f90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b24      	ldr	r3, [pc, #144]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 0207 	bic.w	r2, r3, #7
 8006f76:	4922      	ldr	r1, [pc, #136]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e032      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f9c:	4b19      	ldr	r3, [pc, #100]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	4916      	ldr	r1, [pc, #88]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	490e      	ldr	r1, [pc, #56]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fce:	f000 f821 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	091b      	lsrs	r3, r3, #4
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	490a      	ldr	r1, [pc, #40]	; (8007008 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe0:	5ccb      	ldrb	r3, [r1, r3]
 8006fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <HAL_RCC_ClockConfig+0x1cc>)
 8006fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <HAL_RCC_ClockConfig+0x1d0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe f9d4 	bl	800539c <HAL_InitTick>

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40022000 	.word	0x40022000
 8007004:	40021000 	.word	0x40021000
 8007008:	08007e88 	.word	0x08007e88
 800700c:	200001a4 	.word	0x200001a4
 8007010:	200001a8 	.word	0x200001a8

08007014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007014:	b490      	push	{r4, r7}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800701a:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800701c:	1d3c      	adds	r4, r7, #4
 800701e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007024:	f240 2301 	movw	r3, #513	; 0x201
 8007028:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800703e:	4b22      	ldr	r3, [pc, #136]	; (80070c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b04      	cmp	r3, #4
 800704c:	d002      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0x40>
 800704e:	2b08      	cmp	r3, #8
 8007050:	d003      	beq.n	800705a <HAL_RCC_GetSysClockFreq+0x46>
 8007052:	e02d      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007054:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007056:	623b      	str	r3, [r7, #32]
      break;
 8007058:	e02d      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	0c9b      	lsrs	r3, r3, #18
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007066:	4413      	add	r3, r2
 8007068:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800706c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d013      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007078:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	0c5b      	lsrs	r3, r3, #17
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007086:	4413      	add	r3, r2
 8007088:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800708c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007092:	fb02 f203 	mul.w	r2, r2, r3
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	e004      	b.n	80070aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070a4:	fb02 f303 	mul.w	r3, r2, r3
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	623b      	str	r3, [r7, #32]
      break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80070b2:	623b      	str	r3, [r7, #32]
      break;
 80070b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b6:	6a3b      	ldr	r3, [r7, #32]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3728      	adds	r7, #40	; 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc90      	pop	{r4, r7}
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	08007e20 	.word	0x08007e20
 80070c8:	40021000 	.word	0x40021000
 80070cc:	007a1200 	.word	0x007a1200
 80070d0:	003d0900 	.word	0x003d0900

080070d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80070da:	681b      	ldr	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	200001a4 	.word	0x200001a4

080070e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070ec:	f7ff fff2 	bl	80070d4 <HAL_RCC_GetHCLKFreq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4903      	ldr	r1, [pc, #12]	; (800710c <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fe:	5ccb      	ldrb	r3, [r1, r3]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40021000 	.word	0x40021000
 800710c:	08007e98 	.word	0x08007e98

08007110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007114:	f7ff ffde 	bl	80070d4 <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b05      	ldr	r3, [pc, #20]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	0adb      	lsrs	r3, r3, #11
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4903      	ldr	r1, [pc, #12]	; (8007134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40021000 	.word	0x40021000
 8007134:	08007e98 	.word	0x08007e98

08007138 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <RCC_Delay+0x34>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a0a      	ldr	r2, [pc, #40]	; (8007170 <RCC_Delay+0x38>)
 8007146:	fba2 2303 	umull	r2, r3, r2, r3
 800714a:	0a5b      	lsrs	r3, r3, #9
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007154:	bf00      	nop
  }
  while (Delay --);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	60fa      	str	r2, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f9      	bne.n	8007154 <RCC_Delay+0x1c>
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	200001a4 	.word	0x200001a4
 8007170:	10624dd3 	.word	0x10624dd3

08007174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e041      	b.n	800720a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fd ff70 	bl	8005080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f000 fa70 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e03a      	b.n	80072a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a18      	ldr	r2, [pc, #96]	; (80072ac <HAL_TIM_Base_Start_IT+0x98>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x58>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007256:	d009      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x58>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a14      	ldr	r2, [pc, #80]	; (80072b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x58>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d111      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b06      	cmp	r3, #6
 800727c:	d010      	beq.n	80072a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	e007      	b.n	80072a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800

080072b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d122      	bne.n	8007314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d11b      	bne.n	8007314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0202 	mvn.w	r2, #2
 80072e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f9b1 	bl	8007662 <HAL_TIM_IC_CaptureCallback>
 8007300:	e005      	b.n	800730e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9a4 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f9b3 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b04      	cmp	r3, #4
 8007320:	d122      	bne.n	8007368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b04      	cmp	r3, #4
 800732e:	d11b      	bne.n	8007368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0204 	mvn.w	r2, #4
 8007338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f987 	bl	8007662 <HAL_TIM_IC_CaptureCallback>
 8007354:	e005      	b.n	8007362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f97a 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f989 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b08      	cmp	r3, #8
 8007374:	d122      	bne.n	80073bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b08      	cmp	r3, #8
 8007382:	d11b      	bne.n	80073bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0208 	mvn.w	r2, #8
 800738c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2204      	movs	r2, #4
 8007392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f95d 	bl	8007662 <HAL_TIM_IC_CaptureCallback>
 80073a8:	e005      	b.n	80073b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f950 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f95f 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b10      	cmp	r3, #16
 80073c8:	d122      	bne.n	8007410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d11b      	bne.n	8007410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0210 	mvn.w	r2, #16
 80073e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2208      	movs	r2, #8
 80073e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f933 	bl	8007662 <HAL_TIM_IC_CaptureCallback>
 80073fc:	e005      	b.n	800740a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f926 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f935 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b01      	cmp	r3, #1
 800741c:	d10e      	bne.n	800743c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d107      	bne.n	800743c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0201 	mvn.w	r2, #1
 8007434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fc fbc0 	bl	8003bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d10e      	bne.n	8007468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d107      	bne.n	8007468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa77 	bl	8007956 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d10e      	bne.n	8007494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d107      	bne.n	8007494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800748c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8f9 	bl	8007686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d10e      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d107      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0220 	mvn.w	r2, #32
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa42 	bl	8007944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_TIM_ConfigClockSource+0x18>
 80074dc:	2302      	movs	r3, #2
 80074de:	e0b3      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x180>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007506:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007518:	d03e      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0xd0>
 800751a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751e:	f200 8087 	bhi.w	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007526:	f000 8085 	beq.w	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 800752a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752e:	d87f      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007530:	2b70      	cmp	r3, #112	; 0x70
 8007532:	d01a      	beq.n	800756a <HAL_TIM_ConfigClockSource+0xa2>
 8007534:	2b70      	cmp	r3, #112	; 0x70
 8007536:	d87b      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007538:	2b60      	cmp	r3, #96	; 0x60
 800753a:	d050      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x116>
 800753c:	2b60      	cmp	r3, #96	; 0x60
 800753e:	d877      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007540:	2b50      	cmp	r3, #80	; 0x50
 8007542:	d03c      	beq.n	80075be <HAL_TIM_ConfigClockSource+0xf6>
 8007544:	2b50      	cmp	r3, #80	; 0x50
 8007546:	d873      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d058      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x136>
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d86f      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007550:	2b30      	cmp	r3, #48	; 0x30
 8007552:	d064      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x156>
 8007554:	2b30      	cmp	r3, #48	; 0x30
 8007556:	d86b      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007558:	2b20      	cmp	r3, #32
 800755a:	d060      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x156>
 800755c:	2b20      	cmp	r3, #32
 800755e:	d867      	bhi.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d05c      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x156>
 8007564:	2b10      	cmp	r3, #16
 8007566:	d05a      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007568:	e062      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6899      	ldr	r1, [r3, #8]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f000 f966 	bl	800784a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800758c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	609a      	str	r2, [r3, #8]
      break;
 8007596:	e04e      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	6899      	ldr	r1, [r3, #8]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f000 f94f 	bl	800784a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ba:	609a      	str	r2, [r3, #8]
      break;
 80075bc:	e03b      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 f8c6 	bl	800775c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2150      	movs	r1, #80	; 0x50
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 f91d 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 80075dc:	e02b      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	6859      	ldr	r1, [r3, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f000 f8e4 	bl	80077b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2160      	movs	r1, #96	; 0x60
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f90d 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 80075fc:	e01b      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	461a      	mov	r2, r3
 800760c:	f000 f8a6 	bl	800775c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2140      	movs	r1, #64	; 0x40
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f8fd 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 800761c:	e00b      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f000 f8f4 	bl	8007816 <TIM_ITRx_SetConfig>
        break;
 800762e:	e002      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007634:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr

08007662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr

08007686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a29      	ldr	r2, [pc, #164]	; (8007750 <TIM_Base_SetConfig+0xb8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <TIM_Base_SetConfig+0x30>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d007      	beq.n	80076c8 <TIM_Base_SetConfig+0x30>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a26      	ldr	r2, [pc, #152]	; (8007754 <TIM_Base_SetConfig+0xbc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0x30>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a25      	ldr	r2, [pc, #148]	; (8007758 <TIM_Base_SetConfig+0xc0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d108      	bne.n	80076da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <TIM_Base_SetConfig+0xb8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00b      	beq.n	80076fa <TIM_Base_SetConfig+0x62>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e8:	d007      	beq.n	80076fa <TIM_Base_SetConfig+0x62>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <TIM_Base_SetConfig+0xbc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_Base_SetConfig+0x62>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a18      	ldr	r2, [pc, #96]	; (8007758 <TIM_Base_SetConfig+0xc0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d108      	bne.n	800770c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a07      	ldr	r2, [pc, #28]	; (8007750 <TIM_Base_SetConfig+0xb8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d103      	bne.n	8007740 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	615a      	str	r2, [r3, #20]
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr
 8007750:	40012c00 	.word	0x40012c00
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800

0800775c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f023 030a 	bic.w	r3, r3, #10
 8007798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	621a      	str	r2, [r3, #32]
}
 80077ae:	bf00      	nop
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f023 0210 	bic.w	r2, r3, #16
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	031b      	lsls	r3, r3, #12
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	621a      	str	r2, [r3, #32]
}
 800780c:	bf00      	nop
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	f043 0307 	orr.w	r3, r3, #7
 8007838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr

0800784a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800784a:	b480      	push	{r7}
 800784c:	b087      	sub	sp, #28
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007864:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	021a      	lsls	r2, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	431a      	orrs	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4313      	orrs	r3, r2
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	609a      	str	r2, [r3, #8]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800789c:	2302      	movs	r3, #2
 800789e:	e046      	b.n	800792e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a16      	ldr	r2, [pc, #88]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00e      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ec:	d009      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d004      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a10      	ldr	r2, [pc, #64]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10c      	bne.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4313      	orrs	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800

08007944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr

08007956 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr

08007968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e03f      	b.n	80079fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fd fbbe 	bl	8005110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2224      	movs	r2, #36	; 0x24
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f829 	bl	8007a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a3e:	f023 030c 	bic.w	r3, r3, #12
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a2c      	ldr	r2, [pc, #176]	; (8007b18 <UART_SetConfig+0x114>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d103      	bne.n	8007a74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a6c:	f7ff fb50 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	e002      	b.n	8007a7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a74:	f7ff fb38 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8007a78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009a      	lsls	r2, r3, #2
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a90:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <UART_SetConfig+0x118>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	0119      	lsls	r1, r3, #4
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009a      	lsls	r2, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ab0:	4b1a      	ldr	r3, [pc, #104]	; (8007b1c <UART_SetConfig+0x118>)
 8007ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	2064      	movs	r0, #100	; 0x64
 8007aba:	fb00 f303 	mul.w	r3, r0, r3
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	3332      	adds	r3, #50	; 0x32
 8007ac4:	4a15      	ldr	r2, [pc, #84]	; (8007b1c <UART_SetConfig+0x118>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ad0:	4419      	add	r1, r3
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009a      	lsls	r2, r3, #2
 8007adc:	441a      	add	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <UART_SetConfig+0x118>)
 8007aea:	fba3 0302 	umull	r0, r3, r3, r2
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	2064      	movs	r0, #100	; 0x64
 8007af2:	fb00 f303 	mul.w	r3, r0, r3
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	3332      	adds	r3, #50	; 0x32
 8007afc:	4a07      	ldr	r2, [pc, #28]	; (8007b1c <UART_SetConfig+0x118>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	440a      	add	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40013800 	.word	0x40013800
 8007b1c:	51eb851f 	.word	0x51eb851f

08007b20 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e033      	b.n	8007b9a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fd fb2e 	bl	80051a8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f825 	bl	8007ba4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695a      	ldr	r2, [r3, #20]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b78:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b88:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 020c 	bic.w	r2, r2, #12
 8007bbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007bd8:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007be4:	431a      	orrs	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bee:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c06:	f023 030c 	bic.w	r3, r3, #12
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	695a      	ldr	r2, [r3, #20]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c38:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a53      	ldr	r2, [pc, #332]	; (8007d8c <USART_SetConfig+0x1e8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d14f      	bne.n	8007ce4 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c44:	f7ff fa64 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 8007c48:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009a      	lsls	r2, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	4a4b      	ldr	r2, [pc, #300]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	0119      	lsls	r1, r3, #4
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009a      	lsls	r2, r3, #2
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c80:	4b43      	ldr	r3, [pc, #268]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007c82:	fba3 0302 	umull	r0, r3, r3, r2
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	2064      	movs	r0, #100	; 0x64
 8007c8a:	fb00 f303 	mul.w	r3, r0, r3
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	3332      	adds	r3, #50	; 0x32
 8007c94:	4a3e      	ldr	r2, [pc, #248]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007c96:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9a:	095b      	lsrs	r3, r3, #5
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8007ca2:	4419      	add	r1, r3
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009a      	lsls	r2, r3, #2
 8007cae:	441a      	add	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cba:	4b35      	ldr	r3, [pc, #212]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007cbc:	fba3 0302 	umull	r0, r3, r3, r2
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	2064      	movs	r0, #100	; 0x64
 8007cc4:	fb00 f303 	mul.w	r3, r0, r3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	3332      	adds	r3, #50	; 0x32
 8007cce:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	f003 020f 	and.w	r2, r3, #15
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	440a      	add	r2, r1
 8007ce0:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8007ce2:	e04e      	b.n	8007d82 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ce4:	f7ff fa00 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8007ce8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009a      	lsls	r2, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d00:	4a23      	ldr	r2, [pc, #140]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	0119      	lsls	r1, r3, #4
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009a      	lsls	r2, r3, #2
 8007d14:	441a      	add	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d20:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007d22:	fba3 0302 	umull	r0, r3, r3, r2
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	2064      	movs	r0, #100	; 0x64
 8007d2a:	fb00 f303 	mul.w	r3, r0, r3
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	3332      	adds	r3, #50	; 0x32
 8007d34:	4a16      	ldr	r2, [pc, #88]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8007d42:	4419      	add	r1, r3
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009a      	lsls	r2, r3, #2
 8007d4e:	441a      	add	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007d5c:	fba3 0302 	umull	r0, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	2064      	movs	r0, #100	; 0x64
 8007d64:	fb00 f303 	mul.w	r3, r0, r3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	3332      	adds	r3, #50	; 0x32
 8007d6e:	4a08      	ldr	r2, [pc, #32]	; (8007d90 <USART_SetConfig+0x1ec>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	440a      	add	r2, r1
 8007d80:	609a      	str	r2, [r3, #8]
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40013800 	.word	0x40013800
 8007d90:	51eb851f 	.word	0x51eb851f

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	2600      	movs	r6, #0
 8007d98:	4d0c      	ldr	r5, [pc, #48]	; (8007dcc <__libc_init_array+0x38>)
 8007d9a:	4c0d      	ldr	r4, [pc, #52]	; (8007dd0 <__libc_init_array+0x3c>)
 8007d9c:	1b64      	subs	r4, r4, r5
 8007d9e:	10a4      	asrs	r4, r4, #2
 8007da0:	42a6      	cmp	r6, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	f000 f830 	bl	8007e08 <_init>
 8007da8:	2600      	movs	r6, #0
 8007daa:	4d0a      	ldr	r5, [pc, #40]	; (8007dd4 <__libc_init_array+0x40>)
 8007dac:	4c0a      	ldr	r4, [pc, #40]	; (8007dd8 <__libc_init_array+0x44>)
 8007dae:	1b64      	subs	r4, r4, r5
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	42a6      	cmp	r6, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbc:	4798      	blx	r3
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc6:	4798      	blx	r3
 8007dc8:	3601      	adds	r6, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	08007ea0 	.word	0x08007ea0
 8007dd0:	08007ea0 	.word	0x08007ea0
 8007dd4:	08007ea0 	.word	0x08007ea0
 8007dd8:	08007ea4 	.word	0x08007ea4

08007ddc <memcpy>:
 8007ddc:	440a      	add	r2, r1
 8007dde:	4291      	cmp	r1, r2
 8007de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007de4:	d100      	bne.n	8007de8 <memcpy+0xc>
 8007de6:	4770      	bx	lr
 8007de8:	b510      	push	{r4, lr}
 8007dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df4:	d1f9      	bne.n	8007dea <memcpy+0xe>
 8007df6:	bd10      	pop	{r4, pc}

08007df8 <memset>:
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4402      	add	r2, r0
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d100      	bne.n	8007e02 <memset+0xa>
 8007e00:	4770      	bx	lr
 8007e02:	f803 1b01 	strb.w	r1, [r3], #1
 8007e06:	e7f9      	b.n	8007dfc <memset+0x4>

08007e08 <_init>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	bf00      	nop
 8007e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0e:	bc08      	pop	{r3}
 8007e10:	469e      	mov	lr, r3
 8007e12:	4770      	bx	lr

08007e14 <_fini>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr
