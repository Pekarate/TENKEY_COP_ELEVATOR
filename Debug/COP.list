
COP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000774c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d8  080078d8  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  080078d8  080078d8  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078d8  080078d8  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080078e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  20000198  08007a78  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  08007a78  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f51  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db6  00000000  00000000  00036112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00038ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d712  00000000  00000000  0003b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ba  00000000  00000000  000588b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ccc1  00000000  00000000  0006cf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109c2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b68  00000000  00000000  00109c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	08007840 	.word	0x08007840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	08007840 	.word	0x08007840

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
/* High priority interrupt routine																*/
/************************************************************************************************/
extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Can1RxData[8] = {0};
 8000154:	2300      	movs	r3, #0
 8000156:	62bb      	str	r3, [r7, #40]	; 0x28
 8000158:	2300      	movs	r3, #0
 800015a:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef Can1RxHeader;
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Can1RxHeader, Can1RxData) != HAL_OK)
 800015c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000160:	f107 020c 	add.w	r2, r7, #12
 8000164:	2101      	movs	r1, #1
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f005 f868 	bl	800523c <HAL_CAN_GetRxMessage>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	  {
		/* Reception Error */
		  Error_Handler();
 8000172:	f004 fa95 	bl	80046a0 <Error_Handler>
								ri++;
							rc++;								// increment message counter
						}
				}
	  }
}
 8000176:	e077      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
			if ((rc == RX_SIZE))							//software buffer data overrun
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b08      	cmp	r3, #8
 8000180:	d107      	bne.n	8000192 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
						errorregister |= ER_COMMUNICATION;		//set error bits
 8000182:	4b3c      	ldr	r3, [pc, #240]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	f043 0310 	orr.w	r3, r3, #16
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b39      	ldr	r3, [pc, #228]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800018e:	701a      	strb	r2, [r3, #0]
}
 8000190:	e06a      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
					rx[ri][0] 	= (Can1RxHeader.StdId>>3) & 0xF0;				//read function code
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4a37      	ldr	r2, [pc, #220]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800019a:	7812      	ldrb	r2, [r2, #0]
 800019c:	b2d2      	uxtb	r2, r2
 800019e:	4611      	mov	r1, r2
 80001a0:	f023 030f 	bic.w	r3, r3, #15
 80001a4:	b2d8      	uxtb	r0, r3
 80001a6:	4a35      	ldr	r2, [pc, #212]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001a8:	460b      	mov	r3, r1
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	440b      	add	r3, r1
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	4413      	add	r3, r2
 80001b2:	4602      	mov	r2, r0
 80001b4:	701a      	strb	r2, [r3, #0]
					rx[ri][1] 	= Can1RxHeader.StdId & 0x3F;   //(RXB1SIDL >> 5) + ((RXB1SIDH & 0x0F) << 3);	// node ID
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	4a2f      	ldr	r2, [pc, #188]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001c6:	b2d8      	uxtb	r0, r3
 80001c8:	4a2c      	ldr	r2, [pc, #176]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	3301      	adds	r3, #1
 80001d6:	4602      	mov	r2, r0
 80001d8:	701a      	strb	r2, [r3, #0]
					if ((rx[ri][0] != RSDO) || (rx[ri][1] == node_id))
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a26      	ldr	r2, [pc, #152]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2bc0      	cmp	r3, #192	; 0xc0
 80001f4:	d110      	bne.n	8000218 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000200:	460b      	mov	r3, r1
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	4413      	add	r3, r2
 800020a:	3301      	adds	r3, #1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d127      	bne.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
						memcpy((void *)&rx[ri][2],Can1RxData,Can1RxHeader.DLC);
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	4613      	mov	r3, r2
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	3302      	adds	r3, #2
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800022c:	4413      	add	r3, r2
 800022e:	69fa      	ldr	r2, [r7, #28]
 8000230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f007 faed 	bl	8007814 <memcpy>
							if (ri == (RX_SIZE-1))				//increment RX message write pointer
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2b07      	cmp	r3, #7
 8000242:	d103      	bne.n	800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
								ri = 0;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
 800024a:	e006      	b.n	800025a <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
								ri++;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	3301      	adds	r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000258:	701a      	strb	r2, [r3, #0]
							rc++;								// increment message counter
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	3301      	adds	r3, #1
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3730      	adds	r7, #48	; 0x30
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200001e8 	.word	0x200001e8
 8000274:	200001e1 	.word	0x200001e1
 8000278:	200002b6 	.word	0x200002b6
 800027c:	200001f4 	.word	0x200001f4
 8000280:	20000567 	.word	0x20000567

08000284 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t hse_heartbeat_time = 0;
uint8_t CanRxData[8] = {0};
CAN_RxHeaderTypeDef CanRxHeader;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	static uint32_t Timettt = 0;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CanRxData) != HAL_OK)
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000290:	2100      	movs	r1, #0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f004 ffd2 	bl	800523c <HAL_CAN_GetRxMessage>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
	/* Reception Error */
	  Error_Handler();
 800029e:	f004 f9ff 	bl	80046a0 <Error_Handler>
 80002a2:	e01a      	b.n	80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	}
	else
	{
		if(((CanRxHeader.StdId>>3) & 0xF0 )== 0)
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			hsetime = HSETIME;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002b4:	2214      	movs	r2, #20
 80002b6:	701a      	strb	r2, [r3, #0]
		}
		if (((CanRxHeader.StdId & 0x3F) - 1) < MAX_LIFT)			// Heartbeat from HSE
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d803      	bhi.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
				hsetime = HSETIME;			// reset HSE supervisor time
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002c8:	2214      	movs	r2, #20
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e002      	b.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
		{
			hsetime = HSETIME-10;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	701a      	strb	r2, [r3, #0]

		}
		hse_heartbeat = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
	}
	hse_heartbeat_time = HAL_GetTick() - Timettt;
 80002da:	f004 fc9f 	bl	8004c1c <HAL_GetTick>
 80002de:	4602      	mov	r2, r0
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80002e8:	6013      	str	r3, [r2, #0]
	 Timettt = HAL_GetTick();
 80002ea:	f004 fc97 	bl	8004c1c <HAL_GetTick>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200001b8 	.word	0x200001b8
 8000300:	20000244 	.word	0x20000244
 8000304:	200007f0 	.word	0x200007f0
 8000308:	200001db 	.word	0x200001db
 800030c:	200001d0 	.word	0x200001d0
 8000310:	200001b4 	.word	0x200001b4

08000314 <CAN_transmit_Interrupt>:

uint16_t mallbox[3] = {0};
uint16_t txmallbox =0;
uint16_t txmallbox_request =0;
void CAN_transmit_Interrupt(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
	if (tc)											// more messages to send
 800031a:	4b3b      	ldr	r3, [pc, #236]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d06d      	beq.n	8000400 <CAN_transmit_Interrupt+0xec>
	{
		CAN_TxHeaderTypeDef CanTxHeader;
		uint8_t CanTxData[8] = {0};
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
		CanTxHeader.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1] ;
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4a36      	ldr	r2, [pc, #216]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000336:	460b      	mov	r3, r1
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	492f      	ldr	r1, [pc, #188]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000354:	4603      	mov	r3, r0
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4403      	add	r3, r0
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	3301      	adds	r3, #1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4413      	add	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
		CanTxHeader.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	61bb      	str	r3, [r7, #24]
		CanTxHeader.IDE   = CAN_ID_STD;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
		CanTxHeader.RTR	= CAN_RTR_DATA;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
		memcpy(CanTxData,(void *)(tx[to]+2),8);
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 80003a0:	4413      	add	r3, r2
 80003a2:	1c9a      	adds	r2, r3, #2
 80003a4:	463b      	mov	r3, r7
 80003a6:	6810      	ldr	r0, [r2, #0]
 80003a8:	6851      	ldr	r1, [r2, #4]
 80003aa:	c303      	stmia	r3!, {r0, r1}
		if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &pTxMailbox) == HAL_OK)
 80003ac:	463a      	mov	r2, r7
 80003ae:	f107 0108 	add.w	r1, r7, #8
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <CAN_transmit_Interrupt+0x100>)
 80003b4:	4818      	ldr	r0, [pc, #96]	; (8000418 <CAN_transmit_Interrupt+0x104>)
 80003b6:	f004 fe67 	bl	8005088 <HAL_CAN_AddTxMessage>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <CAN_transmit_Interrupt+0xba>
		{
			txmallbox++;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003ca:	801a      	strh	r2, [r3, #0]
 80003cc:	e001      	b.n	80003d2 <CAN_transmit_Interrupt+0xbe>
		}
		else
		{
			Error_Handler();
 80003ce:	f004 f967 	bl	80046a0 <Error_Handler>
		}
		tc--;														//decrement TX message counter
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003de:	701a      	strb	r2, [r3, #0]
		if (to == (TX_SIZE-1))					//increment TX message read pointer
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b07      	cmp	r3, #7
 80003e8:	d103      	bne.n	80003f2 <CAN_transmit_Interrupt+0xde>
			to = 0;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
		else
			to++;
	}
}
 80003f0:	e006      	b.n	8000400 <CAN_transmit_Interrupt+0xec>
			to++;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200001f0 	.word	0x200001f0
 800040c:	200002b4 	.word	0x200002b4
 8000410:	20000260 	.word	0x20000260
 8000414:	200001ec 	.word	0x200001ec
 8000418:	20000530 	.word	0x20000530
 800041c:	200001c6 	.word	0x200001c6

08000420 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	mallbox[0]++;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8000432:	801a      	strh	r2, [r3, #0]
	CAN_transmit_Interrupt();
 8000434:	f7ff ff6e 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200001c0 	.word	0x200001c0

08000444 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	mallbox[1]++;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	3301      	adds	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000456:	805a      	strh	r2, [r3, #2]
	CAN_transmit_Interrupt();
 8000458:	f7ff ff5c 	bl	8000314 <CAN_transmit_Interrupt>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200001c0 	.word	0x200001c0

08000468 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	mallbox[2]++;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000472:	889b      	ldrh	r3, [r3, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800047a:	809a      	strh	r2, [r3, #4]
	CAN_transmit_Interrupt();
 800047c:	f7ff ff4a 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200001c0 	.word	0x200001c0

0800048c <Init_Can>:

void Init_Can (void){
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0
	uint8_t i, j;

	rc = 0;       							  //clear all CAN variables
 8000492:	4b77      	ldr	r3, [pc, #476]	; (8000670 <Init_Can+0x1e4>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	ri = 0;
 8000498:	4b76      	ldr	r3, [pc, #472]	; (8000674 <Init_Can+0x1e8>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	ro = 0;
 800049e:	4b76      	ldr	r3, [pc, #472]	; (8000678 <Init_Can+0x1ec>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	tc = 0;
 80004a4:	4b75      	ldr	r3, [pc, #468]	; (800067c <Init_Can+0x1f0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	ti = 0;
 80004aa:	4b75      	ldr	r3, [pc, #468]	; (8000680 <Init_Can+0x1f4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	to = 0;
 80004b0:	4b74      	ldr	r3, [pc, #464]	; (8000684 <Init_Can+0x1f8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < RX_SIZE; i++)	//clear rx buffer
 80004b6:	2300      	movs	r3, #0
 80004b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004bc:	e01e      	b.n	80004fc <Init_Can+0x70>
		{
			for (j = 0; j < 10; j++)
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80004c4:	e011      	b.n	80004ea <Init_Can+0x5e>
				rx[i][j] = 0;
 80004c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80004ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80004ce:	486e      	ldr	r0, [pc, #440]	; (8000688 <Init_Can+0x1fc>)
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4403      	add	r3, r0
 80004da:	440b      	add	r3, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++)
 80004e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004e4:	3301      	adds	r3, #1
 80004e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80004ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004ee:	2b09      	cmp	r3, #9
 80004f0:	d9e9      	bls.n	80004c6 <Init_Can+0x3a>
	for (i = 0; i < RX_SIZE; i++)	//clear rx buffer
 80004f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004f6:	3301      	adds	r3, #1
 80004f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	2b07      	cmp	r3, #7
 8000502:	d9dc      	bls.n	80004be <Init_Can+0x32>
		}
	for (i = 0; i < TX_SIZE; i++)	//clear tx buffer
 8000504:	2300      	movs	r3, #0
 8000506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800050a:	e01e      	b.n	800054a <Init_Can+0xbe>
		{
			for (j = 0; j < 10; j++)
 800050c:	2300      	movs	r3, #0
 800050e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000512:	e011      	b.n	8000538 <Init_Can+0xac>
				tx[i][j] = 0;
 8000514:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000518:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800051c:	485b      	ldr	r0, [pc, #364]	; (800068c <Init_Can+0x200>)
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4403      	add	r3, r0
 8000528:	440b      	add	r3, r1
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++)
 800052e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000532:	3301      	adds	r3, #1
 8000534:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000538:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800053c:	2b09      	cmp	r3, #9
 800053e:	d9e9      	bls.n	8000514 <Init_Can+0x88>
	for (i = 0; i < TX_SIZE; i++)	//clear tx buffer
 8000540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000544:	3301      	adds	r3, #1
 8000546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800054a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800054e:	2b07      	cmp	r3, #7
 8000550:	d9dc      	bls.n	800050c <Init_Can+0x80>
		}
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh =((HEARTBEAT<<3)+HSE_ID)<<5;
 800055e:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000562:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =((HEARTBEAT<<3)+HSE_ID)<<5;
 8000568:	f24e 0320 	movw	r3, #57376	; 0xe020
 800056c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = ENABLE;
 8000576:	2301      	movs	r3, #1
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 800057a:	230e      	movs	r3, #14
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4843      	ldr	r0, [pc, #268]	; (8000690 <Init_Can+0x204>)
 8000584:	f004 fc73 	bl	8004e6e <HAL_CAN_ConfigFilter>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <Init_Can+0x106>
	{
	/* Filter configuration Error */
		Error_Handler();
 800058e:	f004 f887 	bl	80046a0 <Error_Handler>
	}
	sFilterConfig.FilterBank = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh =PDO_OUT<<8;
 8000596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 80005a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005a4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4837      	ldr	r0, [pc, #220]	; (8000690 <Init_Can+0x204>)
 80005b4:	f004 fc5b 	bl	8004e6e <HAL_CAN_ConfigFilter>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <Init_Can+0x136>
	{
	/* Filter configuration Error */
		Error_Handler();
 80005be:	f004 f86f 	bl	80046a0 <Error_Handler>
	}
	sFilterConfig.FilterBank = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = ((RSDO | (node_id >> 3)) << 8) + (node_id <<5);
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <Init_Can+0x208>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	021a      	lsls	r2, r3, #8
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <Init_Can+0x208>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	015b      	lsls	r3, r3, #5
 80005dc:	4413      	add	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 80005e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005e8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4827      	ldr	r0, [pc, #156]	; (8000690 <Init_Can+0x204>)
 80005f4:	f004 fc3b 	bl	8004e6e <HAL_CAN_ConfigFilter>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <Init_Can+0x176>
	{
	/* Filter configuration Error */
		Error_Handler();
 80005fe:	f004 f84f 	bl	80046a0 <Error_Handler>
	}
	sFilterConfig.FilterBank = 3;
 8000602:	2303      	movs	r3, #3
 8000604:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = NMT <<8;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 800060e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000612:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	481c      	ldr	r0, [pc, #112]	; (8000690 <Init_Can+0x204>)
 800061e:	f004 fc26 	bl	8004e6e <HAL_CAN_ConfigFilter>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <Init_Can+0x1a0>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000628:	f004 f83a 	bl	80046a0 <Error_Handler>
	}
	sFilterConfig.FilterBank = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = (MPDO << 8) +(EMS_ID << 5);
 8000630:	f24a 1360 	movw	r3, #41312	; 0xa160
 8000634:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 800063a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800063e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <Init_Can+0x204>)
 800064a:	f004 fc10 	bl	8004e6e <HAL_CAN_ConfigFilter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <Init_Can+0x1cc>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000654:	f004 f824 	bl	80046a0 <Error_Handler>

	INTCONbits.GIEH		= 1;					// low priority interrupts enable
#else
	#warning  add filter and enbale interrupt

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING|CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000658:	2113      	movs	r1, #19
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <Init_Can+0x204>)
 800065c:	f004 feff 	bl	800545e <HAL_CAN_ActivateNotification>
	{

	}
	HAL_CAN_Start(&hcan);
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <Init_Can+0x204>)
 8000662:	f004 fccd 	bl	8005000 <HAL_CAN_Start>
#endif
}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	; 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001e8 	.word	0x200001e8
 8000674:	200002b6 	.word	0x200002b6
 8000678:	200002b5 	.word	0x200002b5
 800067c:	200001f0 	.word	0x200001f0
 8000680:	200002b7 	.word	0x200002b7
 8000684:	200002b4 	.word	0x200002b4
 8000688:	200001f4 	.word	0x200001f4
 800068c:	20000260 	.word	0x20000260
 8000690:	20000530 	.word	0x20000530
 8000694:	20000567 	.word	0x20000567

08000698 <read_rx>:

void read_rx (void){
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
	uint8_t 	size;
	uint8_t	sub;
	uint32_t	value;
	uint8_t 	buffer [8];

	switch (rx [ro][0])
 800069e:	4bb3      	ldr	r3, [pc, #716]	; (800096c <read_rx+0x2d4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4ab2      	ldr	r2, [pc, #712]	; (8000970 <read_rx+0x2d8>)
 80006a6:	460b      	mov	r3, r1
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	440b      	add	r3, r1
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2bf0      	cmp	r3, #240	; 0xf0
 80006b6:	f000 83c0 	beq.w	8000e3a <read_rx+0x7a2>
 80006ba:	2bf0      	cmp	r3, #240	; 0xf0
 80006bc:	f300 846d 	bgt.w	8000f9a <read_rx+0x902>
 80006c0:	2bc0      	cmp	r3, #192	; 0xc0
 80006c2:	d043      	beq.n	800074c <read_rx+0xb4>
 80006c4:	2bc0      	cmp	r3, #192	; 0xc0
 80006c6:	f300 8468 	bgt.w	8000f9a <read_rx+0x902>
 80006ca:	2ba0      	cmp	r3, #160	; 0xa0
 80006cc:	f000 83e6 	beq.w	8000e9c <read_rx+0x804>
 80006d0:	2ba0      	cmp	r3, #160	; 0xa0
 80006d2:	f300 8462 	bgt.w	8000f9a <read_rx+0x902>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8374 	beq.w	8000dc4 <read_rx+0x72c>
 80006dc:	2b80      	cmp	r3, #128	; 0x80
 80006de:	f040 845c 	bne.w	8000f9a <read_rx+0x902>
		{// message function code
			case (PDO_OUT) :						//receive PDO virtual output
			 	index = rx[ro][2];				//read function code
 80006e2:	4ba2      	ldr	r3, [pc, #648]	; (800096c <read_rx+0x2d4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4aa1      	ldr	r2, [pc, #644]	; (8000970 <read_rx+0x2d8>)
 80006ea:	460b      	mov	r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	440b      	add	r3, r1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	3302      	adds	r3, #2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	81bb      	strh	r3, [r7, #12]
				if (index)								//function code > 0
 80006fc:	89bb      	ldrh	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	f000 8446 	beq.w	8000f90 <read_rx+0x8f8>
					{
						if (nmtstate == OPERATIONAL)				// only in operational state
 8000704:	4b9b      	ldr	r3, [pc, #620]	; (8000974 <read_rx+0x2dc>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b05      	cmp	r3, #5
 800070a:	f040 8441 	bne.w	8000f90 <read_rx+0x8f8>
							{
								for (i = 0; i < MAX_IO_TYPE; i++)					// read output function
 800070e:	2300      	movs	r3, #0
 8000710:	75fb      	strb	r3, [r7, #23]
 8000712:	e013      	b.n	800073c <read_rx+0xa4>
									virt_out [i] = rx[ro][i + 2];	// write to virtual output mapping
 8000714:	4b95      	ldr	r3, [pc, #596]	; (800096c <read_rx+0x2d4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461c      	mov	r4, r3
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	1c99      	adds	r1, r3, #2
 800071e:	7dfa      	ldrb	r2, [r7, #23]
 8000720:	4893      	ldr	r0, [pc, #588]	; (8000970 <read_rx+0x2d8>)
 8000722:	4623      	mov	r3, r4
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4423      	add	r3, r4
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4403      	add	r3, r0
 800072c:	440b      	add	r3, r1
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	4b91      	ldr	r3, [pc, #580]	; (8000978 <read_rx+0x2e0>)
 8000734:	5499      	strb	r1, [r3, r2]
								for (i = 0; i < MAX_IO_TYPE; i++)					// read output function
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	3301      	adds	r3, #1
 800073a:	75fb      	strb	r3, [r7, #23]
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	2b06      	cmp	r3, #6
 8000740:	d9e8      	bls.n	8000714 <read_rx+0x7c>
								set_output (virt_out);					// set physical outputs
 8000742:	488d      	ldr	r0, [pc, #564]	; (8000978 <read_rx+0x2e0>)
 8000744:	f001 f95c 	bl	8001a00 <set_output>
							}
					}
				break;
 8000748:	f000 bc22 	b.w	8000f90 <read_rx+0x8f8>

			case (RSDO) :									// receive SDO message
				type = rx [ro][2];					// read SDO type	(������)
 800074c:	4b87      	ldr	r3, [pc, #540]	; (800096c <read_rx+0x2d4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	4a87      	ldr	r2, [pc, #540]	; (8000970 <read_rx+0x2d8>)
 8000754:	460b      	mov	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	3302      	adds	r3, #2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
				switch (type & COMMAND_SPECIFIER)			// check command specifier of SDO
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800076a:	2b80      	cmp	r3, #128	; 0x80
 800076c:	f000 831a 	beq.w	8000da4 <read_rx+0x70c>
 8000770:	2b80      	cmp	r3, #128	; 0x80
 8000772:	f300 8321 	bgt.w	8000db8 <read_rx+0x720>
 8000776:	2b60      	cmp	r3, #96	; 0x60
 8000778:	f000 823a 	beq.w	8000bf0 <read_rx+0x558>
 800077c:	2b60      	cmp	r3, #96	; 0x60
 800077e:	f300 831b 	bgt.w	8000db8 <read_rx+0x720>
 8000782:	2b40      	cmp	r3, #64	; 0x40
 8000784:	f000 8196 	beq.w	8000ab4 <read_rx+0x41c>
 8000788:	2b40      	cmp	r3, #64	; 0x40
 800078a:	f300 8315 	bgt.w	8000db8 <read_rx+0x720>
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 809d 	beq.w	80008ce <read_rx+0x236>
 8000794:	2b20      	cmp	r3, #32
 8000796:	f040 830f 	bne.w	8000db8 <read_rx+0x720>
					{
						case (INIT_WRITE_REQ):							//init write or expedited write
							index = *(uint16_t *)&rx[ro][3];			//read object index
 800079a:	4b74      	ldr	r3, [pc, #464]	; (800096c <read_rx+0x2d4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	3303      	adds	r3, #3
 80007aa:	4a71      	ldr	r2, [pc, #452]	; (8000970 <read_rx+0x2d8>)
 80007ac:	4413      	add	r3, r2
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	81bb      	strh	r3, [r7, #12]
							subindex = rx[ro][5];							//read object subindex
 80007b2:	4b6e      	ldr	r3, [pc, #440]	; (800096c <read_rx+0x2d4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4a6d      	ldr	r2, [pc, #436]	; (8000970 <read_rx+0x2d8>)
 80007ba:	460b      	mov	r3, r1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	3305      	adds	r3, #5
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	72fb      	strb	r3, [r7, #11]
							value = search_dict(index, subindex, type, &pos);
 80007ca:	7bfa      	ldrb	r2, [r7, #15]
 80007cc:	7af9      	ldrb	r1, [r7, #11]
 80007ce:	89b8      	ldrh	r0, [r7, #12]
 80007d0:	4b6a      	ldr	r3, [pc, #424]	; (800097c <read_rx+0x2e4>)
 80007d2:	f002 fadf 	bl	8002d94 <search_dict>
 80007d6:	6138      	str	r0, [r7, #16]
							if (value)							//wrong access to object dictionary
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <read_rx+0x14e>
								abort_sdo (value);		//abort SDO transfer
 80007de:	6938      	ldr	r0, [r7, #16]
 80007e0:	f000 fcd2 	bl	8001188 <abort_sdo>
													sdo_subindex = subindex;
													sdo_timer = SDO_TIMER;		// start SDO time out timer	(�ȴ��Է����Ͷ�д����)
												}
										}
								}
							break;
 80007e4:	e2ec      	b.n	8000dc0 <read_rx+0x728>
									if(index == PORT_OUT)
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d126      	bne.n	800083e <read_rx+0x1a6>
											*((uint8_t *)dict [pos].pointer + subindex) = rx[ro][6];
 80007f0:	4b5e      	ldr	r3, [pc, #376]	; (800096c <read_rx+0x2d4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	4b61      	ldr	r3, [pc, #388]	; (800097c <read_rx+0x2e4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4a61      	ldr	r2, [pc, #388]	; (8000980 <read_rx+0x2e8>)
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	3308      	adds	r3, #8
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	441a      	add	r2, r3
 8000808:	4959      	ldr	r1, [pc, #356]	; (8000970 <read_rx+0x2d8>)
 800080a:	4603      	mov	r3, r0
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4403      	add	r3, r0
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	440b      	add	r3, r1
 8000814:	3306      	adds	r3, #6
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	7013      	strb	r3, [r2, #0]
											sdo_response (INIT_WRITE_RESP, index, subindex, *(uint32_t *)&rx[ro][6]);
 800081c:	4b53      	ldr	r3, [pc, #332]	; (800096c <read_rx+0x2d4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	3306      	adds	r3, #6
 800082c:	4a50      	ldr	r2, [pc, #320]	; (8000970 <read_rx+0x2d8>)
 800082e:	4413      	add	r3, r2
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	7afa      	ldrb	r2, [r7, #11]
 8000834:	89b9      	ldrh	r1, [r7, #12]
 8000836:	2060      	movs	r0, #96	; 0x60
 8000838:	f000 fd54 	bl	80012e4 <sdo_response>
							break;
 800083c:	e2c0      	b.n	8000dc0 <read_rx+0x728>
									  	if (type & EXPEDITED_BIT)		// expedited transfer
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d032      	beq.n	80008ae <read_rx+0x216>
											  	value = write_dict (pos, subindex, *(uint32_t *)&rx[ro][6]);
 8000848:	4b4c      	ldr	r3, [pc, #304]	; (800097c <read_rx+0x2e4>)
 800084a:	7818      	ldrb	r0, [r3, #0]
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <read_rx+0x2d4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	3306      	adds	r3, #6
 800085c:	4a44      	ldr	r2, [pc, #272]	; (8000970 <read_rx+0x2d8>)
 800085e:	4413      	add	r3, r2
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	4619      	mov	r1, r3
 8000866:	f002 f9a9 	bl	8002bbc <write_dict>
 800086a:	4603      	mov	r3, r0
 800086c:	613b      	str	r3, [r7, #16]
											  	if (value)						// value out of range
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d003      	beq.n	800087c <read_rx+0x1e4>
														abort_sdo (value);	// abort SDO transfer
 8000874:	6938      	ldr	r0, [r7, #16]
 8000876:	f000 fc87 	bl	8001188 <abort_sdo>
							break;
 800087a:	e2a1      	b.n	8000dc0 <read_rx+0x728>
															sdo_response (INIT_WRITE_RESP, index, subindex, *(uint32_t *)&rx[ro][6]);
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <read_rx+0x2d4>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	3306      	adds	r3, #6
 800088c:	4a38      	ldr	r2, [pc, #224]	; (8000970 <read_rx+0x2d8>)
 800088e:	4413      	add	r3, r2
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	7afa      	ldrb	r2, [r7, #11]
 8000894:	89b9      	ldrh	r1, [r7, #12]
 8000896:	2060      	movs	r0, #96	; 0x60
 8000898:	f000 fd24 	bl	80012e4 <sdo_response>
															if(index == ARROW_MODE)
 800089c:	89bb      	ldrh	r3, [r7, #12]
 800089e:	f242 42ca 	movw	r2, #9418	; 0x24ca
 80008a2:	4293      	cmp	r3, r2
 80008a4:	f040 828c 	bne.w	8000dc0 <read_rx+0x728>
																Arrow_Status( );
 80008a8:	f002 ff3c 	bl	8003724 <Arrow_Status>
							break;
 80008ac:	e288      	b.n	8000dc0 <read_rx+0x728>
													sdo_response (INIT_WRITE_RESP, index, subindex, 0);
 80008ae:	7afa      	ldrb	r2, [r7, #11]
 80008b0:	89b9      	ldrh	r1, [r7, #12]
 80008b2:	2300      	movs	r3, #0
 80008b4:	2060      	movs	r0, #96	; 0x60
 80008b6:	f000 fd15 	bl	80012e4 <sdo_response>
													sdo_index = index;				// save object index and subindex
 80008ba:	4a32      	ldr	r2, [pc, #200]	; (8000984 <read_rx+0x2ec>)
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	8013      	strh	r3, [r2, #0]
													sdo_subindex = subindex;
 80008c0:	4a31      	ldr	r2, [pc, #196]	; (8000988 <read_rx+0x2f0>)
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	7013      	strb	r3, [r2, #0]
													sdo_timer = SDO_TIMER;		// start SDO time out timer	(�ȴ��Է����Ͷ�д����)
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <read_rx+0x2f4>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	701a      	strb	r2, [r3, #0]
							break;
 80008cc:	e278      	b.n	8000dc0 <read_rx+0x728>

						case (WRITE_SEGM_REQ):							// write segment
							if (!sdo_index)										// no init write request before
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <read_rx+0x2ec>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <read_rx+0x248>
								abort_sdo (SDO_UNSUPPORTED);
 80008d8:	482d      	ldr	r0, [pc, #180]	; (8000990 <read_rx+0x2f8>)
 80008da:	f000 fc55 	bl	8001188 <abort_sdo>
 80008de:	e0df      	b.n	8000aa0 <read_rx+0x408>
							else if (type & TOGGLE_BIT)				// toggle bit must be 0 for 1. segment
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <read_rx+0x25a>
								abort_sdo (SDO_TOGGLEBIT);
 80008ea:	482a      	ldr	r0, [pc, #168]	; (8000994 <read_rx+0x2fc>)
 80008ec:	f000 fc4c 	bl	8001188 <abort_sdo>
 80008f0:	e0d6      	b.n	8000aa0 <read_rx+0x408>
							else if (!(type & LAST_SEGM_BIT))// more segments to write
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <read_rx+0x26c>
								abort_sdo (SDO_L_TO_HIGH);
 80008fc:	4826      	ldr	r0, [pc, #152]	; (8000998 <read_rx+0x300>)
 80008fe:	f000 fc43 	bl	8001188 <abort_sdo>
 8000902:	e0cd      	b.n	8000aa0 <read_rx+0x408>
							else
								{
									switch (sdo_index)
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <read_rx+0x2ec>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800090e:	f000 8083 	beq.w	8000a18 <read_rx+0x380>
 8000912:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000916:	f300 80be 	bgt.w	8000a96 <read_rx+0x3fe>
 800091a:	f246 0211 	movw	r2, #24593	; 0x6011
 800091e:	4293      	cmp	r3, r2
 8000920:	d003      	beq.n	800092a <read_rx+0x292>
 8000922:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000926:	d01e      	beq.n	8000966 <read_rx+0x2ce>
 8000928:	e0b5      	b.n	8000a96 <read_rx+0x3fe>
										{
											case (VIRTUAL_OUTPUT) :	// virtual output mapping object
												for (i = 0; i < MAX_IO_TYPE; i++)
 800092a:	2300      	movs	r3, #0
 800092c:	75fb      	strb	r3, [r7, #23]
 800092e:	e013      	b.n	8000958 <read_rx+0x2c0>
													virt_out [i] = rx[ro][3 + i];
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <read_rx+0x2d4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461c      	mov	r4, r3
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	1cd9      	adds	r1, r3, #3
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <read_rx+0x2d8>)
 800093e:	4623      	mov	r3, r4
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4423      	add	r3, r4
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4403      	add	r3, r0
 8000948:	440b      	add	r3, r1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2d9      	uxtb	r1, r3
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <read_rx+0x2e0>)
 8000950:	5499      	strb	r1, [r3, r2]
												for (i = 0; i < MAX_IO_TYPE; i++)
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	3301      	adds	r3, #1
 8000956:	75fb      	strb	r3, [r7, #23]
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2b06      	cmp	r3, #6
 800095c:	d9e8      	bls.n	8000930 <read_rx+0x298>
												set_output (virt_out);
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <read_rx+0x2e0>)
 8000960:	f001 f84e 	bl	8001a00 <set_output>
												break;
 8000964:	e097      	b.n	8000a96 <read_rx+0x3fe>

											case (INPUT_GROUP):				// input group
												for (i = 0; i < 5; i++)	// dont write input state (uint8_t 5)
 8000966:	2300      	movs	r3, #0
 8000968:	75fb      	strb	r3, [r7, #23]
 800096a:	e051      	b.n	8000a10 <read_rx+0x378>
 800096c:	200002b5 	.word	0x200002b5
 8000970:	200001f4 	.word	0x200001f4
 8000974:	200007f1 	.word	0x200007f1
 8000978:	20000560 	.word	0x20000560
 800097c:	200001e4 	.word	0x200001e4
 8000980:	20000000 	.word	0x20000000
 8000984:	200001d6 	.word	0x200001d6
 8000988:	200001d8 	.word	0x200001d8
 800098c:	200001d9 	.word	0x200001d9
 8000990:	06010000 	.word	0x06010000
 8000994:	05030000 	.word	0x05030000
 8000998:	06070012 	.word	0x06070012
													{
														if (inpar [sdo_subindex - 1][i] != rx[ro][3 + i])
 800099c:	4b9d      	ldr	r3, [pc, #628]	; (8000c14 <read_rx+0x57c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	7df9      	ldrb	r1, [r7, #23]
 80009a6:	489c      	ldr	r0, [pc, #624]	; (8000c18 <read_rx+0x580>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	4403      	add	r3, r0
 80009b0:	440b      	add	r3, r1
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b99      	ldr	r3, [pc, #612]	; (8000c1c <read_rx+0x584>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461c      	mov	r4, r3
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	1cd9      	adds	r1, r3, #3
 80009be:	4898      	ldr	r0, [pc, #608]	; (8000c20 <read_rx+0x588>)
 80009c0:	4623      	mov	r3, r4
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4423      	add	r3, r4
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4403      	add	r3, r0
 80009ca:	440b      	add	r3, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d01a      	beq.n	8000a0a <read_rx+0x372>
															inpar [sdo_subindex - 1][i] = rx[ro][3 + i];
 80009d4:	4b91      	ldr	r3, [pc, #580]	; (8000c1c <read_rx+0x584>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461d      	mov	r5, r3
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	1cd8      	adds	r0, r3, #3
 80009de:	4b8d      	ldr	r3, [pc, #564]	; (8000c14 <read_rx+0x57c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	7df9      	ldrb	r1, [r7, #23]
 80009e8:	4c8d      	ldr	r4, [pc, #564]	; (8000c20 <read_rx+0x588>)
 80009ea:	462b      	mov	r3, r5
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	442b      	add	r3, r5
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4423      	add	r3, r4
 80009f4:	4403      	add	r3, r0
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2dc      	uxtb	r4, r3
 80009fa:	4887      	ldr	r0, [pc, #540]	; (8000c18 <read_rx+0x580>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	4403      	add	r3, r0
 8000a04:	440b      	add	r3, r1
 8000a06:	4622      	mov	r2, r4
 8000a08:	701a      	strb	r2, [r3, #0]
												for (i = 0; i < 5; i++)	// dont write input state (uint8_t 5)
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d9c2      	bls.n	800099c <read_rx+0x304>
													}
												break;
 8000a16:	e03e      	b.n	8000a96 <read_rx+0x3fe>

											case (OUTPUT_GROUP):			// output group
												for (i = 0; i < 5; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	e035      	b.n	8000a8a <read_rx+0x3f2>
													{
														if (outpar [sdo_subindex - 1][i] != rx[ro][3 + i])
 8000a1e:	4b7d      	ldr	r3, [pc, #500]	; (8000c14 <read_rx+0x57c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	497e      	ldr	r1, [pc, #504]	; (8000c24 <read_rx+0x58c>)
 8000a2a:	00d2      	lsls	r2, r2, #3
 8000a2c:	440a      	add	r2, r1
 8000a2e:	4413      	add	r3, r2
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <read_rx+0x584>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461c      	mov	r4, r3
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	1cd9      	adds	r1, r3, #3
 8000a3c:	4878      	ldr	r0, [pc, #480]	; (8000c20 <read_rx+0x588>)
 8000a3e:	4623      	mov	r3, r4
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4423      	add	r3, r4
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4403      	add	r3, r0
 8000a48:	440b      	add	r3, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d018      	beq.n	8000a84 <read_rx+0x3ec>
															outpar [sdo_subindex - 1][i] = rx[ro][3 + i];
 8000a52:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <read_rx+0x584>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461d      	mov	r5, r3
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	1cd8      	adds	r0, r3, #3
 8000a5c:	4b6d      	ldr	r3, [pc, #436]	; (8000c14 <read_rx+0x57c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	1e59      	subs	r1, r3, #1
 8000a64:	7dfa      	ldrb	r2, [r7, #23]
 8000a66:	4c6e      	ldr	r4, [pc, #440]	; (8000c20 <read_rx+0x588>)
 8000a68:	462b      	mov	r3, r5
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	442b      	add	r3, r5
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4423      	add	r3, r4
 8000a72:	4403      	add	r3, r0
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2dc      	uxtb	r4, r3
 8000a78:	486a      	ldr	r0, [pc, #424]	; (8000c24 <read_rx+0x58c>)
 8000a7a:	00cb      	lsls	r3, r1, #3
 8000a7c:	4403      	add	r3, r0
 8000a7e:	4413      	add	r3, r2
 8000a80:	4622      	mov	r2, r4
 8000a82:	701a      	strb	r2, [r3, #0]
												for (i = 0; i < 5; i++)
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	3301      	adds	r3, #1
 8000a88:	75fb      	strb	r3, [r7, #23]
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d9c6      	bls.n	8000a1e <read_rx+0x386>
													}
												set_io_config ();		// check if output is push output
 8000a90:	f001 ff40 	bl	8002914 <set_io_config>
												break;
 8000a94:	bf00      	nop
										}
									sdo_segment (WRITE_SEGM_RESP, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2020      	movs	r0, #32
 8000a9c:	f000 fcca 	bl	8001434 <sdo_segment>
								}
							sdo_index    = 0;					// reset marker from init request
 8000aa0:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <read_rx+0x590>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000aa6:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <read_rx+0x57c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000aac:	4b5f      	ldr	r3, [pc, #380]	; (8000c2c <read_rx+0x594>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
							break;
 8000ab2:	e186      	b.n	8000dc2 <read_rx+0x72a>

						case (INIT_READ_REQ):						// init read or expedited read
							index = *(uint16_t *)&rx[ro][3];	// read object index
 8000ab4:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <read_rx+0x584>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	3303      	adds	r3, #3
 8000ac4:	4a56      	ldr	r2, [pc, #344]	; (8000c20 <read_rx+0x588>)
 8000ac6:	4413      	add	r3, r2
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	81bb      	strh	r3, [r7, #12]
							subindex = rx[ro][5];					// read object subindex
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <read_rx+0x584>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4a53      	ldr	r2, [pc, #332]	; (8000c20 <read_rx+0x588>)
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	440b      	add	r3, r1
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	3305      	adds	r3, #5
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	72fb      	strb	r3, [r7, #11]
							value = search_dict (index, subindex, type, &pos);
 8000ae4:	7bfa      	ldrb	r2, [r7, #15]
 8000ae6:	7af9      	ldrb	r1, [r7, #11]
 8000ae8:	89b8      	ldrh	r0, [r7, #12]
 8000aea:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <read_rx+0x598>)
 8000aec:	f002 f952 	bl	8002d94 <search_dict>
 8000af0:	6138      	str	r0, [r7, #16]
							if (value)										// wrong access to object dictionary
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <read_rx+0x468>
								abort_sdo (value);					// abort SDO transfer
 8000af8:	6938      	ldr	r0, [r7, #16]
 8000afa:	f000 fb45 	bl	8001188 <abort_sdo>
										  	 		value = read_dict (pos, subindex);
													sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
												}
										}
								}
							break;
 8000afe:	e160      	b.n	8000dc2 <read_rx+0x72a>
									if(index == PORT_IN)
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	f642 72fd 	movw	r2, #12285	; 0x2ffd
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d111      	bne.n	8000b2e <read_rx+0x496>
											value = (uint32_t)(*((uint8_t *)dict [pos].pointer + subindex));
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <read_rx+0x598>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4a49      	ldr	r2, [pc, #292]	; (8000c34 <read_rx+0x59c>)
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	4413      	add	r3, r2
 8000b14:	3308      	adds	r3, #8
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]
											sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000b20:	7afa      	ldrb	r2, [r7, #11]
 8000b22:	89b9      	ldrh	r1, [r7, #12]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2042      	movs	r0, #66	; 0x42
 8000b28:	f000 fbdc 	bl	80012e4 <sdo_response>
							break;
 8000b2c:	e149      	b.n	8000dc2 <read_rx+0x72a>
									else if(index == PORT_OUT)
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d111      	bne.n	8000b5c <read_rx+0x4c4>
											value = (uint32_t)(*((uint8_t *)dict [pos].pointer + subindex));
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <read_rx+0x598>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <read_rx+0x59c>)
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	4413      	add	r3, r2
 8000b42:	3308      	adds	r3, #8
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	613b      	str	r3, [r7, #16]
											sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000b4e:	7afa      	ldrb	r2, [r7, #11]
 8000b50:	89b9      	ldrh	r1, [r7, #12]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	2042      	movs	r0, #66	; 0x42
 8000b56:	f000 fbc5 	bl	80012e4 <sdo_response>
							break;
 8000b5a:	e132      	b.n	8000dc2 <read_rx+0x72a>
											size	= dict [pos].size;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <read_rx+0x598>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <read_rx+0x59c>)
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	4413      	add	r3, r2
 8000b66:	3304      	adds	r3, #4
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	72bb      	strb	r3, [r7, #10]
											sub  	= dict [pos].sub;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <read_rx+0x598>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <read_rx+0x59c>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3302      	adds	r3, #2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	727b      	strb	r3, [r7, #9]
											if (size > 4)							// normal transfer
 8000b7c:	7abb      	ldrb	r3, [r7, #10]
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d91c      	bls.n	8000bbc <read_rx+0x524>
													if ((!subindex) && sub)		// number of entries
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <read_rx+0x504>
 8000b88:	7a7b      	ldrb	r3, [r7, #9]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <read_rx+0x504>
														sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, sub);
 8000b8e:	7a7b      	ldrb	r3, [r7, #9]
 8000b90:	7afa      	ldrb	r2, [r7, #11]
 8000b92:	89b9      	ldrh	r1, [r7, #12]
 8000b94:	2042      	movs	r0, #66	; 0x42
 8000b96:	f000 fba5 	bl	80012e4 <sdo_response>
							break;
 8000b9a:	e112      	b.n	8000dc2 <read_rx+0x72a>
															sdo_response (INIT_READ_RESP, index, subindex, size);
 8000b9c:	7abb      	ldrb	r3, [r7, #10]
 8000b9e:	7afa      	ldrb	r2, [r7, #11]
 8000ba0:	89b9      	ldrh	r1, [r7, #12]
 8000ba2:	2040      	movs	r0, #64	; 0x40
 8000ba4:	f000 fb9e 	bl	80012e4 <sdo_response>
															sdo_index = index;		// save object index and subindex
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <read_rx+0x590>)
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	8013      	strh	r3, [r2, #0]
															sdo_subindex = subindex;
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <read_rx+0x57c>)
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	7013      	strb	r3, [r2, #0]
															sdo_timer = SDO_TIMER;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <read_rx+0x594>)
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	701a      	strb	r2, [r3, #0]
							break;
 8000bba:	e102      	b.n	8000dc2 <read_rx+0x72a>
													if ((!subindex) && sub)
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d107      	bne.n	8000bd2 <read_rx+0x53a>
 8000bc2:	7a7b      	ldrb	r3, [r7, #9]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <read_rx+0x53a>
															size = 1;				// size is 1 uint8_t
 8000bc8:	2301      	movs	r3, #1
 8000bca:	72bb      	strb	r3, [r7, #10]
															value = sub;
 8000bcc:	7a7b      	ldrb	r3, [r7, #9]
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	e007      	b.n	8000be2 <read_rx+0x54a>
										  	 		value = read_dict (pos, subindex);
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <read_rx+0x598>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	7afa      	ldrb	r2, [r7, #11]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 ff3c 	bl	8002a58 <read_dict>
 8000be0:	6138      	str	r0, [r7, #16]
													sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000be2:	7afa      	ldrb	r2, [r7, #11]
 8000be4:	89b9      	ldrh	r1, [r7, #12]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2042      	movs	r0, #66	; 0x42
 8000bea:	f000 fb7b 	bl	80012e4 <sdo_response>
							break;
 8000bee:	e0e8      	b.n	8000dc2 <read_rx+0x72a>

						case (READ_SEGM_REQ):						//read segment
							if (!sdo_index)									//no init read request before
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <read_rx+0x590>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <read_rx+0x56a>
								abort_sdo (SDO_UNSUPPORTED);
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <read_rx+0x5a0>)
 8000bfc:	f000 fac4 	bl	8001188 <abort_sdo>
 8000c00:	e0c6      	b.n	8000d90 <read_rx+0x6f8>
							else if (type & TOGGLE_BIT)			// toggle bit must be 0 for 1. segment
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d019      	beq.n	8000c40 <read_rx+0x5a8>
								abort_sdo (SDO_TOGGLEBIT);
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <read_rx+0x5a4>)
 8000c0e:	f000 fabb 	bl	8001188 <abort_sdo>
 8000c12:	e0bd      	b.n	8000d90 <read_rx+0x6f8>
 8000c14:	200001d8 	.word	0x200001d8
 8000c18:	2000031c 	.word	0x2000031c
 8000c1c:	200002b5 	.word	0x200002b5
 8000c20:	200001f4 	.word	0x200001f4
 8000c24:	20000578 	.word	0x20000578
 8000c28:	200001d6 	.word	0x200001d6
 8000c2c:	200001d9 	.word	0x200001d9
 8000c30:	200001e4 	.word	0x200001e4
 8000c34:	20000000 	.word	0x20000000
 8000c38:	06010000 	.word	0x06010000
 8000c3c:	05030000 	.word	0x05030000
							else
								{
									switch (sdo_index)
 8000c40:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <read_rx+0x898>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000c4a:	f000 8094 	beq.w	8000d76 <read_rx+0x6de>
 8000c4e:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000c52:	f300 809d 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c56:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000c5a:	d07d      	beq.n	8000d58 <read_rx+0x6c0>
 8000c5c:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000c60:	f300 8096 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c64:	f246 0211 	movw	r2, #24593	; 0x6011
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d06f      	beq.n	8000d4c <read_rx+0x6b4>
 8000c6c:	f246 0211 	movw	r2, #24593	; 0x6011
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f300 808d 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c76:	f246 0210 	movw	r2, #24592	; 0x6010
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d060      	beq.n	8000d40 <read_rx+0x6a8>
 8000c7e:	f246 0210 	movw	r2, #24592	; 0x6010
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f300 8084 	bgt.w	8000d90 <read_rx+0x6f8>
 8000c88:	f241 020a 	movw	r2, #4106	; 0x100a
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d03e      	beq.n	8000d0e <read_rx+0x676>
 8000c90:	f241 020a 	movw	r2, #4106	; 0x100a
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dc7b      	bgt.n	8000d90 <read_rx+0x6f8>
 8000c98:	f241 0208 	movw	r2, #4104	; 0x1008
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d004      	beq.n	8000caa <read_rx+0x612>
 8000ca0:	f241 0209 	movw	r2, #4105	; 0x1009
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d019      	beq.n	8000cdc <read_rx+0x644>
 8000ca8:	e072      	b.n	8000d90 <read_rx+0x6f8>
										{
											case (DEVICE_NAME) :		// device name
												for (i = 0; i < DV_SIZE; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	75fb      	strb	r3, [r7, #23]
 8000cae:	e00b      	b.n	8000cc8 <read_rx+0x630>
													buffer [i] = device_name[i];
 8000cb0:	7dfa      	ldrb	r2, [r7, #23]
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	499f      	ldr	r1, [pc, #636]	; (8000f34 <read_rx+0x89c>)
 8000cb6:	5c8a      	ldrb	r2, [r1, r2]
 8000cb8:	f107 0118 	add.w	r1, r7, #24
 8000cbc:	440b      	add	r3, r1
 8000cbe:	f803 2c18 	strb.w	r2, [r3, #-24]
												for (i = 0; i < DV_SIZE; i++)
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	75fb      	strb	r3, [r7, #23]
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d9f0      	bls.n	8000cb0 <read_rx+0x618>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 6, buffer);
 8000cce:	463b      	mov	r3, r7
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2106      	movs	r1, #6
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fbad 	bl	8001434 <sdo_segment>
												break;
 8000cda:	e059      	b.n	8000d90 <read_rx+0x6f8>

											case (HW_VERSION) :			// hardware version
												for (i = 0; i < HW_SIZE; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75fb      	strb	r3, [r7, #23]
 8000ce0:	e00b      	b.n	8000cfa <read_rx+0x662>
													buffer [i] = hardware_uea [i];
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	4994      	ldr	r1, [pc, #592]	; (8000f38 <read_rx+0x8a0>)
 8000ce8:	5c8a      	ldrb	r2, [r1, r2]
 8000cea:	f107 0118 	add.w	r1, r7, #24
 8000cee:	440b      	add	r3, r1
 8000cf0:	f803 2c18 	strb.w	r2, [r3, #-24]
												for (i = 0; i < HW_SIZE; i++)
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d9f0      	bls.n	8000ce2 <read_rx+0x64a>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 5, buffer);
 8000d00:	463b      	mov	r3, r7
 8000d02:	461a      	mov	r2, r3
 8000d04:	2105      	movs	r1, #5
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fb94 	bl	8001434 <sdo_segment>
												break;
 8000d0c:	e040      	b.n	8000d90 <read_rx+0x6f8>

											case (SW_VERSION) :			//* software version
												for (i = 0; i < SW_SIZE; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e00b      	b.n	8000d2c <read_rx+0x694>
													buffer [i] = version_uea [i];
 8000d14:	7dfa      	ldrb	r2, [r7, #23]
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	4988      	ldr	r1, [pc, #544]	; (8000f3c <read_rx+0x8a4>)
 8000d1a:	5c8a      	ldrb	r2, [r1, r2]
 8000d1c:	f107 0118 	add.w	r1, r7, #24
 8000d20:	440b      	add	r3, r1
 8000d22:	f803 2c18 	strb.w	r2, [r3, #-24]
												for (i = 0; i < SW_SIZE; i++)
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d9f0      	bls.n	8000d14 <read_rx+0x67c>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 5, buffer);
 8000d32:	463b      	mov	r3, r7
 8000d34:	461a      	mov	r2, r3
 8000d36:	2105      	movs	r1, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fb7b 	bl	8001434 <sdo_segment>
												break;
 8000d3e:	e027      	b.n	8000d90 <read_rx+0x6f8>

											case (VIRTUAL_INPUT)  :		// virtual input mapping object
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, virt_in);
 8000d40:	4a7f      	ldr	r2, [pc, #508]	; (8000f40 <read_rx+0x8a8>)
 8000d42:	2107      	movs	r1, #7
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fb75 	bl	8001434 <sdo_segment>
												break;
 8000d4a:	e021      	b.n	8000d90 <read_rx+0x6f8>

											case (VIRTUAL_OUTPUT)  :	// virtual output mapping object
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, virt_out);
 8000d4c:	4a7d      	ldr	r2, [pc, #500]	; (8000f44 <read_rx+0x8ac>)
 8000d4e:	2107      	movs	r1, #7
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 fb6f 	bl	8001434 <sdo_segment>
												break;
 8000d56:	e01b      	b.n	8000d90 <read_rx+0x6f8>

											case (INPUT_GROUP)    :		// input group
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, inpar [sdo_subindex - 1]);
 8000d58:	4b7b      	ldr	r3, [pc, #492]	; (8000f48 <read_rx+0x8b0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	4613      	mov	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	1a9b      	subs	r3, r3, r2
 8000d66:	4a79      	ldr	r2, [pc, #484]	; (8000f4c <read_rx+0x8b4>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 fb60 	bl	8001434 <sdo_segment>
												break;
 8000d74:	e00c      	b.n	8000d90 <read_rx+0x6f8>

											case (OUTPUT_GROUP)    :	// output group
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, outpar [sdo_subindex - 1]);
 8000d76:	4b74      	ldr	r3, [pc, #464]	; (8000f48 <read_rx+0x8b0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4a73      	ldr	r2, [pc, #460]	; (8000f50 <read_rx+0x8b8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	2107      	movs	r1, #7
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fb53 	bl	8001434 <sdo_segment>
												break;
 8000d8e:	bf00      	nop
										}
								}
							sdo_index    = 0;				// reset marker from init request
 8000d90:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <read_rx+0x898>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000d96:	4b6c      	ldr	r3, [pc, #432]	; (8000f48 <read_rx+0x8b0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	; (8000f54 <read_rx+0x8bc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
							break;
 8000da2:	e00e      	b.n	8000dc2 <read_rx+0x72a>

						case (ABORT_REQ):				// abort request
							sdo_index    = 0;				// reset marker from init request
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <read_rx+0x898>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000daa:	4b67      	ldr	r3, [pc, #412]	; (8000f48 <read_rx+0x8b0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <read_rx+0x8bc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
							break;
 8000db6:	e004      	b.n	8000dc2 <read_rx+0x72a>

						default:
							abort_sdo (SDO_NOT_VALID);	// unknown SDO command specifier
 8000db8:	4867      	ldr	r0, [pc, #412]	; (8000f58 <read_rx+0x8c0>)
 8000dba:	f000 f9e5 	bl	8001188 <abort_sdo>
							break;
 8000dbe:	e000      	b.n	8000dc2 <read_rx+0x72a>
							break;
 8000dc0:	bf00      	nop
					}
				break;
 8000dc2:	e0ea      	b.n	8000f9a <read_rx+0x902>

			case (NMT) :											// network management
				i = rx [ro][3]; 								// read node id
 8000dc4:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <read_rx+0x8c4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <read_rx+0x8c8>)
 8000dcc:	460b      	mov	r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	75fb      	strb	r3, [r7, #23]
				if ((!i) || (i == node_id)) 		// for this node or for all nodes
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <read_rx+0x754>
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <read_rx+0x8cc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	7dfa      	ldrb	r2, [r7, #23]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d122      	bne.n	8000e32 <read_rx+0x79a>
					{
						switch (rx [ro][2]) 					// command specifier
 8000dec:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <read_rx+0x8c4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4a5b      	ldr	r2, [pc, #364]	; (8000f60 <read_rx+0x8c8>)
 8000df4:	460b      	mov	r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2bf0      	cmp	r3, #240	; 0xf0
 8000e06:	d010      	beq.n	8000e2a <read_rx+0x792>
 8000e08:	2bf0      	cmp	r3, #240	; 0xf0
 8000e0a:	dc14      	bgt.n	8000e36 <read_rx+0x79e>
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d002      	beq.n	8000e16 <read_rx+0x77e>
 8000e10:	2b81      	cmp	r3, #129	; 0x81
 8000e12:	d004      	beq.n	8000e1e <read_rx+0x786>

								case (STOP_NODE)	 :						// reset node
								case (ENTER_PREOP) :						// reset node
								case (RESET_COMM)  :						// reset node
								default:
									break;				// do nothing (not implemented)
 8000e14:	e00f      	b.n	8000e36 <read_rx+0x79e>
									nmtstate = OPERATIONAL; 	// enter operational state
 8000e16:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <read_rx+0x8d0>)
 8000e18:	2205      	movs	r2, #5
 8000e1a:	701a      	strb	r2, [r3, #0]
									break;
 8000e1c:	e00c      	b.n	8000e38 <read_rx+0x7a0>
									merker = 0;
 8000e1e:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <read_rx+0x8d4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
									HAL_NVIC_SystemReset();
 8000e24:	f004 fe7d 	bl	8005b22 <HAL_NVIC_SystemReset>
									break;
 8000e28:	e006      	b.n	8000e38 <read_rx+0x7a0>
									nmtstate = TEST_MODE;
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <read_rx+0x8d0>)
 8000e2c:	22f0      	movs	r2, #240	; 0xf0
 8000e2e:	701a      	strb	r2, [r3, #0]
									break;
 8000e30:	e002      	b.n	8000e38 <read_rx+0x7a0>
							}
					}
 8000e32:	bf00      	nop
 8000e34:	e0b1      	b.n	8000f9a <read_rx+0x902>
									break;				// do nothing (not implemented)
 8000e36:	bf00      	nop
				break;
 8000e38:	e0af      	b.n	8000f9a <read_rx+0x902>

			case (LSS) :										//LSS message for initialization
				type = rx [ro][2];						//read LSS service type
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <read_rx+0x8c4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4a47      	ldr	r2, [pc, #284]	; (8000f60 <read_rx+0x8c8>)
 8000e42:	460b      	mov	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	73fb      	strb	r3, [r7, #15]
				switch (type)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	f040 809d 	bne.w	8000f94 <read_rx+0x8fc>
					{
						case (SET_NODE_ID) :			//set new node id
							i = rx [ro][3];					//read new node id
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <read_rx+0x8c4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4a3f      	ldr	r2, [pc, #252]	; (8000f60 <read_rx+0x8c8>)
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3303      	adds	r3, #3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	75fb      	strb	r3, [r7, #23]
							if ((i > 127) || (!i))	//node id invalid
 8000e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db02      	blt.n	8000e80 <read_rx+0x7e8>
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <read_rx+0x7f2>
								lss_response (SET_NODE_ID, OUT_OF_RANGE);
 8000e80:	2101      	movs	r1, #1
 8000e82:	2011      	movs	r0, #17
 8000e84:	f000 fb4a 	bl	800151c <lss_response>
 8000e88:	e006      	b.n	8000e98 <read_rx+0x800>
							else
								{
									node_id = i;
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <read_rx+0x8cc>)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	7013      	strb	r3, [r2, #0]
									lss_response (SET_NODE_ID, 0);
 8000e90:	2100      	movs	r1, #0
 8000e92:	2011      	movs	r0, #17
 8000e94:	f000 fb42 	bl	800151c <lss_response>
								}
							break;
 8000e98:	bf00      	nop
					}
				break;
 8000e9a:	e07b      	b.n	8000f94 <read_rx+0x8fc>

//����Ϣ��ʱֻ������ͣ�����״̬��Ϣ		2017-11-15		
			case (MPDO) :					// time stamp message
				sub = rx [ro][1];
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <read_rx+0x8c4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <read_rx+0x8c8>)
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	3301      	adds	r3, #1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	727b      	strb	r3, [r7, #9]
				type = rx [ro][2];
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <read_rx+0x8c4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <read_rx+0x8c8>)
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	73fb      	strb	r3, [r7, #15]
				if((sub == EMS_ID) && (type == 0))
 8000ecc:	7a7b      	ldrb	r3, [r7, #9]
 8000ece:	2b0b      	cmp	r3, #11
 8000ed0:	d162      	bne.n	8000f98 <read_rx+0x900>
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d15f      	bne.n	8000f98 <read_rx+0x900>
					{
						for(i = 0; i < 8; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	e017      	b.n	8000f0e <read_rx+0x876>
							buffer[i] = rx [ro][2 + i];
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <read_rx+0x8c4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461c      	mov	r4, r3
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	1c99      	adds	r1, r3, #2
 8000ee8:	7dfa      	ldrb	r2, [r7, #23]
 8000eea:	481d      	ldr	r0, [pc, #116]	; (8000f60 <read_rx+0x8c8>)
 8000eec:	4623      	mov	r3, r4
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4423      	add	r3, r4
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4403      	add	r3, r0
 8000ef6:	440b      	add	r3, r1
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2d9      	uxtb	r1, r3
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4413      	add	r3, r2
 8000f02:	460a      	mov	r2, r1
 8000f04:	f803 2c18 	strb.w	r2, [r3, #-24]
						for(i = 0; i < 8; i++)
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	d9e4      	bls.n	8000ede <read_rx+0x846>
						if(buffer[6] & 0x0A)							
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	f003 030a 	and.w	r3, r3, #10
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d02a      	beq.n	8000f74 <read_rx+0x8dc>
							display[BUF_ARROW] |= OUT_OF_SERVICE;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <read_rx+0x8d8>)
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <read_rx+0x8d8>)
 8000f2c:	709a      	strb	r2, [r3, #2]
 8000f2e:	e029      	b.n	8000f84 <read_rx+0x8ec>
 8000f30:	200001d6 	.word	0x200001d6
 8000f34:	080078b8 	.word	0x080078b8
 8000f38:	080078b0 	.word	0x080078b0
 8000f3c:	080078a8 	.word	0x080078a8
 8000f40:	20000558 	.word	0x20000558
 8000f44:	20000560 	.word	0x20000560
 8000f48:	200001d8 	.word	0x200001d8
 8000f4c:	2000031c 	.word	0x2000031c
 8000f50:	20000578 	.word	0x20000578
 8000f54:	200001d9 	.word	0x200001d9
 8000f58:	05040001 	.word	0x05040001
 8000f5c:	200002b5 	.word	0x200002b5
 8000f60:	200001f4 	.word	0x200001f4
 8000f64:	20000567 	.word	0x20000567
 8000f68:	200007f1 	.word	0x200007f1
 8000f6c:	200001e0 	.word	0x200001e0
 8000f70:	200002d4 	.word	0x200002d4
						else
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <read_rx+0x978>)
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <read_rx+0x978>)
 8000f82:	709a      	strb	r2, [r3, #2]
						mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <read_rx+0x978>)
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <read_rx+0x97c>)
 8000f8c:	70da      	strb	r2, [r3, #3]
					}
				break;
 8000f8e:	e003      	b.n	8000f98 <read_rx+0x900>
				break;
 8000f90:	bf00      	nop
 8000f92:	e002      	b.n	8000f9a <read_rx+0x902>
				break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <read_rx+0x902>
				break;
 8000f98:	bf00      	nop
//����Ϣ��ʱֻ������ͣ�����״̬��Ϣ		2017-11-15		
		}
	if (HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000f9a:	2112      	movs	r1, #18
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <read_rx+0x980>)
 8000f9e:	f004 fa83 	bl	80054a8 <HAL_CAN_DeactivateNotification>
	{

	}
	//INTCONbits.GIEH		= 0;		// low priority interrupts disable
	if (ro == (RX_SIZE-1))		// increment RX message read pointer
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <read_rx+0x984>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d103      	bne.n	8000fb2 <read_rx+0x91a>
		ro = 0;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <read_rx+0x984>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e005      	b.n	8000fbe <read_rx+0x926>
	else
		ro++;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <read_rx+0x984>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <read_rx+0x984>)
 8000fbc:	701a      	strb	r2, [r3, #0]
	rc--;											// decrement RX counter
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <read_rx+0x988>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <read_rx+0x988>)
 8000fca:	701a      	strb	r2, [r3, #0]
	i = ri;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <read_rx+0x98c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	75fb      	strb	r3, [r7, #23]
	size = rc;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <read_rx+0x988>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	72bb      	strb	r3, [r7, #10]
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000fd8:	2112      	movs	r1, #18
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <read_rx+0x980>)
 8000fdc:	f004 fa3f 	bl	800545e <HAL_CAN_ActivateNotification>
	{

	}
	//INTCONbits.GIEH		= 1;		// low priority interrupts enable
	if (i < ro)
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <read_rx+0x984>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	7dfa      	ldrb	r2, [r7, #23]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d202      	bcs.n	8000ff0 <read_rx+0x958>
		i += RX_SIZE;
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	3308      	adds	r3, #8
 8000fee:	75fb      	strb	r3, [r7, #23]
	if ((i - ro) != (size % RX_SIZE))
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <read_rx+0x984>)
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	1a9a      	subs	r2, r3, r2
 8000ff8:	7abb      	ldrb	r3, [r7, #10]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d002      	beq.n	8001008 <read_rx+0x970>
		{
			merker = RC_MERKER;	// set rc counter error marker
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <read_rx+0x990>)
 8001004:	225a      	movs	r2, #90	; 0x5a
 8001006:	701a      	strb	r2, [r3, #0]
		}
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bdb0      	pop	{r4, r5, r7, pc}
 8001010:	200002d4 	.word	0x200002d4
 8001014:	200002d8 	.word	0x200002d8
 8001018:	20000530 	.word	0x20000530
 800101c:	200002b5 	.word	0x200002b5
 8001020:	200001e8 	.word	0x200001e8
 8001024:	200002b6 	.word	0x200002b6
 8001028:	200001e0 	.word	0x200001e0

0800102c <can_transmit>:
/*=============================  �����Ƿ��ͳ���   ================================*/
// transmit a message if TX register is free or write message to buffer


uint32_t timeeeee ;
void can_transmit (void){
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
	txmallbox_request++;
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <can_transmit+0x138>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <can_transmit+0x138>)
 800103c:	801a      	strh	r2, [r3, #0]
	if ((!hse_heartbeat) || (merker == BS_MERKER))		// û��MCU����������busoff�������κ���Ϣ
 800103e:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <can_transmit+0x13c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 808a 	beq.w	800115c <can_transmit+0x130>
 8001048:	4b48      	ldr	r3, [pc, #288]	; (800116c <can_transmit+0x140>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b55      	cmp	r3, #85	; 0x55
 800104e:	f000 8085 	beq.w	800115c <can_transmit+0x130>
		return;

	if (ti == (TX_SIZE-1))								/* increment TX message write pointer	*/
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <can_transmit+0x144>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d103      	bne.n	8001062 <can_transmit+0x36>
		ti = 0;
 800105a:	4b45      	ldr	r3, [pc, #276]	; (8001170 <can_transmit+0x144>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e005      	b.n	800106e <can_transmit+0x42>
	else
		ti++;
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <can_transmit+0x144>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <can_transmit+0x144>)
 800106c:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_DeactivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800106e:	2101      	movs	r1, #1
 8001070:	4840      	ldr	r0, [pc, #256]	; (8001174 <can_transmit+0x148>)
 8001072:	f004 fa19 	bl	80054a8 <HAL_CAN_DeactivateNotification>
	{

	}
	CAN_TxHeaderTypeDef CanTxHeader_t;
	uint8_t CanTxData_t[8] = {0};
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
	uint32_t Txmallbox;
	//INTCONbits.GIEH	= 0;								/* global interrupts disable			*/
	CanTxHeader_t.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1];
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <can_transmit+0x14c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4a3d      	ldr	r2, [pc, #244]	; (800117c <can_transmit+0x150>)
 8001088:	460b      	mov	r3, r1
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <can_transmit+0x14c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <can_transmit+0x150>)
 80010a6:	4603      	mov	r3, r0
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4403      	add	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	3301      	adds	r3, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
	CanTxHeader_t.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <can_transmit+0x14c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <can_transmit+0x150>)
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	623b      	str	r3, [r7, #32]
	CanTxHeader_t.IDE   = CAN_ID_STD;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	CanTxHeader_t.RTR	= CAN_RTR_DATA;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

	memcpy(CanTxData_t,(void *)(tx[to]+2),8);
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <can_transmit+0x14c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <can_transmit+0x150>)
 80010f2:	4413      	add	r3, r2
 80010f4:	1c9a      	adds	r2, r3, #2
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	6851      	ldr	r1, [r2, #4]
 80010fe:	c303      	stmia	r3!, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader_t, CanTxData_t, &Txmallbox) == HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	f107 0208 	add.w	r2, r7, #8
 8001106:	f107 0110 	add.w	r1, r7, #16
 800110a:	481a      	ldr	r0, [pc, #104]	; (8001174 <can_transmit+0x148>)
 800110c:	f003 ffbc 	bl	8005088 <HAL_CAN_AddTxMessage>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <can_transmit+0x118>
	{
		txmallbox++;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <can_transmit+0x154>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <can_transmit+0x154>)
 8001120:	801a      	strh	r2, [r3, #0]
		if (to == (TX_SIZE-1))							/* increment TX message read pointer	*/
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <can_transmit+0x14c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b07      	cmp	r3, #7
 800112a:	d103      	bne.n	8001134 <can_transmit+0x108>
			to = 0;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <can_transmit+0x14c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e00e      	b.n	8001152 <can_transmit+0x126>
		else
			to++;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <can_transmit+0x14c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3301      	adds	r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <can_transmit+0x14c>)
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e006      	b.n	8001152 <can_transmit+0x126>
	}
	else
	{
		tc++;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <can_transmit+0x158>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <can_transmit+0x158>)
 8001150:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001152:	2101      	movs	r1, #1
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <can_transmit+0x148>)
 8001156:	f004 f982 	bl	800545e <HAL_CAN_ActivateNotification>
 800115a:	e000      	b.n	800115e <can_transmit+0x132>
		return;
 800115c:	bf00      	nop
	{

	}


}
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200001c8 	.word	0x200001c8
 8001168:	200001db 	.word	0x200001db
 800116c:	200001e0 	.word	0x200001e0
 8001170:	200002b7 	.word	0x200002b7
 8001174:	20000530 	.word	0x20000530
 8001178:	200002b4 	.word	0x200002b4
 800117c:	20000260 	.word	0x20000260
 8001180:	200001c6 	.word	0x200001c6
 8001184:	200001f0 	.word	0x200001f0

08001188 <abort_sdo>:

// abort SDO transfer
void abort_sdo (uint32_t errorcode){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 8001190:	bf00      	nop
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <abort_sdo+0x144>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b08      	cmp	r3, #8
 800119a:	d0fa      	beq.n	8001192 <abort_sdo+0xa>

	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <abort_sdo+0x148>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <abort_sdo+0x14c>)
 80011a4:	460b      	mov	r3, r1
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	22b8      	movs	r2, #184	; 0xb8
 80011b0:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <abort_sdo+0x148>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <abort_sdo+0x150>)
 80011ba:	7818      	ldrb	r0, [r3, #0]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <abort_sdo+0x14c>)
 80011be:	460b      	mov	r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3301      	adds	r3, #1
 80011ca:	4602      	mov	r2, r0
 80011cc:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = ABORT_REQ;								/* write command specifier				*/
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <abort_sdo+0x148>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <abort_sdo+0x14c>)
 80011d6:	460b      	mov	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	3302      	adds	r3, #2
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = sdo_index;								/* Index of last RX SDO					*/
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <abort_sdo+0x154>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <abort_sdo+0x148>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	b2d0      	uxtb	r0, r2
 80011f4:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <abort_sdo+0x14c>)
 80011f6:	460b      	mov	r3, r1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	3303      	adds	r3, #3
 8001202:	4602      	mov	r2, r0
 8001204:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = sdo_index >> 8;
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <abort_sdo+0x154>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <abort_sdo+0x148>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	b2d0      	uxtb	r0, r2
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <abort_sdo+0x14c>)
 800121a:	460b      	mov	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3304      	adds	r3, #4
 8001226:	4602      	mov	r2, r0
 8001228:	701a      	strb	r2, [r3, #0]
	tx[ti][5] = sdo_subindex;							/* Sub-index last RX SDO				*/
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <abort_sdo+0x148>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <abort_sdo+0x158>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <abort_sdo+0x14c>)
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3305      	adds	r3, #5
 8001244:	4602      	mov	r2, r0
 8001246:	701a      	strb	r2, [r3, #0]
	tx[ti][6] = errorcode;								/* errorcode (reason for abort request	*/
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <abort_sdo+0x148>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <abort_sdo+0x14c>)
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	3306      	adds	r3, #6
 8001260:	4602      	mov	r2, r0
 8001262:	701a      	strb	r2, [r3, #0]
	tx[ti][7] = errorcode >>  8;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0a1a      	lsrs	r2, r3, #8
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <abort_sdo+0x148>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	b2d0      	uxtb	r0, r2
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <abort_sdo+0x14c>)
 8001272:	460b      	mov	r3, r1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	3307      	adds	r3, #7
 800127e:	4602      	mov	r2, r0
 8001280:	701a      	strb	r2, [r3, #0]
	tx[ti][8] = errorcode >> 16;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0c1a      	lsrs	r2, r3, #16
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <abort_sdo+0x148>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	b2d0      	uxtb	r0, r2
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <abort_sdo+0x14c>)
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	3308      	adds	r3, #8
 800129c:	4602      	mov	r2, r0
 800129e:	701a      	strb	r2, [r3, #0]
	tx[ti][9] = errorcode >> 24;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0e1a      	lsrs	r2, r3, #24
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <abort_sdo+0x148>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	b2d0      	uxtb	r0, r2
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <abort_sdo+0x14c>)
 80012ae:	460b      	mov	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	3309      	adds	r3, #9
 80012ba:	4602      	mov	r2, r0
 80012bc:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 80012be:	f7ff feb5 	bl	800102c <can_transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001f0 	.word	0x200001f0
 80012d0:	200002b7 	.word	0x200002b7
 80012d4:	20000260 	.word	0x20000260
 80012d8:	20000567 	.word	0x20000567
 80012dc:	200001d6 	.word	0x200001d6
 80012e0:	200001d8 	.word	0x200001d8

080012e4 <sdo_response>:

// SDO response
void sdo_response (uint8_t command, uint16_t index, uint8_t subindex, uint32_t value){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	460b      	mov	r3, r1
 80012f2:	80bb      	strh	r3, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80012f8:	bf00      	nop
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <sdo_response+0x140>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b08      	cmp	r3, #8
 8001302:	d0fa      	beq.n	80012fa <sdo_response+0x16>

	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 8001304:	4b48      	ldr	r3, [pc, #288]	; (8001428 <sdo_response+0x144>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <sdo_response+0x148>)
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	22b8      	movs	r2, #184	; 0xb8
 8001318:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <sdo_response+0x144>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	4b43      	ldr	r3, [pc, #268]	; (8001430 <sdo_response+0x14c>)
 8001322:	7818      	ldrb	r0, [r3, #0]
 8001324:	4a41      	ldr	r2, [pc, #260]	; (800142c <sdo_response+0x148>)
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3301      	adds	r3, #1
 8001332:	4602      	mov	r2, r0
 8001334:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <sdo_response+0x144>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	4a3b      	ldr	r2, [pc, #236]	; (800142c <sdo_response+0x148>)
 800133e:	460b      	mov	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3302      	adds	r3, #2
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = index;									/* write index 							*/
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <sdo_response+0x144>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	b2d8      	uxtb	r0, r3
 8001358:	4a34      	ldr	r2, [pc, #208]	; (800142c <sdo_response+0x148>)
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	3303      	adds	r3, #3
 8001366:	4602      	mov	r2, r0
 8001368:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = index >> 8;
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <sdo_response+0x144>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	b2d0      	uxtb	r0, r2
 8001378:	4a2c      	ldr	r2, [pc, #176]	; (800142c <sdo_response+0x148>)
 800137a:	460b      	mov	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
	tx[ti][5] = subindex;								/* write sub-index						*/
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <sdo_response+0x144>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <sdo_response+0x148>)
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	3305      	adds	r3, #5
 800139e:	79ba      	ldrb	r2, [r7, #6]
 80013a0:	701a      	strb	r2, [r3, #0]
	tx[ti][6] = value;									/* write value							*/
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <sdo_response+0x144>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2d8      	uxtb	r0, r3
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <sdo_response+0x148>)
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	3306      	adds	r3, #6
 80013ba:	4602      	mov	r2, r0
 80013bc:	701a      	strb	r2, [r3, #0]
	tx[ti][7] = value >>  8;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	0a1a      	lsrs	r2, r3, #8
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <sdo_response+0x144>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	b2d0      	uxtb	r0, r2
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <sdo_response+0x148>)
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	3307      	adds	r3, #7
 80013d8:	4602      	mov	r2, r0
 80013da:	701a      	strb	r2, [r3, #0]
	tx[ti][8] = value >> 16;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	0c1a      	lsrs	r2, r3, #16
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <sdo_response+0x144>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	b2d0      	uxtb	r0, r2
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <sdo_response+0x148>)
 80013ea:	460b      	mov	r3, r1
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	3308      	adds	r3, #8
 80013f6:	4602      	mov	r2, r0
 80013f8:	701a      	strb	r2, [r3, #0]
	tx[ti][9] = value >> 24;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	0e1a      	lsrs	r2, r3, #24
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <sdo_response+0x144>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	b2d0      	uxtb	r0, r2
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <sdo_response+0x148>)
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	3309      	adds	r3, #9
 8001414:	4602      	mov	r2, r0
 8001416:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 8001418:	f7ff fe08 	bl	800102c <can_transmit>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001f0 	.word	0x200001f0
 8001428:	200002b7 	.word	0x200002b7
 800142c:	20000260 	.word	0x20000260
 8001430:	20000567 	.word	0x20000567

08001434 <sdo_segment>:

//SDO segment
void sdo_segment (uint8_t command, uint8_t size, uint8_t *value){
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	603a      	str	r2, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	460b      	mov	r3, r1
 8001442:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 8001444:	bf00      	nop
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <sdo_segment+0xd8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b08      	cmp	r3, #8
 800144e:	d0fa      	beq.n	8001446 <sdo_segment+0x12>
	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <sdo_segment+0xdc>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <sdo_segment+0xe0>)
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	22b8      	movs	r2, #184	; 0xb8
 8001464:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <sdo_segment+0xdc>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <sdo_segment+0xe4>)
 800146e:	7818      	ldrb	r0, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <sdo_segment+0xe0>)
 8001472:	460b      	mov	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	3301      	adds	r3, #1
 800147e:	4602      	mov	r2, r0
 8001480:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <sdo_segment+0xdc>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <sdo_segment+0xe0>)
 800148a:	460b      	mov	r3, r1
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	3302      	adds	r3, #2
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e014      	b.n	80014ca <sdo_segment+0x96>
		tx[ti][3 + i] = *value++;						/* write value 							*/
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	603a      	str	r2, [r7, #0]
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <sdo_segment+0xdc>)
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	4610      	mov	r0, r2
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	3203      	adds	r2, #3
 80014b0:	781c      	ldrb	r4, [r3, #0]
 80014b2:	4918      	ldr	r1, [pc, #96]	; (8001514 <sdo_segment+0xe0>)
 80014b4:	4603      	mov	r3, r0
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4403      	add	r3, r0
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	4413      	add	r3, r2
 80014c0:	4622      	mov	r2, r4
 80014c2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3301      	adds	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3e6      	bcc.n	80014a0 <sdo_segment+0x6c>
	for (i = size; i < 7; i++)
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e010      	b.n	80014fa <sdo_segment+0xc6>
		tx[ti][3 + i] = 0;								/* set unused data bytes to 0			*/
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <sdo_segment+0xdc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	1cda      	adds	r2, r3, #3
 80014e2:	490c      	ldr	r1, [pc, #48]	; (8001514 <sdo_segment+0xe0>)
 80014e4:	4603      	mov	r3, r0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4403      	add	r3, r0
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
	for (i = size; i < 7; i++)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	3301      	adds	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d9eb      	bls.n	80014d8 <sdo_segment+0xa4>
	can_transmit ();									/* transmit message						*/
 8001500:	f7ff fd94 	bl	800102c <can_transmit>
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	200001f0 	.word	0x200001f0
 8001510:	200002b7 	.word	0x200002b7
 8001514:	20000260 	.word	0x20000260
 8001518:	20000567 	.word	0x20000567

0800151c <lss_response>:

//LSS response
void lss_response (uint8_t command, uint8_t value){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 800152c:	bf00      	nop
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <lss_response+0xb4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b08      	cmp	r3, #8
 8001536:	d0fa      	beq.n	800152e <lss_response+0x12>
	tx[ti][0] = LSS + 8; 								/* write function code + data length	*/
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <lss_response+0xb8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <lss_response+0xbc>)
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	22f8      	movs	r2, #248	; 0xf8
 800154c:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = LSS_RES_ID;								/* write node id part of identifier		*/
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <lss_response+0xb8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <lss_response+0xbc>)
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3301      	adds	r3, #1
 8001562:	2264      	movs	r2, #100	; 0x64
 8001564:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <lss_response+0xb8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <lss_response+0xbc>)
 800156e:	460b      	mov	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3302      	adds	r3, #2
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = value;									/* write index 							*/
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <lss_response+0xb8>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <lss_response+0xbc>)
 8001586:	460b      	mov	r3, r1
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	3303      	adds	r3, #3
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	701a      	strb	r2, [r3, #0]
	for (i = 4; i <= 9; i++)
 8001596:	2304      	movs	r3, #4
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e00f      	b.n	80015bc <lss_response+0xa0>
		tx[ti][i] = 0;									/* set unused data bytes to 0			*/
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <lss_response+0xb8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <lss_response+0xbc>)
 80015a6:	4603      	mov	r3, r0
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	440b      	add	r3, r1
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	for (i = 4; i <= 9; i++)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b09      	cmp	r3, #9
 80015c0:	d9ec      	bls.n	800159c <lss_response+0x80>
	can_transmit ();									/* transmit message						*/
 80015c2:	f7ff fd33 	bl	800102c <can_transmit>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001f0 	.word	0x200001f0
 80015d4:	200002b7 	.word	0x200002b7
 80015d8:	20000260 	.word	0x20000260

080015dc <transmit_error>:

// transmit emergency message
void transmit_error (void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80015e2:	bf00      	nop
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <transmit_error+0xd8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d0fa      	beq.n	80015e4 <transmit_error+0x8>
	tx[ti][0] = EMERGENCY + 8;							/* write function code + data length	*/
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <transmit_error+0xdc>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4a31      	ldr	r2, [pc, #196]	; (80016bc <transmit_error+0xe0>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	2218      	movs	r2, #24
 8001602:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <transmit_error+0xdc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <transmit_error+0xe4>)
 800160c:	7818      	ldrb	r0, [r3, #0]
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <transmit_error+0xe0>)
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	3301      	adds	r3, #1
 800161c:	4602      	mov	r2, r0
 800161e:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = errorcode;								/* write error code						*/
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <transmit_error+0xe8>)
 8001622:	881a      	ldrh	r2, [r3, #0]
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <transmit_error+0xdc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	b2d0      	uxtb	r0, r2
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <transmit_error+0xe0>)
 800162e:	460b      	mov	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	3302      	adds	r3, #2
 800163a:	4602      	mov	r2, r0
 800163c:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = errorcode >> 8;							/* write error code						*/
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <transmit_error+0xe8>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <transmit_error+0xdc>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	b2d0      	uxtb	r0, r2
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <transmit_error+0xe0>)
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3303      	adds	r3, #3
 800165c:	4602      	mov	r2, r0
 800165e:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = errorregister;							/* write error register					*/
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <transmit_error+0xdc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <transmit_error+0xec>)
 8001668:	7818      	ldrb	r0, [r3, #0]
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <transmit_error+0xe0>)
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	4602      	mov	r2, r0
 800167a:	701a      	strb	r2, [r3, #0]
	for (i = 5; i <= 9; i++)
 800167c:	2305      	movs	r3, #5
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	e00f      	b.n	80016a2 <transmit_error+0xc6>
		tx[ti][i] = 0;									/* manufacture specific part not used	*/
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <transmit_error+0xdc>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <transmit_error+0xe0>)
 800168c:	4603      	mov	r3, r0
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
	for (i = 5; i <= 9; i++)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3301      	adds	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d9ec      	bls.n	8001682 <transmit_error+0xa6>
	can_transmit ();									/* transmit message						*/
 80016a8:	f7ff fcc0 	bl	800102c <can_transmit>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200001f0 	.word	0x200001f0
 80016b8:	200002b7 	.word	0x200002b7
 80016bc:	20000260 	.word	0x20000260
 80016c0:	20000567 	.word	0x20000567
 80016c4:	200001e2 	.word	0x200001e2
 80016c8:	200001e1 	.word	0x200001e1

080016cc <transmit_in>:

//ransmit special inputs and calls
 void transmit_in (uint8_t *input){
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80016d4:	bf00      	nop
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <transmit_in+0x88>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d0fa      	beq.n	80016d6 <transmit_in+0xa>
	tx[ti][0] = PDO_IN + MAX_IO_TYPE; 					/* write function code + data length	*/
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <transmit_in+0x8c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4a1d      	ldr	r2, [pc, #116]	; (800175c <transmit_in+0x90>)
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	2297      	movs	r2, #151	; 0x97
 80016f4:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <transmit_in+0x8c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <transmit_in+0x94>)
 80016fe:	7818      	ldrb	r0, [r3, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <transmit_in+0x90>)
 8001702:	460b      	mov	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3301      	adds	r3, #1
 800170e:	4602      	mov	r2, r0
 8001710:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_IO_TYPE; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e014      	b.n	8001742 <transmit_in+0x76>
		tx[ti][2 + i] = *input++;						/* write input function					*/
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <transmit_in+0x8c>)
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	4610      	mov	r0, r2
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	3202      	adds	r2, #2
 8001728:	781c      	ldrb	r4, [r3, #0]
 800172a:	490c      	ldr	r1, [pc, #48]	; (800175c <transmit_in+0x90>)
 800172c:	4603      	mov	r3, r0
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4403      	add	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	4413      	add	r3, r2
 8001738:	4622      	mov	r2, r4
 800173a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_IO_TYPE; i++)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b06      	cmp	r3, #6
 8001746:	d9e7      	bls.n	8001718 <transmit_in+0x4c>
	can_transmit ();									/* transmit message						*/
 8001748:	f7ff fc70 	bl	800102c <can_transmit>

}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	200001f0 	.word	0x200001f0
 8001758:	200002b7 	.word	0x200002b7
 800175c:	20000260 	.word	0x20000260
 8001760:	20000567 	.word	0x20000567

08001764 <transmit_load>:

//ransmit load measurement state
 void transmit_load (void){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t state;
	state = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < mInOut_Number; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e020      	b.n	80017b6 <transmit_load+0x52>
		{
			if (inpar [i][IO_BASIC_FUNC] == LOAD_IN)		/* load measurement input				*/
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	492a      	ldr	r1, [pc, #168]	; (8001820 <transmit_load+0xbc>)
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	440b      	add	r3, r1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b84      	cmp	r3, #132	; 0x84
 8001784:	d114      	bne.n	80017b0 <transmit_load+0x4c>
			if (inpar [i][IO_STATE])						/* input is on							*/
 8001786:	79fa      	ldrb	r2, [r7, #7]
 8001788:	4925      	ldr	r1, [pc, #148]	; (8001820 <transmit_load+0xbc>)
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	440b      	add	r3, r1
 8001792:	3305      	adds	r3, #5
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <transmit_load+0x4c>
				state |= inpar [i][IO_SUB_FUNC];			/* set load measurement state			*/
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	4920      	ldr	r1, [pc, #128]	; (8001820 <transmit_load+0xbc>)
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	3301      	adds	r3, #1
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < mInOut_Number; i++)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	3301      	adds	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <transmit_load+0xc0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3d9      	bcc.n	8001774 <transmit_load+0x10>
		}
	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 80017c0:	bf00      	nop
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <transmit_load+0xc4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d0fa      	beq.n	80017c2 <transmit_load+0x5e>
	tx[ti][0] = FC_3 + 1; 								/* write function code + data length	*/
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <transmit_load+0xc8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <transmit_load+0xcc>)
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	2231      	movs	r2, #49	; 0x31
 80017e0:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = LOAD_ID;								/* write second part of ID				*/
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <transmit_load+0xc8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4a11      	ldr	r2, [pc, #68]	; (8001830 <transmit_load+0xcc>)
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	3301      	adds	r3, #1
 80017f6:	2208      	movs	r2, #8
 80017f8:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = state;									/* write load measurment state			*/
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <transmit_load+0xc8>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <transmit_load+0xcc>)
 8001802:	460b      	mov	r3, r1
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	3302      	adds	r3, #2
 800180e:	79ba      	ldrb	r2, [r7, #6]
 8001810:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 8001812:	f7ff fc0b 	bl	800102c <can_transmit>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000031c 	.word	0x2000031c
 8001824:	20000189 	.word	0x20000189
 8001828:	200001f0 	.word	0x200001f0
 800182c:	200002b7 	.word	0x200002b7
 8001830:	20000260 	.word	0x20000260

08001834 <CAN_transmit_heartbeat>:
 void CAN_transmit_heartbeat(void)
 {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
 	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 8001838:	bf00      	nop
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <CAN_transmit_heartbeat+0x68>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b08      	cmp	r3, #8
 8001842:	d0fa      	beq.n	800183a <CAN_transmit_heartbeat+0x6>

 	tx[ti][0] = HEARTBEAT + 1; 								/* write function code + data length	*/
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <CAN_transmit_heartbeat+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <CAN_transmit_heartbeat+0x70>)
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	22e1      	movs	r2, #225	; 0xe1
 8001858:	701a      	strb	r2, [r3, #0]
 	tx[ti][1] = node_id;								/* write node id of UEA					*/
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <CAN_transmit_heartbeat+0x6c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <CAN_transmit_heartbeat+0x74>)
 8001862:	7818      	ldrb	r0, [r3, #0]
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <CAN_transmit_heartbeat+0x70>)
 8001866:	460b      	mov	r3, r1
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	3301      	adds	r3, #1
 8001872:	4602      	mov	r2, r0
 8001874:	701a      	strb	r2, [r3, #0]
 	tx[ti][2] = nmtstate;								/* write command specifier				*/
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <CAN_transmit_heartbeat+0x6c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <CAN_transmit_heartbeat+0x78>)
 800187e:	7818      	ldrb	r0, [r3, #0]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <CAN_transmit_heartbeat+0x70>)
 8001882:	460b      	mov	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	3302      	adds	r3, #2
 800188e:	4602      	mov	r2, r0
 8001890:	701a      	strb	r2, [r3, #0]
 	can_transmit ();									/* transmit message						*/
 8001892:	f7ff fbcb 	bl	800102c <can_transmit>
 // 	TXB1SIDH 			= HEARTBEAT + (node_id >> 3);	// write ID bit 10 ... 3 for HEARTBEAT
 //	TXB1SIDL 			= node_id << 5;		// write ID bit  2 ... 0 for HEARTBEAT
 //	TXB1DLC	 			= 1;							// write data lenght code
 //	TXB1D0   			= nmtstate;				// write data uint8_t for HEARTBEAT
 }
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001f0 	.word	0x200001f0
 80018a0:	200002b7 	.word	0x200002b7
 80018a4:	20000260 	.word	0x20000260
 80018a8:	20000567 	.word	0x20000567
 80018ac:	200007f1 	.word	0x200007f1

080018b0 <check_for_call>:

//check if input/output is car call or hall call
uint8_t check_for_call (uint8_t value){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	switch (value)
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b91      	cmp	r3, #145	; 0x91
 80018be:	dc07      	bgt.n	80018d0 <check_for_call+0x20>
 80018c0:	2b8f      	cmp	r3, #143	; 0x8f
 80018c2:	da03      	bge.n	80018cc <check_for_call+0x1c>
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d001      	beq.n	80018cc <check_for_call+0x1c>
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d101      	bne.n	80018d0 <check_for_call+0x20>
			case (HALL_CALL)	 	  :						// standard hall call
			case (HALL_CALL_SPECIAL)  :				// special hall call
			case (HALL_CALL_ADVANCED) :			// advanced hall call
			case (HALL_CALL_EMERGENCY):			// emergency hall call
			case (CAR_CALL) 		  :
				return (1);			//car call
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <check_for_call+0x22>

			default:
				return (0);			//all other values
 80018d0:	2300      	movs	r3, #0
		}
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <buzzer_signal>:

//set or reset buzzer
void buzzer_signal (uint8_t state, uint8_t reason){
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	uint8_t buzzer_old;
	uint8_t i;
	buzzer_old = buzzer;			// save old state of buzzer
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <buzzer_signal+0x114>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	73bb      	strb	r3, [r7, #14]
	if (state)								// set buzzer
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <buzzer_signal+0x2c>
		buzzer |= reason;				// save reason for buzzer
 80018f8:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <buzzer_signal+0x114>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	4313      	orrs	r3, r2
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <buzzer_signal+0x114>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e00b      	b.n	8001920 <buzzer_signal+0x44>
	else
		buzzer &= ~reason;			// reset reason for buzzer
 8001908:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <buzzer_signal+0x114>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b25b      	sxtb	r3, r3
 8001916:	4013      	ands	r3, r2
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <buzzer_signal+0x114>)
 800191e:	701a      	strb	r2, [r3, #0]
	if ((buzzer  && (!buzzer_old)) || ((!buzzer) && buzzer_old))
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <buzzer_signal+0x114>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <buzzer_signal+0x52>
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <buzzer_signal+0x60>
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <buzzer_signal+0x114>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d157      	bne.n	80019e6 <buzzer_signal+0x10a>
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d054      	beq.n	80019e6 <buzzer_signal+0x10a>
		{
			for (i = 0; i < mInOut_Number; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e04c      	b.n	80019dc <buzzer_signal+0x100>
				{// search output parameter list
					if (outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC)
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <buzzer_signal+0x118>)
 8001946:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800194a:	2b0e      	cmp	r3, #14
 800194c:	d143      	bne.n	80019d6 <buzzer_signal+0xfa>
					if (outpar [i][IO_SUB_FUNC]   == BUZZER)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <buzzer_signal+0x118>)
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b80      	cmp	r3, #128	; 0x80
 800195a:	d13c      	bne.n	80019d6 <buzzer_signal+0xfa>
						{
							if (buzzer)
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <buzzer_signal+0x114>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01b      	beq.n	800199c <buzzer_signal+0xc0>
								{
						  		bit_set (out[i/8], (i%8));								// set output
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	08db      	lsrs	r3, r3, #3
 8001968:	b2d8      	uxtb	r0, r3
 800196a:	4602      	mov	r2, r0
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <buzzer_signal+0x11c>)
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b25a      	sxtb	r2, r3
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b25b      	sxtb	r3, r3
 8001986:	4602      	mov	r2, r0
 8001988:	b2d9      	uxtb	r1, r3
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <buzzer_signal+0x11c>)
 800198c:	5499      	strb	r1, [r3, r2]
						  		outpar [i][IO_STATE] = 1;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <buzzer_signal+0x118>)
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]
 800199a:	e01c      	b.n	80019d6 <buzzer_signal+0xfa>
						  	}
							else
								{
									bit_reset (out[i/8], (i%8));							// reset output
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	b2d8      	uxtb	r0, r3
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <buzzer_signal+0x11c>)
 80019a6:	5c9b      	ldrb	r3, [r3, r2]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b25a      	sxtb	r2, r3
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	4013      	ands	r3, r2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4602      	mov	r2, r0
 80019c4:	b2d9      	uxtb	r1, r3
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <buzzer_signal+0x11c>)
 80019c8:	5499      	strb	r1, [r3, r2]
						  		outpar [i][IO_STATE] = 0;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <buzzer_signal+0x118>)
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	2200      	movs	r2, #0
 80019d4:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	3301      	adds	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <buzzer_signal+0x120>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d3ad      	bcc.n	8001942 <buzzer_signal+0x66>
						  	}
						}
				}
		}
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	200001d4 	.word	0x200001d4
 80019f4:	20000578 	.word	0x20000578
 80019f8:	20000508 	.word	0x20000508
 80019fc:	20000189 	.word	0x20000189

08001a00 <set_output>:
uint8_t fire_alarm = 0;
uint8_t fire_evacuation = 0;
uint8_t fire_state = 0;

//set special outputs
void set_output (uint8_t *virt){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t iotype;
	uint8_t sub = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73bb      	strb	r3, [r7, #14]

	iotype = virt [IO_BASIC_FUNC];
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	737b      	strb	r3, [r7, #13]
	sub = virt [IO_SUB_FUNC];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	785b      	ldrb	r3, [r3, #1]
 8001a16:	73bb      	strb	r3, [r7, #14]
	if (check_for_call (iotype))
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff48 	bl	80018b0 <check_for_call>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8104 	beq.w	8001c30 <set_output+0x230>
		{// car call, hall call or priority call
			if (iotype == HALL_CALL)				// read floor number
 8001a28:	7b7b      	ldrb	r3, [r7, #13]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d103      	bne.n	8001a36 <set_output+0x36>
				i = virt [IO_FLOOR];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	78db      	ldrb	r3, [r3, #3]
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e002      	b.n	8001a3c <set_output+0x3c>
			else
				i = virt [IO_SUB_FUNC];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	73fb      	strb	r3, [r7, #15]
			if (i == 0xFF)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d153      	bne.n	8001aea <set_output+0xea>
				{// clear all calls
					for (i = 0; i < mInOut_Number; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e049      	b.n	8001adc <set_output+0xdc>
						{// search output parameter list
							if ((outpar [i][IO_BASIC_FUNC] == iotype) && (outpar [i][IO_ENABLE] == ENABLE))
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	4aa1      	ldr	r2, [pc, #644]	; (8001cd0 <set_output+0x2d0>)
 8001a4c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001a50:	7b7a      	ldrb	r2, [r7, #13]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d13f      	bne.n	8001ad6 <set_output+0xd6>
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	4a9d      	ldr	r2, [pc, #628]	; (8001cd0 <set_output+0x2d0>)
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	799b      	ldrb	r3, [r3, #6]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d138      	bne.n	8001ad6 <set_output+0xd6>
								{
									outpar [i][IO_ACK] &= ~virt [IO_LIFT];
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a9a      	ldr	r2, [pc, #616]	; (8001cd0 <set_output+0x2d0>)
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	79db      	ldrb	r3, [r3, #7]
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3302      	adds	r3, #2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	b2d1      	uxtb	r1, r2
 8001a84:	4a92      	ldr	r2, [pc, #584]	; (8001cd0 <set_output+0x2d0>)
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4a8f      	ldr	r2, [pc, #572]	; (8001cd0 <set_output+0x2d0>)
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d11c      	bne.n	8001ad6 <set_output+0xd6>
										{// all acknowledgements cancelled
				    					bit_reset (out[i/8], (i%8));				// clear output
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	b2d8      	uxtb	r0, r3
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <set_output+0x2d4>)
 8001aa6:	5c9b      	ldrb	r3, [r3, r2]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	b25a      	sxtb	r2, r3
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	b2d9      	uxtb	r1, r3
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <set_output+0x2d4>)
 8001ac8:	5499      	strb	r1, [r3, r2]
				  						outpar [i][IO_STATE] = 0;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4a80      	ldr	r2, [pc, #512]	; (8001cd0 <set_output+0x2d0>)
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <set_output+0x2d8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3b0      	bcc.n	8001a48 <set_output+0x48>
 8001ae6:	f000 bef6 	b.w	80028d6 <set_output+0xed6>
								}
						}
				}
			else
				{// set or reset single call
					for (i = 0; i < mInOut_Number; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e097      	b.n	8001c20 <set_output+0x220>
						{// search output parameter list
							if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	4976      	ldr	r1, [pc, #472]	; (8001cd0 <set_output+0x2d0>)
 8001af8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 808c 	bne.w	8001c1a <set_output+0x21a>
							if (virt [IO_SUB_FUNC]   == outpar [i][IO_SUB_FUNC])
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3301      	adds	r3, #1
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	4971      	ldr	r1, [pc, #452]	; (8001cd0 <set_output+0x2d0>)
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	f040 8081 	bne.w	8001c1a <set_output+0x21a>
							if (virt [IO_FLOOR]      == outpar [i][IO_FLOOR])
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	496b      	ldr	r1, [pc, #428]	; (8001cd0 <set_output+0x2d0>)
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	78db      	ldrb	r3, [r3, #3]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d176      	bne.n	8001c1a <set_output+0x21a>
							if (virt [IO_LIFT]       &  outpar [i][IO_LIFT])
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	4966      	ldr	r1, [pc, #408]	; (8001cd0 <set_output+0x2d0>)
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d06a      	beq.n	8001c1a <set_output+0x21a>
							if (!((~virt [IO_DOOR])  & (outpar [i][IO_DOOR] & 0x0F)))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	4960      	ldr	r1, [pc, #384]	; (8001cd0 <set_output+0x2d0>)
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d15c      	bne.n	8001c1a <set_output+0x21a>
							if (outpar [i][IO_ENABLE] == ENABLE)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	4a5b      	ldr	r2, [pc, #364]	; (8001cd0 <set_output+0x2d0>)
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	799b      	ldrb	r3, [r3, #6]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d155      	bne.n	8001c1a <set_output+0x21a>
								{// virtual output matches with physical
				  				if (virt [IO_STATE] & 0x01)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3305      	adds	r3, #5
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d02b      	beq.n	8001bd4 <set_output+0x1d4>
					  				{// set acknowledgement
											bit_set (out[i/8], i%8);				// set physical output
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	b2d8      	uxtb	r0, r3
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <set_output+0x2d4>)
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	b2d9      	uxtb	r1, r3
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <set_output+0x2d4>)
 8001ba4:	5499      	strb	r1, [r3, r2]
					  					outpar [i][IO_ACK] |= virt [IO_LIFT];
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <set_output+0x2d0>)
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	79d9      	ldrb	r1, [r3, #7]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	4a44      	ldr	r2, [pc, #272]	; (8001cd0 <set_output+0x2d0>)
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	71da      	strb	r2, [r3, #7]
					  					outpar [i][IO_STATE] = 1;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4a41      	ldr	r2, [pc, #260]	; (8001cd0 <set_output+0x2d0>)
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	2201      	movs	r2, #1
 8001bd0:	715a      	strb	r2, [r3, #5]
 8001bd2:	e022      	b.n	8001c1a <set_output+0x21a>
					  				}
									else
										{// reset acknowledgement
					  					outpar [i][IO_ACK] = 0;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <set_output+0x2d0>)
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	71da      	strb	r2, [r3, #7]
											bit_reset (out[i/8], i%8);				// clear physical output
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	b2d8      	uxtb	r0, r3
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <set_output+0x2d4>)
 8001bea:	5c9b      	ldrb	r3, [r3, r2]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4013      	ands	r3, r2
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	4602      	mov	r2, r0
 8001c08:	b2d9      	uxtb	r1, r3
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <set_output+0x2d4>)
 8001c0c:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <set_output+0x2d0>)
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <set_output+0x2d8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	f4ff af62 	bcc.w	8001af0 <set_output+0xf0>
 8001c2c:	f000 be53 	b.w	80028d6 <set_output+0xed6>
										}
								}
						}
				 }
		}
	else if (iotype == POSITION_INDICATOR)
 8001c30:	7b7b      	ldrb	r3, [r7, #13]
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	f040 813e 	bne.w	8001eb4 <set_output+0x4b4>
		{//��ʾ��Ϣ
			if (virt [IO_LIFT] == disp_lift)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <set_output+0x2dc>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d117      	bne.n	8001c76 <set_output+0x276>
	  		{// display message is for this lift
					display [BUF_TEN] = virt [IO_DOOR];				// 1. digit; not CANopen compatible
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	791a      	ldrb	r2, [r3, #4]
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <set_output+0x2e0>)
 8001c4c:	701a      	strb	r2, [r3, #0]
					display [BUF_UNIT] = virt [IO_STATE];			// 2. digit; not CANopen compatible
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	795a      	ldrb	r2, [r3, #5]
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <set_output+0x2e0>)
 8001c54:	705a      	strb	r2, [r3, #1]
					if(display [BUF_TEN] == 0x20)
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <set_output+0x2e0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d102      	bne.n	8001c66 <set_output+0x266>
						display [BUF_TEN] = 0;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <set_output+0x2e0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
					if(display [BUF_UNIT] == 0x20)
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <set_output+0x2e0>)
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d102      	bne.n	8001c76 <set_output+0x276>
						display [BUF_UNIT] = 0;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <set_output+0x2e0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	705a      	strb	r2, [r3, #1]
				}
			for (i = 0; i < mInOut_Number; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e113      	b.n	8001ea4 <set_output+0x4a4>
				{// search output parameter list
					if ((outpar [i][IO_BASIC_FUNC] == POSITION_INDICATOR) &&
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <set_output+0x2d0>)
 8001c80:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	f040 8109 	bne.w	8001e9c <set_output+0x49c>
							(outpar [i][IO_LIFT] == virt [IO_LIFT]) &&
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <set_output+0x2d0>)
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	789a      	ldrb	r2, [r3, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3302      	adds	r3, #2
 8001c98:	781b      	ldrb	r3, [r3, #0]
					if ((outpar [i][IO_BASIC_FUNC] == POSITION_INDICATOR) &&
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	f040 80fe 	bne.w	8001e9c <set_output+0x49c>
							(outpar [i][IO_ENABLE] == ENABLE))
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <set_output+0x2d0>)
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	799b      	ldrb	r3, [r3, #6]
							(outpar [i][IO_LIFT] == virt [IO_LIFT]) &&
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f040 80f6 	bne.w	8001e9c <set_output+0x49c>
						{// position ind. output for this lift
							switch (outpar [i][IO_SUB_FUNC])
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <set_output+0x2d0>)
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	f000 80a1 	beq.w	8001e02 <set_output+0x402>
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	f300 80ec 	bgt.w	8001e9e <set_output+0x49e>
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d00c      	beq.n	8001ce4 <set_output+0x2e4>
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d04e      	beq.n	8001d6c <set_output+0x36c>
 8001cce:	e0e6      	b.n	8001e9e <set_output+0x49e>
 8001cd0:	20000578 	.word	0x20000578
 8001cd4:	20000508 	.word	0x20000508
 8001cd8:	20000189 	.word	0x20000189
 8001cdc:	20000950 	.word	0x20000950
 8001ce0:	200002d4 	.word	0x200002d4
								{// type of output
									case (ONE_OF_N):					// 1 of n controlled display
										if (virt [IO_SUB_FUNC] == outpar [i][IO_FLOOR])
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	499c      	ldr	r1, [pc, #624]	; (8001f60 <set_output+0x560>)
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d11b      	bne.n	8001d30 <set_output+0x330>
											{
												bit_set (out[i/8], i%8);		// set physical output
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	b2d8      	uxtb	r0, r3
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b98      	ldr	r3, [pc, #608]	; (8001f64 <set_output+0x564>)
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	b25a      	sxtb	r2, r3
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	b2d9      	uxtb	r1, r3
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <set_output+0x564>)
 8001d20:	5499      	strb	r1, [r3, r2]
												outpar [i][IO_STATE] = 1;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	4a8e      	ldr	r2, [pc, #568]	; (8001f60 <set_output+0x560>)
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	715a      	strb	r2, [r3, #5]
					  				else
											{
							  				bit_reset (out[i/8], i%8);		// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001d2e:	e0b6      	b.n	8001e9e <set_output+0x49e>
							  				bit_reset (out[i/8], i%8);		// reset physical output
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	b2d8      	uxtb	r0, r3
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b8a      	ldr	r3, [pc, #552]	; (8001f64 <set_output+0x564>)
 8001d3a:	5c9b      	ldrb	r3, [r3, r2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	4013      	ands	r3, r2
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	4602      	mov	r2, r0
 8001d58:	b2d9      	uxtb	r1, r3
 8001d5a:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <set_output+0x564>)
 8001d5c:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <set_output+0x560>)
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	2200      	movs	r2, #0
 8001d68:	715a      	strb	r2, [r3, #5]
										break;
 8001d6a:	e098      	b.n	8001e9e <set_output+0x49e>

									case (BINARY):						// binary controlled display
										if ((virt [IO_SUB_FUNC] >> (outpar [i][IO_FLOOR] - 1)) & 0x01)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <set_output+0x560>)
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	78db      	ldrb	r3, [r3, #3]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	fa41 f303 	asr.w	r3, r1, r3
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <set_output+0x3c6>
											{
												bit_set (out[i/8], i&8);			// set physical output
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <set_output+0x564>)
 8001d96:	5c9b      	ldrb	r3, [r3, r2]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	b25a      	sxtb	r2, r3
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	b25b      	sxtb	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	4602      	mov	r2, r0
 8001db2:	b2d9      	uxtb	r1, r3
 8001db4:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <set_output+0x564>)
 8001db6:	5499      	strb	r1, [r3, r2]
					 							outpar [i][IO_STATE] = 1;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	4a69      	ldr	r2, [pc, #420]	; (8001f60 <set_output+0x560>)
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	715a      	strb	r2, [r3, #5]
					  				else
											{
							  				bit_reset (out[i/8], i%8);			// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001dc4:	e06b      	b.n	8001e9e <set_output+0x49e>
							  				bit_reset (out[i/8], i%8);			// reset physical output
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	b2d8      	uxtb	r0, r3
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <set_output+0x564>)
 8001dd0:	5c9b      	ldrb	r3, [r3, r2]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	4602      	mov	r2, r0
 8001dee:	b2d9      	uxtb	r1, r3
 8001df0:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <set_output+0x564>)
 8001df2:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	4a5a      	ldr	r2, [pc, #360]	; (8001f60 <set_output+0x560>)
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	715a      	strb	r2, [r3, #5]
										break;
 8001e00:	e04d      	b.n	8001e9e <set_output+0x49e>

									case (GRAY):						// gray code controlled display
										if ((graycode [virt [IO_SUB_FUNC]] >> (outpar [i][IO_FLOOR] - 1)) & 0x01)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3301      	adds	r3, #1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <set_output+0x568>)
 8001e0c:	5c9b      	ldrb	r3, [r3, r2]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	4a53      	ldr	r2, [pc, #332]	; (8001f60 <set_output+0x560>)
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	78db      	ldrb	r3, [r3, #3]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	fa41 f303 	asr.w	r3, r1, r3
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <set_output+0x460>
											{
												bit_set (out[i/8], i%8);			// set physical output
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	b2d8      	uxtb	r0, r3
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <set_output+0x564>)
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	b25a      	sxtb	r2, r3
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <set_output+0x564>)
 8001e50:	5499      	strb	r1, [r3, r2]
												outpar [i][IO_STATE] = 1;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <set_output+0x560>)
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	715a      	strb	r2, [r3, #5]
						  			else
											{
							  				bit_reset (out[i/8], i%8);			// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001e5e:	e01e      	b.n	8001e9e <set_output+0x49e>
							  				bit_reset (out[i/8], i%8);			// reset physical output
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	b2d8      	uxtb	r0, r3
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <set_output+0x564>)
 8001e6a:	5c9b      	ldrb	r3, [r3, r2]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	b25a      	sxtb	r2, r3
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	4013      	ands	r3, r2
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	4602      	mov	r2, r0
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <set_output+0x564>)
 8001e8c:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	4a33      	ldr	r2, [pc, #204]	; (8001f60 <set_output+0x560>)
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	2200      	movs	r2, #0
 8001e98:	715a      	strb	r2, [r3, #5]
										break;
 8001e9a:	e000      	b.n	8001e9e <set_output+0x49e>
								}
						}
 8001e9c:	bf00      	nop
			for (i = 0; i < mInOut_Number; i++)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <set_output+0x56c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	f4ff aee6 	bcc.w	8001c7c <set_output+0x27c>
 8001eb0:	f000 bd11 	b.w	80028d6 <set_output+0xed6>
				}
		}
	else if ((iotype == DIRECTION_IND) && (virt [IO_LIFT] == disp_lift))
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	2b42      	cmp	r3, #66	; 0x42
 8001eb8:	d144      	bne.n	8001f44 <set_output+0x544>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <set_output+0x570>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d13d      	bne.n	8001f44 <set_output+0x544>
		{//�����
			if (!virt [IO_STATE] & 0x01)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3305      	adds	r3, #5
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <set_output+0x4e4>
				display[BUF_ARROW] &= 0xF0;
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <set_output+0x574>)
 8001ed4:	789b      	ldrb	r3, [r3, #2]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f023 030f 	bic.w	r3, r3, #15
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <set_output+0x574>)
 8001ee0:	709a      	strb	r2, [r3, #2]
 8001ee2:	e01d      	b.n	8001f20 <set_output+0x520>
			else
				display[BUF_ARROW] = (display[BUF_ARROW] & 0xF0) | ((virt [IO_SUB_FUNC] & 0x03) | ((virt [IO_SUB_FUNC] >> 2) & 0x0C));
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <set_output+0x574>)
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	f023 030f 	bic.w	r3, r3, #15
 8001ef0:	b25a      	sxtb	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	b259      	sxtb	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <set_output+0x574>)
 8001f1e:	709a      	strb	r2, [r3, #2]
			if ((display[BUF_ARROW] & 0x03) > 2)
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <set_output+0x574>)
 8001f22:	789b      	ldrb	r3, [r3, #2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	f340 84d3 	ble.w	80028d6 <set_output+0xed6>
				display[BUF_ARROW] &= 0xF0;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <set_output+0x574>)
 8001f32:	789b      	ldrb	r3, [r3, #2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f023 030f 	bic.w	r3, r3, #15
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <set_output+0x574>)
 8001f3e:	709a      	strb	r2, [r3, #2]
			if ((display[BUF_ARROW] & 0x03) > 2)
 8001f40:	f000 bcc9 	b.w	80028d6 <set_output+0xed6>
		}
	else if((iotype == LIGHT_FUNC) &&
 8001f44:	7b7b      	ldrb	r3, [r7, #13]
 8001f46:	2b49      	cmp	r3, #73	; 0x49
 8001f48:	f040 80d8 	bne.w	80020fc <set_output+0x6fc>
			(sub & (HALL_LANTERN_UP | HALL_LANTERN_DN | DIRECTION_IND_UP | DIRECTION_IND_DN)))
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
	else if((iotype == LIGHT_FUNC) &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80d2 	beq.w	80020fc <set_output+0x6fc>
		{			
			for (i = 0; i < mInOut_Number; i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e0c7      	b.n	80020ee <set_output+0x6ee>
 8001f5e:	bf00      	nop
 8001f60:	20000578 	.word	0x20000578
 8001f64:	20000508 	.word	0x20000508
 8001f68:	08007868 	.word	0x08007868
 8001f6c:	20000189 	.word	0x20000189
 8001f70:	20000950 	.word	0x20000950
 8001f74:	200002d4 	.word	0x200002d4
				{// search output parameter list
					if ((virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC]) &&
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	498e      	ldr	r1, [pc, #568]	; (80021b8 <set_output+0x7b8>)
 8001f80:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 80af 	bne.w	80020e8 <set_output+0x6e8>
							(virt [IO_LIFT]  	  == outpar [i][IO_LIFT]) &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	4989      	ldr	r1, [pc, #548]	; (80021b8 <set_output+0x7b8>)
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	789b      	ldrb	r3, [r3, #2]
					if ((virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC]) &&
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	f040 80a4 	bne.w	80020e8 <set_output+0x6e8>
							(outpar [i][IO_ENABLE] == ENABLE))
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	4a85      	ldr	r2, [pc, #532]	; (80021b8 <set_output+0x7b8>)
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	799b      	ldrb	r3, [r3, #6]
							(virt [IO_LIFT]  	  == outpar [i][IO_LIFT]) &&
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f040 809c 	bne.w	80020e8 <set_output+0x6e8>
						{
							if (((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x0F) || (!outpar [i][IO_SUB_FUNC])) &&
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	497f      	ldr	r1, [pc, #508]	; (80021b8 <set_output+0x7b8>)
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d106      	bne.n	8001fda <set_output+0x5da>
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	4a7a      	ldr	r2, [pc, #488]	; (80021b8 <set_output+0x7b8>)
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d169      	bne.n	80020ae <set_output+0x6ae>
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3303      	adds	r3, #3
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4975      	ldr	r1, [pc, #468]	; (80021b8 <set_output+0x7b8>)
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	78db      	ldrb	r3, [r3, #3]
							if (((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x0F) || (!outpar [i][IO_SUB_FUNC])) &&
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d00b      	beq.n	8002006 <set_output+0x606>
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2bff      	cmp	r3, #255	; 0xff
 8001ff6:	d006      	beq.n	8002006 <set_output+0x606>
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	4a6f      	ldr	r2, [pc, #444]	; (80021b8 <set_output+0x7b8>)
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	78db      	ldrb	r3, [r3, #3]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d153      	bne.n	80020ae <set_output+0x6ae>
								  ((virt [IO_DOOR]   & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR])))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	496a      	ldr	r1, [pc, #424]	; (80021b8 <set_output+0x7b8>)
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	791b      	ldrb	r3, [r3, #4]
 8002016:	4013      	ands	r3, r2
 8002018:	b2db      	uxtb	r3, r3
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <set_output+0x62c>
								  ((virt [IO_DOOR]   & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR])))
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	4a65      	ldr	r2, [pc, #404]	; (80021b8 <set_output+0x7b8>)
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	791b      	ldrb	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d140      	bne.n	80020ae <set_output+0x6ae>
								{
									if (virt [IO_STATE] & 0x01)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3305      	adds	r3, #5
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01b      	beq.n	8002072 <set_output+0x672>
										{
											bit_set (out[i/8], i % 8);							//set physical output
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	4602      	mov	r2, r0
 8002042:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <set_output+0x7bc>)
 8002044:	5c9b      	ldrb	r3, [r3, r2]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	b25a      	sxtb	r2, r3
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	b25b      	sxtb	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b25b      	sxtb	r3, r3
 800205c:	4602      	mov	r2, r0
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	4b56      	ldr	r3, [pc, #344]	; (80021bc <set_output+0x7bc>)
 8002062:	5499      	strb	r1, [r3, r2]
					  		 			outpar [i][IO_STATE] = 1;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <set_output+0x7b8>)
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	2201      	movs	r2, #1
 800206e:	715a      	strb	r2, [r3, #5]
									if (virt [IO_STATE] & 0x01)
 8002070:	e03a      	b.n	80020e8 <set_output+0x6e8>
										}
									else
										{
											bit_reset (out[i/8], i % 8);						//reset physical output
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	b2d8      	uxtb	r0, r3
 8002078:	4602      	mov	r2, r0
 800207a:	4b50      	ldr	r3, [pc, #320]	; (80021bc <set_output+0x7bc>)
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	b25a      	sxtb	r2, r3
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	b25b      	sxtb	r3, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	b25b      	sxtb	r3, r3
 8002094:	4013      	ands	r3, r2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	4602      	mov	r2, r0
 800209a:	b2d9      	uxtb	r1, r3
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <set_output+0x7bc>)
 800209e:	5499      	strb	r1, [r3, r2]
					    				outpar [i][IO_STATE] = 0;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	4a45      	ldr	r2, [pc, #276]	; (80021b8 <set_output+0x7b8>)
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	2200      	movs	r2, #0
 80020aa:	715a      	strb	r2, [r3, #5]
									if (virt [IO_STATE] & 0x01)
 80020ac:	e01c      	b.n	80020e8 <set_output+0x6e8>
										}
							 	}
							else
								{// reset all not matching indications
									bit_reset (out[i/8], i % 8);								//reset physical output
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	b2d8      	uxtb	r0, r3
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <set_output+0x7bc>)
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	b25a      	sxtb	r2, r3
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	4602      	mov	r2, r0
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <set_output+0x7bc>)
 80020da:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_STATE] = 0;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <set_output+0x7b8>)
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	3301      	adds	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <set_output+0x7c0>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f4ff af3f 	bcc.w	8001f78 <set_output+0x578>
	else if((iotype == LIGHT_FUNC) &&
 80020fa:	e3ec      	b.n	80028d6 <set_output+0xed6>
								}
						}
				}
		}
	else if (iotype == SPEAKER_BUZ)
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	2b4c      	cmp	r3, #76	; 0x4c
 8002100:	d153      	bne.n	80021aa <set_output+0x7aa>
		{//��վ��
			switch(sub)
 8002102:	7bbb      	ldrb	r3, [r7, #14]
 8002104:	2b10      	cmp	r3, #16
 8002106:	d01c      	beq.n	8002142 <set_output+0x742>
 8002108:	2b10      	cmp	r3, #16
 800210a:	f300 83e4 	bgt.w	80028d6 <set_output+0xed6>
 800210e:	2b04      	cmp	r3, #4
 8002110:	d002      	beq.n	8002118 <set_output+0x718>
 8002112:	2b08      	cmp	r3, #8
 8002114:	f040 83df 	bne.w	80028d6 <set_output+0xed6>
				{
					case BUZZER_FIRE:
					case BUZZER_LEVELING:						
						if(virt[IO_STATE])					
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3305      	adds	r3, #5
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <set_output+0x732>
							buzzer |= BUZ_WORKING;
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <set_output+0x7c4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <set_output+0x7c4>)
 800212e:	701a      	strb	r2, [r3, #0]
						else
							buzzer &= ~BUZ_WORKING;
						break;
 8002130:	e3d1      	b.n	80028d6 <set_output+0xed6>
							buzzer &= ~BUZ_WORKING;
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <set_output+0x7c4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <set_output+0x7c4>)
 800213e:	701a      	strb	r2, [r3, #0]
						break;
 8002140:	e3c9      	b.n	80028d6 <set_output+0xed6>

					case BUZZER_NORMAL:
						if(virt[IO_STATE])		
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3305      	adds	r3, #5
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d026      	beq.n	800219a <set_output+0x79a>
							{
								if(virt[IO_DOOR] & BIT_0)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01b      	beq.n	8002192 <set_output+0x792>
									{
										buzzer |= (BUZ_WORKING | BUZ_PULSE);
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <set_output+0x7c4>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	f043 0303 	orr.w	r3, r3, #3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <set_output+0x7c4>)
 8002166:	701a      	strb	r2, [r3, #0]
										bFunc.buz_state = true;
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <set_output+0x7c8>)
 800216a:	7813      	ldrb	r3, [r2, #0]
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	7013      	strb	r3, [r2, #0]
										att_alarm_timer = virt[IO_FLOOR];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	78da      	ldrb	r2, [r3, #3]
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <set_output+0x7cc>)
 8002178:	701a      	strb	r2, [r3, #0]
										buz_alarm_timer = att_alarm_timer;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <set_output+0x7cc>)
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <set_output+0x7d0>)
 8002180:	701a      	strb	r2, [r3, #0]
										buz_alarm_totaltimer = virt[IO_DOOR] >> 1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <set_output+0x7d4>)
 800218e:	701a      	strb	r2, [r3, #0]
									buzzer = BUZ_WORKING;
							}
						else
							buzzer &= ~(BUZ_WORKING | BUZ_PULSE);

						break;
 8002190:	e3a1      	b.n	80028d6 <set_output+0xed6>
									buzzer = BUZ_WORKING;
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <set_output+0x7c4>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
						break;
 8002198:	e39d      	b.n	80028d6 <set_output+0xed6>
							buzzer &= ~(BUZ_WORKING | BUZ_PULSE);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <set_output+0x7c4>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <set_output+0x7c4>)
 80021a6:	701a      	strb	r2, [r3, #0]
						break;
 80021a8:	e395      	b.n	80028d6 <set_output+0xed6>
				}
		}
	else if (iotype == ARRIVAL_INDICATION)
 80021aa:	7b7b      	ldrb	r3, [r7, #13]
 80021ac:	2b44      	cmp	r3, #68	; 0x44
 80021ae:	f040 809c 	bne.w	80022ea <set_output+0x8ea>
		{//��վ��
			for (i = 0; i < mInOut_Number; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e091      	b.n	80022dc <set_output+0x8dc>
 80021b8:	20000578 	.word	0x20000578
 80021bc:	20000508 	.word	0x20000508
 80021c0:	20000189 	.word	0x20000189
 80021c4:	200001d4 	.word	0x200001d4
 80021c8:	20000894 	.word	0x20000894
 80021cc:	200001dd 	.word	0x200001dd
 80021d0:	200001de 	.word	0x200001de
 80021d4:	200001df 	.word	0x200001df
				{// search output parameter list
					if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	49b4      	ldr	r1, [pc, #720]	; (80024b0 <set_output+0xab0>)
 80021e0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d176      	bne.n	80022d6 <set_output+0x8d6>
					if ((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x03) || (!outpar [i][IO_SUB_FUNC]))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	49af      	ldr	r1, [pc, #700]	; (80024b0 <set_output+0xab0>)
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <set_output+0x812>
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4aaa      	ldr	r2, [pc, #680]	; (80024b0 <set_output+0xab0>)
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d161      	bne.n	80022d6 <set_output+0x8d6>
					if ((virt [IO_FLOOR]     == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR]))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3303      	adds	r3, #3
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	49a5      	ldr	r1, [pc, #660]	; (80024b0 <set_output+0xab0>)
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	78db      	ldrb	r3, [r3, #3]
 8002222:	429a      	cmp	r2, r3
 8002224:	d00b      	beq.n	800223e <set_output+0x83e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2bff      	cmp	r3, #255	; 0xff
 800222e:	d006      	beq.n	800223e <set_output+0x83e>
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	4a9f      	ldr	r2, [pc, #636]	; (80024b0 <set_output+0xab0>)
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	78db      	ldrb	r3, [r3, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d14b      	bne.n	80022d6 <set_output+0x8d6>
					if (virt [IO_LIFT]       == outpar [i][IO_LIFT])
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3302      	adds	r3, #2
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	499a      	ldr	r1, [pc, #616]	; (80024b0 <set_output+0xab0>)
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	429a      	cmp	r2, r3
 8002250:	d141      	bne.n	80022d6 <set_output+0x8d6>
					if ((virt [IO_DOOR]       & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4995      	ldr	r1, [pc, #596]	; (80024b0 <set_output+0xab0>)
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	791b      	ldrb	r3, [r3, #4]
 8002262:	4013      	ands	r3, r2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <set_output+0x878>
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	4a90      	ldr	r2, [pc, #576]	; (80024b0 <set_output+0xab0>)
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d12e      	bne.n	80022d6 <set_output+0x8d6>
					if (outpar [i][IO_ENABLE] == ENABLE)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	4a8d      	ldr	r2, [pc, #564]	; (80024b0 <set_output+0xab0>)
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	799b      	ldrb	r3, [r3, #6]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d127      	bne.n	80022d6 <set_output+0x8d6>
						{
							if (virt [IO_STATE] & 0x01)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3305      	adds	r3, #5
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <set_output+0x8d6>
								{
									bit_set (out[i/8], i%8);							// set physical output
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	b2d8      	uxtb	r0, r3
 800229a:	4602      	mov	r2, r0
 800229c:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <set_output+0xab4>)
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	4602      	mov	r2, r0
 80022b8:	b2d9      	uxtb	r1, r3
 80022ba:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <set_output+0xab4>)
 80022bc:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_ACK] = 20;			// set on timer 20 * 500 ms = 10 s	(��վ�Ƴ�����20s)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	4a7b      	ldr	r2, [pc, #492]	; (80024b0 <set_output+0xab0>)
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	2214      	movs	r2, #20
 80022c8:	71da      	strb	r2, [r3, #7]
									outpar [i][IO_STATE] = 1;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4a78      	ldr	r2, [pc, #480]	; (80024b0 <set_output+0xab0>)
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <set_output+0xab8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	f4ff af78 	bcc.w	80021d8 <set_output+0x7d8>
 80022e8:	e2f5      	b.n	80028d6 <set_output+0xed6>
								}
						}
				}
		}
	else if((iotype == SPECIAL_FUNC) || (iotype == FIRE_FUNCTION))
 80022ea:	7b7b      	ldrb	r3, [r7, #13]
 80022ec:	2b0e      	cmp	r3, #14
 80022ee:	d003      	beq.n	80022f8 <set_output+0x8f8>
 80022f0:	7b7b      	ldrb	r3, [r7, #13]
 80022f2:	2b14      	cmp	r3, #20
 80022f4:	f040 8223 	bne.w	800273e <set_output+0xd3e>
		{//���⹦��
			switch(sub)
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d062      	beq.n	80023c4 <set_output+0x9c4>
 80022fe:	2b10      	cmp	r3, #16
 8002300:	f2c0 814a 	blt.w	8002598 <set_output+0xb98>
 8002304:	2bae      	cmp	r3, #174	; 0xae
 8002306:	f300 8147 	bgt.w	8002598 <set_output+0xb98>
 800230a:	2b86      	cmp	r3, #134	; 0x86
 800230c:	f2c0 8144 	blt.w	8002598 <set_output+0xb98>
 8002310:	3b86      	subs	r3, #134	; 0x86
 8002312:	2b28      	cmp	r3, #40	; 0x28
 8002314:	f200 8140 	bhi.w	8002598 <set_output+0xb98>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <set_output+0x920>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	0800256b 	.word	0x0800256b
 8002324:	0800243d 	.word	0x0800243d
 8002328:	08002493 	.word	0x08002493
 800232c:	08002599 	.word	0x08002599
 8002330:	08002599 	.word	0x08002599
 8002334:	08002599 	.word	0x08002599
 8002338:	08002599 	.word	0x08002599
 800233c:	08002599 	.word	0x08002599
 8002340:	08002599 	.word	0x08002599
 8002344:	08002493 	.word	0x08002493
 8002348:	08002493 	.word	0x08002493
 800234c:	08002599 	.word	0x08002599
 8002350:	08002599 	.word	0x08002599
 8002354:	08002599 	.word	0x08002599
 8002358:	08002599 	.word	0x08002599
 800235c:	08002599 	.word	0x08002599
 8002360:	08002599 	.word	0x08002599
 8002364:	08002599 	.word	0x08002599
 8002368:	08002599 	.word	0x08002599
 800236c:	08002599 	.word	0x08002599
 8002370:	08002599 	.word	0x08002599
 8002374:	08002599 	.word	0x08002599
 8002378:	08002599 	.word	0x08002599
 800237c:	08002599 	.word	0x08002599
 8002380:	08002599 	.word	0x08002599
 8002384:	08002599 	.word	0x08002599
 8002388:	08002599 	.word	0x08002599
 800238c:	08002599 	.word	0x08002599
 8002390:	08002599 	.word	0x08002599
 8002394:	08002599 	.word	0x08002599
 8002398:	08002599 	.word	0x08002599
 800239c:	08002599 	.word	0x08002599
 80023a0:	08002599 	.word	0x08002599
 80023a4:	08002599 	.word	0x08002599
 80023a8:	080023f3 	.word	0x080023f3
 80023ac:	08002599 	.word	0x08002599
 80023b0:	08002599 	.word	0x08002599
 80023b4:	08002599 	.word	0x08002599
 80023b8:	08002599 	.word	0x08002599
 80023bc:	08002521 	.word	0x08002521
 80023c0:	0800243d 	.word	0x0800243d
				{
					case OUT_OF_ORDER:
						if(virt[IO_STATE])
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3305      	adds	r3, #5
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <set_output+0x9e0>
							display[BUF_ARROW] |= OUT_OF_SERVICE;
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <set_output+0xabc>)
 80023d0:	789b      	ldrb	r3, [r3, #2]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <set_output+0xabc>)
 80023dc:	709a      	strb	r2, [r3, #2]
						else
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
						break;
 80023de:	e1ad      	b.n	800273c <set_output+0xd3c>
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <set_output+0xabc>)
 80023e2:	789b      	ldrb	r3, [r3, #2]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <set_output+0xabc>)
 80023ee:	709a      	strb	r2, [r3, #2]
						break;
 80023f0:	e1a4      	b.n	800273c <set_output+0xd3c>

					case UPS_EVAC_READY_SPEAKER:
						if(virt[IO_STATE])
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3305      	adds	r3, #5
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00f      	beq.n	800241c <set_output+0xa1c>
							{
								bTime.Time_alarm_fg = 1;
 80023fc:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <set_output+0xac0>)
 80023fe:	7813      	ldrb	r3, [r2, #0]
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 10;
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <set_output+0xac4>)
 8002408:	220a      	movs	r2, #10
 800240a:	701a      	strb	r2, [r3, #0]
								buzzer |= BUZ_WORKING;
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <set_output+0xac8>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <set_output+0xac8>)
 8002418:	701a      	strb	r2, [r3, #0]
							{
								bTime.Time_alarm_fg = 0;
								att_alarm_timer = 0;
								buzzer &= ~BUZ_WORKING;
							}
						break;
 800241a:	e18f      	b.n	800273c <set_output+0xd3c>
								bTime.Time_alarm_fg = 0;
 800241c:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <set_output+0xac0>)
 800241e:	7813      	ldrb	r3, [r2, #0]
 8002420:	f36f 1345 	bfc	r3, #5, #1
 8002424:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 0;
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <set_output+0xac4>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
								buzzer &= ~BUZ_WORKING;
 800242c:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <set_output+0xac8>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <set_output+0xac8>)
 8002438:	701a      	strb	r2, [r3, #0]
						break;
 800243a:	e17f      	b.n	800273c <set_output+0xd3c>
						
					case OVER_LOAD_STATE:					
					case DOOR_CONN_ALARM:
						if(virt[IO_STATE])
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3305      	adds	r3, #5
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <set_output+0xa6c>
							{
								if(sub == OVER_LOAD_STATE)
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b87      	cmp	r3, #135	; 0x87
 800244a:	d107      	bne.n	800245c <set_output+0xa5c>
									display[BUF_ARROW] |= OVER_LOAD;
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <set_output+0xabc>)
 800244e:	789b      	ldrb	r3, [r3, #2]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <set_output+0xabc>)
 800245a:	709a      	strb	r2, [r3, #2]
								buzzer |= BUZ_WORKING;
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <set_output+0xac8>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <set_output+0xac8>)
 8002468:	701a      	strb	r2, [r3, #0]
							{
								if(sub == OVER_LOAD_STATE)
									display[BUF_ARROW] &= ~OVER_LOAD;
								buzzer &= ~BUZ_WORKING;
							}
						break;
 800246a:	e167      	b.n	800273c <set_output+0xd3c>
								if(sub == OVER_LOAD_STATE)
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	2b87      	cmp	r3, #135	; 0x87
 8002470:	d107      	bne.n	8002482 <set_output+0xa82>
									display[BUF_ARROW] &= ~OVER_LOAD;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <set_output+0xabc>)
 8002474:	789b      	ldrb	r3, [r3, #2]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f023 0310 	bic.w	r3, r3, #16
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <set_output+0xabc>)
 8002480:	709a      	strb	r2, [r3, #2]
								buzzer &= ~BUZ_WORKING;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <set_output+0xac8>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <set_output+0xac8>)
 800248e:	701a      	strb	r2, [r3, #0]
						break;
 8002490:	e154      	b.n	800273c <set_output+0xd3c>
						
					case FIRE_ALARM:
					case FIRE_EVACUATION:
					case FIRE_STATE:
						switch(sub)
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	2b90      	cmp	r3, #144	; 0x90
 8002496:	d006      	beq.n	80024a6 <set_output+0xaa6>
 8002498:	2b90      	cmp	r3, #144	; 0x90
 800249a:	dc23      	bgt.n	80024e4 <set_output+0xae4>
 800249c:	2b88      	cmp	r3, #136	; 0x88
 800249e:	d01c      	beq.n	80024da <set_output+0xada>
 80024a0:	2b8f      	cmp	r3, #143	; 0x8f
 80024a2:	d015      	beq.n	80024d0 <set_output+0xad0>
 80024a4:	e01e      	b.n	80024e4 <set_output+0xae4>
							{
								case FIRE_ALARM:
									fire_alarm = virt[IO_STATE];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	795a      	ldrb	r2, [r3, #5]
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <set_output+0xacc>)
 80024ac:	701a      	strb	r2, [r3, #0]
									break;
 80024ae:	e019      	b.n	80024e4 <set_output+0xae4>
 80024b0:	20000578 	.word	0x20000578
 80024b4:	20000508 	.word	0x20000508
 80024b8:	20000189 	.word	0x20000189
 80024bc:	200002d4 	.word	0x200002d4
 80024c0:	200002fc 	.word	0x200002fc
 80024c4:	200001dd 	.word	0x200001dd
 80024c8:	200001d4 	.word	0x200001d4
 80024cc:	200001ca 	.word	0x200001ca
								case FIRE_EVACUATION:
									fire_evacuation = virt[IO_STATE];
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795a      	ldrb	r2, [r3, #5]
 80024d4:	4b9b      	ldr	r3, [pc, #620]	; (8002744 <set_output+0xd44>)
 80024d6:	701a      	strb	r2, [r3, #0]
									break;
 80024d8:	e004      	b.n	80024e4 <set_output+0xae4>
								case FIRE_STATE:
									fire_state = virt[IO_STATE];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	795a      	ldrb	r2, [r3, #5]
 80024de:	4b9a      	ldr	r3, [pc, #616]	; (8002748 <set_output+0xd48>)
 80024e0:	701a      	strb	r2, [r3, #0]
									break;
 80024e2:	bf00      	nop
							}
						if(fire_alarm | fire_evacuation | fire_state)
 80024e4:	4b99      	ldr	r3, [pc, #612]	; (800274c <set_output+0xd4c>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b96      	ldr	r3, [pc, #600]	; (8002744 <set_output+0xd44>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b95      	ldr	r3, [pc, #596]	; (8002748 <set_output+0xd48>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <set_output+0xb0e>
							display[BUF_ARROW] |= FIRE_CASE;
 80024fc:	4b94      	ldr	r3, [pc, #592]	; (8002750 <set_output+0xd50>)
 80024fe:	789b      	ldrb	r3, [r3, #2]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0320 	orr.w	r3, r3, #32
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b91      	ldr	r3, [pc, #580]	; (8002750 <set_output+0xd50>)
 800250a:	709a      	strb	r2, [r3, #2]
						else
							display[BUF_ARROW] &= ~FIRE_CASE;
						break;
 800250c:	e116      	b.n	800273c <set_output+0xd3c>
							display[BUF_ARROW] &= ~FIRE_CASE;
 800250e:	4b90      	ldr	r3, [pc, #576]	; (8002750 <set_output+0xd50>)
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f023 0320 	bic.w	r3, r3, #32
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <set_output+0xd50>)
 800251c:	709a      	strb	r2, [r3, #2]
						break;
 800251e:	e10d      	b.n	800273c <set_output+0xd3c>

					case ATT_BUZ_ALARM:				
						if(virt[IO_STATE])
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3305      	adds	r3, #5
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00f      	beq.n	800254a <set_output+0xb4a>
							{						
								buzzer |= BUZ_WORKING;
 800252a:	4b8a      	ldr	r3, [pc, #552]	; (8002754 <set_output+0xd54>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b87      	ldr	r3, [pc, #540]	; (8002754 <set_output+0xd54>)
 8002536:	701a      	strb	r2, [r3, #0]
								bTime.Time_alarm_fg = 1;
 8002538:	4a87      	ldr	r2, [pc, #540]	; (8002758 <set_output+0xd58>)
 800253a:	7813      	ldrb	r3, [r2, #0]
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 3;
 8002542:	4b86      	ldr	r3, [pc, #536]	; (800275c <set_output+0xd5c>)
 8002544:	2203      	movs	r2, #3
 8002546:	701a      	strb	r2, [r3, #0]
							{
								buzzer &= ~BUZ_WORKING;
								bTime.Time_alarm_fg = 0;
								att_alarm_timer = 0;
							}
						break;					
 8002548:	e0f8      	b.n	800273c <set_output+0xd3c>
								buzzer &= ~BUZ_WORKING;
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <set_output+0xd54>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <set_output+0xd54>)
 8002556:	701a      	strb	r2, [r3, #0]
								bTime.Time_alarm_fg = 0;
 8002558:	4a7f      	ldr	r2, [pc, #508]	; (8002758 <set_output+0xd58>)
 800255a:	7813      	ldrb	r3, [r2, #0]
 800255c:	f36f 1345 	bfc	r3, #5, #1
 8002560:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 0;
 8002562:	4b7e      	ldr	r3, [pc, #504]	; (800275c <set_output+0xd5c>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
						break;					
 8002568:	e0e8      	b.n	800273c <set_output+0xd3c>
						
					case FULL_LOAD_STATE: 					
						if(virt[IO_STATE])
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3305      	adds	r3, #5
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <set_output+0xb86>
							display[BUF_MESSAGE] |= FULLLOAD;
 8002574:	4b76      	ldr	r3, [pc, #472]	; (8002750 <set_output+0xd50>)
 8002576:	78db      	ldrb	r3, [r3, #3]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b73      	ldr	r3, [pc, #460]	; (8002750 <set_output+0xd50>)
 8002582:	70da      	strb	r2, [r3, #3]
						else
							display[BUF_MESSAGE] &= ~FULLLOAD;
						break;		
 8002584:	e0da      	b.n	800273c <set_output+0xd3c>
							display[BUF_MESSAGE] &= ~FULLLOAD;
 8002586:	4b72      	ldr	r3, [pc, #456]	; (8002750 <set_output+0xd50>)
 8002588:	78db      	ldrb	r3, [r3, #3]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <set_output+0xd50>)
 8002594:	70da      	strb	r2, [r3, #3]
						break;		
 8002596:	e0d1      	b.n	800273c <set_output+0xd3c>

					default:
						if(sub == DOOR_STOP)
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	2ba1      	cmp	r3, #161	; 0xa1
 800259c:	d115      	bne.n	80025ca <set_output+0xbca>
							{
								if(virt[IO_STATE])
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3305      	adds	r3, #5
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <set_output+0xbba>
									display[BUF_ARROW] |= IN_USE;
 80025a8:	4b69      	ldr	r3, [pc, #420]	; (8002750 <set_output+0xd50>)
 80025aa:	789b      	ldrb	r3, [r3, #2]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b66      	ldr	r3, [pc, #408]	; (8002750 <set_output+0xd50>)
 80025b6:	709a      	strb	r2, [r3, #2]
 80025b8:	e007      	b.n	80025ca <set_output+0xbca>
								else
									display[BUF_ARROW] &= ~IN_USE;
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <set_output+0xd50>)
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b62      	ldr	r3, [pc, #392]	; (8002750 <set_output+0xd50>)
 80025c8:	709a      	strb	r2, [r3, #2]
							}
						for (i = 0; i < mInOut_Number; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e09c      	b.n	800270a <set_output+0xd0a>
							{// search output parameter list
								if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	4962      	ldr	r1, [pc, #392]	; (8002760 <set_output+0xd60>)
 80025d8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8091 	bne.w	8002704 <set_output+0xd04>
								if ((virt [IO_SUB_FUNC]  == outpar [i][IO_SUB_FUNC]) || (!virt [IO_SUB_FUNC]))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	495d      	ldr	r1, [pc, #372]	; (8002760 <set_output+0xd60>)
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d005      	beq.n	8002602 <set_output+0xc02>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3301      	adds	r3, #1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 8081 	bne.w	8002704 <set_output+0xd04>
								if (virt [IO_FLOOR] 		 == outpar [i][IO_FLOOR])
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3303      	adds	r3, #3
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	4955      	ldr	r1, [pc, #340]	; (8002760 <set_output+0xd60>)
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	78db      	ldrb	r3, [r3, #3]
 8002612:	429a      	cmp	r2, r3
 8002614:	d176      	bne.n	8002704 <set_output+0xd04>
								if (virt [IO_LIFT]			 == outpar [i][IO_LIFT])
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3302      	adds	r3, #2
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	4950      	ldr	r1, [pc, #320]	; (8002760 <set_output+0xd60>)
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	789b      	ldrb	r3, [r3, #2]
 8002626:	429a      	cmp	r2, r3
 8002628:	d16c      	bne.n	8002704 <set_output+0xd04>
								if ((virt [IO_DOOR] &  outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	494b      	ldr	r1, [pc, #300]	; (8002760 <set_output+0xd60>)
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	4013      	ands	r3, r2
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <set_output+0xc50>
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	4a46      	ldr	r2, [pc, #280]	; (8002760 <set_output+0xd60>)
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	791b      	ldrb	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d159      	bne.n	8002704 <set_output+0xd04>
								if (outpar [i][IO_ENABLE] == ENABLE)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	4a43      	ldr	r2, [pc, #268]	; (8002760 <set_output+0xd60>)
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	799b      	ldrb	r3, [r3, #6]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d152      	bne.n	8002704 <set_output+0xd04>
									{
										if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == BUZZER))
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	2b0e      	cmp	r3, #14
 8002662:	d10f      	bne.n	8002684 <set_output+0xc84>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3301      	adds	r3, #1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d10a      	bne.n	8002684 <set_output+0xc84>
											buzzer_signal (virt [IO_STATE] & 0x01, 0x01);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3305      	adds	r3, #5
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2101      	movs	r1, #1
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f92d 	bl	80018dc <buzzer_signal>
 8002682:	e03f      	b.n	8002704 <set_output+0xd04>
										else
											{
												if (virt [IO_STATE] & 0x01)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3305      	adds	r3, #5
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01b      	beq.n	80026ca <set_output+0xcca>
													{
														bit_set (out[i/8], i%8); 				// set physical output
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	b2d8      	uxtb	r0, r3
 8002698:	4602      	mov	r2, r0
 800269a:	4b32      	ldr	r3, [pc, #200]	; (8002764 <set_output+0xd64>)
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	b25a      	sxtb	r2, r3
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	4313      	orrs	r3, r2
 80026b2:	b25b      	sxtb	r3, r3
 80026b4:	4602      	mov	r2, r0
 80026b6:	b2d9      	uxtb	r1, r3
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <set_output+0xd64>)
 80026ba:	5499      	strb	r1, [r3, r2]
														outpar [i][IO_STATE] = 1;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	4a28      	ldr	r2, [pc, #160]	; (8002760 <set_output+0xd60>)
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	2201      	movs	r2, #1
 80026c6:	715a      	strb	r2, [r3, #5]
 80026c8:	e01c      	b.n	8002704 <set_output+0xd04>
													}
												else
													{
														bit_reset (out[i/8], i%8); 			// reset physical output
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <set_output+0xd64>)
 80026d4:	5c9b      	ldrb	r3, [r3, r2]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	b25a      	sxtb	r2, r3
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	b25b      	sxtb	r3, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	4013      	ands	r3, r2
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	4602      	mov	r2, r0
 80026f2:	b2d9      	uxtb	r1, r3
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <set_output+0xd64>)
 80026f6:	5499      	strb	r1, [r3, r2]
														outpar [i][IO_STATE] = 0;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <set_output+0xd60>)
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	2200      	movs	r2, #0
 8002702:	715a      	strb	r2, [r3, #5]
						for (i = 0; i < mInOut_Number; i++)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	3301      	adds	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <set_output+0xd68>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	429a      	cmp	r2, r3
 8002712:	f4ff af5d 	bcc.w	80025d0 <set_output+0xbd0>
													}
											}
									}
							}
						if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == OVER_LOAD_STATE))
 8002716:	7b7b      	ldrb	r3, [r7, #13]
 8002718:	2b0e      	cmp	r3, #14
 800271a:	d10e      	bne.n	800273a <set_output+0xd3a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b87      	cmp	r3, #135	; 0x87
 8002724:	d109      	bne.n	800273a <set_output+0xd3a>
							buzzer_signal (virt [IO_STATE] & 0x01, 0x80);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3305      	adds	r3, #5
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f8d1 	bl	80018dc <buzzer_signal>
						break;
 800273a:	bf00      	nop
			switch(sub)
 800273c:	e0cb      	b.n	80028d6 <set_output+0xed6>
				}
		}	
	else
		{//�����ź�
			for (i = 0; i < mInOut_Number; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e0b0      	b.n	80028a6 <set_output+0xea6>
 8002744:	200001cb 	.word	0x200001cb
 8002748:	200001cc 	.word	0x200001cc
 800274c:	200001ca 	.word	0x200001ca
 8002750:	200002d4 	.word	0x200002d4
 8002754:	200001d4 	.word	0x200001d4
 8002758:	200002fc 	.word	0x200002fc
 800275c:	200001dd 	.word	0x200001dd
 8002760:	20000578 	.word	0x20000578
 8002764:	20000508 	.word	0x20000508
 8002768:	20000189 	.word	0x20000189
				{// search output parameter list
					if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	4963      	ldr	r1, [pc, #396]	; (8002900 <set_output+0xf00>)
 8002774:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8091 	bne.w	80028a0 <set_output+0xea0>
					if ((virt [IO_SUB_FUNC]  == outpar [i][IO_SUB_FUNC]) || (!virt [IO_SUB_FUNC]))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3301      	adds	r3, #1
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	495e      	ldr	r1, [pc, #376]	; (8002900 <set_output+0xf00>)
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	429a      	cmp	r2, r3
 8002790:	d005      	beq.n	800279e <set_output+0xd9e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3301      	adds	r3, #1
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 8081 	bne.w	80028a0 <set_output+0xea0>
					if (virt [IO_FLOOR]      == outpar [i][IO_FLOOR])
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3303      	adds	r3, #3
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4956      	ldr	r1, [pc, #344]	; (8002900 <set_output+0xf00>)
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	78db      	ldrb	r3, [r3, #3]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d176      	bne.n	80028a0 <set_output+0xea0>
					if (virt [IO_LIFT]       == outpar [i][IO_LIFT])
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3302      	adds	r3, #2
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	4951      	ldr	r1, [pc, #324]	; (8002900 <set_output+0xf00>)
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	789b      	ldrb	r3, [r3, #2]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d16c      	bne.n	80028a0 <set_output+0xea0>
					if ((virt [IO_DOOR] &  outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	494c      	ldr	r1, [pc, #304]	; (8002900 <set_output+0xf00>)
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	4013      	ands	r3, r2
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <set_output+0xdec>
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <set_output+0xf00>)
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	791b      	ldrb	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d159      	bne.n	80028a0 <set_output+0xea0>
					if (outpar [i][IO_ENABLE] == ENABLE)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	4a44      	ldr	r2, [pc, #272]	; (8002900 <set_output+0xf00>)
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	799b      	ldrb	r3, [r3, #6]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d152      	bne.n	80028a0 <set_output+0xea0>
						{
							if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == BUZZER))
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	2b0e      	cmp	r3, #14
 80027fe:	d10f      	bne.n	8002820 <set_output+0xe20>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3301      	adds	r3, #1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	d10a      	bne.n	8002820 <set_output+0xe20>
								buzzer_signal (virt [IO_STATE] & 0x01, 0x01);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3305      	adds	r3, #5
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f85f 	bl	80018dc <buzzer_signal>
 800281e:	e03f      	b.n	80028a0 <set_output+0xea0>
							else
								{
									if (virt [IO_STATE] & 0x01)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3305      	adds	r3, #5
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01b      	beq.n	8002866 <set_output+0xe66>
										{
											bit_set (out[i/8], i%8);					// set physical output
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	b2d8      	uxtb	r0, r3
 8002834:	4602      	mov	r2, r0
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <set_output+0xf04>)
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	b25a      	sxtb	r2, r3
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	b25b      	sxtb	r3, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	b25b      	sxtb	r3, r3
 8002850:	4602      	mov	r2, r0
 8002852:	b2d9      	uxtb	r1, r3
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <set_output+0xf04>)
 8002856:	5499      	strb	r1, [r3, r2]
					 						outpar [i][IO_STATE] = 1;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <set_output+0xf00>)
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	715a      	strb	r2, [r3, #5]
 8002864:	e01c      	b.n	80028a0 <set_output+0xea0>
										}
									else
										{
											bit_reset (out[i/8], i%8);				// reset physical output
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	b2d8      	uxtb	r0, r3
 800286c:	4602      	mov	r2, r0
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <set_output+0xf04>)
 8002870:	5c9b      	ldrb	r3, [r3, r2]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	b25a      	sxtb	r2, r3
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	b25b      	sxtb	r3, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	b25b      	sxtb	r3, r3
 8002888:	4013      	ands	r3, r2
 800288a:	b25b      	sxtb	r3, r3
 800288c:	4602      	mov	r2, r0
 800288e:	b2d9      	uxtb	r1, r3
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <set_output+0xf04>)
 8002892:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <set_output+0xf00>)
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	2200      	movs	r2, #0
 800289e:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3301      	adds	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <set_output+0xf08>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f4ff af5d 	bcc.w	800276c <set_output+0xd6c>
										}
								}
						}
				}
			if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == OVER_LOAD_STATE))
 80028b2:	7b7b      	ldrb	r3, [r7, #13]
 80028b4:	2b0e      	cmp	r3, #14
 80028b6:	d10e      	bne.n	80028d6 <set_output+0xed6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3301      	adds	r3, #1
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b87      	cmp	r3, #135	; 0x87
 80028c0:	d109      	bne.n	80028d6 <set_output+0xed6>
				buzzer_signal (virt [IO_STATE] & 0x01, 0x80);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3305      	adds	r3, #5
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f803 	bl	80018dc <buzzer_signal>
		}
	mDisp_buf[BUF_TEN + 1] = display[BUF_TEN];
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <set_output+0xf0c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <set_output+0xf10>)
 80028de:	705a      	strb	r2, [r3, #1]
	mDisp_buf[BUF_UNIT + 1] = display[BUF_UNIT];
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <set_output+0xf0c>)
 80028e2:	785b      	ldrb	r3, [r3, #1]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <set_output+0xf10>)
 80028e8:	709a      	strb	r2, [r3, #2]
	mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <set_output+0xf0c>)
 80028ec:	789b      	ldrb	r3, [r3, #2]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <set_output+0xf10>)
 80028f2:	70da      	strb	r2, [r3, #3]
	Display_device();
 80028f4:	f000 fef2 	bl	80036dc <Display_device>
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000578 	.word	0x20000578
 8002904:	20000508 	.word	0x20000508
 8002908:	20000189 	.word	0x20000189
 800290c:	200002d4 	.word	0x200002d4
 8002910:	200002d8 	.word	0x200002d8

08002914 <set_io_config>:

// set configuration of IO
void set_io_config (void){
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for(i=0; i<MAX_IN_BYTE; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	71fb      	strb	r3, [r7, #7]
 800291e:	e006      	b.n	800292e <set_io_config+0x1a>
		outpush[i] = 0;
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <set_io_config+0x138>)
 8002924:	2100      	movs	r1, #0
 8002926:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<MAX_IN_BYTE; i++)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	3301      	adds	r3, #1
 800292c:	71fb      	strb	r3, [r7, #7]
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d9f5      	bls.n	8002920 <set_io_config+0xc>

	for (i = 0; i < mInOut_Number; i++)
 8002934:	2300      	movs	r3, #0
 8002936:	71fb      	strb	r3, [r7, #7]
 8002938:	e07c      	b.n	8002a34 <set_io_config+0x120>
		{
			switch (outpar [i][IO_BASIC_FUNC])
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <set_io_config+0x13c>)
 800293e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002942:	2b91      	cmp	r3, #145	; 0x91
 8002944:	dc5d      	bgt.n	8002a02 <set_io_config+0xee>
 8002946:	2b8f      	cmp	r3, #143	; 0x8f
 8002948:	da47      	bge.n	80029da <set_io_config+0xc6>
 800294a:	2b0e      	cmp	r3, #14
 800294c:	d006      	beq.n	800295c <set_io_config+0x48>
 800294e:	2b0e      	cmp	r3, #14
 8002950:	dc57      	bgt.n	8002a02 <set_io_config+0xee>
 8002952:	2b02      	cmp	r3, #2
 8002954:	d041      	beq.n	80029da <set_io_config+0xc6>
 8002956:	2b05      	cmp	r3, #5
 8002958:	d03f      	beq.n	80029da <set_io_config+0xc6>
 800295a:	e052      	b.n	8002a02 <set_io_config+0xee>
				{
					case (SPECIAL_FUNC):
						switch (outpar [i][IO_SUB_FUNC])
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <set_io_config+0x13c>)
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	2ba1      	cmp	r3, #161	; 0xa1
 8002968:	d00c      	beq.n	8002984 <set_io_config+0x70>
 800296a:	2ba1      	cmp	r3, #161	; 0xa1
 800296c:	dc1e      	bgt.n	80029ac <set_io_config+0x98>
 800296e:	2b9a      	cmp	r3, #154	; 0x9a
 8002970:	d008      	beq.n	8002984 <set_io_config+0x70>
 8002972:	2b9a      	cmp	r3, #154	; 0x9a
 8002974:	dc1a      	bgt.n	80029ac <set_io_config+0x98>
 8002976:	2b01      	cmp	r3, #1
 8002978:	d004      	beq.n	8002984 <set_io_config+0x70>
 800297a:	2b00      	cmp	r3, #0
 800297c:	dd16      	ble.n	80029ac <set_io_config+0x98>
 800297e:	3b09      	subs	r3, #9
 8002980:	2b01      	cmp	r3, #1
 8002982:	d813      	bhi.n	80029ac <set_io_config+0x98>
								case (FAN_1) :
								case (HALLCALL_BYPASS) :
								case (DOOR_OPEN) :
								case (DOOR_CLOSE):
								case (DOOR_STOP) :
									bit_set (outpush[i/8], i);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	08db      	lsrs	r3, r3, #3
 8002988:	b2d8      	uxtb	r0, r3
 800298a:	4602      	mov	r2, r0
 800298c:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <set_io_config+0x138>)
 800298e:	5c9b      	ldrb	r3, [r3, r2]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	b25a      	sxtb	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	b25b      	sxtb	r3, r3
 800299e:	4313      	orrs	r3, r2
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	4602      	mov	r2, r0
 80029a4:	b2d9      	uxtb	r1, r3
 80029a6:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <set_io_config+0x138>)
 80029a8:	5499      	strb	r1, [r3, r2]
									break;
 80029aa:	e015      	b.n	80029d8 <set_io_config+0xc4>

								default:
									bit_reset (outpush[i/8], i);
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	08db      	lsrs	r3, r3, #3
 80029b0:	b2d8      	uxtb	r0, r3
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <set_io_config+0x138>)
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	b25a      	sxtb	r2, r3
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	4013      	ands	r3, r2
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	4602      	mov	r2, r0
 80029d0:	b2d9      	uxtb	r1, r3
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <set_io_config+0x138>)
 80029d4:	5499      	strb	r1, [r3, r2]
									break;
 80029d6:	bf00      	nop
							}
						break;
 80029d8:	e029      	b.n	8002a2e <set_io_config+0x11a>
					case (CAR_CALL):
					case (HALL_CALL):
					case (HALL_CALL_SPECIAL):
					case (HALL_CALL_ADVANCED):
					case (HALL_CALL_EMERGENCY):
						bit_set (outpush[i/8], i);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	b2d8      	uxtb	r0, r3
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <set_io_config+0x138>)
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	b25a      	sxtb	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	4602      	mov	r2, r0
 80029fa:	b2d9      	uxtb	r1, r3
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <set_io_config+0x138>)
 80029fe:	5499      	strb	r1, [r3, r2]
						break;
 8002a00:	e015      	b.n	8002a2e <set_io_config+0x11a>

					default:
						bit_reset (outpush[i/8], i);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	b2d8      	uxtb	r0, r3
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <set_io_config+0x138>)
 8002a0c:	5c9b      	ldrb	r3, [r3, r2]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	b25a      	sxtb	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	4013      	ands	r3, r2
 8002a22:	b25b      	sxtb	r3, r3
 8002a24:	4602      	mov	r2, r0
 8002a26:	b2d9      	uxtb	r1, r3
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <set_io_config+0x138>)
 8002a2a:	5499      	strb	r1, [r3, r2]
						break;
 8002a2c:	bf00      	nop
	for (i = 0; i < mInOut_Number; i++)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	3301      	adds	r3, #1
 8002a32:	71fb      	strb	r3, [r7, #7]
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <set_io_config+0x140>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	79fa      	ldrb	r2, [r7, #7]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f4ff af7d 	bcc.w	800293a <set_io_config+0x26>
				}
		}
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	2000093c 	.word	0x2000093c
 8002a50:	20000578 	.word	0x20000578
 8002a54:	20000189 	.word	0x20000189

08002a58 <read_dict>:
};

/************************************************************************************************/
/* Read object dictionary																		*/
/************************************************************************************************/
uint32_t read_dict (uint8_t pos, uint8_t subindex){
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	460a      	mov	r2, r1
 8002a62:	71fb      	strb	r3, [r7, #7]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71bb      	strb	r3, [r7, #6]
	uint16_t address;
	uint8_t ee_addr = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	757b      	strb	r3, [r7, #21]
	uint8_t i;
	uint8_t value [4];
	uint8_t size;
	size = dict [pos].size;
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <read_dict+0x160>)
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	3304      	adds	r3, #4
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	74fb      	strb	r3, [r7, #19]

	if (subindex)										/* more than 1 subindex					*/
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <read_dict+0x40>
		{
			address = (subindex - 1) * size;
 8002a80:	79bb      	ldrb	r3, [r7, #6]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	7cfa      	ldrb	r2, [r7, #19]
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	82fb      	strh	r3, [r7, #22]
			ee_addr = subindex - 1;
 8002a90:	79bb      	ldrb	r3, [r7, #6]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	757b      	strb	r3, [r7, #21]
 8002a96:	e003      	b.n	8002aa0 <read_dict+0x48>
		}
	else
		{
			ee_addr = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	757b      	strb	r3, [r7, #21]
			address = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	82fb      	strh	r3, [r7, #22]
		}
	switch (dict [pos].object)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4a45      	ldr	r2, [pc, #276]	; (8002bb8 <read_dict+0x160>)
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002aae:	d03d      	beq.n	8002b2c <read_dict+0xd4>
 8002ab0:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002ab4:	dc4e      	bgt.n	8002b54 <read_dict+0xfc>
 8002ab6:	f246 2260 	movw	r2, #25184	; 0x6260
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d011      	beq.n	8002ae2 <read_dict+0x8a>
 8002abe:	f246 2260 	movw	r2, #25184	; 0x6260
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	dc46      	bgt.n	8002b54 <read_dict+0xfc>
 8002ac6:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8002aca:	d01e      	beq.n	8002b0a <read_dict+0xb2>
 8002acc:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8002ad0:	dc40      	bgt.n	8002b54 <read_dict+0xfc>
 8002ad2:	f241 0216 	movw	r2, #4118	; 0x1016
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d036      	beq.n	8002b48 <read_dict+0xf0>
 8002ada:	f246 1260 	movw	r2, #24928	; 0x6160
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d138      	bne.n	8002b54 <read_dict+0xfc>
		{
			case (INPUT_PARA3):
			case (OUTPUT_PARA3):
				return (((uint32_t)bit_select (*((uint8_t *)dict [pos].pointer + ee_addr/8), ee_addr%8)) << 15);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4a34      	ldr	r2, [pc, #208]	; (8002bb8 <read_dict+0x160>)
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4413      	add	r3, r2
 8002aea:	3308      	adds	r3, #8
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	7d7a      	ldrb	r2, [r7, #21]
 8002af0:	08d2      	lsrs	r2, r2, #3
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	7d7b      	ldrb	r3, [r7, #21]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	fa42 f303 	asr.w	r3, r2, r3
 8002b04:	03db      	lsls	r3, r3, #15
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	e050      	b.n	8002bac <read_dict+0x154>

			case (INPUT_PARA4):
				return (*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1) * MAX_IO_TYPE)));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <read_dict+0x160>)
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	3308      	adds	r3, #8
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	79bb      	ldrb	r3, [r7, #6]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a5b      	subs	r3, r3, r1
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	e03f      	b.n	8002bac <read_dict+0x154>

			case (OUTPUT_PARA4):
				return (*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1) * (MAX_IO_TYPE + 1))));
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <read_dict+0x160>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3308      	adds	r3, #8
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	79ba      	ldrb	r2, [r7, #6]
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	00d2      	lsls	r2, r2, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	e031      	b.n	8002bac <read_dict+0x154>

			case (CONS_HB_TIME):
				return ((((uint32_t)subindex) << 16) + (HSETIME * 500));
 8002b48:	79bb      	ldrb	r3, [r7, #6]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002b50:	3310      	adds	r3, #16
 8002b52:	e02b      	b.n	8002bac <read_dict+0x154>

			default:
				*(uint32_t *)value = 0;						/* clear variable						*/
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
				if (dict [pos].pointer)				/* object in RAM						*/
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <read_dict+0x160>)
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	3308      	adds	r3, #8
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01e      	beq.n	8002baa <read_dict+0x152>
					{
						for (i = 0; i < size; i++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	753b      	strb	r3, [r7, #20]
 8002b70:	e013      	b.n	8002b9a <read_dict+0x142>
		        	value [i] = *((uint8_t *)dict [pos].pointer + address + i);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <read_dict+0x160>)
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	8af9      	ldrh	r1, [r7, #22]
 8002b80:	7d3b      	ldrb	r3, [r7, #20]
 8002b82:	440b      	add	r3, r1
 8002b84:	441a      	add	r2, r3
 8002b86:	7d3b      	ldrb	r3, [r7, #20]
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	f107 0118 	add.w	r1, r7, #24
 8002b8e:	440b      	add	r3, r1
 8002b90:	f803 2c0c 	strb.w	r2, [r3, #-12]
						for (i = 0; i < size; i++)
 8002b94:	7d3b      	ldrb	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	753b      	strb	r3, [r7, #20]
 8002b9a:	7d3a      	ldrb	r2, [r7, #20]
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3e7      	bcc.n	8002b72 <read_dict+0x11a>
						return (*(uint32_t *)value);
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e000      	b.n	8002bac <read_dict+0x154>
					}
				else
					return (0);
 8002baa:	2300      	movs	r3, #0
		}
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000000 	.word	0x20000000

08002bbc <write_dict>:

/************************************************************************************************/
/* Write object dictionary																		*/
/************************************************************************************************/
uint8_t write_dict (uint8_t pos, uint8_t subindex, uint32_t value){
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	603a      	str	r2, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	71bb      	strb	r3, [r7, #6]
	uint8_t j;
	uint16_t address;
	uint8_t ee_addr;
	uint8_t size;

	size = dict [pos].size;
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	4a70      	ldr	r2, [pc, #448]	; (8002d90 <write_dict+0x1d4>)
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	72bb      	strb	r3, [r7, #10]

	if (subindex)			// more than 1 subindex
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <write_dict+0x3e>
		{
			address = ((uint16_t)(subindex - 1)) * size;
 8002be0:	79bb      	ldrb	r3, [r7, #6]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	7aba      	ldrb	r2, [r7, #10]
 8002bea:	b292      	uxth	r2, r2
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	81bb      	strh	r3, [r7, #12]
			ee_addr = subindex - 1;
 8002bf2:	79bb      	ldrb	r3, [r7, #6]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	72fb      	strb	r3, [r7, #11]
 8002bf8:	e003      	b.n	8002c02 <write_dict+0x46>
		}
	else
		{
			ee_addr = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	72fb      	strb	r3, [r7, #11]
			address = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	81bb      	strh	r3, [r7, #12]
		}
	switch (dict [pos].object)
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	4a62      	ldr	r2, [pc, #392]	; (8002d90 <write_dict+0x1d4>)
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4413      	add	r3, r2
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002c10:	d078      	beq.n	8002d04 <write_dict+0x148>
 8002c12:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8002c16:	f300 808d 	bgt.w	8002d34 <write_dict+0x178>
 8002c1a:	f246 2260 	movw	r2, #25184	; 0x6260
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00c      	beq.n	8002c3c <write_dict+0x80>
 8002c22:	f246 2260 	movw	r2, #25184	; 0x6260
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f300 8084 	bgt.w	8002d34 <write_dict+0x178>
 8002c2c:	f246 1260 	movw	r2, #24928	; 0x6160
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <write_dict+0x80>
 8002c34:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8002c38:	d049      	beq.n	8002cce <write_dict+0x112>
 8002c3a:	e07b      	b.n	8002d34 <write_dict+0x178>
		{
			case (INPUT_PARA3):
			case (OUTPUT_PARA3):
				i = *((uint8_t *)dict [pos].pointer + ee_addr/8);
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <write_dict+0x1d4>)
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	4413      	add	r3, r2
 8002c44:	3308      	adds	r3, #8
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	7afa      	ldrb	r2, [r7, #11]
 8002c4a:	08d2      	lsrs	r2, r2, #3
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	73fb      	strb	r3, [r7, #15]
				j = (value >> 15) & 1;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	0bdb      	lsrs	r3, r3, #15
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	727b      	strb	r3, [r7, #9]
				if (((i >> (ee_addr % 8)) & 1) != j)
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	fa42 f303 	asr.w	r3, r2, r3
 8002c6c:	f003 0201 	and.w	r2, r3, #1
 8002c70:	7a7b      	ldrb	r3, [r7, #9]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d01d      	beq.n	8002cb2 <write_dict+0xf6>
					{
						if (j)
 8002c76:	7a7b      	ldrb	r3, [r7, #9]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00c      	beq.n	8002c96 <write_dict+0xda>
							bit_set (i, ee_addr % 8);
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	2201      	movs	r2, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	b25a      	sxtb	r2, r3
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e00d      	b.n	8002cb2 <write_dict+0xf6>
						else
							bit_reset (i, ee_addr % 8);
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	b25a      	sxtb	r2, r3
 8002ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cac:	4013      	ands	r3, r2
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	73fb      	strb	r3, [r7, #15]
					}
				*((uint8_t *)dict [pos].pointer + ee_addr/8) = i;
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	4a36      	ldr	r2, [pc, #216]	; (8002d90 <write_dict+0x1d4>)
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	3308      	adds	r3, #8
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	7afa      	ldrb	r2, [r7, #11]
 8002cc0:	08d2      	lsrs	r2, r2, #3
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	701a      	strb	r2, [r3, #0]
				return (0);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e05a      	b.n	8002d84 <write_dict+0x1c8>

			case (INPUT_PARA4):
				if (dict[pos].pointer)
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <write_dict+0x1d4>)
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d04c      	beq.n	8002d78 <write_dict+0x1bc>
					{
						*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1)) * MAX_IO_TYPE) = (uint8_t)value;
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <write_dict+0x1d4>)
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3308      	adds	r3, #8
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	79bb      	ldrb	r3, [r7, #6]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	1a5b      	subs	r3, r3, r1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b2c2      	uxtb	r2, r0
 8002d00:	701a      	strb	r2, [r3, #0]
					}
				break;
 8002d02:	e039      	b.n	8002d78 <write_dict+0x1bc>

			case (OUTPUT_PARA4):
				if (dict[pos].pointer)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <write_dict+0x1d4>)
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d033      	beq.n	8002d7c <write_dict+0x1c0>
					{
						*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1)) * (MAX_IO_TYPE + 1)) = (uint8_t)value;
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <write_dict+0x1d4>)
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3308      	adds	r3, #8
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	79ba      	ldrb	r2, [r7, #6]
 8002d24:	b292      	uxth	r2, r2
 8002d26:	3a01      	subs	r2, #1
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	00d2      	lsls	r2, r2, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b2ca      	uxtb	r2, r1
 8002d30:	701a      	strb	r2, [r3, #0]
					}
				break;
 8002d32:	e023      	b.n	8002d7c <write_dict+0x1c0>

			default:
				if (dict [pos].pointer)						/* object in RAM						*/
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <write_dict+0x1d4>)
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01d      	beq.n	8002d80 <write_dict+0x1c4>
					{
						for (i = 0; i < size; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e011      	b.n	8002d6e <write_dict+0x1b2>
		     		 	*((uint8_t *)dict [pos].pointer + address + i) = *((uint8_t *)&value+i);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	463a      	mov	r2, r7
 8002d4e:	441a      	add	r2, r3
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	490f      	ldr	r1, [pc, #60]	; (8002d90 <write_dict+0x1d4>)
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	440b      	add	r3, r1
 8002d58:	3308      	adds	r3, #8
 8002d5a:	6819      	ldr	r1, [r3, #0]
 8002d5c:	89b8      	ldrh	r0, [r7, #12]
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	4403      	add	r3, r0
 8002d62:	440b      	add	r3, r1
 8002d64:	7812      	ldrb	r2, [r2, #0]
 8002d66:	701a      	strb	r2, [r3, #0]
						for (i = 0; i < size; i++)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	7abb      	ldrb	r3, [r7, #10]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d3e9      	bcc.n	8002d4a <write_dict+0x18e>
					}
				break;
 8002d76:	e003      	b.n	8002d80 <write_dict+0x1c4>
				break;
 8002d78:	bf00      	nop
 8002d7a:	e002      	b.n	8002d82 <write_dict+0x1c6>
				break;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <write_dict+0x1c6>
				break;
 8002d80:	bf00      	nop
		}
	return (0);
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <search_dict>:


/************************************************************************************************/
/* Search object dictionary for an entry														*/
/************************************************************************************************/
uint32_t search_dict (uint16_t index, uint8_t subindex, uint8_t type, uint8_t *pos){
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	80fb      	strh	r3, [r7, #6]
 8002da0:	460b      	mov	r3, r1
 8002da2:	717b      	strb	r3, [r7, #5]
 8002da4:	4613      	mov	r3, r2
 8002da6:	713b      	strb	r3, [r7, #4]
	uint8_t i;
	uint8_t index_exists;
	uint8_t subindex_exists;
	uint8_t size;
	i = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
	index_exists = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73bb      	strb	r3, [r7, #14]
	subindex_exists = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	737b      	strb	r3, [r7, #13]
	while (dict [i].object != ENDSTRING)		//search whole dictionary
 8002db4:	e06b      	b.n	8002e8e <search_dict+0xfa>
		{
			if (dict [i].object == index)					//found object
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	4a41      	ldr	r2, [pc, #260]	; (8002ec0 <search_dict+0x12c>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d160      	bne.n	8002e88 <search_dict+0xf4>
				{
					if (subindex <= dict [i].sub)				//subindex of object valid
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	4a3d      	ldr	r2, [pc, #244]	; (8002ec0 <search_dict+0x12c>)
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4413      	add	r3, r2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	797a      	ldrb	r2, [r7, #5]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d855      	bhi.n	8002e84 <search_dict+0xf0>
						{
							if ((type & COMMAND_SPECIFIER) == INIT_WRITE_REQ)
 8002dd8:	793b      	ldrb	r3, [r7, #4]
 8002dda:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d14b      	bne.n	8002e7a <search_dict+0xe6>
								{/// write access to object dictionary
									size = dict [i].size;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <search_dict+0x12c>)
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	733b      	strb	r3, [r7, #12]
									if ((type & EXPEDITED_BIT) && (size > 4) &&	 (subindex || (!dict [i].sub)))
 8002df0:	793b      	ldrb	r3, [r7, #4]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00f      	beq.n	8002e1a <search_dict+0x86>
 8002dfa:	7b3b      	ldrb	r3, [r7, #12]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d90c      	bls.n	8002e1a <search_dict+0x86>
 8002e00:	797b      	ldrb	r3, [r7, #5]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d107      	bne.n	8002e16 <search_dict+0x82>
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	4a2d      	ldr	r2, [pc, #180]	; (8002ec0 <search_dict+0x12c>)
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <search_dict+0x86>
										return (SDO_UNSUPPORTED);		// exped. transfer to object > 4 uint8_ts
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <search_dict+0x130>)
 8002e18:	e04d      	b.n	8002eb6 <search_dict+0x122>
									else if (!((type & EXPEDITED_BIT)) && (size <= 4))
 8002e1a:	793b      	ldrb	r3, [r7, #4]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <search_dict+0x9a>
 8002e24:	7b3b      	ldrb	r3, [r7, #12]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d801      	bhi.n	8002e2e <search_dict+0x9a>
										return (SDO_UNSUPPORTED);		// normal transfer to object <= 4 uint8_ts
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <search_dict+0x130>)
 8002e2c:	e043      	b.n	8002eb6 <search_dict+0x122>
									else if (!dict [i].access)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	4a23      	ldr	r2, [pc, #140]	; (8002ec0 <search_dict+0x12c>)
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	4413      	add	r3, r2
 8002e36:	3303      	adds	r3, #3
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <search_dict+0xae>
										return (SDO_WRITE_OF_RO);		// write access to read only object
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <search_dict+0x134>)
 8002e40:	e039      	b.n	8002eb6 <search_dict+0x122>
									else if ((!subindex) && dict [i].sub && index != PORT_OUT && index != PORT_IN)
 8002e42:	797b      	ldrb	r3, [r7, #5]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d113      	bne.n	8002e70 <search_dict+0xdc>
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <search_dict+0x12c>)
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	4413      	add	r3, r2
 8002e50:	3302      	adds	r3, #2
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <search_dict+0xdc>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d006      	beq.n	8002e70 <search_dict+0xdc>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	f642 72fd 	movw	r2, #12285	; 0x2ffd
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d001      	beq.n	8002e70 <search_dict+0xdc>
										return (SDO_WRITE_OF_RO);		// write access to number of entries
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <search_dict+0x134>)
 8002e6e:	e022      	b.n	8002eb6 <search_dict+0x122>
									*pos = i;							//set number of entry in dictionary
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	701a      	strb	r2, [r3, #0]
									return (0);						//write access possible
 8002e76:	2300      	movs	r3, #0
 8002e78:	e01d      	b.n	8002eb6 <search_dict+0x122>
								}
							else										//read access
								{
									*pos = i;							//set number of entry in dictionary
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	701a      	strb	r2, [r3, #0]
									return (0);						//read access possible
 8002e80:	2300      	movs	r3, #0
 8002e82:	e018      	b.n	8002eb6 <search_dict+0x122>
								}
							subindex_exists = 1;		//object exists,but access not valid
						}
					index_exists = 1;					//object exists,but subindex not valid
 8002e84:	2301      	movs	r3, #1
 8002e86:	73bb      	strb	r3, [r7, #14]
				}
			i++;												//go to next dictionary entry
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
	while (dict [i].object != ENDSTRING)		//search whole dictionary
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <search_dict+0x12c>)
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d18a      	bne.n	8002db6 <search_dict+0x22>
		}
	if (subindex_exists)					// object exists,but access not valid
 8002ea0:	7b7b      	ldrb	r3, [r7, #13]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <search_dict+0x116>
		return (SDO_WRITE_OF_RO);	// set error code
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <search_dict+0x134>)
 8002ea8:	e005      	b.n	8002eb6 <search_dict+0x122>
	if (index_exists)							// object exists,but subindex not valid
 8002eaa:	7bbb      	ldrb	r3, [r7, #14]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <search_dict+0x120>
		return (SDO_SUB_WRONG);		// set error code
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <search_dict+0x138>)
 8002eb2:	e000      	b.n	8002eb6 <search_dict+0x122>
	return (SDO_NOT_EXIST);				// no entry in object dictionary
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <search_dict+0x13c>)
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	06010000 	.word	0x06010000
 8002ec8:	06010002 	.word	0x06010002
 8002ecc:	06090011 	.word	0x06090011
 8002ed0:	06020000 	.word	0x06020000

08002ed4 <Get_NodeID>:

#define	_SUBPROG_C_
#include	"AllHeader.h"

extern SPI_HandleTypeDef hspi1;
uint8_t Get_NodeID(void){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	uint8_t i, dat1 = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<10; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	e015      	b.n	8002f10 <Get_NodeID+0x3c>
		{
			if(HAL_GPIO_ReadPin(NODE_ID_GPIO_Port,NODE_ID_Pin))
 8002ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ee8:	4811      	ldr	r0, [pc, #68]	; (8002f30 <Get_NodeID+0x5c>)
 8002eea:	f002 ffaf 	bl	8005e4c <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <Get_NodeID+0x26>
				dat1++;
 8002ef4:	79bb      	ldrb	r3, [r7, #6]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	71bb      	strb	r3, [r7, #6]
			__NOP();__NOP();__NOP();__NOP();
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
			__NOP();__NOP();__NOP();__NOP();
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
	for(i=0; i<10; i++)
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	71fb      	strb	r3, [r7, #7]
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2b09      	cmp	r3, #9
 8002f14:	d9e6      	bls.n	8002ee4 <Get_NodeID+0x10>
		}
	if(dat1 >= 7)
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	2b06      	cmp	r3, #6
 8002f1a:	d902      	bls.n	8002f22 <Get_NodeID+0x4e>
		i =  0x10;
 8002f1c:	2310      	movs	r3, #16
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	e001      	b.n	8002f26 <Get_NodeID+0x52>
	else
		i =  0x11;
 8002f22:	2311      	movs	r3, #17
 8002f24:	71fb      	strb	r3, [r7, #7]

	return i;
 8002f26:	79fb      	ldrb	r3, [r7, #7]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40010c00 	.word	0x40010c00

08002f34 <Check_InChange>:


uint8_t Check_InChange(uint8_t* buf1, uint8_t* buf2){
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for(i=0; i<mMax_InByte; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e00e      	b.n	8002f62 <Check_InChange+0x2e>
		{
			if(buf1[i] != buf2[i])
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	440b      	add	r3, r1
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <Check_InChange+0x28>
				return 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e008      	b.n	8002f6e <Check_InChange+0x3a>
	for(i=0; i<mMax_InByte; i++)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <Check_InChange+0x44>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3eb      	bcc.n	8002f44 <Check_InChange+0x10>
		}
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000938 	.word	0x20000938

08002f7c <SPI_SendOneByte>:

void Init_SPI(void){

}

uint8_t SPI_SendOneByte(uint8_t dat){
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dat, 1, 100);
 8002f86:	1df9      	adds	r1, r7, #7
 8002f88:	2364      	movs	r3, #100	; 0x64
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4803      	ldr	r0, [pc, #12]	; (8002f9c <SPI_SendOneByte+0x20>)
 8002f8e:	f003 fc2b 	bl	80067e8 <HAL_SPI_Transmit>
//	SSPBUF = dat;
//	while(!(SSPSTAT & 0x01))
//		ClrWdt();
//	dat = SSPBUF;

	return dat;
 8002f92:	79fb      	ldrb	r3, [r7, #7]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000898 	.word	0x20000898

08002fa0 <ReadInput>:
 														>0:  ���ڰ�ť�壬������166��ʱ�����(1�鰴ť��16���������)
 2��һ��SPI����: ����9���ֽڣ�һ��Ƭѡ��Ч(Ƭѡÿ��ѭ���ƶ�һ�ֽ�)���ܹ�9��ѭ��
 3��9��ѭ����ϣ�����һ��ѭ���ر���������Ƭѡ
============================================================================================================*/
uint8_t 	volatile	Userin[MAX_IN_BYTE];								/* variable for input after debouncing	*/
void ReadInput(void){
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
	memcpy((void *)in,(void *)Userin,MAX_IN_BYTE);
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <ReadInput+0x20>)
 8002fa8:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <ReadInput+0x24>)
 8002faa:	6810      	ldr	r0, [r2, #0]
 8002fac:	6851      	ldr	r1, [r2, #4]
 8002fae:	6018      	str	r0, [r3, #0]
 8002fb0:	6059      	str	r1, [r3, #4]
 8002fb2:	7a12      	ldrb	r2, [r2, #8]
 8002fb4:	721a      	strb	r2, [r3, #8]
	for (i=0; i<j; ++i)
		{	
			if (input[2][i] == input[1][i] && input[1][i] == input[0][i])
				in[i] = input[2][i];
		}
}
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000300 	.word	0x20000300
 8002fc4:	200002b8 	.word	0x200002b8

08002fc8 <Out_Prog>:

/*========================         ����źŴ���          ===================================
	1������ź�: ֻ����70����ť�ƣ�������2����վ�ӣ�1�����ط���������������ĳ�����
	2���ߵ�ƽ����
==============================================================================================*/
void Out_Prog(void){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
	uint8_t i, j, temp;
	uint16_t shift = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	817b      	strh	r3, [r7, #10]
	uint8_t out_state[MAX_IN_BYTE];
	static uint8_t out_old[MAX_IN_BYTE] = {0xFF,0xFF,0xFF,0,0,0,0,0,0};

	for(i=0; i<mMax_InByte; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e011      	b.n	8002ffc <Out_Prog+0x34>
		out_state[i] = out[i] ^ out_polarity[i];		// read input state; invert if desired
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	4a82      	ldr	r2, [pc, #520]	; (80031e4 <Out_Prog+0x21c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	b2d9      	uxtb	r1, r3
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	4a81      	ldr	r2, [pc, #516]	; (80031e8 <Out_Prog+0x220>)
 8002fe4:	5cd2      	ldrb	r2, [r2, r3]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	404a      	eors	r2, r1
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	f107 0110 	add.w	r1, r7, #16
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i=0; i<mMax_InByte; i++)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <Out_Prog+0x224>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	429a      	cmp	r2, r3
 8003004:	d3e8      	bcc.n	8002fd8 <Out_Prog+0x10>
	if(Check_InChange(out_state, out_old) == 0)	return;
 8003006:	463b      	mov	r3, r7
 8003008:	4979      	ldr	r1, [pc, #484]	; (80031f0 <Out_Prog+0x228>)
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ff92 	bl	8002f34 <Check_InChange>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80e1 	beq.w	80031da <Out_Prog+0x212>

	HC595_LUCK_DIS();
 8003018:	2200      	movs	r2, #0
 800301a:	2102      	movs	r1, #2
 800301c:	4875      	ldr	r0, [pc, #468]	; (80031f4 <Out_Prog+0x22c>)
 800301e:	f002 ff2c 	bl	8005e7a <HAL_GPIO_WritePin>

	if( mExtern_Number )
 8003022:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <Out_Prog+0x230>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8088 	beq.w	800313c <Out_Prog+0x174>
		{//������չ��
			for(i=mExtern_Number; i>0; i--)
 800302c:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <Out_Prog+0x230>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e041      	b.n	80030b8 <Out_Prog+0xf0>
				{
					shift = (((uint16_t)out_state[i * 2 + 2] << 8) | out_state[i * 2 + 1]) << 2;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	f107 0210 	add.w	r2, r7, #16
 800303e:	4413      	add	r3, r2
 8003040:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	b21a      	sxth	r2, r3
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	3301      	adds	r3, #1
 800304e:	f107 0110 	add.w	r1, r7, #16
 8003052:	440b      	add	r3, r1
 8003054:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003058:	b21b      	sxth	r3, r3
 800305a:	4313      	orrs	r3, r2
 800305c:	b21b      	sxth	r3, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	817b      	strh	r3, [r7, #10]
					temp = out_state[i * 2] & 0xC0; 	//ȡ����2λ
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f107 0210 	add.w	r2, r7, #16
 800306c:	4413      	add	r3, r2
 800306e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003072:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003076:	737b      	strb	r3, [r7, #13]
					shift |= (temp >> 6);
 8003078:	7b7b      	ldrb	r3, [r7, #13]
 800307a:	099b      	lsrs	r3, r3, #6
 800307c:	b2db      	uxtb	r3, r3
 800307e:	b29a      	uxth	r2, r3
 8003080:	897b      	ldrh	r3, [r7, #10]
 8003082:	4313      	orrs	r3, r2
 8003084:	817b      	strh	r3, [r7, #10]
					out_state[i * 2 + 2] = (uint8_t)(shift >> 8);
 8003086:	897b      	ldrh	r3, [r7, #10]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	b29a      	uxth	r2, r3
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f107 0110 	add.w	r1, r7, #16
 8003098:	440b      	add	r3, r1
 800309a:	f803 2c10 	strb.w	r2, [r3, #-16]
					out_state[i * 2 + 1] = ((uint8_t)shift);
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	3301      	adds	r3, #1
 80030a4:	897a      	ldrh	r2, [r7, #10]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f107 0110 	add.w	r1, r7, #16
 80030ac:	440b      	add	r3, r1
 80030ae:	f803 2c10 	strb.w	r2, [r3, #-16]
			for(i=mExtern_Number; i>0; i--)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ba      	bne.n	8003034 <Out_Prog+0x6c>
				}
			for(i = mExtern_Number * 2 + 3; i > 0; i--)
 80030be:	4b4e      	ldr	r3, [pc, #312]	; (80031f8 <Out_Prog+0x230>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3303      	adds	r3, #3
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e027      	b.n	800311c <Out_Prog+0x154>
				{
					temp = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	73bb      	strb	r3, [r7, #14]
 80030d4:	e018      	b.n	8003108 <Out_Prog+0x140>
						{
							temp <<= 1;
 80030d6:	7b7b      	ldrb	r3, [r7, #13]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	737b      	strb	r3, [r7, #13]
							if(out_state[i-1] & (1 << j))
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f107 0210 	add.w	r2, r7, #16
 80030e4:	4413      	add	r3, r2
 80030e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030ea:	461a      	mov	r2, r3
 80030ec:	7bbb      	ldrb	r3, [r7, #14]
 80030ee:	fa42 f303 	asr.w	r3, r2, r3
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <Out_Prog+0x13a>
								temp |= 0x01;
 80030fa:	7b7b      	ldrb	r3, [r7, #13]
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8003102:	7bbb      	ldrb	r3, [r7, #14]
 8003104:	3301      	adds	r3, #1
 8003106:	73bb      	strb	r3, [r7, #14]
 8003108:	7bbb      	ldrb	r3, [r7, #14]
 800310a:	2b07      	cmp	r3, #7
 800310c:	d9e3      	bls.n	80030d6 <Out_Prog+0x10e>
						}
					SPI_SendOneByte(temp);
 800310e:	7b7b      	ldrb	r3, [r7, #13]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff33 	bl	8002f7c <SPI_SendOneByte>
			for(i = mExtern_Number * 2 + 3; i > 0; i--)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	3b01      	subs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1d4      	bne.n	80030cc <Out_Prog+0x104>
				}
			HC595_LUCK_EN();
 8003122:	2201      	movs	r2, #1
 8003124:	2102      	movs	r1, #2
 8003126:	4833      	ldr	r0, [pc, #204]	; (80031f4 <Out_Prog+0x22c>)
 8003128:	f002 fea7 	bl	8005e7a <HAL_GPIO_WritePin>
			__NOP();__NOP();
 800312c:	bf00      	nop
 800312e:	bf00      	nop
			HC595_LUCK_DIS();
 8003130:	2200      	movs	r2, #0
 8003132:	2102      	movs	r1, #2
 8003134:	482f      	ldr	r0, [pc, #188]	; (80031f4 <Out_Prog+0x22c>)
 8003136:	f002 fea0 	bl	8005e7a <HAL_GPIO_WritePin>
 800313a:	e039      	b.n	80031b0 <Out_Prog+0x1e8>
		}
	else
		{//û����չ��
			for(i=3; i>0; i--)
 800313c:	2303      	movs	r3, #3
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	e027      	b.n	8003192 <Out_Prog+0x1ca>
				{
					temp = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8003146:	2300      	movs	r3, #0
 8003148:	73bb      	strb	r3, [r7, #14]
 800314a:	e018      	b.n	800317e <Out_Prog+0x1b6>
						{
							temp <<= 1;
 800314c:	7b7b      	ldrb	r3, [r7, #13]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	737b      	strb	r3, [r7, #13]
							if(out_state[i-1] & (1 << j))
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	3b01      	subs	r3, #1
 8003156:	f107 0210 	add.w	r2, r7, #16
 800315a:	4413      	add	r3, r2
 800315c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003160:	461a      	mov	r2, r3
 8003162:	7bbb      	ldrb	r3, [r7, #14]
 8003164:	fa42 f303 	asr.w	r3, r2, r3
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <Out_Prog+0x1b0>
								temp |= 0x01;
 8003170:	7b7b      	ldrb	r3, [r7, #13]
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8003178:	7bbb      	ldrb	r3, [r7, #14]
 800317a:	3301      	adds	r3, #1
 800317c:	73bb      	strb	r3, [r7, #14]
 800317e:	7bbb      	ldrb	r3, [r7, #14]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9e3      	bls.n	800314c <Out_Prog+0x184>
						}
					SPI_SendOneByte(temp);
 8003184:	7b7b      	ldrb	r3, [r7, #13]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fef8 	bl	8002f7c <SPI_SendOneByte>
			for(i=3; i>0; i--)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3b01      	subs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1d4      	bne.n	8003142 <Out_Prog+0x17a>
				}
			HC595_LUCK_EN();
 8003198:	2201      	movs	r2, #1
 800319a:	2102      	movs	r1, #2
 800319c:	4815      	ldr	r0, [pc, #84]	; (80031f4 <Out_Prog+0x22c>)
 800319e:	f002 fe6c 	bl	8005e7a <HAL_GPIO_WritePin>
			__NOP();__NOP();
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
			HC595_LUCK_DIS();
 80031a6:	2200      	movs	r2, #0
 80031a8:	2102      	movs	r1, #2
 80031aa:	4812      	ldr	r0, [pc, #72]	; (80031f4 <Out_Prog+0x22c>)
 80031ac:	f002 fe65 	bl	8005e7a <HAL_GPIO_WritePin>
		}
	for(i=0; i<mMax_InByte; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e00b      	b.n	80031ce <Out_Prog+0x206>
		out_old[i] = out_state[i];
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	f107 0110 	add.w	r1, r7, #16
 80031be:	440a      	add	r2, r1
 80031c0:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <Out_Prog+0x228>)
 80031c6:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<mMax_InByte; i++)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	3301      	adds	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <Out_Prog+0x224>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3ee      	bcc.n	80031b6 <Out_Prog+0x1ee>
 80031d8:	e000      	b.n	80031dc <Out_Prog+0x214>
	if(Check_InChange(out_state, out_old) == 0)	return;
 80031da:	bf00      	nop
}
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000508 	.word	0x20000508
 80031e8:	2000030c 	.word	0x2000030c
 80031ec:	20000938 	.word	0x20000938
 80031f0:	20000180 	.word	0x20000180
 80031f4:	40010800 	.word	0x40010800
 80031f8:	200001da 	.word	0x200001da

080031fc <test_mode>:

void test_mode(void){
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t help;
	uint8_t instate[MAX_IN_BYTE];
	uint8_t testno = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	75bb      	strb	r3, [r7, #22]
	uint8_t pBuf[5];

	for(i=0; i<MAX_IN_BYTE; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]
 800320a:	e015      	b.n	8003238 <test_mode+0x3c>
	{
		in_polarity[i] = 0;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	4aab      	ldr	r2, [pc, #684]	; (80034bc <test_mode+0x2c0>)
 8003210:	2100      	movs	r1, #0
 8003212:	54d1      	strb	r1, [r2, r3]
		out_polarity[i] = 0;
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	4aaa      	ldr	r2, [pc, #680]	; (80034c0 <test_mode+0x2c4>)
 8003218:	2100      	movs	r1, #0
 800321a:	54d1      	strb	r1, [r2, r3]
		outpush[i] = 0;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	4aa9      	ldr	r2, [pc, #676]	; (80034c4 <test_mode+0x2c8>)
 8003220:	2100      	movs	r1, #0
 8003222:	54d1      	strb	r1, [r2, r3]
		instate[i] = 0;
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	f107 0218 	add.w	r2, r7, #24
 800322a:	4413      	add	r3, r2
 800322c:	2200      	movs	r2, #0
 800322e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i=0; i<MAX_IN_BYTE; i++)
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	3301      	adds	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b08      	cmp	r3, #8
 800323c:	d9e6      	bls.n	800320c <test_mode+0x10>
	}

	for (i = 1; i < MAX_IO_TYPE; i++)
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
 8003242:	e006      	b.n	8003252 <test_mode+0x56>
  	virt_in  [i] = 0;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	4aa0      	ldr	r2, [pc, #640]	; (80034c8 <test_mode+0x2cc>)
 8003248:	2100      	movs	r1, #0
 800324a:	54d1      	strb	r1, [r2, r3]
	for (i = 1; i < MAX_IO_TYPE; i++)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	3301      	adds	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d9f5      	bls.n	8003244 <test_mode+0x48>
	virt_in  [IO_BASIC_FUNC] = TEST_IO;
 8003258:	4b9b      	ldr	r3, [pc, #620]	; (80034c8 <test_mode+0x2cc>)
 800325a:	22f0      	movs	r2, #240	; 0xf0
 800325c:	701a      	strb	r2, [r3, #0]
	heartbeat = 200;
 800325e:	4b9b      	ldr	r3, [pc, #620]	; (80034cc <test_mode+0x2d0>)
 8003260:	22c8      	movs	r2, #200	; 0xc8
 8003262:	701a      	strb	r2, [r3, #0]
//	TRISCbits.TRISC7	= 0;			//RC7 is output
//	LATCbits.LATC6 = 0;
//	LATCbits.LATC7 = 0;

	//����ģʽĬ��Ϊ3����չ��
	mExtern_Number = 3;
 8003264:	4b9a      	ldr	r3, [pc, #616]	; (80034d0 <test_mode+0x2d4>)
 8003266:	2203      	movs	r2, #3
 8003268:	701a      	strb	r2, [r3, #0]
	mInOut_Number = (mExtern_Number*16 + 22) % (MAX_IN + 1);
 800326a:	4b99      	ldr	r3, [pc, #612]	; (80034d0 <test_mode+0x2d4>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	f103 0216 	add.w	r2, r3, #22
 8003274:	4b97      	ldr	r3, [pc, #604]	; (80034d4 <test_mode+0x2d8>)
 8003276:	fb83 1302 	smull	r1, r3, r3, r2
 800327a:	4413      	add	r3, r2
 800327c:	1199      	asrs	r1, r3, #6
 800327e:	17d3      	asrs	r3, r2, #31
 8003280:	1ac9      	subs	r1, r1, r3
 8003282:	460b      	mov	r3, r1
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	1a5b      	subs	r3, r3, r1
 800328c:	1ad1      	subs	r1, r2, r3
 800328e:	b2ca      	uxtb	r2, r1
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <test_mode+0x2dc>)
 8003292:	701a      	strb	r2, [r3, #0]
	mMax_InByte = (mInOut_Number >> 3) + 1;
 8003294:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <test_mode+0x2dc>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <test_mode+0x2e0>)
 80032a2:	701a      	strb	r2, [r3, #0]

	while (1)
		{
			if (!heartbeat)
 80032a4:	4b89      	ldr	r3, [pc, #548]	; (80034cc <test_mode+0x2d0>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <test_mode+0xb6>
				{
//					TXB1D0    = nmtstate;							/* write data uint8_t for HEARTBEAT		*/
//					TXB1CONbits.TXREQ = 1;							// transmit request
					heartbeat = 200;
 80032ac:	4b87      	ldr	r3, [pc, #540]	; (80034cc <test_mode+0x2d0>)
 80032ae:	22c8      	movs	r2, #200	; 0xc8
 80032b0:	701a      	strb	r2, [r3, #0]
				}
			ClrWdt();
 80032b2:	f000 fcc5 	bl	8003c40 <ClrWdt>

			if ( Check_InChange(instate, (uint8_t *)in) )					// input state changed
 80032b6:	f107 0308 	add.w	r3, r7, #8
 80032ba:	4989      	ldr	r1, [pc, #548]	; (80034e0 <test_mode+0x2e4>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fe39 	bl	8002f34 <Check_InChange>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8085 	beq.w	80033d4 <test_mode+0x1d8>
				{
					for(i=0; i<mInOut_Number; i++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]
 80032ce:	e067      	b.n	80033a0 <test_mode+0x1a4>
						{
							help = bit_select (instate[i/8], i%8);
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f107 0218 	add.w	r2, r7, #24
 80032da:	4413      	add	r3, r2
 80032dc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80032e0:	461a      	mov	r2, r3
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	fa42 f303 	asr.w	r3, r2, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	757b      	strb	r3, [r7, #21]
							if (help != bit_select (in[i/8], i%8))
 80032f4:	7d7a      	ldrb	r2, [r7, #21]
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <test_mode+0x2e4>)
 8003300:	5c5b      	ldrb	r3, [r3, r1]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	fa41 f303 	asr.w	r3, r1, r3
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	429a      	cmp	r2, r3
 8003316:	d040      	beq.n	800339a <test_mode+0x19e>
								{// input has changed
									virt_in[IO_BASIC_FUNC] = CAR_CALL;
 8003318:	4b6b      	ldr	r3, [pc, #428]	; (80034c8 <test_mode+0x2cc>)
 800331a:	2205      	movs	r2, #5
 800331c:	701a      	strb	r2, [r3, #0]
									virt_in[IO_SUB_FUNC] = i + 1;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	3301      	adds	r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <test_mode+0x2cc>)
 8003326:	705a      	strb	r2, [r3, #1]
									virt_in[IO_LIFT] = LIFT1;
 8003328:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <test_mode+0x2cc>)
 800332a:	2201      	movs	r2, #1
 800332c:	709a      	strb	r2, [r3, #2]
									virt_in[IO_STATE] = help;
 800332e:	4a66      	ldr	r2, [pc, #408]	; (80034c8 <test_mode+0x2cc>)
 8003330:	7d7b      	ldrb	r3, [r7, #21]
 8003332:	7153      	strb	r3, [r2, #5]

									if (help)
 8003334:	7d7b      	ldrb	r3, [r7, #21]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01a      	beq.n	8003370 <test_mode+0x174>
										{
											transmit_in (virt_in);
 800333a:	4863      	ldr	r0, [pc, #396]	; (80034c8 <test_mode+0x2cc>)
 800333c:	f7fe f9c6 	bl	80016cc <transmit_in>
											bit_reset(out[i/8], i % 8);
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	4602      	mov	r2, r0
 8003348:	4b66      	ldr	r3, [pc, #408]	; (80034e4 <test_mode+0x2e8>)
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	b25a      	sxtb	r2, r3
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	b25b      	sxtb	r3, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	b25b      	sxtb	r3, r3
 8003362:	4013      	ands	r3, r2
 8003364:	b25b      	sxtb	r3, r3
 8003366:	4602      	mov	r2, r0
 8003368:	b2d9      	uxtb	r1, r3
 800336a:	4b5e      	ldr	r3, [pc, #376]	; (80034e4 <test_mode+0x2e8>)
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	e014      	b.n	800339a <test_mode+0x19e>
										}
									else
										bit_set(out[i/8], i % 8);
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	08db      	lsrs	r3, r3, #3
 8003374:	b2d8      	uxtb	r0, r3
 8003376:	4602      	mov	r2, r0
 8003378:	4b5a      	ldr	r3, [pc, #360]	; (80034e4 <test_mode+0x2e8>)
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	b25a      	sxtb	r2, r3
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	b25b      	sxtb	r3, r3
 800338e:	4313      	orrs	r3, r2
 8003390:	b25b      	sxtb	r3, r3
 8003392:	4602      	mov	r2, r0
 8003394:	b2d9      	uxtb	r1, r3
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <test_mode+0x2e8>)
 8003398:	5499      	strb	r1, [r3, r2]
					for(i=0; i<mInOut_Number; i++)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	3301      	adds	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
 80033a0:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <test_mode+0x2dc>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	7dfa      	ldrb	r2, [r7, #23]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d392      	bcc.n	80032d0 <test_mode+0xd4>
								}
						}

					for(i=0; i<mMax_InByte; i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
 80033ae:	e00c      	b.n	80033ca <test_mode+0x1ce>
						instate[i] = in[i];
 80033b0:	7dfa      	ldrb	r2, [r7, #23]
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	494a      	ldr	r1, [pc, #296]	; (80034e0 <test_mode+0x2e4>)
 80033b6:	5c8a      	ldrb	r2, [r1, r2]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f107 0118 	add.w	r1, r7, #24
 80033be:	440b      	add	r3, r1
 80033c0:	f803 2c10 	strb.w	r2, [r3, #-16]
					for(i=0; i<mMax_InByte; i++)
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	3301      	adds	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <test_mode+0x2e0>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	7dfa      	ldrb	r2, [r7, #23]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3ed      	bcc.n	80033b0 <test_mode+0x1b4>
				}
			if (rc)
 80033d4:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <test_mode+0x2ec>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8139 	beq.w	8003652 <test_mode+0x456>
				{
					if (rx [ro][0] == PDO_OUT)
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <test_mode+0x2f0>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <test_mode+0x2f4>)
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	f040 80f6 	bne.w	80035e8 <test_mode+0x3ec>
						{
							if(rx [ro][2] == CAR_CALL)
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <test_mode+0x2f0>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <test_mode+0x2f4>)
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	3302      	adds	r3, #2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b05      	cmp	r3, #5
 8003416:	d16f      	bne.n	80034f8 <test_mode+0x2fc>
								{
									for (i = 0; i < MAX_IO_TYPE; i++) 				// read output function
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
 800341c:	e013      	b.n	8003446 <test_mode+0x24a>
										virt_out [i] = rx[ro][i + 2]; // write to virtual output mapping
 800341e:	4b33      	ldr	r3, [pc, #204]	; (80034ec <test_mode+0x2f0>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461c      	mov	r4, r3
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	1c99      	adds	r1, r3, #2
 8003428:	7dfa      	ldrb	r2, [r7, #23]
 800342a:	4831      	ldr	r0, [pc, #196]	; (80034f0 <test_mode+0x2f4>)
 800342c:	4623      	mov	r3, r4
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4423      	add	r3, r4
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4403      	add	r3, r0
 8003436:	440b      	add	r3, r1
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b2d9      	uxtb	r1, r3
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <test_mode+0x2f8>)
 800343e:	5499      	strb	r1, [r3, r2]
									for (i = 0; i < MAX_IO_TYPE; i++) 				// read output function
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	3301      	adds	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d9e8      	bls.n	800341e <test_mode+0x222>
									j = virt_out[IO_SUB_FUNC] - 1;
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <test_mode+0x2f8>)
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	3b01      	subs	r3, #1
 8003452:	753b      	strb	r3, [r7, #20]

									// virtual output matches with physical
									if (virt_out[IO_STATE] & 0x01)
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <test_mode+0x2f8>)
 8003456:	795b      	ldrb	r3, [r3, #5]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <test_mode+0x290>
										{// set acknowledgement
											bit_set (out[j/8], j%8);				// set physical output
 8003460:	7d3b      	ldrb	r3, [r7, #20]
 8003462:	08db      	lsrs	r3, r3, #3
 8003464:	b2d8      	uxtb	r0, r3
 8003466:	4602      	mov	r2, r0
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <test_mode+0x2e8>)
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b25a      	sxtb	r2, r3
 8003470:	7d3b      	ldrb	r3, [r7, #20]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f303 	lsl.w	r3, r1, r3
 800347c:	b25b      	sxtb	r3, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	b25b      	sxtb	r3, r3
 8003482:	4602      	mov	r2, r0
 8003484:	b2d9      	uxtb	r1, r3
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <test_mode+0x2e8>)
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	e0cd      	b.n	8003628 <test_mode+0x42c>
										}
									else
										{// reset acknowledgement
											bit_reset (out[j/8], j%8);				// clear physical output
 800348c:	7d3b      	ldrb	r3, [r7, #20]
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	b2d8      	uxtb	r0, r3
 8003492:	4602      	mov	r2, r0
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <test_mode+0x2e8>)
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	b25a      	sxtb	r2, r3
 800349c:	7d3b      	ldrb	r3, [r7, #20]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	4013      	ands	r3, r2
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	4602      	mov	r2, r0
 80034b4:	b2d9      	uxtb	r1, r3
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <test_mode+0x2e8>)
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	e0b5      	b.n	8003628 <test_mode+0x42c>
 80034bc:	200002f0 	.word	0x200002f0
 80034c0:	2000030c 	.word	0x2000030c
 80034c4:	2000093c 	.word	0x2000093c
 80034c8:	20000558 	.word	0x20000558
 80034cc:	20000939 	.word	0x20000939
 80034d0:	200001da 	.word	0x200001da
 80034d4:	e6c2b449 	.word	0xe6c2b449
 80034d8:	20000189 	.word	0x20000189
 80034dc:	20000938 	.word	0x20000938
 80034e0:	20000300 	.word	0x20000300
 80034e4:	20000508 	.word	0x20000508
 80034e8:	200001e8 	.word	0x200001e8
 80034ec:	200002b5 	.word	0x200002b5
 80034f0:	200001f4 	.word	0x200001f4
 80034f4:	20000560 	.word	0x20000560
										}
								}
							else if(rx [ro][2] == ARRIVAL_INDICATION)
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <test_mode+0x4a8>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <test_mode+0x4ac>)
 8003500:	460b      	mov	r3, r1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	3302      	adds	r3, #2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b44      	cmp	r3, #68	; 0x44
 8003512:	d12f      	bne.n	8003574 <test_mode+0x378>
								{//��վ��
									if(rx [ro][IO_STATE + 2])
 8003514:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <test_mode+0x4a8>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <test_mode+0x4ac>)
 800351c:	460b      	mov	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	3307      	adds	r3, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <test_mode+0x356>
										{
											bit_set (out[2], 6);				// set physical output
 8003530:	4b5e      	ldr	r3, [pc, #376]	; (80036ac <test_mode+0x4b0>)
 8003532:	789b      	ldrb	r3, [r3, #2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b5b      	ldr	r3, [pc, #364]	; (80036ac <test_mode+0x4b0>)
 800353e:	709a      	strb	r2, [r3, #2]
											bit_set (out[2], 7);				// set physical output
 8003540:	4b5a      	ldr	r3, [pc, #360]	; (80036ac <test_mode+0x4b0>)
 8003542:	789b      	ldrb	r3, [r3, #2]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800354a:	b2da      	uxtb	r2, r3
 800354c:	4b57      	ldr	r3, [pc, #348]	; (80036ac <test_mode+0x4b0>)
 800354e:	709a      	strb	r2, [r3, #2]
 8003550:	e06a      	b.n	8003628 <test_mode+0x42c>
//											LATCbits.LATC6 = 1;
//											LATCbits.LATC7 = 1;
										}
									else
										{
											bit_reset (out[2], 6);				// set physical output
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <test_mode+0x4b0>)
 8003554:	789b      	ldrb	r3, [r3, #2]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b53      	ldr	r3, [pc, #332]	; (80036ac <test_mode+0x4b0>)
 8003560:	709a      	strb	r2, [r3, #2]
											bit_reset (out[2], 7);				// set physical output
 8003562:	4b52      	ldr	r3, [pc, #328]	; (80036ac <test_mode+0x4b0>)
 8003564:	789b      	ldrb	r3, [r3, #2]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <test_mode+0x4b0>)
 8003570:	709a      	strb	r2, [r3, #2]
 8003572:	e059      	b.n	8003628 <test_mode+0x42c>
//											LATCbits.LATC6 = 0;
//											LATCbits.LATC7 = 0;
										}
								}
							else if((rx [ro][2] == SPECIAL_FUNC) && (rx [ro][3] == BUZZER))
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <test_mode+0x4a8>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <test_mode+0x4ac>)
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	3302      	adds	r3, #2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b0e      	cmp	r3, #14
 800358e:	d14b      	bne.n	8003628 <test_mode+0x42c>
 8003590:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <test_mode+0x4a8>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <test_mode+0x4ac>)
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	3303      	adds	r3, #3
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d13d      	bne.n	8003628 <test_mode+0x42c>
								{
									if(rx [ro][IO_STATE + 2])
 80035ac:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <test_mode+0x4a8>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4619      	mov	r1, r3
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <test_mode+0x4ac>)
 80035b4:	460b      	mov	r3, r1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	3307      	adds	r3, #7
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <test_mode+0x3dc>
										buzzer |= BUZ_WORKING;
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <test_mode+0x4b4>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <test_mode+0x4b4>)
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e027      	b.n	8003628 <test_mode+0x42c>
									else
										buzzer &= ~BUZ_WORKING;
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <test_mode+0x4b4>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <test_mode+0x4b4>)
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e01f      	b.n	8003628 <test_mode+0x42c>
								}
						}
					else if ((rx [ro][0] == NMT) && (rx [ro][2] == RESET_NODE))
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <test_mode+0x4a8>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <test_mode+0x4ac>)
 80035f0:	460b      	mov	r3, r1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d112      	bne.n	8003628 <test_mode+0x42c>
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <test_mode+0x4a8>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <test_mode+0x4ac>)
 800360a:	460b      	mov	r3, r1
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	3302      	adds	r3, #2
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b81      	cmp	r3, #129	; 0x81
 800361c:	d104      	bne.n	8003628 <test_mode+0x42c>
						{
							merker = 0;
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <test_mode+0x4b8>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
							HAL_NVIC_SystemReset();
 8003624:	f002 fa7d 	bl	8005b22 <HAL_NVIC_SystemReset>
							//Reset();
						}
					if (ro == (RX_SIZE-1))						/* increment RX message read pointer	*/
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <test_mode+0x4a8>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b07      	cmp	r3, #7
 800362e:	d103      	bne.n	8003638 <test_mode+0x43c>
						ro = 0;
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <test_mode+0x4a8>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e005      	b.n	8003644 <test_mode+0x448>
					else
						ro++;
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <test_mode+0x4a8>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <test_mode+0x4a8>)
 8003642:	701a      	strb	r2, [r3, #0]
					rc--;										/* decrement RX counter					*/
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <test_mode+0x4bc>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <test_mode+0x4bc>)
 8003650:	701a      	strb	r2, [r3, #0]
				}

			if(bTime.Time_10ms)
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <test_mode+0x4c0>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f43f ae21 	beq.w	80032a4 <test_mode+0xa8>
				{
					ReadInput();		//��ȡ���еİ�ť����
 8003662:	f7ff fc9d 	bl	8002fa0 <ReadInput>
					Out_Prog(); 					//�������е����(������ʾ���)
 8003666:	f7ff fcaf 	bl	8002fc8 <Out_Prog>
					bTime.Time_10ms = 0;
 800366a:	4a14      	ldr	r2, [pc, #80]	; (80036bc <test_mode+0x4c0>)
 800366c:	7813      	ldrb	r3, [r2, #0]
 800366e:	f36f 0300 	bfc	r3, #0, #1
 8003672:	7013      	strb	r3, [r2, #0]
					if((++testno % 10) == 0)
 8003674:	7dbb      	ldrb	r3, [r7, #22]
 8003676:	3301      	adds	r3, #1
 8003678:	75bb      	strb	r3, [r7, #22]
 800367a:	7dba      	ldrb	r2, [r7, #22]
 800367c:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <test_mode+0x4c4>)
 800367e:	fba3 1302 	umull	r1, r3, r3, r2
 8003682:	08d9      	lsrs	r1, r3, #3
 8003684:	460b      	mov	r3, r1
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	f47f ae07 	bne.w	80032a4 <test_mode+0xa8>
						{
							pBuf[0] = 0xA0;
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	703b      	strb	r3, [r7, #0]
							pBuf[1]++;
 800369a:	787b      	ldrb	r3, [r7, #1]
 800369c:	3301      	adds	r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	707b      	strb	r3, [r7, #1]
			if (!heartbeat)
 80036a2:	e5ff      	b.n	80032a4 <test_mode+0xa8>
 80036a4:	200002b5 	.word	0x200002b5
 80036a8:	200001f4 	.word	0x200001f4
 80036ac:	20000508 	.word	0x20000508
 80036b0:	200001d4 	.word	0x200001d4
 80036b4:	200001e0 	.word	0x200001e0
 80036b8:	200001e8 	.word	0x200001e8
 80036bc:	200002fc 	.word	0x200002fc
 80036c0:	cccccccd 	.word	0xcccccccd

080036c4 <UART_SendBuf>:

#define	_DISPLAY_C_
#include	"AllHeader.h"


void UART_SendBuf(uint8_t* pBuf, uint8_t len){
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
//		-- uart_send_len;
//		bFunc.uart_send_busy = true;
//	}
//	PIE1bits.TXIE		= 1;
//	INTCONbits.GIEL	= 1;
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
	...

080036dc <Display_device>:

void Display_device(void){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
	uint8_t i, checksum;

	checksum = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	71bb      	strb	r3, [r7, #6]
	mDisp_buf[0] = 0xB0;	
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <Display_device+0x44>)
 80036e8:	22b0      	movs	r2, #176	; 0xb0
 80036ea:	701a      	strb	r2, [r3, #0]
	for (i=0; i<4; ++i)
 80036ec:	2300      	movs	r3, #0
 80036ee:	71fb      	strb	r3, [r7, #7]
 80036f0:	e008      	b.n	8003704 <Display_device+0x28>
		checksum += mDisp_buf[i];
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <Display_device+0x44>)
 80036f6:	5cd2      	ldrb	r2, [r2, r3]
 80036f8:	79bb      	ldrb	r3, [r7, #6]
 80036fa:	4413      	add	r3, r2
 80036fc:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<4; ++i)
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	3301      	adds	r3, #1
 8003702:	71fb      	strb	r3, [r7, #7]
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d9f3      	bls.n	80036f2 <Display_device+0x16>
	mDisp_buf[4] = checksum;
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <Display_device+0x44>)
 800370c:	79bb      	ldrb	r3, [r7, #6]
 800370e:	7113      	strb	r3, [r2, #4]
	UART_SendBuf(mDisp_buf, 5);
 8003710:	2105      	movs	r1, #5
 8003712:	4803      	ldr	r0, [pc, #12]	; (8003720 <Display_device+0x44>)
 8003714:	f7ff ffd6 	bl	80036c4 <UART_SendBuf>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200002d8 	.word	0x200002d8

08003724 <Arrow_Status>:

void Arrow_Status(void){
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
	uint8_t buf[5], checksum = 0, i;
 800372a:	2300      	movs	r3, #0
 800372c:	71fb      	strb	r3, [r7, #7]

	buf[0] = 0xA0;
 800372e:	23a0      	movs	r3, #160	; 0xa0
 8003730:	703b      	strb	r3, [r7, #0]
	buf[1] = display[BUF_MESSAGE];
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <Arrow_Status+0x6c>)
 8003734:	78db      	ldrb	r3, [r3, #3]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	70bb      	strb	r3, [r7, #2]
	buf[3] = mArrow_State % 3;
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <Arrow_Status+0x70>)
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <Arrow_Status+0x74>)
 8003744:	fba3 1302 	umull	r1, r3, r3, r2
 8003748:	0859      	lsrs	r1, r3, #1
 800374a:	460b      	mov	r3, r1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	440b      	add	r3, r1
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<4; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	71bb      	strb	r3, [r7, #6]
 800375a:	e00b      	b.n	8003774 <Arrow_Status+0x50>
		checksum += buf[i];
 800375c:	79bb      	ldrb	r3, [r7, #6]
 800375e:	f107 0208 	add.w	r2, r7, #8
 8003762:	4413      	add	r3, r2
 8003764:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	4413      	add	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<4; i++)
 800376e:	79bb      	ldrb	r3, [r7, #6]
 8003770:	3301      	adds	r3, #1
 8003772:	71bb      	strb	r3, [r7, #6]
 8003774:	79bb      	ldrb	r3, [r7, #6]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d9f0      	bls.n	800375c <Arrow_Status+0x38>
	buf[4] = checksum;
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	713b      	strb	r3, [r7, #4]
	UART_SendBuf(buf, 5);
 800377e:	463b      	mov	r3, r7
 8003780:	2105      	movs	r1, #5
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff9e 	bl	80036c4 <UART_SendBuf>
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200002d4 	.word	0x200002d4
 8003794:	200002e0 	.word	0x200002e0
 8003798:	aaaaaaab 	.word	0xaaaaaaab

0800379c <HAL_TIM_PeriodElapsedCallback>:
uint8_t virt_key_cnt =0;

uint32_t TIM1_inter,TIM2_inter;
uint32_t TIM1_inter_store,TIM2_inter_store;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
	static uint8_t time1_cnt = 0;
	static uint8_t time0_cnt = 0;
	if(htim->Instance == htim1.Instance)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b9b      	ldr	r3, [pc, #620]	; (8003a1c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d14d      	bne.n	8003850 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		bTime.Time_10ms = 1;
 80037b4:	4a9a      	ldr	r2, [pc, #616]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80037b6:	7813      	ldrb	r3, [r2, #0]
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	7013      	strb	r3, [r2, #0]
		time1_cnt++;
 80037be:	4b99      	ldr	r3, [pc, #612]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4b97      	ldr	r3, [pc, #604]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80037c8:	701a      	strb	r2, [r3, #0]

		if((time1_cnt % 10) == 0)
 80037ca:	4b96      	ldr	r3, [pc, #600]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	4b96      	ldr	r3, [pc, #600]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80037d0:	fba3 1302 	umull	r1, r3, r3, r2
 80037d4:	08d9      	lsrs	r1, r3, #3
 80037d6:	460b      	mov	r3, r1
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d120      	bne.n	8003828 <HAL_TIM_PeriodElapsedCallback+0x8c>
			{//100ms
				bTime.Time_100ms = 1;
 80037e6:	4a8e      	ldr	r2, [pc, #568]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80037e8:	7813      	ldrb	r3, [r2, #0]
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	7013      	strb	r3, [r2, #0]
				if (bBusOffTimer)
 80037f0:	4b8e      	ldr	r3, [pc, #568]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_TIM_PeriodElapsedCallback+0x6a>
					-- bBusOffTimer;
 80037f8:	4b8c      	ldr	r3, [pc, #560]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b8a      	ldr	r3, [pc, #552]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e010      	b.n	8003828 <HAL_TIM_PeriodElapsedCallback+0x8c>
				else
					{
						if(bFunc.buz_set_id)
 8003806:	4b8a      	ldr	r3, [pc, #552]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_TIM_PeriodElapsedCallback+0x8c>
							{
								Disable_BUZ();
 8003814:	2200      	movs	r2, #0
 8003816:	2101      	movs	r1, #1
 8003818:	4886      	ldr	r0, [pc, #536]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800381a:	f002 fb2e 	bl	8005e7a <HAL_GPIO_WritePin>
								bFunc.buz_set_id = 0;
 800381e:	4a84      	ldr	r2, [pc, #528]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003820:	7813      	ldrb	r3, [r2, #0]
 8003822:	f36f 0300 	bfc	r3, #0, #1
 8003826:	7013      	strb	r3, [r2, #0]
							}
					}
			}
		if((time1_cnt % 200) == 0)
 8003828:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4a82      	ldr	r2, [pc, #520]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800382e:	fba2 1203 	umull	r1, r2, r2, r3
 8003832:	0992      	lsrs	r2, r2, #6
 8003834:	21c8      	movs	r1, #200	; 0xc8
 8003836:	fb01 f202 	mul.w	r2, r1, r2
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 80e7 	bne.w	8003a12 <HAL_TIM_PeriodElapsedCallback+0x276>
			bTime.Time_2s = 1;
 8003844:	4a76      	ldr	r2, [pc, #472]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003846:	7813      	ldrb	r3, [r2, #0]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	7013      	strb	r3, [r2, #0]
										}
								}
						}

	}
}
 800384e:	e0e0      	b.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0x276>
	else if(htim->Instance == htim2.Instance)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	f040 80da 	bne.w	8003a12 <HAL_TIM_PeriodElapsedCallback+0x276>
					bTime.Time_500ms = true;
 800385e:	4a70      	ldr	r2, [pc, #448]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003860:	7813      	ldrb	r3, [r2, #0]
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	7013      	strb	r3, [r2, #0]
					bTime.flash_floor_500ms = true;
 8003868:	4a6d      	ldr	r2, [pc, #436]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800386a:	7813      	ldrb	r3, [r2, #0]
 800386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003870:	7013      	strb	r3, [r2, #0]
					time0_cnt++;
 8003872:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b71      	ldr	r3, [pc, #452]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800387c:	701a      	strb	r2, [r3, #0]
					if (!nmtstate)						// only during Boot up
 800387e:	4b71      	ldr	r3, [pc, #452]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <HAL_TIM_PeriodElapsedCallback+0x102>
							if (nmtwait)					// waiting time for first heartbeat
 8003886:	4b70      	ldr	r3, [pc, #448]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <HAL_TIM_PeriodElapsedCallback+0x102>
								nmtwait--;
 8003890:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4b6b      	ldr	r3, [pc, #428]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800389c:	701a      	strb	r2, [r3, #0]
					if (heartbeat)						// decrement heartbeat timer
 800389e:	4b6b      	ldr	r3, [pc, #428]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_TIM_PeriodElapsedCallback+0x116>
						heartbeat--;
 80038a6:	4b69      	ldr	r3, [pc, #420]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b67      	ldr	r3, [pc, #412]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80038b0:	701a      	strb	r2, [r3, #0]
					if (sdo_timer)			// check for SDO transfer time out
 80038b2:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x12a>
						sdo_timer--;
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80038c4:	701a      	strb	r2, [r3, #0]
					if (hsetime)
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d010      	beq.n	80038f2 <HAL_TIM_PeriodElapsedCallback+0x156>
							hsetime--;
 80038d0:	4b60      	ldr	r3, [pc, #384]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80038dc:	701a      	strb	r2, [r3, #0]
							if (!hsetime) 		// HSE heartbeat time out
 80038de:	4b5d      	ldr	r3, [pc, #372]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PeriodElapsedCallback+0x156>
								bFunc.hsecheck = true; 	// HSE check necessary
 80038e8:	4a51      	ldr	r2, [pc, #324]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80038ea:	7813      	ldrb	r3, [r2, #0]
 80038ec:	f043 0320 	orr.w	r3, r3, #32
 80038f0:	7013      	strb	r3, [r2, #0]
					if((time0_cnt % 10) == 0)
 80038f2:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80038f8:	fba3 1302 	umull	r1, r3, r3, r2
 80038fc:	08d9      	lsrs	r1, r3, #3
 80038fe:	460b      	mov	r3, r1
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <HAL_TIM_PeriodElapsedCallback+0x17c>
						bTime.Time_5s = 1;
 800390e:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003910:	7813      	ldrb	r3, [r2, #0]
 8003912:	f043 0310 	orr.w	r3, r3, #16
 8003916:	7013      	strb	r3, [r2, #0]
					if(att_alarm_timer)
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d026      	beq.n	800396e <HAL_TIM_PeriodElapsedCallback+0x1d2>
							--att_alarm_timer;
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	3b01      	subs	r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800392a:	701a      	strb	r2, [r3, #0]
							if(!att_alarm_timer)
 800392c:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11c      	bne.n	800396e <HAL_TIM_PeriodElapsedCallback+0x1d2>
									if(bTime.Time_alarm_fg)
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <HAL_TIM_PeriodElapsedCallback+0x1b4>
										buzzer &= ~BUZ_WORKING;
 8003942:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800394e:	701a      	strb	r2, [r3, #0]
									bFunc.buz_state = !bFunc.buz_state;
 8003950:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2d9      	uxtb	r1, r3
 8003964:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003966:	7813      	ldrb	r3, [r2, #0]
 8003968:	f361 0341 	bfi	r3, r1, #1, #1
 800396c:	7013      	strb	r3, [r2, #0]
					if(buz_alarm_totaltimer)
 800396e:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_TIM_PeriodElapsedCallback+0x1e6>
						--buz_alarm_totaltimer;
 8003976:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003980:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < mInOut_Number; i++)
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e03f      	b.n	8003a08 <HAL_TIM_PeriodElapsedCallback+0x26c>
							if (outpar [i][IO_BASIC_FUNC] == ARRIVAL_INDICATION)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800398c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003990:	2b44      	cmp	r3, #68	; 0x44
 8003992:	d136      	bne.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x266>
							if (outpar [i][IO_ACK])
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4a33      	ldr	r2, [pc, #204]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	79db      	ldrb	r3, [r3, #7]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02f      	beq.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x266>
									outpar [i][IO_ACK]--; 			//decrement time counter
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	492f      	ldr	r1, [pc, #188]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80039a6:	00d3      	lsls	r3, r2, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	79db      	ldrb	r3, [r3, #7]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b2d8      	uxtb	r0, r3
 80039b0:	492c      	ldr	r1, [pc, #176]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80039b2:	00d3      	lsls	r3, r2, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	4602      	mov	r2, r0
 80039b8:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])		//time out
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	79db      	ldrb	r3, [r3, #7]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11c      	bne.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x266>
											bit_reset (out[i/8], i % 8);			// switch off output
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	b2d8      	uxtb	r0, r3
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80039d2:	5c9b      	ldrb	r3, [r3, r2]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	b25a      	sxtb	r2, r3
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	4013      	ands	r3, r2
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	4602      	mov	r2, r0
 80039f0:	b2d9      	uxtb	r1, r3
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80039f4:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	2200      	movs	r2, #0
 8003a00:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	3301      	adds	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d3ba      	bcc.n	8003988 <HAL_TIM_PeriodElapsedCallback+0x1ec>
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200007f4 	.word	0x200007f4
 8003a20:	200002fc 	.word	0x200002fc
 8003a24:	200001e5 	.word	0x200001e5
 8003a28:	cccccccd 	.word	0xcccccccd
 8003a2c:	200001dc 	.word	0x200001dc
 8003a30:	20000894 	.word	0x20000894
 8003a34:	40010800 	.word	0x40010800
 8003a38:	51eb851f 	.word	0x51eb851f
 8003a3c:	200008f0 	.word	0x200008f0
 8003a40:	200001e6 	.word	0x200001e6
 8003a44:	200007f1 	.word	0x200007f1
 8003a48:	20000840 	.word	0x20000840
 8003a4c:	20000939 	.word	0x20000939
 8003a50:	200001d9 	.word	0x200001d9
 8003a54:	200007f0 	.word	0x200007f0
 8003a58:	200001dd 	.word	0x200001dd
 8003a5c:	200001d4 	.word	0x200001d4
 8003a60:	200001df 	.word	0x200001df
 8003a64:	20000578 	.word	0x20000578
 8003a68:	20000508 	.word	0x20000508
 8003a6c:	20000189 	.word	0x20000189

08003a70 <check_hse>:
void check_hse (uint8_t mode){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
	uint8_t help;
	uint8_t i;

	help = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
	if (!hsetime)								/* 5s no heartbeat from HSE				*/
 8003a7e:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <check_hse+0x1b4>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d122      	bne.n	8003ace <check_hse+0x5e>
		{
			help = 1;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
			hsetime  = HSETIME;						/* restart HSE heartbeat timer			*/
 8003a8c:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <check_hse+0x1b4>)
 8003a8e:	2214      	movs	r2, #20
 8003a90:	701a      	strb	r2, [r3, #0]
			display[BUF_TEN] = 'N';			//A_BETR;
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <check_hse+0x1b8>)
 8003a94:	224e      	movs	r2, #78	; 0x4e
 8003a96:	701a      	strb	r2, [r3, #0]
			display[BUF_UNIT] = 'C';		//A_BETR;
 8003a98:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <check_hse+0x1b8>)
 8003a9a:	2243      	movs	r2, #67	; 0x43
 8003a9c:	705a      	strb	r2, [r3, #1]
			display[BUF_ARROW] = 0;
 8003a9e:	4b62      	ldr	r3, [pc, #392]	; (8003c28 <check_hse+0x1b8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	709a      	strb	r2, [r3, #2]
			display[BUF_MESSAGE] = 0;
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <check_hse+0x1b8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	70da      	strb	r2, [r3, #3]
			hse_heartbeat = 0;
 8003aaa:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <check_hse+0x1bc>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
			mDisp_buf[BUF_TEN + 1] = display[BUF_TEN];
 8003ab0:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <check_hse+0x1b8>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b5e      	ldr	r3, [pc, #376]	; (8003c30 <check_hse+0x1c0>)
 8003ab8:	705a      	strb	r2, [r3, #1]
			mDisp_buf[BUF_UNIT + 1] = display[BUF_UNIT];
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <check_hse+0x1b8>)
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <check_hse+0x1c0>)
 8003ac2:	709a      	strb	r2, [r3, #2]
			mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8003ac4:	4b58      	ldr	r3, [pc, #352]	; (8003c28 <check_hse+0x1b8>)
 8003ac6:	789b      	ldrb	r3, [r3, #2]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4b59      	ldr	r3, [pc, #356]	; (8003c30 <check_hse+0x1c0>)
 8003acc:	70da      	strb	r2, [r3, #3]
		}

	if (help && mode)											/* one or more HSE not available		*/
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a2 	beq.w	8003c1a <check_hse+0x1aa>
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 809e 	beq.w	8003c1a <check_hse+0x1aa>
		{
			for (i = 0; i < mInOut_Number; i++)					/* check all call indications			*/
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73bb      	strb	r3, [r7, #14]
 8003ae2:	e094      	b.n	8003c0e <check_hse+0x19e>
				{
					if (check_for_call (outpar [i][IO_BASIC_FUNC]))
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <check_hse+0x1c4>)
 8003ae8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fedf 	bl	80018b0 <check_for_call>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d037      	beq.n	8003b68 <check_hse+0xf8>
						{											/* output is call acknowledgement		*/
				  		outpar [i][IO_ACK] &= ~help;
 8003af8:	7bbb      	ldrb	r3, [r7, #14]
 8003afa:	4a4e      	ldr	r2, [pc, #312]	; (8003c34 <check_hse+0x1c4>)
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	79db      	ldrb	r3, [r3, #7]
 8003b02:	b25a      	sxtb	r2, r3
 8003b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b25a      	sxtb	r2, r3
 8003b10:	7bbb      	ldrb	r3, [r7, #14]
 8003b12:	b2d1      	uxtb	r1, r2
 8003b14:	4a47      	ldr	r2, [pc, #284]	; (8003c34 <check_hse+0x1c4>)
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	71da      	strb	r2, [r3, #7]
							if (!outpar [i][IO_ACK])				/* all acknowledgements cancelled		*/
 8003b1e:	7bbb      	ldrb	r3, [r7, #14]
 8003b20:	4a44      	ldr	r2, [pc, #272]	; (8003c34 <check_hse+0x1c4>)
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	79db      	ldrb	r3, [r3, #7]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d16d      	bne.n	8003c08 <check_hse+0x198>
								{
									bit_reset (out[i/8], i%8);					/* clear output							*/
 8003b2c:	7bbb      	ldrb	r3, [r7, #14]
 8003b2e:	08db      	lsrs	r3, r3, #3
 8003b30:	b2d8      	uxtb	r0, r3
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <check_hse+0x1c8>)
 8003b36:	5c9b      	ldrb	r3, [r3, r2]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	b25a      	sxtb	r2, r3
 8003b3c:	7bbb      	ldrb	r3, [r7, #14]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	b25b      	sxtb	r3, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	4602      	mov	r2, r0
 8003b54:	b2d9      	uxtb	r1, r3
 8003b56:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <check_hse+0x1c8>)
 8003b58:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_STATE] = 0;
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	4a35      	ldr	r2, [pc, #212]	; (8003c34 <check_hse+0x1c4>)
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	715a      	strb	r2, [r3, #5]
 8003b66:	e04f      	b.n	8003c08 <check_hse+0x198>
								}
						}
					else										/* all other output functions			*/
						{
							if (outpar [i][IO_LIFT] & help)			/* output for this lift					*/
 8003b68:	7bbb      	ldrb	r3, [r7, #14]
 8003b6a:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <check_hse+0x1c4>)
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	789a      	ldrb	r2, [r3, #2]
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	4013      	ands	r3, r2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d045      	beq.n	8003c08 <check_hse+0x198>
								{
									if ((outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC) &&
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <check_hse+0x1c4>)
 8003b80:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003b84:	2b0e      	cmp	r3, #14
 8003b86:	d122      	bne.n	8003bce <check_hse+0x15e>
									    (outpar [i][IO_SUB_FUNC]	  == OUT_OF_ORDER))
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <check_hse+0x1c4>)
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	785b      	ldrb	r3, [r3, #1]
									if ((outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC) &&
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d11b      	bne.n	8003bce <check_hse+0x15e>
										{
											bit_set (out[i/8], i%8);				/* set physical output					*/
 8003b96:	7bbb      	ldrb	r3, [r7, #14]
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	b2d8      	uxtb	r0, r3
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <check_hse+0x1c8>)
 8003ba0:	5c9b      	ldrb	r3, [r3, r2]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	b25a      	sxtb	r2, r3
 8003ba6:	7bbb      	ldrb	r3, [r7, #14]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	b25b      	sxtb	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	4602      	mov	r2, r0
 8003bba:	b2d9      	uxtb	r1, r3
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <check_hse+0x1c8>)
 8003bbe:	5499      	strb	r1, [r3, r2]
					 						outpar [i][IO_STATE] = 1;
 8003bc0:	7bbb      	ldrb	r3, [r7, #14]
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <check_hse+0x1c4>)
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	2201      	movs	r2, #1
 8003bca:	715a      	strb	r2, [r3, #5]
 8003bcc:	e01c      	b.n	8003c08 <check_hse+0x198>
										}
									else
										{
											bit_reset (out[i/8], i%8);				/* reset physical output				*/
 8003bce:	7bbb      	ldrb	r3, [r7, #14]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	b2d8      	uxtb	r0, r3
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <check_hse+0x1c8>)
 8003bd8:	5c9b      	ldrb	r3, [r3, r2]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	b25a      	sxtb	r2, r3
 8003bde:	7bbb      	ldrb	r3, [r7, #14]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	2101      	movs	r1, #1
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	b25b      	sxtb	r3, r3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	b2d9      	uxtb	r1, r3
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <check_hse+0x1c8>)
 8003bfa:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8003bfc:	7bbb      	ldrb	r3, [r7, #14]
 8003bfe:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <check_hse+0x1c4>)
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	2200      	movs	r2, #0
 8003c06:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)					/* check all call indications			*/
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73bb      	strb	r3, [r7, #14]
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <check_hse+0x1cc>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	7bba      	ldrb	r2, [r7, #14]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f4ff af65 	bcc.w	8003ae4 <check_hse+0x74>
										}
								}
						}
				}
		}
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200007f0 	.word	0x200007f0
 8003c28:	200002d4 	.word	0x200002d4
 8003c2c:	200001db 	.word	0x200001db
 8003c30:	200002d8 	.word	0x200002d8
 8003c34:	20000578 	.word	0x20000578
 8003c38:	20000508 	.word	0x20000508
 8003c3c:	20000189 	.word	0x20000189

08003c40 <ClrWdt>:
void ClrWdt (void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0

}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c52:	f000 ff8b 	bl	8004b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c56:	f000 fb15 	bl	8004284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c5a:	f000 fcb9 	bl	80045d0 <MX_GPIO_Init>
  MX_CAN_Init();
 8003c5e:	f000 fb57 	bl	8004310 <MX_CAN_Init>
  MX_SPI1_Init();
 8003c62:	f000 fb8b 	bl	800437c <MX_SPI1_Init>
  MX_TIM1_Init();
 8003c66:	f000 fbbf 	bl	80043e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c6a:	f000 fc0d 	bl	8004488 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003c6e:	f000 fc59 	bl	8004524 <MX_USART1_UART_Init>
  MX_USART2_Init();
 8003c72:	f000 fc81 	bl	8004578 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8003c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c7a:	f000 ffd9 	bl	8004c30 <HAL_Delay>
  	uint8_t i, j;

	if (merker == RC_MERKER)									// restart by after Rx counter error
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <main+0x1a8>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b5a      	cmp	r3, #90	; 0x5a
 8003c84:	d106      	bne.n	8003c94 <main+0x48>
		{
			errorregister |= ER_COMMUNICATION;						// set error bits
 8003c86:	4b5c      	ldr	r3, [pc, #368]	; (8003df8 <main+0x1ac>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	f043 0310 	orr.w	r3, r3, #16
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <main+0x1ac>)
 8003c92:	701a      	strb	r2, [r3, #0]
		}
	nmtstate  	= BOOT_UP;		// set CAN NMT state to Boot up
 8003c94:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <main+0x1b0>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
	nmtwait = 2;	// waiting time to 1. heartbeat in INI-Mode waiting time	1s
 8003c9a:	4b59      	ldr	r3, [pc, #356]	; (8003e00 <main+0x1b4>)
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	701a      	strb	r2, [r3, #0]

	hsetime = HSETIME;
 8003ca0:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <main+0x1b8>)
 8003ca2:	2214      	movs	r2, #20
 8003ca4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_IN_BYTE; i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]
 8003caa:	e028      	b.n	8003cfe <main+0xb2>
	{
		out[i] = 0;
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <main+0x1bc>)
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	54d1      	strb	r1, [r2, r3]
		in[i] = 0x00;
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <main+0x1c0>)
 8003cb8:	2100      	movs	r1, #0
 8003cba:	54d1      	strb	r1, [r2, r3]
		input[0][i] = 0x00;
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <main+0x1c4>)
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	54d1      	strb	r1, [r2, r3]
		input[1][i] = 0x00;
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	4a52      	ldr	r2, [pc, #328]	; (8003e10 <main+0x1c4>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	725a      	strb	r2, [r3, #9]
		input[2][i] = 0x00;
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	4a4f      	ldr	r2, [pc, #316]	; (8003e10 <main+0x1c4>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	749a      	strb	r2, [r3, #18]
		inold[i] = 0x00;
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	4a4e      	ldr	r2, [pc, #312]	; (8003e14 <main+0x1c8>)
 8003cdc:	2100      	movs	r1, #0
 8003cde:	54d1      	strb	r1, [r2, r3]
		instate[i] = 0;
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4a4d      	ldr	r2, [pc, #308]	; (8003e18 <main+0x1cc>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	54d1      	strb	r1, [r2, r3]
		in_polarity[i] = 0;
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	4a4c      	ldr	r2, [pc, #304]	; (8003e1c <main+0x1d0>)
 8003cec:	2100      	movs	r1, #0
 8003cee:	54d1      	strb	r1, [r2, r3]
		out_polarity[i] = 0;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <main+0x1d4>)
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < MAX_IN_BYTE; i++)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	71fb      	strb	r3, [r7, #7]
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d9d3      	bls.n	8003cac <main+0x60>
	}
	for (i = 0; i < MAX_IN; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	71fb      	strb	r3, [r7, #7]
 8003d08:	e024      	b.n	8003d54 <main+0x108>
	{
		inpar  [i][IO_STATE] = 0;
 8003d0a:	79fa      	ldrb	r2, [r7, #7]
 8003d0c:	4945      	ldr	r1, [pc, #276]	; (8003e24 <main+0x1d8>)
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	3305      	adds	r3, #5
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
		outpar [i][IO_STATE] = 0;
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	4a42      	ldr	r2, [pc, #264]	; (8003e28 <main+0x1dc>)
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	2200      	movs	r2, #0
 8003d26:	715a      	strb	r2, [r3, #5]
		inpar  [i][IO_BASIC_FUNC] = 0;
 8003d28:	79fa      	ldrb	r2, [r7, #7]
 8003d2a:	493e      	ldr	r1, [pc, #248]	; (8003e24 <main+0x1d8>)
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	440b      	add	r3, r1
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
		outpar [i][IO_BASIC_FUNC] = 0;
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <main+0x1dc>)
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		outpar [i][IO_ACK] = 0;
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <main+0x1dc>)
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	71da      	strb	r2, [r3, #7]
	for (i = 0; i < MAX_IN; i++)
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	3301      	adds	r3, #1
 8003d52:	71fb      	strb	r3, [r7, #7]
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	2b45      	cmp	r3, #69	; 0x45
 8003d58:	d9d7      	bls.n	8003d0a <main+0xbe>
	}
	for(i = 0; i < 4; i++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	71fb      	strb	r3, [r7, #7]
 8003d5e:	e006      	b.n	8003d6e <main+0x122>
		display[i] = 0;
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <main+0x1e0>)
 8003d64:	2100      	movs	r1, #0
 8003d66:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 4; i++)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	71fb      	strb	r3, [r7, #7]
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d9f5      	bls.n	8003d60 <main+0x114>
	for(i = 0; i < 5; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	71fb      	strb	r3, [r7, #7]
 8003d78:	e006      	b.n	8003d88 <main+0x13c>
		mDisp_buf[i] = 0;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <main+0x1e4>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 5; i++)
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	3301      	adds	r3, #1
 8003d86:	71fb      	strb	r3, [r7, #7]
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d9f5      	bls.n	8003d7a <main+0x12e>

	mArrow_State = 0;
 8003d8e:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <main+0x1e8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
	mExtern_Number = 0;
 8003d94:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <main+0x1ec>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8003d9a:	4828      	ldr	r0, [pc, #160]	; (8003e3c <main+0x1f0>)
 8003d9c:	f002 ff56 	bl	8006c4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8003da0:	4827      	ldr	r0, [pc, #156]	; (8003e40 <main+0x1f4>)
 8003da2:	f002 ff53 	bl	8006c4c <HAL_TIM_Base_Start_IT>
	while (nmtwait)				// waiting time to 1. heartbeat
 8003da6:	e00d      	b.n	8003dc4 <main+0x178>
		{
			if(bTime.Time_10ms)
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <main+0x1f8>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <main+0x178>
				{
					ReadInput();
 8003db6:	f7ff f8f3 	bl	8002fa0 <ReadInput>
					bTime.Time_10ms = 0;
 8003dba:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <main+0x1f8>)
 8003dbc:	7813      	ldrb	r3, [r2, #0]
 8003dbe:	f36f 0300 	bfc	r3, #0, #1
 8003dc2:	7013      	strb	r3, [r2, #0]
	while (nmtwait)				// waiting time to 1. heartbeat
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <main+0x1b4>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ec      	bne.n	8003da8 <main+0x15c>
				}
		}
	node_id = Get_NodeID();
 8003dce:	f7ff f881 	bl	8002ed4 <Get_NodeID>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <main+0x1fc>)
 8003dd8:	701a      	strb	r2, [r3, #0]

	Init_Can();
 8003dda:	f7fc fb57 	bl	800048c <Init_Can>


	heartbeat = HEARTBEAT_TIME;
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <main+0x200>)
 8003de0:	2204      	movs	r2, #4
 8003de2:	701a      	strb	r2, [r3, #0]

	nmtstate = PRE_OP;						// set state pre-operational
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <main+0x1b0>)
 8003de6:	227f      	movs	r2, #127	; 0x7f
 8003de8:	701a      	strb	r2, [r3, #0]
	disp_lift = LIFT1;
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <main+0x204>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
	while (nmtstate == PRE_OP)
 8003df0:	e092      	b.n	8003f18 <main+0x2cc>
 8003df2:	bf00      	nop
 8003df4:	200001e0 	.word	0x200001e0
 8003df8:	200001e1 	.word	0x200001e1
 8003dfc:	200007f1 	.word	0x200007f1
 8003e00:	20000840 	.word	0x20000840
 8003e04:	200007f0 	.word	0x200007f0
 8003e08:	20000508 	.word	0x20000508
 8003e0c:	20000300 	.word	0x20000300
 8003e10:	20000514 	.word	0x20000514
 8003e14:	200002e4 	.word	0x200002e4
 8003e18:	2000056c 	.word	0x2000056c
 8003e1c:	200002f0 	.word	0x200002f0
 8003e20:	2000030c 	.word	0x2000030c
 8003e24:	2000031c 	.word	0x2000031c
 8003e28:	20000578 	.word	0x20000578
 8003e2c:	200002d4 	.word	0x200002d4
 8003e30:	200002d8 	.word	0x200002d8
 8003e34:	200002e0 	.word	0x200002e0
 8003e38:	200001da 	.word	0x200001da
 8003e3c:	200007f4 	.word	0x200007f4
 8003e40:	200008f0 	.word	0x200008f0
 8003e44:	200002fc 	.word	0x200002fc
 8003e48:	20000567 	.word	0x20000567
 8003e4c:	20000939 	.word	0x20000939
 8003e50:	20000950 	.word	0x20000950
	{//�ȴ������������ָ��
		ClrWdt ();
 8003e54:	f7ff fef4 	bl	8003c40 <ClrWdt>
		if (rc)					// Message in receive buffer
 8003e58:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <main+0x488>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <main+0x21a>
			read_rx ();		// read and handle message
 8003e62:	f7fc fc19 	bl	8000698 <read_rx>
		if (sdo_index && !sdo_timer)
 8003e66:	4b9c      	ldr	r3, [pc, #624]	; (80040d8 <main+0x48c>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <main+0x238>
 8003e70:	4b9a      	ldr	r3, [pc, #616]	; (80040dc <main+0x490>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <main+0x238>
			{// SDO segment transfer time out
				sdo_index = 0;
 8003e78:	4b97      	ldr	r3, [pc, #604]	; (80040d8 <main+0x48c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	801a      	strh	r2, [r3, #0]
				abort_sdo (SDO_TIMEOUT);						//send SDO abort request
 8003e7e:	4898      	ldr	r0, [pc, #608]	; (80040e0 <main+0x494>)
 8003e80:	f7fd f982 	bl	8001188 <abort_sdo>
			}

		if (bFunc.hsecheck)
 8003e84:	4b97      	ldr	r3, [pc, #604]	; (80040e4 <main+0x498>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <main+0x256>
			{// HSE heartbeat check necessary
				bFunc.hsecheck = false;
 8003e92:	4a94      	ldr	r2, [pc, #592]	; (80040e4 <main+0x498>)
 8003e94:	7813      	ldrb	r3, [r2, #0]
 8003e96:	f36f 1345 	bfc	r3, #5, #1
 8003e9a:	7013      	strb	r3, [r2, #0]
				check_hse (0);									// check if a HSE is not available
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7ff fde7 	bl	8003a70 <check_hse>
			}
		if ((!heartbeat) && (hse_heartbeat) && (!bBusOffTimer))	//time to send heartbeat message
 8003ea2:	4b91      	ldr	r3, [pc, #580]	; (80040e8 <main+0x49c>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <main+0x278>
 8003eaa:	4b90      	ldr	r3, [pc, #576]	; (80040ec <main+0x4a0>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <main+0x278>
 8003eb2:	4b8f      	ldr	r3, [pc, #572]	; (80040f0 <main+0x4a4>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <main+0x278>
			{
				heartbeat = HEARTBEAT_TIME;
 8003eba:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <main+0x49c>)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
				CAN_transmit_heartbeat();
 8003ec0:	f7fd fcb8 	bl	8001834 <CAN_transmit_heartbeat>
			}

		if (errorcode)
 8003ec4:	4b8b      	ldr	r3, [pc, #556]	; (80040f4 <main+0x4a8>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <main+0x290>
			{// error occured
				transmit_error ();	// send emergency message
 8003ecc:	f7fd fb86 	bl	80015dc <transmit_error>
				errorregister = 0;	// reset error
 8003ed0:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <main+0x4ac>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
				errorcode = 0;
 8003ed6:	4b87      	ldr	r3, [pc, #540]	; (80040f4 <main+0x4a8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	801a      	strh	r2, [r3, #0]
			}
		if ((merker == BS_MERKER) && (!bBusOffTimer))
 8003edc:	4b87      	ldr	r3, [pc, #540]	; (80040fc <main+0x4b0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b55      	cmp	r3, #85	; 0x55
 8003ee2:	d113      	bne.n	8003f0c <main+0x2c0>
 8003ee4:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <main+0x4a4>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <main+0x2c0>
			{
				Init_Can();
 8003eec:	f7fc face 	bl	800048c <Init_Can>
				errorregister |= ER_COMMUNICATION;			// set error bits
 8003ef0:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <main+0x4ac>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f043 0310 	orr.w	r3, r3, #16
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <main+0x4ac>)
 8003efc:	701a      	strb	r2, [r3, #0]
				errorcode = E_BUS_OFF_A;									// set error code
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <main+0x4a8>)
 8003f00:	f248 1240 	movw	r2, #33088	; 0x8140
 8003f04:	801a      	strh	r2, [r3, #0]
				merker = 0;
 8003f06:	4b7d      	ldr	r3, [pc, #500]	; (80040fc <main+0x4b0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
			}
		if(nmtstate == TEST_MODE)
 8003f0c:	4b7c      	ldr	r3, [pc, #496]	; (8004100 <main+0x4b4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2bf0      	cmp	r3, #240	; 0xf0
 8003f12:	d101      	bne.n	8003f18 <main+0x2cc>
			{
				test_mode();
 8003f14:	f7ff f972 	bl	80031fc <test_mode>
	while (nmtstate == PRE_OP)
 8003f18:	4b79      	ldr	r3, [pc, #484]	; (8004100 <main+0x4b4>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f1e:	d099      	beq.n	8003e54 <main+0x208>
			}
	}
	hsetime = HSETIME ;		//start timer with different times
 8003f20:	4b78      	ldr	r3, [pc, #480]	; (8004104 <main+0x4b8>)
 8003f22:	2214      	movs	r2, #20
 8003f24:	701a      	strb	r2, [r3, #0]
	bFunc.hsecheck = false;					//no HSE check now
 8003f26:	4a6f      	ldr	r2, [pc, #444]	; (80040e4 <main+0x498>)
 8003f28:	7813      	ldrb	r3, [r2, #0]
 8003f2a:	f36f 1345 	bfc	r3, #5, #1
 8003f2e:	7013      	strb	r3, [r2, #0]
	ClrWdt();							//reset watchdog timer
 8003f30:	f7ff fe86 	bl	8003c40 <ClrWdt>

	mInOut_Number = (mExtern_Number * 16 + 22) % (MAX_IN + 1);
 8003f34:	4b74      	ldr	r3, [pc, #464]	; (8004108 <main+0x4bc>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	f103 0216 	add.w	r2, r3, #22
 8003f3e:	4b73      	ldr	r3, [pc, #460]	; (800410c <main+0x4c0>)
 8003f40:	fb83 1302 	smull	r1, r3, r3, r2
 8003f44:	4413      	add	r3, r2
 8003f46:	1199      	asrs	r1, r3, #6
 8003f48:	17d3      	asrs	r3, r2, #31
 8003f4a:	1ac9      	subs	r1, r1, r3
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a5b      	subs	r3, r3, r1
 8003f56:	1ad1      	subs	r1, r2, r3
 8003f58:	b2ca      	uxtb	r2, r1
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	; (8004110 <main+0x4c4>)
 8003f5c:	701a      	strb	r2, [r3, #0]
	mMax_InByte = (mInOut_Number >> 3) + 1;
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <main+0x4c4>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <main+0x4c8>)
 8003f6c:	701a      	strb	r2, [r3, #0]

	set_io_config ();
 8003f6e:	f7fe fcd1 	bl	8002914 <set_io_config>
	Arrow_Status();
 8003f72:	f7ff fbd7 	bl	8003724 <Arrow_Status>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (rc)													// Message in receive buffer
 8003f76:	4b57      	ldr	r3, [pc, #348]	; (80040d4 <main+0x488>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <main+0x338>
			read_rx ();										// read and handle message
 8003f80:	f7fc fb8a 	bl	8000698 <read_rx>
		if ((!heartbeat) && (hse_heartbeat) && (!bBusOffTimer))	//time to send heartbeat message
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <main+0x49c>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10c      	bne.n	8003fa6 <main+0x35a>
 8003f8c:	4b57      	ldr	r3, [pc, #348]	; (80040ec <main+0x4a0>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <main+0x35a>
 8003f94:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <main+0x4a4>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <main+0x35a>
			{// time to send heartbeat message
				heartbeat = HEARTBEAT_TIME;
 8003f9c:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <main+0x49c>)
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	701a      	strb	r2, [r3, #0]
				CAN_transmit_heartbeat();
 8003fa2:	f7fd fc47 	bl	8001834 <CAN_transmit_heartbeat>
			}
		if (bFunc.hsecheck)
 8003fa6:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <main+0x498>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <main+0x378>
			{// HSE heartbeat check necessary
				bFunc.hsecheck = false;
 8003fb4:	4a4b      	ldr	r2, [pc, #300]	; (80040e4 <main+0x498>)
 8003fb6:	7813      	ldrb	r3, [r2, #0]
 8003fb8:	f36f 1345 	bfc	r3, #5, #1
 8003fbc:	7013      	strb	r3, [r2, #0]
				check_hse (1);									// check if a HSE is not available
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	f7ff fd56 	bl	8003a70 <check_hse>
			}

		if(bTime.Time_100ms)
 8003fc4:	4b54      	ldr	r3, [pc, #336]	; (8004118 <main+0x4cc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d03f      	beq.n	8004052 <main+0x406>
			{
				Display_device();			//100ms ����һ����ʾ��Ϣ
 8003fd2:	f7ff fb83 	bl	80036dc <Display_device>
				if(!(buzzer & BUZ_WORKING))
 8003fd6:	4b51      	ldr	r3, [pc, #324]	; (800411c <main+0x4d0>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <main+0x3a2>
					Disable_BUZ();
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	484e      	ldr	r0, [pc, #312]	; (8004120 <main+0x4d4>)
 8003fe8:	f001 ff47 	bl	8005e7a <HAL_GPIO_WritePin>
 8003fec:	e02c      	b.n	8004048 <main+0x3fc>
				else if(buzzer & BUZ_PULSE)
 8003fee:	4b4b      	ldr	r3, [pc, #300]	; (800411c <main+0x4d0>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <main+0x3f2>
					{
						if(bFunc.buz_state)
 8003ffa:	4b3a      	ldr	r3, [pc, #232]	; (80040e4 <main+0x498>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <main+0x3c8>
							Enable_BUZ();
 8004008:	2201      	movs	r2, #1
 800400a:	2101      	movs	r1, #1
 800400c:	4844      	ldr	r0, [pc, #272]	; (8004120 <main+0x4d4>)
 800400e:	f001 ff34 	bl	8005e7a <HAL_GPIO_WritePin>
 8004012:	e00c      	b.n	800402e <main+0x3e2>
						else if(!att_alarm_timer)
 8004014:	4b43      	ldr	r3, [pc, #268]	; (8004124 <main+0x4d8>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <main+0x3e2>
							{
								Disable_BUZ();
 800401c:	2200      	movs	r2, #0
 800401e:	2101      	movs	r1, #1
 8004020:	483f      	ldr	r0, [pc, #252]	; (8004120 <main+0x4d4>)
 8004022:	f001 ff2a 	bl	8005e7a <HAL_GPIO_WritePin>
								att_alarm_timer = buz_alarm_timer;
 8004026:	4b40      	ldr	r3, [pc, #256]	; (8004128 <main+0x4dc>)
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <main+0x4d8>)
 800402c:	701a      	strb	r2, [r3, #0]
							}
						if(!buz_alarm_totaltimer)
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <main+0x4e0>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <main+0x3fc>
							buzzer &= !(BUZ_WORKING | BUZ_PULSE);
 8004036:	4b39      	ldr	r3, [pc, #228]	; (800411c <main+0x4d0>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e004      	b.n	8004048 <main+0x3fc>
					}
				else
					Enable_BUZ();
 800403e:	2201      	movs	r2, #1
 8004040:	2101      	movs	r1, #1
 8004042:	4837      	ldr	r0, [pc, #220]	; (8004120 <main+0x4d4>)
 8004044:	f001 ff19 	bl	8005e7a <HAL_GPIO_WritePin>
				bTime.Time_100ms = 0;
 8004048:	4a33      	ldr	r2, [pc, #204]	; (8004118 <main+0x4cc>)
 800404a:	7813      	ldrb	r3, [r2, #0]
 800404c:	f36f 0341 	bfc	r3, #1, #1
 8004050:	7013      	strb	r3, [r2, #0]
			}
		if(bTime.Time_2s)
 8004052:	4b31      	ldr	r3, [pc, #196]	; (8004118 <main+0x4cc>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <main+0x422>
			{
				Arrow_Status();
 8004060:	f7ff fb60 	bl	8003724 <Arrow_Status>
				bTime.Time_2s = 0;
 8004064:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <main+0x4cc>)
 8004066:	7813      	ldrb	r3, [r2, #0]
 8004068:	f36f 03c3 	bfc	r3, #3, #1
 800406c:	7013      	strb	r3, [r2, #0]
			}
		if(bTime.Time_10ms)
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <main+0x4cc>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <main+0x442>
			{
				ReadInput();		//��ȡ���еİ�ť����
 800407c:	f7fe ff90 	bl	8002fa0 <ReadInput>
				Out_Prog(); 					//�������е����(������ʾ���)
 8004080:	f7fe ffa2 	bl	8002fc8 <Out_Prog>
				bTime.Time_10ms = 0;
 8004084:	4a24      	ldr	r2, [pc, #144]	; (8004118 <main+0x4cc>)
 8004086:	7813      	ldrb	r3, [r2, #0]
 8004088:	f36f 0300 	bfc	r3, #0, #1
 800408c:	7013      	strb	r3, [r2, #0]
			}

		for(i = 0; i < mMax_InByte; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	71fb      	strb	r3, [r7, #7]
 8004092:	e00e      	b.n	80040b2 <main+0x466>
	 		instate[i] = in[i] ^ in_polarity[i];		// read input state; invert if desired
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a26      	ldr	r2, [pc, #152]	; (8004130 <main+0x4e4>)
 8004098:	5cd3      	ldrb	r3, [r2, r3]
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	4a25      	ldr	r2, [pc, #148]	; (8004134 <main+0x4e8>)
 80040a0:	5cd2      	ldrb	r2, [r2, r3]
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	404a      	eors	r2, r1
 80040a6:	b2d1      	uxtb	r1, r2
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <main+0x4ec>)
 80040aa:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i < mMax_InByte; i++)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	3301      	adds	r3, #1
 80040b0:	71fb      	strb	r3, [r7, #7]
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <main+0x4c8>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	79fa      	ldrb	r2, [r7, #7]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3eb      	bcc.n	8004094 <main+0x448>
		if (Check_InChange(instate, inold))					// input state changed
 80040bc:	491f      	ldr	r1, [pc, #124]	; (800413c <main+0x4f0>)
 80040be:	481e      	ldr	r0, [pc, #120]	; (8004138 <main+0x4ec>)
 80040c0:	f7fe ff38 	bl	8002f34 <Check_InChange>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f43f af55 	beq.w	8003f76 <main+0x32a>
			{
				for (i = 0; i < mInOut_Number; i++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	71fb      	strb	r3, [r7, #7]
 80040d0:	e0b2      	b.n	8004238 <main+0x5ec>
 80040d2:	bf00      	nop
 80040d4:	200001e8 	.word	0x200001e8
 80040d8:	200001d6 	.word	0x200001d6
 80040dc:	200001d9 	.word	0x200001d9
 80040e0:	05040000 	.word	0x05040000
 80040e4:	20000894 	.word	0x20000894
 80040e8:	20000939 	.word	0x20000939
 80040ec:	200001db 	.word	0x200001db
 80040f0:	200001dc 	.word	0x200001dc
 80040f4:	200001e2 	.word	0x200001e2
 80040f8:	200001e1 	.word	0x200001e1
 80040fc:	200001e0 	.word	0x200001e0
 8004100:	200007f1 	.word	0x200007f1
 8004104:	200007f0 	.word	0x200007f0
 8004108:	200001da 	.word	0x200001da
 800410c:	e6c2b449 	.word	0xe6c2b449
 8004110:	20000189 	.word	0x20000189
 8004114:	20000938 	.word	0x20000938
 8004118:	200002fc 	.word	0x200002fc
 800411c:	200001d4 	.word	0x200001d4
 8004120:	40010800 	.word	0x40010800
 8004124:	200001dd 	.word	0x200001dd
 8004128:	200001de 	.word	0x200001de
 800412c:	200001df 	.word	0x200001df
 8004130:	20000300 	.word	0x20000300
 8004134:	200002f0 	.word	0x200002f0
 8004138:	2000056c 	.word	0x2000056c
 800413c:	200002e4 	.word	0x200002e4
					{// check all inputs
						help = bit_select (instate[i/8], i%8);
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	08db      	lsrs	r3, r3, #3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	4b47      	ldr	r3, [pc, #284]	; (8004268 <main+0x61c>)
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	fa42 f303 	asr.w	r3, r2, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b42      	ldr	r3, [pc, #264]	; (800426c <main+0x620>)
 8004162:	701a      	strb	r2, [r3, #0]
						if (help != bit_select (inold[i/8], i%8))
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <main+0x620>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	4619      	mov	r1, r3
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <main+0x624>)
 8004174:	5c5b      	ldrb	r3, [r3, r1]
 8004176:	4619      	mov	r1, r3
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	fa41 f303 	asr.w	r3, r1, r3
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	429a      	cmp	r2, r3
 8004188:	d04e      	beq.n	8004228 <main+0x5dc>
							{// input has changed
								inpar [i][IO_STATE] = help;					// set input state
 800418a:	79fa      	ldrb	r2, [r7, #7]
 800418c:	4b37      	ldr	r3, [pc, #220]	; (800426c <main+0x620>)
 800418e:	7818      	ldrb	r0, [r3, #0]
 8004190:	4938      	ldr	r1, [pc, #224]	; (8004274 <main+0x628>)
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	440b      	add	r3, r1
 800419a:	3305      	adds	r3, #5
 800419c:	4602      	mov	r2, r0
 800419e:	701a      	strb	r2, [r3, #0]
								if (inpar [i][IO_BASIC_FUNC])				// input has a function
 80041a0:	79fa      	ldrb	r2, [r7, #7]
 80041a2:	4934      	ldr	r1, [pc, #208]	; (8004274 <main+0x628>)
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	440b      	add	r3, r1
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03a      	beq.n	8004228 <main+0x5dc>
									{
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 80041b2:	2300      	movs	r3, #0
 80041b4:	71bb      	strb	r3, [r7, #6]
 80041b6:	e00e      	b.n	80041d6 <main+0x58a>
											virt_in [j] = inpar [i][j];
 80041b8:	79fa      	ldrb	r2, [r7, #7]
 80041ba:	79b8      	ldrb	r0, [r7, #6]
 80041bc:	79b9      	ldrb	r1, [r7, #6]
 80041be:	4c2d      	ldr	r4, [pc, #180]	; (8004274 <main+0x628>)
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	4423      	add	r3, r4
 80041c8:	4403      	add	r3, r0
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <main+0x62c>)
 80041ce:	545a      	strb	r2, [r3, r1]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 80041d0:	79bb      	ldrb	r3, [r7, #6]
 80041d2:	3301      	adds	r3, #1
 80041d4:	71bb      	strb	r3, [r7, #6]
 80041d6:	79bb      	ldrb	r3, [r7, #6]
 80041d8:	2b06      	cmp	r3, #6
 80041da:	d9ed      	bls.n	80041b8 <main+0x56c>
										switch (inpar [i][IO_BASIC_FUNC])
 80041dc:	79fa      	ldrb	r2, [r7, #7]
 80041de:	4925      	ldr	r1, [pc, #148]	; (8004274 <main+0x628>)
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	440b      	add	r3, r1
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b84      	cmp	r3, #132	; 0x84
 80041ec:	d015      	beq.n	800421a <main+0x5ce>
 80041ee:	2b84      	cmp	r3, #132	; 0x84
 80041f0:	dc16      	bgt.n	8004220 <main+0x5d4>
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d009      	beq.n	800420a <main+0x5be>
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d112      	bne.n	8004220 <main+0x5d4>
											{
												case (CAR_CALL):						// standard car call
													if (help)
 80041fa:	4b1c      	ldr	r3, [pc, #112]	; (800426c <main+0x620>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d014      	beq.n	800422c <main+0x5e0>
														transmit_in (virt_in);
 8004202:	481d      	ldr	r0, [pc, #116]	; (8004278 <main+0x62c>)
 8004204:	f7fd fa62 	bl	80016cc <transmit_in>
													break;
 8004208:	e010      	b.n	800422c <main+0x5e0>

												case (HALL_CALL):						// standard hall call
													if (help)
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <main+0x620>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00e      	beq.n	8004230 <main+0x5e4>
														{// landing call misuse
															transmit_in (virt_in);
 8004212:	4819      	ldr	r0, [pc, #100]	; (8004278 <main+0x62c>)
 8004214:	f7fd fa5a 	bl	80016cc <transmit_in>
														}
													break;
 8004218:	e00a      	b.n	8004230 <main+0x5e4>

												case (LOAD_IN):							// load measurement input
													transmit_load ();
 800421a:	f7fd faa3 	bl	8001764 <transmit_load>
													break;
 800421e:	e008      	b.n	8004232 <main+0x5e6>

												default:
													transmit_in (virt_in);
 8004220:	4815      	ldr	r0, [pc, #84]	; (8004278 <main+0x62c>)
 8004222:	f7fd fa53 	bl	80016cc <transmit_in>
													break;
 8004226:	e004      	b.n	8004232 <main+0x5e6>
											}
				 					}
 8004228:	bf00      	nop
 800422a:	e002      	b.n	8004232 <main+0x5e6>
													break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <main+0x5e6>
													break;
 8004230:	bf00      	nop
				for (i = 0; i < mInOut_Number; i++)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	3301      	adds	r3, #1
 8004236:	71fb      	strb	r3, [r7, #7]
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <main+0x630>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	79fa      	ldrb	r2, [r7, #7]
 800423e:	429a      	cmp	r2, r3
 8004240:	f4ff af7e 	bcc.w	8004140 <main+0x4f4>
							}
					}
				for(i=0; i<mMax_InByte; i++)
 8004244:	2300      	movs	r3, #0
 8004246:	71fb      	strb	r3, [r7, #7]
 8004248:	e008      	b.n	800425c <main+0x610>
					inold[i] = instate[i];
 800424a:	79fa      	ldrb	r2, [r7, #7]
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	4906      	ldr	r1, [pc, #24]	; (8004268 <main+0x61c>)
 8004250:	5c89      	ldrb	r1, [r1, r2]
 8004252:	4a07      	ldr	r2, [pc, #28]	; (8004270 <main+0x624>)
 8004254:	54d1      	strb	r1, [r2, r3]
				for(i=0; i<mMax_InByte; i++)
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	3301      	adds	r3, #1
 800425a:	71fb      	strb	r3, [r7, #7]
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <main+0x634>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	79fa      	ldrb	r2, [r7, #7]
 8004262:	429a      	cmp	r2, r3
 8004264:	d3f1      	bcc.n	800424a <main+0x5fe>
		if (rc)													// Message in receive buffer
 8004266:	e686      	b.n	8003f76 <main+0x32a>
 8004268:	2000056c 	.word	0x2000056c
 800426c:	2000083f 	.word	0x2000083f
 8004270:	200002e4 	.word	0x200002e4
 8004274:	2000031c 	.word	0x2000031c
 8004278:	20000558 	.word	0x20000558
 800427c:	20000189 	.word	0x20000189
 8004280:	20000938 	.word	0x20000938

08004284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b090      	sub	sp, #64	; 0x40
 8004288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800428a:	f107 0318 	add.w	r3, r7, #24
 800428e:	2228      	movs	r2, #40	; 0x28
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f003 facc 	bl	8007830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042b8:	2302      	movs	r3, #2
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042c8:	f107 0318 	add.w	r3, r7, #24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 fded 	bl	8005eac <HAL_RCC_OscConfig>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80042d8:	f000 f9e2 	bl	80046a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042dc:	230f      	movs	r3, #15
 80042de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042e0:	2302      	movs	r3, #2
 80042e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	2102      	movs	r1, #2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f002 f857 	bl	80063ac <HAL_RCC_ClockConfig>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004304:	f000 f9cc 	bl	80046a0 <Error_Handler>
  }
}
 8004308:	bf00      	nop
 800430a:	3740      	adds	r7, #64	; 0x40
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <MX_CAN_Init+0x64>)
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <MX_CAN_Init+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <MX_CAN_Init+0x64>)
 800431c:	2210      	movs	r2, #16
 800431e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <MX_CAN_Init+0x64>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004326:	4b13      	ldr	r3, [pc, #76]	; (8004374 <MX_CAN_Init+0x64>)
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <MX_CAN_Init+0x64>)
 800432e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004332:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <MX_CAN_Init+0x64>)
 8004336:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800433a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <MX_CAN_Init+0x64>)
 800433e:	2200      	movs	r2, #0
 8004340:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <MX_CAN_Init+0x64>)
 8004344:	2200      	movs	r2, #0
 8004346:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <MX_CAN_Init+0x64>)
 800434a:	2200      	movs	r2, #0
 800434c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <MX_CAN_Init+0x64>)
 8004350:	2201      	movs	r2, #1
 8004352:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <MX_CAN_Init+0x64>)
 8004356:	2200      	movs	r2, #0
 8004358:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <MX_CAN_Init+0x64>)
 800435c:	2200      	movs	r2, #0
 800435e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <MX_CAN_Init+0x64>)
 8004362:	f000 fc89 	bl	8004c78 <HAL_CAN_Init>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800436c:	f000 f998 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000530 	.word	0x20000530
 8004378:	40006400 	.word	0x40006400

0800437c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <MX_SPI1_Init+0x68>)
 8004384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800438c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <MX_SPI1_Init+0x64>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <MX_SPI1_Init+0x64>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043b0:	2228      	movs	r2, #40	; 0x28
 80043b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043bc:	2200      	movs	r2, #0
 80043be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043c8:	220a      	movs	r2, #10
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043cc:	4804      	ldr	r0, [pc, #16]	; (80043e0 <MX_SPI1_Init+0x64>)
 80043ce:	f002 f987 	bl	80066e0 <HAL_SPI_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80043d8:	f000 f962 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000898 	.word	0x20000898
 80043e4:	40013000 	.word	0x40013000

080043e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ee:	f107 0308 	add.w	r3, r7, #8
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043fc:	463b      	mov	r3, r7
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004404:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <MX_TIM1_Init+0x98>)
 8004406:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <MX_TIM1_Init+0x9c>)
 8004408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <MX_TIM1_Init+0x98>)
 800440c:	2263      	movs	r2, #99	; 0x63
 800440e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <MX_TIM1_Init+0x98>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <MX_TIM1_Init+0x98>)
 8004418:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800441c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <MX_TIM1_Init+0x98>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004424:	4b16      	ldr	r3, [pc, #88]	; (8004480 <MX_TIM1_Init+0x98>)
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442a:	4b15      	ldr	r3, [pc, #84]	; (8004480 <MX_TIM1_Init+0x98>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004430:	4813      	ldr	r0, [pc, #76]	; (8004480 <MX_TIM1_Init+0x98>)
 8004432:	f002 fbbb 	bl	8006bac <HAL_TIM_Base_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800443c:	f000 f930 	bl	80046a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	4619      	mov	r1, r3
 800444c:	480c      	ldr	r0, [pc, #48]	; (8004480 <MX_TIM1_Init+0x98>)
 800444e:	f002 fd57 	bl	8006f00 <HAL_TIM_ConfigClockSource>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004458:	f000 f922 	bl	80046a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800445c:	2300      	movs	r3, #0
 800445e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004464:	463b      	mov	r3, r7
 8004466:	4619      	mov	r1, r3
 8004468:	4805      	ldr	r0, [pc, #20]	; (8004480 <MX_TIM1_Init+0x98>)
 800446a:	f002 ff29 	bl	80072c0 <HAL_TIMEx_MasterConfigSynchronization>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004474:	f000 f914 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200007f4 	.word	0x200007f4
 8004484:	40012c00 	.word	0x40012c00

08004488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800449c:	463b      	mov	r3, r7
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <MX_TIM2_Init+0x98>)
 80044a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5999;
 80044ac:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <MX_TIM2_Init+0x98>)
 80044ae:	f241 726f 	movw	r2, #5999	; 0x176f
 80044b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <MX_TIM2_Init+0x98>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5999;
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <MX_TIM2_Init+0x98>)
 80044bc:	f241 726f 	movw	r2, #5999	; 0x176f
 80044c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <MX_TIM2_Init+0x98>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <MX_TIM2_Init+0x98>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044ce:	4814      	ldr	r0, [pc, #80]	; (8004520 <MX_TIM2_Init+0x98>)
 80044d0:	f002 fb6c 	bl	8006bac <HAL_TIM_Base_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80044da:	f000 f8e1 	bl	80046a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4619      	mov	r1, r3
 80044ea:	480d      	ldr	r0, [pc, #52]	; (8004520 <MX_TIM2_Init+0x98>)
 80044ec:	f002 fd08 	bl	8006f00 <HAL_TIM_ConfigClockSource>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80044f6:	f000 f8d3 	bl	80046a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004502:	463b      	mov	r3, r7
 8004504:	4619      	mov	r1, r3
 8004506:	4806      	ldr	r0, [pc, #24]	; (8004520 <MX_TIM2_Init+0x98>)
 8004508:	f002 feda 	bl	80072c0 <HAL_TIMEx_MasterConfigSynchronization>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004512:	f000 f8c5 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200008f0 	.word	0x200008f0

08004524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <MX_USART1_UART_Init+0x50>)
 800452c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800453e:	2200      	movs	r2, #0
 8004540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004544:	2200      	movs	r2, #0
 8004546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800454a:	220c      	movs	r2, #12
 800454c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004550:	2200      	movs	r2, #0
 8004552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 8004556:	2200      	movs	r2, #0
 8004558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800455a:	4805      	ldr	r0, [pc, #20]	; (8004570 <MX_USART1_UART_Init+0x4c>)
 800455c:	f002 ff20 	bl	80073a0 <HAL_UART_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004566:	f000 f89b 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200007ac 	.word	0x200007ac
 8004574:	40013800 	.word	0x40013800

08004578 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800457c:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <MX_USART2_Init+0x50>)
 800457e:	4a13      	ldr	r2, [pc, #76]	; (80045cc <MX_USART2_Init+0x54>)
 8004580:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <MX_USART2_Init+0x50>)
 8004584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004588:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800458a:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <MX_USART2_Init+0x50>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <MX_USART2_Init+0x50>)
 8004592:	2200      	movs	r2, #0
 8004594:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <MX_USART2_Init+0x50>)
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <MX_USART2_Init+0x50>)
 800459e:	220c      	movs	r2, #12
 80045a0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <MX_USART2_Init+0x50>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <MX_USART2_Init+0x50>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <MX_USART2_Init+0x50>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80045b4:	4804      	ldr	r0, [pc, #16]	; (80045c8 <MX_USART2_Init+0x50>)
 80045b6:	f002 ffcf 	bl	8007558 <HAL_USART_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80045c0:	f000 f86e 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000850 	.word	0x20000850
 80045cc:	40004400 	.word	0x40004400

080045d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d6:	f107 0310 	add.w	r3, r7, #16
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <MX_GPIO_Init+0xc4>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <MX_GPIO_Init+0xc4>)
 80045ea:	f043 0320 	orr.w	r3, r3, #32
 80045ee:	6193      	str	r3, [r2, #24]
 80045f0:	4b28      	ldr	r3, [pc, #160]	; (8004694 <MX_GPIO_Init+0xc4>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <MX_GPIO_Init+0xc4>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	4a24      	ldr	r2, [pc, #144]	; (8004694 <MX_GPIO_Init+0xc4>)
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	6193      	str	r3, [r2, #24]
 8004608:	4b22      	ldr	r3, [pc, #136]	; (8004694 <MX_GPIO_Init+0xc4>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <MX_GPIO_Init+0xc4>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <MX_GPIO_Init+0xc4>)
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	6193      	str	r3, [r2, #24]
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <MX_GPIO_Init+0xc4>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Out_Pin|HC595_SEL_Pin|UART_DE_Pin|HC166_SEL_Pin, GPIO_PIN_RESET);
 800462c:	2200      	movs	r2, #0
 800462e:	f248 1103 	movw	r1, #33027	; 0x8103
 8004632:	4819      	ldr	r0, [pc, #100]	; (8004698 <MX_GPIO_Init+0xc8>)
 8004634:	f001 fc21 	bl	8005e7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Buzzer_Out_Pin HC595_SEL_Pin UART_DE_Pin HC166_SEL_Pin */
  GPIO_InitStruct.Pin = Buzzer_Out_Pin|HC595_SEL_Pin|UART_DE_Pin|HC166_SEL_Pin;
 8004638:	f248 1303 	movw	r3, #33027	; 0x8103
 800463c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800463e:	2301      	movs	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004646:	2302      	movs	r3, #2
 8004648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464a:	f107 0310 	add.w	r3, r7, #16
 800464e:	4619      	mov	r1, r3
 8004650:	4811      	ldr	r0, [pc, #68]	; (8004698 <MX_GPIO_Init+0xc8>)
 8004652:	f001 fa77 	bl	8005b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : IC_IN1_Pin IC_IN2_Pin IC_IN3_Pin IC_IN11_Pin
                           IC_IN12_Pin IC_IN13_Pin IC_IN14_Pin IC_IN4_Pin
                           IC_IN5_Pin IC_IN6_Pin IC_IN7_Pin IC_IN8_Pin
                           IC_IN9_Pin IC_IN10_Pin */
  GPIO_InitStruct.Pin = IC_IN1_Pin|IC_IN2_Pin|IC_IN3_Pin|IC_IN11_Pin
 8004656:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800465a:	613b      	str	r3, [r7, #16]
                          |IC_IN12_Pin|IC_IN13_Pin|IC_IN14_Pin|IC_IN4_Pin
                          |IC_IN5_Pin|IC_IN6_Pin|IC_IN7_Pin|IC_IN8_Pin
                          |IC_IN9_Pin|IC_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	4619      	mov	r1, r3
 800466a:	480c      	ldr	r0, [pc, #48]	; (800469c <MX_GPIO_Init+0xcc>)
 800466c:	f001 fa6a 	bl	8005b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : NODE_ID_Pin */
  GPIO_InitStruct.Pin = NODE_ID_Pin;
 8004670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800467a:	2301      	movs	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NODE_ID_GPIO_Port, &GPIO_InitStruct);
 800467e:	f107 0310 	add.w	r3, r7, #16
 8004682:	4619      	mov	r1, r3
 8004684:	4805      	ldr	r0, [pc, #20]	; (800469c <MX_GPIO_Init+0xcc>)
 8004686:	f001 fa5d 	bl	8005b44 <HAL_GPIO_Init>

}
 800468a:	bf00      	nop
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	40010800 	.word	0x40010800
 800469c:	40010c00 	.word	0x40010c00

080046a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046a4:	b672      	cpsid	i
}
 80046a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046a8:	e7fe      	b.n	80046a8 <Error_Handler+0x8>
	...

080046ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <HAL_MspInit+0x5c>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <HAL_MspInit+0x5c>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6193      	str	r3, [r2, #24]
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_MspInit+0x5c>)
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_MspInit+0x5c>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <HAL_MspInit+0x5c>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	61d3      	str	r3, [r2, #28]
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_MspInit+0x5c>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_MspInit+0x60>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <HAL_MspInit+0x60>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40021000 	.word	0x40021000
 800470c:	40010000 	.word	0x40010000

08004710 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 0310 	add.w	r3, r7, #16
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2c      	ldr	r2, [pc, #176]	; (80047dc <HAL_CAN_MspInit+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d151      	bne.n	80047d4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_CAN_MspInit+0xd0>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <HAL_CAN_MspInit+0xd0>)
 8004736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800473a:	61d3      	str	r3, [r2, #28]
 800473c:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_CAN_MspInit+0xd0>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <HAL_CAN_MspInit+0xd0>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <HAL_CAN_MspInit+0xd0>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6193      	str	r3, [r2, #24]
 8004754:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <HAL_CAN_MspInit+0xd0>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476e:	f107 0310 	add.w	r3, r7, #16
 8004772:	4619      	mov	r1, r3
 8004774:	481b      	ldr	r0, [pc, #108]	; (80047e4 <HAL_CAN_MspInit+0xd4>)
 8004776:	f001 f9e5 	bl	8005b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800477a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	2302      	movs	r3, #2
 8004782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004784:	2303      	movs	r3, #3
 8004786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004788:	f107 0310 	add.w	r3, r7, #16
 800478c:	4619      	mov	r1, r3
 800478e:	4815      	ldr	r0, [pc, #84]	; (80047e4 <HAL_CAN_MspInit+0xd4>)
 8004790:	f001 f9d8 	bl	8005b44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2100      	movs	r1, #0
 8004798:	2013      	movs	r0, #19
 800479a:	f001 f998 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800479e:	2013      	movs	r0, #19
 80047a0:	f001 f9b1 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	2014      	movs	r0, #20
 80047aa:	f001 f990 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80047ae:	2014      	movs	r0, #20
 80047b0:	f001 f9a9 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80047b4:	2200      	movs	r2, #0
 80047b6:	2100      	movs	r1, #0
 80047b8:	2015      	movs	r0, #21
 80047ba:	f001 f988 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80047be:	2015      	movs	r0, #21
 80047c0:	f001 f9a1 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2100      	movs	r1, #0
 80047c8:	2016      	movs	r0, #22
 80047ca:	f001 f980 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80047ce:	2016      	movs	r0, #22
 80047d0:	f001 f999 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80047d4:	bf00      	nop
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40006400 	.word	0x40006400
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40010800 	.word	0x40010800

080047e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_SPI_MspInit+0x88>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d12f      	bne.n	8004868 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_SPI_MspInit+0x8c>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_SPI_MspInit+0x8c>)
 800480e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004812:	6193      	str	r3, [r2, #24]
 8004814:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_SPI_MspInit+0x8c>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <HAL_SPI_MspInit+0x8c>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <HAL_SPI_MspInit+0x8c>)
 8004826:	f043 0304 	orr.w	r3, r3, #4
 800482a:	6193      	str	r3, [r2, #24]
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <HAL_SPI_MspInit+0x8c>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|GPIO_PIN_7;
 8004838:	23a0      	movs	r3, #160	; 0xa0
 800483a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004840:	2303      	movs	r3, #3
 8004842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004844:	f107 0310 	add.w	r3, r7, #16
 8004848:	4619      	mov	r1, r3
 800484a:	480b      	ldr	r0, [pc, #44]	; (8004878 <HAL_SPI_MspInit+0x90>)
 800484c:	f001 f97a 	bl	8005b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004850:	2340      	movs	r3, #64	; 0x40
 8004852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4619      	mov	r1, r3
 8004862:	4805      	ldr	r0, [pc, #20]	; (8004878 <HAL_SPI_MspInit+0x90>)
 8004864:	f001 f96e 	bl	8005b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004868:	bf00      	nop
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40013000 	.word	0x40013000
 8004874:	40021000 	.word	0x40021000
 8004878:	40010800 	.word	0x40010800

0800487c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <HAL_TIM_Base_MspInit+0x88>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d11c      	bne.n	80048c8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_TIM_Base_MspInit+0x8c>)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <HAL_TIM_Base_MspInit+0x8c>)
 8004894:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004898:	6193      	str	r3, [r2, #24]
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_TIM_Base_MspInit+0x8c>)
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80048a6:	2200      	movs	r2, #0
 80048a8:	2100      	movs	r1, #0
 80048aa:	2018      	movs	r0, #24
 80048ac:	f001 f90f 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80048b0:	2018      	movs	r0, #24
 80048b2:	f001 f928 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	2019      	movs	r0, #25
 80048bc:	f001 f907 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80048c0:	2019      	movs	r0, #25
 80048c2:	f001 f920 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048c6:	e018      	b.n	80048fa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d113      	bne.n	80048fa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <HAL_TIM_Base_MspInit+0x8c>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	4a0c      	ldr	r2, [pc, #48]	; (8004908 <HAL_TIM_Base_MspInit+0x8c>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	61d3      	str	r3, [r2, #28]
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <HAL_TIM_Base_MspInit+0x8c>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	201c      	movs	r0, #28
 80048f0:	f001 f8ed 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048f4:	201c      	movs	r0, #28
 80048f6:	f001 f906 	bl	8005b06 <HAL_NVIC_EnableIRQ>
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004914:	f107 0310 	add.w	r3, r7, #16
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <HAL_UART_MspInit+0x8c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d131      	bne.n	8004990 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_UART_MspInit+0x90>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_UART_MspInit+0x90>)
 8004932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004936:	6193      	str	r3, [r2, #24]
 8004938:	4b18      	ldr	r3, [pc, #96]	; (800499c <HAL_UART_MspInit+0x90>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_UART_MspInit+0x90>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <HAL_UART_MspInit+0x90>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6193      	str	r3, [r2, #24]
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_UART_MspInit+0x90>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800495c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004962:	2302      	movs	r3, #2
 8004964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004966:	2303      	movs	r3, #3
 8004968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4619      	mov	r1, r3
 8004970:	480b      	ldr	r0, [pc, #44]	; (80049a0 <HAL_UART_MspInit+0x94>)
 8004972:	f001 f8e7 	bl	8005b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f107 0310 	add.w	r3, r7, #16
 8004988:	4619      	mov	r1, r3
 800498a:	4805      	ldr	r0, [pc, #20]	; (80049a0 <HAL_UART_MspInit+0x94>)
 800498c:	f001 f8da 	bl	8005b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40013800 	.word	0x40013800
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010800 	.word	0x40010800

080049a4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ac:	f107 0310 	add.w	r3, r7, #16
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <HAL_USART_MspInit+0x88>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d12f      	bne.n	8004a24 <HAL_USART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <HAL_USART_MspInit+0x8c>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <HAL_USART_MspInit+0x8c>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	61d3      	str	r3, [r2, #28]
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <HAL_USART_MspInit+0x8c>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <HAL_USART_MspInit+0x8c>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <HAL_USART_MspInit+0x8c>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6193      	str	r3, [r2, #24]
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_USART_MspInit+0x8c>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80049f4:	2314      	movs	r3, #20
 80049f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049fc:	2303      	movs	r3, #3
 80049fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4619      	mov	r1, r3
 8004a06:	480b      	ldr	r0, [pc, #44]	; (8004a34 <HAL_USART_MspInit+0x90>)
 8004a08:	f001 f89c 	bl	8005b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4805      	ldr	r0, [pc, #20]	; (8004a34 <HAL_USART_MspInit+0x90>)
 8004a20:	f001 f890 	bl	8005b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a24:	bf00      	nop
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40004400 	.word	0x40004400
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40010800 	.word	0x40010800

08004a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a3c:	e7fe      	b.n	8004a3c <NMI_Handler+0x4>

08004a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a42:	e7fe      	b.n	8004a42 <HardFault_Handler+0x4>

08004a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a48:	e7fe      	b.n	8004a48 <MemManage_Handler+0x4>

08004a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a4e:	e7fe      	b.n	8004a4e <BusFault_Handler+0x4>

08004a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <UsageFault_Handler+0x4>

08004a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a7e:	f000 f8bb 	bl	8004bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004a8c:	4802      	ldr	r0, [pc, #8]	; (8004a98 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8004a8e:	f000 fd31 	bl	80054f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000530 	.word	0x20000530

08004a9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004aa0:	4802      	ldr	r0, [pc, #8]	; (8004aac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004aa2:	f000 fd27 	bl	80054f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000530 	.word	0x20000530

08004ab0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004ab4:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <CAN1_RX1_IRQHandler+0x10>)
 8004ab6:	f000 fd1d 	bl	80054f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000530 	.word	0x20000530

08004ac4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <CAN1_SCE_IRQHandler+0x10>)
 8004aca:	f000 fd13 	bl	80054f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000530 	.word	0x20000530

08004ad8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <TIM1_BRK_IRQHandler+0x10>)
 8004ade:	f002 f907 	bl	8006cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200007f4 	.word	0x200007f4

08004aec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <TIM1_UP_IRQHandler+0x10>)
 8004af2:	f002 f8fd 	bl	8006cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200007f4 	.word	0x200007f4

08004b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b04:	4802      	ldr	r0, [pc, #8]	; (8004b10 <TIM2_IRQHandler+0x10>)
 8004b06:	f002 f8f3 	bl	8006cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200008f0 	.word	0x200008f0

08004b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b20:	480c      	ldr	r0, [pc, #48]	; (8004b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b22:	490d      	ldr	r1, [pc, #52]	; (8004b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b28:	e002      	b.n	8004b30 <LoopCopyDataInit>

08004b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b2e:	3304      	adds	r3, #4

08004b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b34:	d3f9      	bcc.n	8004b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b38:	4c0a      	ldr	r4, [pc, #40]	; (8004b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b3c:	e001      	b.n	8004b42 <LoopFillZerobss>

08004b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b40:	3204      	adds	r2, #4

08004b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b44:	d3fb      	bcc.n	8004b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b46:	f7ff ffe5 	bl	8004b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b4a:	f002 fe3f 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b4e:	f7ff f87d 	bl	8003c4c <main>
  bx lr
 8004b52:	4770      	bx	lr
  ldr r0, =_sdata
 8004b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b58:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8004b5c:	080078e0 	.word	0x080078e0
  ldr r2, =_sbss
 8004b60:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8004b64:	20000958 	.word	0x20000958

08004b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b68:	e7fe      	b.n	8004b68 <ADC1_2_IRQHandler>
	...

08004b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_Init+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <HAL_Init+0x28>)
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	f000 ff9b 	bl	8005ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f000 f808 	bl	8004b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b88:	f7ff fd90 	bl	80046ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40022000 	.word	0x40022000

08004b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_InitTick+0x54>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_InitTick+0x58>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 ffb7 	bl	8005b2a <HAL_SYSTICK_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00e      	b.n	8004be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d80a      	bhi.n	8004be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	f000 ff7b 	bl	8005ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <HAL_InitTick+0x5c>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2000018c 	.word	0x2000018c
 8004bf0:	20000194 	.word	0x20000194
 8004bf4:	20000190 	.word	0x20000190

08004bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_IncTick+0x1c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_IncTick+0x20>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	4a03      	ldr	r2, [pc, #12]	; (8004c18 <HAL_IncTick+0x20>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	20000194 	.word	0x20000194
 8004c18:	20000954 	.word	0x20000954

08004c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c20:	4b02      	ldr	r3, [pc, #8]	; (8004c2c <HAL_GetTick+0x10>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	20000954 	.word	0x20000954

08004c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c38:	f7ff fff0 	bl	8004c1c <HAL_GetTick>
 8004c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d005      	beq.n	8004c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_Delay+0x44>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c56:	bf00      	nop
 8004c58:	f7ff ffe0 	bl	8004c1c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d8f7      	bhi.n	8004c58 <HAL_Delay+0x28>
  {
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000194 	.word	0x20000194

08004c78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0ed      	b.n	8004e66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff fd3a 	bl	8004710 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cac:	f7ff ffb6 	bl	8004c1c <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cb2:	e012      	b.n	8004cda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cb4:	f7ff ffb2 	bl	8004c1c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b0a      	cmp	r3, #10
 8004cc0:	d90b      	bls.n	8004cda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2205      	movs	r2, #5
 8004cd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0c5      	b.n	8004e66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0e5      	beq.n	8004cb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0202 	bic.w	r2, r2, #2
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cf8:	f7ff ff90 	bl	8004c1c <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cfe:	e012      	b.n	8004d26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d00:	f7ff ff8c 	bl	8004c1c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b0a      	cmp	r3, #10
 8004d0c:	d90b      	bls.n	8004d26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e09f      	b.n	8004e66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7e1b      	ldrb	r3, [r3, #24]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e007      	b.n	8004d5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7e5b      	ldrb	r3, [r3, #25]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d108      	bne.n	8004d78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e007      	b.n	8004d88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	7e9b      	ldrb	r3, [r3, #26]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d108      	bne.n	8004da2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0220 	orr.w	r2, r2, #32
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e007      	b.n	8004db2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0220 	bic.w	r2, r2, #32
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7edb      	ldrb	r3, [r3, #27]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d108      	bne.n	8004dcc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0210 	bic.w	r2, r2, #16
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e007      	b.n	8004ddc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0210 	orr.w	r2, r2, #16
 8004dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7f1b      	ldrb	r3, [r3, #28]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d108      	bne.n	8004df6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0208 	orr.w	r2, r2, #8
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e007      	b.n	8004e06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0208 	bic.w	r2, r2, #8
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	7f5b      	ldrb	r3, [r3, #29]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d108      	bne.n	8004e20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0204 	orr.w	r2, r2, #4
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e007      	b.n	8004e30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	ea42 0103 	orr.w	r1, r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d003      	beq.n	8004e94 <HAL_CAN_ConfigFilter+0x26>
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	f040 80aa 	bne.w	8004fe8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e9a:	f043 0201 	orr.w	r2, r3, #1
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2201      	movs	r2, #1
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d123      	bne.n	8004f16 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	401a      	ands	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ef0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3248      	adds	r2, #72	; 0x48
 8004ef6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	3348      	adds	r3, #72	; 0x48
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	440b      	add	r3, r1
 8004f14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d122      	bne.n	8004f64 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3248      	adds	r2, #72	; 0x48
 8004f44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	3348      	adds	r3, #72	; 0x48
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	401a      	ands	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004f7e:	e007      	b.n	8004f90 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004faa:	e007      	b.n	8004fbc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e006      	b.n	8004ff6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d12e      	bne.n	8005072 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800502c:	f7ff fdf6 	bl	8004c1c <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005032:	e012      	b.n	800505a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005034:	f7ff fdf2 	bl	8004c1c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b0a      	cmp	r3, #10
 8005040:	d90b      	bls.n	800505a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2205      	movs	r2, #5
 8005052:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e012      	b.n	8005080 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e5      	bne.n	8005034 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e006      	b.n	8005080 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d003      	beq.n	80050b4 <HAL_CAN_AddTxMessage+0x2c>
 80050ac:	7ffb      	ldrb	r3, [r7, #31]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 80b8 	bne.w	8005224 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80a0 	beq.w	8005214 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	0e1b      	lsrs	r3, r3, #24
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d907      	bls.n	80050f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e09e      	b.n	8005232 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80050f4:	2201      	movs	r2, #1
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	409a      	lsls	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10d      	bne.n	8005122 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	6809      	ldr	r1, [r1, #0]
 8005114:	431a      	orrs	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	3318      	adds	r3, #24
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	440b      	add	r3, r1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e00f      	b.n	8005142 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800512c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005136:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	3318      	adds	r3, #24
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	440b      	add	r3, r1
 8005140:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	3318      	adds	r3, #24
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	440b      	add	r3, r1
 8005152:	3304      	adds	r3, #4
 8005154:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	7d1b      	ldrb	r3, [r3, #20]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d111      	bne.n	8005182 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3318      	adds	r3, #24
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	4413      	add	r3, r2
 800516a:	3304      	adds	r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	6811      	ldr	r1, [r2, #0]
 8005172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	3318      	adds	r3, #24
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	440b      	add	r3, r1
 800517e:	3304      	adds	r3, #4
 8005180:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3307      	adds	r3, #7
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	061a      	lsls	r2, r3, #24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3306      	adds	r3, #6
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3305      	adds	r3, #5
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	4313      	orrs	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	3204      	adds	r2, #4
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	4610      	mov	r0, r2
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6811      	ldr	r1, [r2, #0]
 80051aa:	ea43 0200 	orr.w	r2, r3, r0
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	440b      	add	r3, r1
 80051b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80051b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3303      	adds	r3, #3
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	061a      	lsls	r2, r3, #24
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3302      	adds	r3, #2
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3301      	adds	r3, #1
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	4313      	orrs	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	4610      	mov	r0, r2
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	ea43 0200 	orr.w	r2, r3, r0
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80051ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3318      	adds	r3, #24
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	4413      	add	r3, r2
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6811      	ldr	r1, [r2, #0]
 8005202:	f043 0201 	orr.w	r2, r3, #1
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3318      	adds	r3, #24
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	440b      	add	r3, r1
 800520e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e00e      	b.n	8005232 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e006      	b.n	8005232 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	; 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005250:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d003      	beq.n	8005260 <HAL_CAN_GetRxMessage+0x24>
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b02      	cmp	r3, #2
 800525c:	f040 80f3 	bne.w	8005446 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10e      	bne.n	8005284 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d116      	bne.n	80052a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0e7      	b.n	8005454 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e0d8      	b.n	8005454 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	331b      	adds	r3, #27
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0204 	and.w	r2, r3, #4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10c      	bne.n	80052da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	331b      	adds	r3, #27
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	4413      	add	r3, r2
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	0d5b      	lsrs	r3, r3, #21
 80052d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e00b      	b.n	80052f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	331b      	adds	r3, #27
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	4413      	add	r3, r2
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	08db      	lsrs	r3, r3, #3
 80052ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	331b      	adds	r3, #27
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	4413      	add	r3, r2
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0202 	and.w	r2, r3, #2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	331b      	adds	r3, #27
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	331b      	adds	r3, #27
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	b2da      	uxtb	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	331b      	adds	r3, #27
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	b29a      	uxth	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	4413      	add	r3, r2
 800535a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	4413      	add	r3, r2
 8005370:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	0a1a      	lsrs	r2, r3, #8
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	3301      	adds	r3, #1
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	4413      	add	r3, r2
 800538a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0c1a      	lsrs	r2, r3, #16
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	3302      	adds	r3, #2
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	0e1a      	lsrs	r2, r3, #24
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	3303      	adds	r3, #3
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4413      	add	r3, r2
 80053be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	3304      	adds	r3, #4
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	0a1a      	lsrs	r2, r3, #8
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	3305      	adds	r3, #5
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	0c1a      	lsrs	r2, r3, #16
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	3306      	adds	r3, #6
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	4413      	add	r3, r2
 800540a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	0e1a      	lsrs	r2, r3, #24
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	3307      	adds	r3, #7
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d108      	bne.n	8005432 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0220 	orr.w	r2, r2, #32
 800542e:	60da      	str	r2, [r3, #12]
 8005430:	e007      	b.n	8005442 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0220 	orr.w	r2, r2, #32
 8005440:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e006      	b.n	8005454 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800546e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d002      	beq.n	800547c <HAL_CAN_ActivateNotification+0x1e>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d109      	bne.n	8005490 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6959      	ldr	r1, [r3, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e006      	b.n	800549e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr

080054a8 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d002      	beq.n	80054c6 <HAL_CAN_DeactivateNotification+0x1e>
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d10a      	bne.n	80054dc <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6959      	ldr	r1, [r3, #20]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	43da      	mvns	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	400a      	ands	r2, r1
 80054d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e006      	b.n	80054ea <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d07c      	beq.n	8005634 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d023      	beq.n	800558c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fa ff62 	bl	8000420 <HAL_CAN_TxMailbox0CompleteCallback>
 800555c:	e016      	b.n	800558c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	e00c      	b.n	800558c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
 8005584:	e002      	b.n	800558c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f96b 	bl	8005862 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	2b00      	cmp	r3, #0
 8005594:	d024      	beq.n	80055e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fa ff4a 	bl	8000444 <HAL_CAN_TxMailbox1CompleteCallback>
 80055b0:	e016      	b.n	80055e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	e00c      	b.n	80055e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	e002      	b.n	80055e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f94a 	bl	8005874 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d024      	beq.n	8005634 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fa ff32 	bl	8000468 <HAL_CAN_TxMailbox2CompleteCallback>
 8005604:	e016      	b.n	8005634 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	e00c      	b.n	8005634 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
 800562c:	e002      	b.n	8005634 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f929 	bl	8005886 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800564e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2210      	movs	r2, #16
 8005656:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f90f 	bl	8005898 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fa fdf6 	bl	8000284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d006      	beq.n	80056de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2208      	movs	r2, #8
 80056d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8e6 	bl	80058aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fa fd28 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	d006      	beq.n	800571e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2210      	movs	r2, #16
 8005716:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f8cf 	bl	80058bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2208      	movs	r2, #8
 8005738:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8c7 	bl	80058ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d07b      	beq.n	8005842 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d072      	beq.n	800583a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f043 0302 	orr.w	r3, r3, #2
 800578a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	f043 0304 	orr.w	r3, r3, #4
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d043      	beq.n	800583a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d03e      	beq.n	800583a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c2:	2b60      	cmp	r3, #96	; 0x60
 80057c4:	d02b      	beq.n	800581e <HAL_CAN_IRQHandler+0x32a>
 80057c6:	2b60      	cmp	r3, #96	; 0x60
 80057c8:	d82e      	bhi.n	8005828 <HAL_CAN_IRQHandler+0x334>
 80057ca:	2b50      	cmp	r3, #80	; 0x50
 80057cc:	d022      	beq.n	8005814 <HAL_CAN_IRQHandler+0x320>
 80057ce:	2b50      	cmp	r3, #80	; 0x50
 80057d0:	d82a      	bhi.n	8005828 <HAL_CAN_IRQHandler+0x334>
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d019      	beq.n	800580a <HAL_CAN_IRQHandler+0x316>
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d826      	bhi.n	8005828 <HAL_CAN_IRQHandler+0x334>
 80057da:	2b30      	cmp	r3, #48	; 0x30
 80057dc:	d010      	beq.n	8005800 <HAL_CAN_IRQHandler+0x30c>
 80057de:	2b30      	cmp	r3, #48	; 0x30
 80057e0:	d822      	bhi.n	8005828 <HAL_CAN_IRQHandler+0x334>
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d002      	beq.n	80057ec <HAL_CAN_IRQHandler+0x2f8>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d005      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80057ea:	e01d      	b.n	8005828 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	f043 0308 	orr.w	r3, r3, #8
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057f4:	e019      	b.n	800582a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f043 0310 	orr.w	r3, r3, #16
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057fe:	e014      	b.n	800582a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	f043 0320 	orr.w	r3, r3, #32
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005808:	e00f      	b.n	800582a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005812:	e00a      	b.n	800582a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800581c:	e005      	b.n	800582a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005826:	e000      	b.n	800582a <HAL_CAN_IRQHandler+0x336>
            break;
 8005828:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005838:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2204      	movs	r2, #4
 8005840:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f843 	bl	80058e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800585a:	bf00      	nop
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
	...

080058f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800591c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005926:	4a04      	ldr	r2, [pc, #16]	; (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	60d3      	str	r3, [r2, #12]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <__NVIC_GetPriorityGrouping+0x18>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 0307 	and.w	r3, r3, #7
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	2b00      	cmp	r3, #0
 8005968:	db0b      	blt.n	8005982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	f003 021f 	and.w	r2, r3, #31
 8005970:	4906      	ldr	r1, [pc, #24]	; (800598c <__NVIC_EnableIRQ+0x34>)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2001      	movs	r0, #1
 800597a:	fa00 f202 	lsl.w	r2, r0, r2
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	e000e100 	.word	0xe000e100

08005990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800599c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db0a      	blt.n	80059ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	490c      	ldr	r1, [pc, #48]	; (80059dc <__NVIC_SetPriority+0x4c>)
 80059aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ae:	0112      	lsls	r2, r2, #4
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	440b      	add	r3, r1
 80059b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059b8:	e00a      	b.n	80059d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4908      	ldr	r1, [pc, #32]	; (80059e0 <__NVIC_SetPriority+0x50>)
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	3b04      	subs	r3, #4
 80059c8:	0112      	lsls	r2, r2, #4
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	440b      	add	r3, r1
 80059ce:	761a      	strb	r2, [r3, #24]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	e000e100 	.word	0xe000e100
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f1c3 0307 	rsb	r3, r3, #7
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	bf28      	it	cs
 8005a02:	2304      	movcs	r3, #4
 8005a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d902      	bls.n	8005a14 <NVIC_EncodePriority+0x30>
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3b03      	subs	r3, #3
 8005a12:	e000      	b.n	8005a16 <NVIC_EncodePriority+0x32>
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	401a      	ands	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	43d9      	mvns	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a3c:	4313      	orrs	r3, r2
         );
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a4c:	f3bf 8f4f 	dsb	sy
}
 8005a50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <__NVIC_SystemReset+0x24>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005a5a:	4904      	ldr	r1, [pc, #16]	; (8005a6c <__NVIC_SystemReset+0x24>)
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <__NVIC_SystemReset+0x28>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a62:	f3bf 8f4f 	dsb	sy
}
 8005a66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <__NVIC_SystemReset+0x20>
 8005a6c:	e000ed00 	.word	0xe000ed00
 8005a70:	05fa0004 	.word	0x05fa0004

08005a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a84:	d301      	bcc.n	8005a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00f      	b.n	8005aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a8a:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <SysTick_Config+0x40>)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a92:	210f      	movs	r1, #15
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	f7ff ff7a 	bl	8005990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <SysTick_Config+0x40>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <SysTick_Config+0x40>)
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	e000e010 	.word	0xe000e010

08005ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff ff17 	bl	80058f4 <__NVIC_SetPriorityGrouping>
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ae0:	f7ff ff2c 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff7a 	bl	80059e4 <NVIC_EncodePriority>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff49 	bl	8005990 <__NVIC_SetPriority>
}
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff1f 	bl	8005958 <__NVIC_EnableIRQ>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005b26:	f7ff ff8f 	bl	8005a48 <__NVIC_SystemReset>

08005b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ff9e 	bl	8005a74 <SysTick_Config>
 8005b38:	4603      	mov	r3, r0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b08b      	sub	sp, #44	; 0x2c
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b56:	e169      	b.n	8005e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	f040 8158 	bne.w	8005e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4a9a      	ldr	r2, [pc, #616]	; (8005de4 <HAL_GPIO_Init+0x2a0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d05e      	beq.n	8005c3e <HAL_GPIO_Init+0xfa>
 8005b80:	4a98      	ldr	r2, [pc, #608]	; (8005de4 <HAL_GPIO_Init+0x2a0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d875      	bhi.n	8005c72 <HAL_GPIO_Init+0x12e>
 8005b86:	4a98      	ldr	r2, [pc, #608]	; (8005de8 <HAL_GPIO_Init+0x2a4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d058      	beq.n	8005c3e <HAL_GPIO_Init+0xfa>
 8005b8c:	4a96      	ldr	r2, [pc, #600]	; (8005de8 <HAL_GPIO_Init+0x2a4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d86f      	bhi.n	8005c72 <HAL_GPIO_Init+0x12e>
 8005b92:	4a96      	ldr	r2, [pc, #600]	; (8005dec <HAL_GPIO_Init+0x2a8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d052      	beq.n	8005c3e <HAL_GPIO_Init+0xfa>
 8005b98:	4a94      	ldr	r2, [pc, #592]	; (8005dec <HAL_GPIO_Init+0x2a8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d869      	bhi.n	8005c72 <HAL_GPIO_Init+0x12e>
 8005b9e:	4a94      	ldr	r2, [pc, #592]	; (8005df0 <HAL_GPIO_Init+0x2ac>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d04c      	beq.n	8005c3e <HAL_GPIO_Init+0xfa>
 8005ba4:	4a92      	ldr	r2, [pc, #584]	; (8005df0 <HAL_GPIO_Init+0x2ac>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d863      	bhi.n	8005c72 <HAL_GPIO_Init+0x12e>
 8005baa:	4a92      	ldr	r2, [pc, #584]	; (8005df4 <HAL_GPIO_Init+0x2b0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d046      	beq.n	8005c3e <HAL_GPIO_Init+0xfa>
 8005bb0:	4a90      	ldr	r2, [pc, #576]	; (8005df4 <HAL_GPIO_Init+0x2b0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d85d      	bhi.n	8005c72 <HAL_GPIO_Init+0x12e>
 8005bb6:	2b12      	cmp	r3, #18
 8005bb8:	d82a      	bhi.n	8005c10 <HAL_GPIO_Init+0xcc>
 8005bba:	2b12      	cmp	r3, #18
 8005bbc:	d859      	bhi.n	8005c72 <HAL_GPIO_Init+0x12e>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <HAL_GPIO_Init+0x80>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005c3f 	.word	0x08005c3f
 8005bc8:	08005c19 	.word	0x08005c19
 8005bcc:	08005c2b 	.word	0x08005c2b
 8005bd0:	08005c6d 	.word	0x08005c6d
 8005bd4:	08005c73 	.word	0x08005c73
 8005bd8:	08005c73 	.word	0x08005c73
 8005bdc:	08005c73 	.word	0x08005c73
 8005be0:	08005c73 	.word	0x08005c73
 8005be4:	08005c73 	.word	0x08005c73
 8005be8:	08005c73 	.word	0x08005c73
 8005bec:	08005c73 	.word	0x08005c73
 8005bf0:	08005c73 	.word	0x08005c73
 8005bf4:	08005c73 	.word	0x08005c73
 8005bf8:	08005c73 	.word	0x08005c73
 8005bfc:	08005c73 	.word	0x08005c73
 8005c00:	08005c73 	.word	0x08005c73
 8005c04:	08005c73 	.word	0x08005c73
 8005c08:	08005c21 	.word	0x08005c21
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	4a79      	ldr	r2, [pc, #484]	; (8005df8 <HAL_GPIO_Init+0x2b4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c16:	e02c      	b.n	8005c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	623b      	str	r3, [r7, #32]
          break;
 8005c1e:	e029      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	3304      	adds	r3, #4
 8005c26:	623b      	str	r3, [r7, #32]
          break;
 8005c28:	e024      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	623b      	str	r3, [r7, #32]
          break;
 8005c32:	e01f      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	623b      	str	r3, [r7, #32]
          break;
 8005c3c:	e01a      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c46:	2304      	movs	r3, #4
 8005c48:	623b      	str	r3, [r7, #32]
          break;
 8005c4a:	e013      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c54:	2308      	movs	r3, #8
 8005c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	611a      	str	r2, [r3, #16]
          break;
 8005c5e:	e009      	b.n	8005c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c60:	2308      	movs	r3, #8
 8005c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	615a      	str	r2, [r3, #20]
          break;
 8005c6a:	e003      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	623b      	str	r3, [r7, #32]
          break;
 8005c70:	e000      	b.n	8005c74 <HAL_GPIO_Init+0x130>
          break;
 8005c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2bff      	cmp	r3, #255	; 0xff
 8005c78:	d801      	bhi.n	8005c7e <HAL_GPIO_Init+0x13a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	e001      	b.n	8005c82 <HAL_GPIO_Init+0x13e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2bff      	cmp	r3, #255	; 0xff
 8005c88:	d802      	bhi.n	8005c90 <HAL_GPIO_Init+0x14c>
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	e002      	b.n	8005c96 <HAL_GPIO_Init+0x152>
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	3b08      	subs	r3, #8
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	210f      	movs	r1, #15
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	6a39      	ldr	r1, [r7, #32]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80b1 	beq.w	8005e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005cc4:	4b4d      	ldr	r3, [pc, #308]	; (8005dfc <HAL_GPIO_Init+0x2b8>)
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	4a4c      	ldr	r2, [pc, #304]	; (8005dfc <HAL_GPIO_Init+0x2b8>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	6193      	str	r3, [r2, #24]
 8005cd0:	4b4a      	ldr	r3, [pc, #296]	; (8005dfc <HAL_GPIO_Init+0x2b8>)
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005cdc:	4a48      	ldr	r2, [pc, #288]	; (8005e00 <HAL_GPIO_Init+0x2bc>)
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	220f      	movs	r2, #15
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <HAL_GPIO_Init+0x2c0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <HAL_GPIO_Init+0x1ec>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <HAL_GPIO_Init+0x2c4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00d      	beq.n	8005d2c <HAL_GPIO_Init+0x1e8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <HAL_GPIO_Init+0x2c8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <HAL_GPIO_Init+0x1e4>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3d      	ldr	r2, [pc, #244]	; (8005e10 <HAL_GPIO_Init+0x2cc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d101      	bne.n	8005d24 <HAL_GPIO_Init+0x1e0>
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <HAL_GPIO_Init+0x1ee>
 8005d24:	2304      	movs	r3, #4
 8005d26:	e004      	b.n	8005d32 <HAL_GPIO_Init+0x1ee>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e002      	b.n	8005d32 <HAL_GPIO_Init+0x1ee>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_GPIO_Init+0x1ee>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	f002 0203 	and.w	r2, r2, #3
 8005d38:	0092      	lsls	r2, r2, #2
 8005d3a:	4093      	lsls	r3, r2
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d42:	492f      	ldr	r1, [pc, #188]	; (8005e00 <HAL_GPIO_Init+0x2bc>)
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	3302      	adds	r3, #2
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d006      	beq.n	8005d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	492c      	ldr	r1, [pc, #176]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
 8005d68:	e006      	b.n	8005d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	4928      	ldr	r1, [pc, #160]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d84:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4922      	ldr	r1, [pc, #136]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]
 8005d90:	e006      	b.n	8005da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d92:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	491e      	ldr	r1, [pc, #120]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	4918      	ldr	r1, [pc, #96]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
 8005db8:	e006      	b.n	8005dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	4914      	ldr	r1, [pc, #80]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d021      	beq.n	8005e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	490e      	ldr	r1, [pc, #56]	; (8005e14 <HAL_GPIO_Init+0x2d0>)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60cb      	str	r3, [r1, #12]
 8005de0:	e021      	b.n	8005e26 <HAL_GPIO_Init+0x2e2>
 8005de2:	bf00      	nop
 8005de4:	10320000 	.word	0x10320000
 8005de8:	10310000 	.word	0x10310000
 8005dec:	10220000 	.word	0x10220000
 8005df0:	10210000 	.word	0x10210000
 8005df4:	10120000 	.word	0x10120000
 8005df8:	10110000 	.word	0x10110000
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010800 	.word	0x40010800
 8005e08:	40010c00 	.word	0x40010c00
 8005e0c:	40011000 	.word	0x40011000
 8005e10:	40011400 	.word	0x40011400
 8005e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_GPIO_Init+0x304>)
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	4909      	ldr	r1, [pc, #36]	; (8005e48 <HAL_GPIO_Init+0x304>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	3301      	adds	r3, #1
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f47f ae8e 	bne.w	8005b58 <HAL_GPIO_Init+0x14>
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	372c      	adds	r7, #44	; 0x2c
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	40010400 	.word	0x40010400

08005e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	e001      	b.n	8005e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	807b      	strh	r3, [r7, #2]
 8005e86:	4613      	mov	r3, r2
 8005e88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e8a:	787b      	ldrb	r3, [r7, #1]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e90:	887a      	ldrh	r2, [r7, #2]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005e96:	e003      	b.n	8005ea0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	041a      	lsls	r2, r3, #16
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	611a      	str	r2, [r3, #16]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
	...

08005eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e26c      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8087 	beq.w	8005fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ecc:	4b92      	ldr	r3, [pc, #584]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d00c      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ed8:	4b8f      	ldr	r3, [pc, #572]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f003 030c 	and.w	r3, r3, #12
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d112      	bne.n	8005f0a <HAL_RCC_OscConfig+0x5e>
 8005ee4:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef0:	d10b      	bne.n	8005f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef2:	4b89      	ldr	r3, [pc, #548]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06c      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x12c>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d168      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e246      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f12:	d106      	bne.n	8005f22 <HAL_RCC_OscConfig+0x76>
 8005f14:	4b80      	ldr	r3, [pc, #512]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a7f      	ldr	r2, [pc, #508]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	e02e      	b.n	8005f80 <HAL_RCC_OscConfig+0xd4>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x98>
 8005f2a:	4b7b      	ldr	r3, [pc, #492]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a7a      	ldr	r2, [pc, #488]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4b78      	ldr	r3, [pc, #480]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a77      	ldr	r2, [pc, #476]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e01d      	b.n	8005f80 <HAL_RCC_OscConfig+0xd4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0xbc>
 8005f4e:	4b72      	ldr	r3, [pc, #456]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a71      	ldr	r2, [pc, #452]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6e      	ldr	r2, [pc, #440]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e00b      	b.n	8005f80 <HAL_RCC_OscConfig+0xd4>
 8005f68:	4b6b      	ldr	r3, [pc, #428]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6a      	ldr	r2, [pc, #424]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	4b68      	ldr	r3, [pc, #416]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a67      	ldr	r2, [pc, #412]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f88:	f7fe fe48 	bl	8004c1c <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f90:	f7fe fe44 	bl	8004c1c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	; 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e1fa      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa2:	4b5d      	ldr	r3, [pc, #372]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0xe4>
 8005fae:	e014      	b.n	8005fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fe fe34 	bl	8004c1c <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb8:	f7fe fe30 	bl	8004c1c <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e1e6      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fca:	4b53      	ldr	r3, [pc, #332]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x10c>
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d063      	beq.n	80060ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fe6:	4b4c      	ldr	r3, [pc, #304]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 030c 	and.w	r3, r3, #12
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ff2:	4b49      	ldr	r3, [pc, #292]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d11c      	bne.n	8006038 <HAL_RCC_OscConfig+0x18c>
 8005ffe:	4b46      	ldr	r3, [pc, #280]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d116      	bne.n	8006038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800600a:	4b43      	ldr	r3, [pc, #268]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_RCC_OscConfig+0x176>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d001      	beq.n	8006022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e1ba      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006022:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4939      	ldr	r1, [pc, #228]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006036:	e03a      	b.n	80060ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d020      	beq.n	8006082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006040:	4b36      	ldr	r3, [pc, #216]	; (800611c <HAL_RCC_OscConfig+0x270>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006046:	f7fe fde9 	bl	8004c1c <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800604e:	f7fe fde5 	bl	8004c1c <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e19b      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006060:	4b2d      	ldr	r3, [pc, #180]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606c:	4b2a      	ldr	r3, [pc, #168]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4927      	ldr	r1, [pc, #156]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]
 8006080:	e015      	b.n	80060ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006082:	4b26      	ldr	r3, [pc, #152]	; (800611c <HAL_RCC_OscConfig+0x270>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fe fdc8 	bl	8004c1c <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006090:	f7fe fdc4 	bl	8004c1c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e17a      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d03a      	beq.n	8006130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d019      	beq.n	80060f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <HAL_RCC_OscConfig+0x274>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c8:	f7fe fda8 	bl	8004c1c <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d0:	f7fe fda4 	bl	8004c1c <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e15a      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <HAL_RCC_OscConfig+0x26c>)
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060ee:	2001      	movs	r0, #1
 80060f0:	f000 fad8 	bl	80066a4 <RCC_Delay>
 80060f4:	e01c      	b.n	8006130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <HAL_RCC_OscConfig+0x274>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fc:	f7fe fd8e 	bl	8004c1c <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006102:	e00f      	b.n	8006124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006104:	f7fe fd8a 	bl	8004c1c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d908      	bls.n	8006124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e140      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000
 800611c:	42420000 	.word	0x42420000
 8006120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006124:	4b9e      	ldr	r3, [pc, #632]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e9      	bne.n	8006104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80a6 	beq.w	800628a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006142:	4b97      	ldr	r3, [pc, #604]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10d      	bne.n	800616a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800614e:	4b94      	ldr	r3, [pc, #592]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	4a93      	ldr	r2, [pc, #588]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006158:	61d3      	str	r3, [r2, #28]
 800615a:	4b91      	ldr	r3, [pc, #580]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616a:	4b8e      	ldr	r3, [pc, #568]	; (80063a4 <HAL_RCC_OscConfig+0x4f8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d118      	bne.n	80061a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006176:	4b8b      	ldr	r3, [pc, #556]	; (80063a4 <HAL_RCC_OscConfig+0x4f8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a8a      	ldr	r2, [pc, #552]	; (80063a4 <HAL_RCC_OscConfig+0x4f8>)
 800617c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006182:	f7fe fd4b 	bl	8004c1c <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618a:	f7fe fd47 	bl	8004c1c <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b64      	cmp	r3, #100	; 0x64
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e0fd      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	4b81      	ldr	r3, [pc, #516]	; (80063a4 <HAL_RCC_OscConfig+0x4f8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d106      	bne.n	80061be <HAL_RCC_OscConfig+0x312>
 80061b0:	4b7b      	ldr	r3, [pc, #492]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	4a7a      	ldr	r2, [pc, #488]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	6213      	str	r3, [r2, #32]
 80061bc:	e02d      	b.n	800621a <HAL_RCC_OscConfig+0x36e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x334>
 80061c6:	4b76      	ldr	r3, [pc, #472]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	4a75      	ldr	r2, [pc, #468]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	6213      	str	r3, [r2, #32]
 80061d2:	4b73      	ldr	r3, [pc, #460]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	4a72      	ldr	r2, [pc, #456]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061d8:	f023 0304 	bic.w	r3, r3, #4
 80061dc:	6213      	str	r3, [r2, #32]
 80061de:	e01c      	b.n	800621a <HAL_RCC_OscConfig+0x36e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b05      	cmp	r3, #5
 80061e6:	d10c      	bne.n	8006202 <HAL_RCC_OscConfig+0x356>
 80061e8:	4b6d      	ldr	r3, [pc, #436]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	4a6c      	ldr	r2, [pc, #432]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061ee:	f043 0304 	orr.w	r3, r3, #4
 80061f2:	6213      	str	r3, [r2, #32]
 80061f4:	4b6a      	ldr	r3, [pc, #424]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	4a69      	ldr	r2, [pc, #420]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	6213      	str	r3, [r2, #32]
 8006200:	e00b      	b.n	800621a <HAL_RCC_OscConfig+0x36e>
 8006202:	4b67      	ldr	r3, [pc, #412]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	4a66      	ldr	r2, [pc, #408]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	6213      	str	r3, [r2, #32]
 800620e:	4b64      	ldr	r3, [pc, #400]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	4a63      	ldr	r2, [pc, #396]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006214:	f023 0304 	bic.w	r3, r3, #4
 8006218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d015      	beq.n	800624e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006222:	f7fe fcfb 	bl	8004c1c <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fe fcf7 	bl	8004c1c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0ab      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006240:	4b57      	ldr	r3, [pc, #348]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ee      	beq.n	800622a <HAL_RCC_OscConfig+0x37e>
 800624c:	e014      	b.n	8006278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800624e:	f7fe fce5 	bl	8004c1c <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006254:	e00a      	b.n	800626c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006256:	f7fe fce1 	bl	8004c1c <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f241 3288 	movw	r2, #5000	; 0x1388
 8006264:	4293      	cmp	r3, r2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e095      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800626c:	4b4c      	ldr	r3, [pc, #304]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1ee      	bne.n	8006256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627e:	4b48      	ldr	r3, [pc, #288]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	4a47      	ldr	r2, [pc, #284]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8081 	beq.w	8006396 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006294:	4b42      	ldr	r3, [pc, #264]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 030c 	and.w	r3, r3, #12
 800629c:	2b08      	cmp	r3, #8
 800629e:	d061      	beq.n	8006364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d146      	bne.n	8006336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a8:	4b3f      	ldr	r3, [pc, #252]	; (80063a8 <HAL_RCC_OscConfig+0x4fc>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ae:	f7fe fcb5 	bl	8004c1c <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b6:	f7fe fcb1 	bl	8004c1c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e067      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c8:	4b35      	ldr	r3, [pc, #212]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062dc:	d108      	bne.n	80062f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	492d      	ldr	r1, [pc, #180]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f0:	4b2b      	ldr	r3, [pc, #172]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a19      	ldr	r1, [r3, #32]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	430b      	orrs	r3, r1
 8006302:	4927      	ldr	r1, [pc, #156]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006304:	4313      	orrs	r3, r2
 8006306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006308:	4b27      	ldr	r3, [pc, #156]	; (80063a8 <HAL_RCC_OscConfig+0x4fc>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630e:	f7fe fc85 	bl	8004c1c <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006316:	f7fe fc81 	bl	8004c1c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e037      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006328:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x46a>
 8006334:	e02f      	b.n	8006396 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006336:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <HAL_RCC_OscConfig+0x4fc>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fe fc6e 	bl	8004c1c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006344:	f7fe fc6a 	bl	8004c1c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e020      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x498>
 8006362:	e018      	b.n	8006396 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e013      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCC_OscConfig+0x4f4>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	429a      	cmp	r2, r3
 8006382:	d106      	bne.n	8006392 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	429a      	cmp	r2, r3
 8006390:	d001      	beq.n	8006396 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40021000 	.word	0x40021000
 80063a4:	40007000 	.word	0x40007000
 80063a8:	42420060 	.word	0x42420060

080063ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0d0      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063c0:	4b6a      	ldr	r3, [pc, #424]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d910      	bls.n	80063f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ce:	4b67      	ldr	r3, [pc, #412]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 0207 	bic.w	r2, r3, #7
 80063d6:	4965      	ldr	r1, [pc, #404]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063de:	4b63      	ldr	r3, [pc, #396]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0b8      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006408:	4b59      	ldr	r3, [pc, #356]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a58      	ldr	r2, [pc, #352]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800640e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006420:	4b53      	ldr	r3, [pc, #332]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4a52      	ldr	r2, [pc, #328]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006426:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800642a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800642c:	4b50      	ldr	r3, [pc, #320]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	494d      	ldr	r1, [pc, #308]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800643a:	4313      	orrs	r3, r2
 800643c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d040      	beq.n	80064cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d107      	bne.n	8006462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006452:	4b47      	ldr	r3, [pc, #284]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d115      	bne.n	800648a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e07f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d107      	bne.n	800647a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646a:	4b41      	ldr	r3, [pc, #260]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e073      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800647a:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e06b      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800648a:	4b39      	ldr	r3, [pc, #228]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f023 0203 	bic.w	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4936      	ldr	r1, [pc, #216]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006498:	4313      	orrs	r3, r2
 800649a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800649c:	f7fe fbbe 	bl	8004c1c <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a4:	f7fe fbba 	bl	8004c1c <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e053      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ba:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 020c 	and.w	r2, r3, #12
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d1eb      	bne.n	80064a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064cc:	4b27      	ldr	r3, [pc, #156]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d210      	bcs.n	80064fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064da:	4b24      	ldr	r3, [pc, #144]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 0207 	bic.w	r2, r3, #7
 80064e2:	4922      	ldr	r1, [pc, #136]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ea:	4b20      	ldr	r3, [pc, #128]	; (800656c <HAL_RCC_ClockConfig+0x1c0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e032      	b.n	8006562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4916      	ldr	r1, [pc, #88]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	490e      	ldr	r1, [pc, #56]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006536:	4313      	orrs	r3, r2
 8006538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800653a:	f000 f821 	bl	8006580 <HAL_RCC_GetSysClockFreq>
 800653e:	4602      	mov	r2, r0
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_ClockConfig+0x1c4>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	091b      	lsrs	r3, r3, #4
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <HAL_RCC_ClockConfig+0x1c8>)
 800654c:	5ccb      	ldrb	r3, [r1, r3]
 800654e:	fa22 f303 	lsr.w	r3, r2, r3
 8006552:	4a09      	ldr	r2, [pc, #36]	; (8006578 <HAL_RCC_ClockConfig+0x1cc>)
 8006554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_ClockConfig+0x1d0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fb1c 	bl	8004b98 <HAL_InitTick>

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40022000 	.word	0x40022000
 8006570:	40021000 	.word	0x40021000
 8006574:	080078c0 	.word	0x080078c0
 8006578:	2000018c 	.word	0x2000018c
 800657c:	20000190 	.word	0x20000190

08006580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006580:	b490      	push	{r4, r7}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006586:	4b2a      	ldr	r3, [pc, #168]	; (8006630 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006588:	1d3c      	adds	r4, r7, #4
 800658a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800658c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006590:	f240 2301 	movw	r3, #513	; 0x201
 8006594:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065aa:	4b22      	ldr	r3, [pc, #136]	; (8006634 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f003 030c 	and.w	r3, r3, #12
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d002      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0x40>
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d003      	beq.n	80065c6 <HAL_RCC_GetSysClockFreq+0x46>
 80065be:	e02d      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065c0:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065c2:	623b      	str	r3, [r7, #32]
      break;
 80065c4:	e02d      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	0c9b      	lsrs	r3, r3, #18
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80065d2:	4413      	add	r3, r2
 80065d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80065d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d013      	beq.n	800660c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	0c5b      	lsrs	r3, r3, #17
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80065f2:	4413      	add	r3, r2
 80065f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4a0e      	ldr	r2, [pc, #56]	; (8006638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065fe:	fb02 f203 	mul.w	r2, r2, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
 800660a:	e004      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	4a0b      	ldr	r2, [pc, #44]	; (800663c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	623b      	str	r3, [r7, #32]
      break;
 800661a:	e002      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <HAL_RCC_GetSysClockFreq+0xb8>)
 800661e:	623b      	str	r3, [r7, #32]
      break;
 8006620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006622:	6a3b      	ldr	r3, [r7, #32]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3728      	adds	r7, #40	; 0x28
 8006628:	46bd      	mov	sp, r7
 800662a:	bc90      	pop	{r4, r7}
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	08007858 	.word	0x08007858
 8006634:	40021000 	.word	0x40021000
 8006638:	007a1200 	.word	0x007a1200
 800663c:	003d0900 	.word	0x003d0900

08006640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <HAL_RCC_GetHCLKFreq+0x10>)
 8006646:	681b      	ldr	r3, [r3, #0]
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr
 8006650:	2000018c 	.word	0x2000018c

08006654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006658:	f7ff fff2 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 800665c:	4602      	mov	r2, r0
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	4903      	ldr	r1, [pc, #12]	; (8006678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800666a:	5ccb      	ldrb	r3, [r1, r3]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006670:	4618      	mov	r0, r3
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40021000 	.word	0x40021000
 8006678:	080078d0 	.word	0x080078d0

0800667c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006680:	f7ff ffde 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	0adb      	lsrs	r3, r3, #11
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	4903      	ldr	r1, [pc, #12]	; (80066a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006692:	5ccb      	ldrb	r3, [r1, r3]
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006698:	4618      	mov	r0, r3
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40021000 	.word	0x40021000
 80066a0:	080078d0 	.word	0x080078d0

080066a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <RCC_Delay+0x34>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <RCC_Delay+0x38>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	0a5b      	lsrs	r3, r3, #9
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
 80066be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80066c0:	bf00      	nop
  }
  while (Delay --);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	60fa      	str	r2, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f9      	bne.n	80066c0 <RCC_Delay+0x1c>
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	2000018c 	.word	0x2000018c
 80066dc:	10624dd3 	.word	0x10624dd3

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e076      	b.n	80067e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d009      	beq.n	8006718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e005      	b.n	8006718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fe f858 	bl	80047e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	ea42 0103 	orr.w	r1, r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	0c1a      	lsrs	r2, r3, #16
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f002 0204 	and.w	r2, r2, #4
 80067be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_SPI_Transmit+0x22>
 8006806:	2302      	movs	r3, #2
 8006808:	e126      	b.n	8006a58 <HAL_SPI_Transmit+0x270>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006812:	f7fe fa03 	bl	8004c1c <HAL_GetTick>
 8006816:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	d002      	beq.n	800682e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006828:	2302      	movs	r3, #2
 800682a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800682c:	e10b      	b.n	8006a46 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_SPI_Transmit+0x52>
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800683e:	e102      	b.n	8006a46 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2203      	movs	r2, #3
 8006844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	88fa      	ldrh	r2, [r7, #6]
 8006858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006886:	d10f      	bne.n	80068a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006896:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d007      	beq.n	80068c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ce:	d14b      	bne.n	8006968 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_SPI_Transmit+0xf6>
 80068d8:	8afb      	ldrh	r3, [r7, #22]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d13e      	bne.n	800695c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	881a      	ldrh	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	1c9a      	adds	r2, r3, #2
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006902:	e02b      	b.n	800695c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b02      	cmp	r3, #2
 8006910:	d112      	bne.n	8006938 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	881a      	ldrh	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	1c9a      	adds	r2, r3, #2
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	86da      	strh	r2, [r3, #54]	; 0x36
 8006936:	e011      	b.n	800695c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006938:	f7fe f970 	bl	8004c1c <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d803      	bhi.n	8006950 <HAL_SPI_Transmit+0x168>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d102      	bne.n	8006956 <HAL_SPI_Transmit+0x16e>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	77fb      	strb	r3, [r7, #31]
          goto error;
 800695a:	e074      	b.n	8006a46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ce      	bne.n	8006904 <HAL_SPI_Transmit+0x11c>
 8006966:	e04c      	b.n	8006a02 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <HAL_SPI_Transmit+0x18e>
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d140      	bne.n	80069f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800699c:	e02c      	b.n	80069f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d113      	bne.n	80069d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	7812      	ldrb	r2, [r2, #0]
 80069b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80069d2:	e011      	b.n	80069f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d4:	f7fe f922 	bl	8004c1c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d803      	bhi.n	80069ec <HAL_SPI_Transmit+0x204>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Transmit+0x20a>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069f6:	e026      	b.n	8006a46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1cd      	bne.n	800699e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f8b2 	bl	8006b70 <SPI_EndRxTxTransaction>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e000      	b.n	8006a46 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a70:	f7fe f8d4 	bl	8004c1c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	1a9b      	subs	r3, r3, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a80:	f7fe f8cc 	bl	8004c1c <HAL_GetTick>
 8006a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a86:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	015b      	lsls	r3, r3, #5
 8006a8c:	0d1b      	lsrs	r3, r3, #20
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a96:	e054      	b.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d050      	beq.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aa0:	f7fe f8bc 	bl	8004c1c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d902      	bls.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d13d      	bne.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d111      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad8:	d004      	beq.n	8006ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae2:	d107      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afc:	d10f      	bne.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e017      	b.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d19b      	bne.n	8006a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000018c 	.word	0x2000018c

08006b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	2180      	movs	r1, #128	; 0x80
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff ff6a 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e000      	b.n	8006ba4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e041      	b.n	8006c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fd fe52 	bl	800487c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f000 fa70 	bl	80070d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d001      	beq.n	8006c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e03a      	b.n	8006cda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a18      	ldr	r2, [pc, #96]	; (8006ce4 <HAL_TIM_Base_Start_IT+0x98>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00e      	beq.n	8006ca4 <HAL_TIM_Base_Start_IT+0x58>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8e:	d009      	beq.n	8006ca4 <HAL_TIM_Base_Start_IT+0x58>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_TIM_Base_Start_IT+0x58>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a13      	ldr	r2, [pc, #76]	; (8006cec <HAL_TIM_Base_Start_IT+0xa0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d111      	bne.n	8006cc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b06      	cmp	r3, #6
 8006cb4:	d010      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	e007      	b.n	8006cd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800

08006cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d122      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d11b      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0202 	mvn.w	r2, #2
 8006d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9b1 	bl	800709a <HAL_TIM_IC_CaptureCallback>
 8006d38:	e005      	b.n	8006d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9a4 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f9b3 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d122      	bne.n	8006da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d11b      	bne.n	8006da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0204 	mvn.w	r2, #4
 8006d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f987 	bl	800709a <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e005      	b.n	8006d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f97a 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f989 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d122      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d11b      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0208 	mvn.w	r2, #8
 8006dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f95d 	bl	800709a <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f950 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f95f 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d122      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d11b      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0210 	mvn.w	r2, #16
 8006e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f933 	bl	800709a <HAL_TIM_IC_CaptureCallback>
 8006e34:	e005      	b.n	8006e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f926 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f935 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10e      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d107      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0201 	mvn.w	r2, #1
 8006e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fc fc94 	bl	800379c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7e:	2b80      	cmp	r3, #128	; 0x80
 8006e80:	d10e      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa77 	bl	800738e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d10e      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	d107      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f8f9 	bl	80070be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d107      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0220 	mvn.w	r2, #32
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa42 	bl	800737c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_ConfigClockSource+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e0b3      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x180>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f50:	d03e      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0xd0>
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f56:	f200 8087 	bhi.w	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5e:	f000 8085 	beq.w	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d87f      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f68:	2b70      	cmp	r3, #112	; 0x70
 8006f6a:	d01a      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0xa2>
 8006f6c:	2b70      	cmp	r3, #112	; 0x70
 8006f6e:	d87b      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f70:	2b60      	cmp	r3, #96	; 0x60
 8006f72:	d050      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x116>
 8006f74:	2b60      	cmp	r3, #96	; 0x60
 8006f76:	d877      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f78:	2b50      	cmp	r3, #80	; 0x50
 8006f7a:	d03c      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0xf6>
 8006f7c:	2b50      	cmp	r3, #80	; 0x50
 8006f7e:	d873      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d058      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x136>
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d86f      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	d064      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x156>
 8006f8c:	2b30      	cmp	r3, #48	; 0x30
 8006f8e:	d86b      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d060      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x156>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d867      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05c      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x156>
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d05a      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006fa0:	e062      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f000 f966 	bl	8007282 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	609a      	str	r2, [r3, #8]
      break;
 8006fce:	e04e      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6899      	ldr	r1, [r3, #8]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f000 f94f 	bl	8007282 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff2:	609a      	str	r2, [r3, #8]
      break;
 8006ff4:	e03b      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	461a      	mov	r2, r3
 8007004:	f000 f8c6 	bl	8007194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2150      	movs	r1, #80	; 0x50
 800700e:	4618      	mov	r0, r3
 8007010:	f000 f91d 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8007014:	e02b      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	461a      	mov	r2, r3
 8007024:	f000 f8e4 	bl	80071f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2160      	movs	r1, #96	; 0x60
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f90d 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8007034:	e01b      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6859      	ldr	r1, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	461a      	mov	r2, r3
 8007044:	f000 f8a6 	bl	8007194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2140      	movs	r1, #64	; 0x40
 800704e:	4618      	mov	r0, r3
 8007050:	f000 f8fd 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8007054:	e00b      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f000 f8f4 	bl	800724e <TIM_ITRx_SetConfig>
        break;
 8007066:	e002      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007068:	bf00      	nop
 800706a:	e000      	b.n	800706e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800706c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a29      	ldr	r2, [pc, #164]	; (8007188 <TIM_Base_SetConfig+0xb8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00b      	beq.n	8007100 <TIM_Base_SetConfig+0x30>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ee:	d007      	beq.n	8007100 <TIM_Base_SetConfig+0x30>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a26      	ldr	r2, [pc, #152]	; (800718c <TIM_Base_SetConfig+0xbc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_Base_SetConfig+0x30>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a25      	ldr	r2, [pc, #148]	; (8007190 <TIM_Base_SetConfig+0xc0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d108      	bne.n	8007112 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <TIM_Base_SetConfig+0xb8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00b      	beq.n	8007132 <TIM_Base_SetConfig+0x62>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007120:	d007      	beq.n	8007132 <TIM_Base_SetConfig+0x62>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a19      	ldr	r2, [pc, #100]	; (800718c <TIM_Base_SetConfig+0xbc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_Base_SetConfig+0x62>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a18      	ldr	r2, [pc, #96]	; (8007190 <TIM_Base_SetConfig+0xc0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d108      	bne.n	8007144 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a07      	ldr	r2, [pc, #28]	; (8007188 <TIM_Base_SetConfig+0xb8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d103      	bne.n	8007178 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	615a      	str	r2, [r3, #20]
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40000400 	.word	0x40000400
 8007190:	40000800 	.word	0x40000800

08007194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f023 0201 	bic.w	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f023 030a 	bic.w	r3, r3, #10
 80071d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	621a      	str	r2, [r3, #32]
}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 0210 	bic.w	r2, r3, #16
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800721a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	031b      	lsls	r3, r3, #12
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800722c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	f043 0307 	orr.w	r3, r3, #7
 8007270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007282:	b480      	push	{r7}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	021a      	lsls	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	609a      	str	r2, [r3, #8]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e046      	b.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a16      	ldr	r2, [pc, #88]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007324:	d009      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a10      	ldr	r2, [pc, #64]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d10c      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800

0800737c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr

0800738e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e03f      	b.n	8007432 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fd faa0 	bl	800490c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2224      	movs	r2, #36	; 0x24
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f829 	bl	800743c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007476:	f023 030c 	bic.w	r3, r3, #12
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	430b      	orrs	r3, r1
 8007482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <UART_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d103      	bne.n	80074ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7ff f8ea 	bl	800667c <HAL_RCC_GetPCLK2Freq>
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	e002      	b.n	80074b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7ff f8d2 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 80074b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	4a22      	ldr	r2, [pc, #136]	; (8007554 <UART_SetConfig+0x118>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	0119      	lsls	r1, r3, #4
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009a      	lsls	r2, r3, #2
 80074dc:	441a      	add	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <UART_SetConfig+0x118>)
 80074ea:	fba3 0302 	umull	r0, r3, r3, r2
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	2064      	movs	r0, #100	; 0x64
 80074f2:	fb00 f303 	mul.w	r3, r0, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	3332      	adds	r3, #50	; 0x32
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <UART_SetConfig+0x118>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007508:	4419      	add	r1, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009a      	lsls	r2, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007520:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <UART_SetConfig+0x118>)
 8007522:	fba3 0302 	umull	r0, r3, r3, r2
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	2064      	movs	r0, #100	; 0x64
 800752a:	fb00 f303 	mul.w	r3, r0, r3
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	3332      	adds	r3, #50	; 0x32
 8007534:	4a07      	ldr	r2, [pc, #28]	; (8007554 <UART_SetConfig+0x118>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	440a      	add	r2, r1
 8007546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40013800 	.word	0x40013800
 8007554:	51eb851f 	.word	0x51eb851f

08007558 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e033      	b.n	80075d2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fd fa10 	bl	80049a4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f825 	bl	80075dc <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075c0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 020c 	bic.w	r2, r2, #12
 80075f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007606:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007610:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007626:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800763e:	f023 030c 	bic.w	r3, r3, #12
 8007642:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007670:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a53      	ldr	r2, [pc, #332]	; (80077c4 <USART_SetConfig+0x1e8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d14f      	bne.n	800771c <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800767c:	f7fe fffe 	bl	800667c <HAL_RCC_GetPCLK2Freq>
 8007680:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009a      	lsls	r2, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	4a4b      	ldr	r2, [pc, #300]	; (80077c8 <USART_SetConfig+0x1ec>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	0119      	lsls	r1, r3, #4
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009a      	lsls	r2, r3, #2
 80076ac:	441a      	add	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076b8:	4b43      	ldr	r3, [pc, #268]	; (80077c8 <USART_SetConfig+0x1ec>)
 80076ba:	fba3 0302 	umull	r0, r3, r3, r2
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	2064      	movs	r0, #100	; 0x64
 80076c2:	fb00 f303 	mul.w	r3, r0, r3
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	3332      	adds	r3, #50	; 0x32
 80076cc:	4a3e      	ldr	r2, [pc, #248]	; (80077c8 <USART_SetConfig+0x1ec>)
 80076ce:	fba2 2303 	umull	r2, r3, r2, r3
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80076da:	4419      	add	r1, r3
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009a      	lsls	r2, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80076f2:	4b35      	ldr	r3, [pc, #212]	; (80077c8 <USART_SetConfig+0x1ec>)
 80076f4:	fba3 0302 	umull	r0, r3, r3, r2
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	2064      	movs	r0, #100	; 0x64
 80076fc:	fb00 f303 	mul.w	r3, r0, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	3332      	adds	r3, #50	; 0x32
 8007706:	4a30      	ldr	r2, [pc, #192]	; (80077c8 <USART_SetConfig+0x1ec>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 020f 	and.w	r2, r3, #15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	440a      	add	r2, r1
 8007718:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 800771a:	e04e      	b.n	80077ba <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 800771c:	f7fe ff9a 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 8007720:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	4a23      	ldr	r2, [pc, #140]	; (80077c8 <USART_SetConfig+0x1ec>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	0119      	lsls	r1, r3, #4
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009a      	lsls	r2, r3, #2
 800774c:	441a      	add	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	fbb2 f2f3 	udiv	r2, r2, r3
 8007758:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <USART_SetConfig+0x1ec>)
 800775a:	fba3 0302 	umull	r0, r3, r3, r2
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	2064      	movs	r0, #100	; 0x64
 8007762:	fb00 f303 	mul.w	r3, r0, r3
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	3332      	adds	r3, #50	; 0x32
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <USART_SetConfig+0x1ec>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800777a:	4419      	add	r1, r3
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009a      	lsls	r2, r3, #2
 8007786:	441a      	add	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <USART_SetConfig+0x1ec>)
 8007794:	fba3 0302 	umull	r0, r3, r3, r2
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	2064      	movs	r0, #100	; 0x64
 800779c:	fb00 f303 	mul.w	r3, r0, r3
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	3332      	adds	r3, #50	; 0x32
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <USART_SetConfig+0x1ec>)
 80077a8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	440a      	add	r2, r1
 80077b8:	609a      	str	r2, [r3, #8]
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40013800 	.word	0x40013800
 80077c8:	51eb851f 	.word	0x51eb851f

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	2600      	movs	r6, #0
 80077d0:	4d0c      	ldr	r5, [pc, #48]	; (8007804 <__libc_init_array+0x38>)
 80077d2:	4c0d      	ldr	r4, [pc, #52]	; (8007808 <__libc_init_array+0x3c>)
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	f000 f830 	bl	8007840 <_init>
 80077e0:	2600      	movs	r6, #0
 80077e2:	4d0a      	ldr	r5, [pc, #40]	; (800780c <__libc_init_array+0x40>)
 80077e4:	4c0a      	ldr	r4, [pc, #40]	; (8007810 <__libc_init_array+0x44>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	080078d8 	.word	0x080078d8
 8007808:	080078d8 	.word	0x080078d8
 800780c:	080078d8 	.word	0x080078d8
 8007810:	080078dc 	.word	0x080078dc

08007814 <memcpy>:
 8007814:	440a      	add	r2, r1
 8007816:	4291      	cmp	r1, r2
 8007818:	f100 33ff 	add.w	r3, r0, #4294967295
 800781c:	d100      	bne.n	8007820 <memcpy+0xc>
 800781e:	4770      	bx	lr
 8007820:	b510      	push	{r4, lr}
 8007822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007826:	4291      	cmp	r1, r2
 8007828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800782c:	d1f9      	bne.n	8007822 <memcpy+0xe>
 800782e:	bd10      	pop	{r4, pc}

08007830 <memset>:
 8007830:	4603      	mov	r3, r0
 8007832:	4402      	add	r2, r0
 8007834:	4293      	cmp	r3, r2
 8007836:	d100      	bne.n	800783a <memset+0xa>
 8007838:	4770      	bx	lr
 800783a:	f803 1b01 	strb.w	r1, [r3], #1
 800783e:	e7f9      	b.n	8007834 <memset+0x4>

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
