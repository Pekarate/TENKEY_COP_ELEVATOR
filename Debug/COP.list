
COP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a4c  08009a4c  0002027c  2**0
                  CONTENTS
  4 .ARM          00000000  08009a4c  08009a4c  0002027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a4c  08009a4c  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08009a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  20000280  08009cd0  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c88  08009cd0  00020c88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bb7  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380c  00000000  00000000  00037e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0003b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebb3  00000000  00000000  0003d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bb6  00000000  00000000  0005c223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c4d2  00000000  00000000  00071dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e2ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000474c  00000000  00000000  0010e300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000280 	.word	0x20000280
 8000128:	00000000 	.word	0x00000000
 800012c:	08009838 	.word	0x08009838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000284 	.word	0x20000284
 8000148:	08009838 	.word	0x08009838

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
extern uint8_t Callstatus[8] ;
extern uint8_t Callstatus_old[8] ;
extern uint8_t Arrow_state;
extern uint32_t display_message;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t Can1RxData[8] = {0};
 8000154:	2300      	movs	r3, #0
 8000156:	62bb      	str	r3, [r7, #40]	; 0x28
 8000158:	2300      	movs	r3, #0
 800015a:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef Can1RxHeader;
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Can1RxHeader, Can1RxData) != HAL_OK)
 800015c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000160:	f107 020c 	add.w	r2, r7, #12
 8000164:	2101      	movs	r1, #1
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f006 fd2a 	bl	8006bc0 <HAL_CAN_GetRxMessage>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	  {
		/* Reception Error */
		  Error_Handler();
 8000172:	f005 ff5f 	bl	8006034 <Error_Handler>
								ri++;
							rc++;								// increment message counter
						}
				}
	  }
}
 8000176:	e077      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
			if ((rc == RX_SIZE))							//software buffer data overrun
 8000178:	4b3d      	ldr	r3, [pc, #244]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b08      	cmp	r3, #8
 8000180:	d107      	bne.n	8000192 <HAL_CAN_RxFifo1MsgPendingCallback+0x46>
						errorregister |= ER_COMMUNICATION;		//set error bits
 8000182:	4b3c      	ldr	r3, [pc, #240]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	f043 0310 	orr.w	r3, r3, #16
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b39      	ldr	r3, [pc, #228]	; (8000274 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800018e:	701a      	strb	r2, [r3, #0]
}
 8000190:	e06a      	b.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
					rx[ri][0] 	= (Can1RxHeader.StdId>>3) & 0xF0;				//read function code
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	b2db      	uxtb	r3, r3
 8000198:	4a37      	ldr	r2, [pc, #220]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800019a:	7812      	ldrb	r2, [r2, #0]
 800019c:	b2d2      	uxtb	r2, r2
 800019e:	4611      	mov	r1, r2
 80001a0:	f023 030f 	bic.w	r3, r3, #15
 80001a4:	b2d8      	uxtb	r0, r3
 80001a6:	4a35      	ldr	r2, [pc, #212]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001a8:	460b      	mov	r3, r1
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	440b      	add	r3, r1
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	4413      	add	r3, r2
 80001b2:	4602      	mov	r2, r0
 80001b4:	701a      	strb	r2, [r3, #0]
					rx[ri][1] 	= Can1RxHeader.StdId & 0x3F;   //(RXB1SIDL >> 5) + ((RXB1SIDH & 0x0F) << 3);	// node ID
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	4a2f      	ldr	r2, [pc, #188]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001c6:	b2d8      	uxtb	r0, r3
 80001c8:	4a2c      	ldr	r2, [pc, #176]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	3301      	adds	r3, #1
 80001d6:	4602      	mov	r2, r0
 80001d8:	701a      	strb	r2, [r3, #0]
					if ((rx[ri][0] != RSDO) || (rx[ri][1] == node_id))
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a26      	ldr	r2, [pc, #152]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 80001e4:	460b      	mov	r3, r1
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	440b      	add	r3, r1
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2bc0      	cmp	r3, #192	; 0xc0
 80001f4:	d110      	bne.n	8000218 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000200:	460b      	mov	r3, r1
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	4413      	add	r3, r2
 800020a:	3301      	adds	r3, #1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d127      	bne.n	8000268 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>
						memcpy((void *)&rx[ri][2],Can1RxData,Can1RxHeader.DLC);
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	4613      	mov	r3, r2
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	3302      	adds	r3, #2
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800022c:	4413      	add	r3, r2
 800022e:	69fa      	ldr	r2, [r7, #28]
 8000230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f008 febd 	bl	8008fb4 <memcpy>
							if (ri == (RX_SIZE-1))				//increment RX message write pointer
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2b07      	cmp	r3, #7
 8000242:	d103      	bne.n	800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>
								ri = 0;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
 800024a:	e006      	b.n	800025a <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
								ri++;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	3301      	adds	r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000258:	701a      	strb	r2, [r3, #0]
							rc++;								// increment message counter
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	3301      	adds	r3, #1
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3730      	adds	r7, #48	; 0x30
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200003e0 	.word	0x200003e0
 8000274:	20000338 	.word	0x20000338
 8000278:	200004ae 	.word	0x200004ae
 800027c:	200003ec 	.word	0x200003ec
 8000280:	2000088f 	.word	0x2000088f

08000284 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t hse_heartbeat_time = 0;
uint8_t CanRxData[8] = {0};
CAN_RxHeaderTypeDef CanRxHeader;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	static uint32_t Timettt = 0;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CanRxData) != HAL_OK)
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000290:	2100      	movs	r1, #0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f006 fc94 	bl	8006bc0 <HAL_CAN_GetRxMessage>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
	/* Reception Error */
	  Error_Handler();
 800029e:	f005 fec9 	bl	8006034 <Error_Handler>
 80002a2:	e01a      	b.n	80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	}
	else
	{
		if(((CanRxHeader.StdId>>3) & 0xF0 )== 0)
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			hsetime = HSETIME;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002b4:	2214      	movs	r2, #20
 80002b6:	701a      	strb	r2, [r3, #0]
		}
		if (((CanRxHeader.StdId & 0x3F) - 1) < MAX_LIFT)			// Heartbeat from HSE
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d803      	bhi.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
				hsetime = HSETIME;			// reset HSE supervisor time
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002c8:	2214      	movs	r2, #20
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e002      	b.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
		{
			hsetime = HSETIME-10;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	701a      	strb	r2, [r3, #0]

		}
		hse_heartbeat = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
	}
	hse_heartbeat_time = HAL_GetTick() - Timettt;
 80002da:	f006 f961 	bl	80065a0 <HAL_GetTick>
 80002de:	4602      	mov	r2, r0
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80002e8:	6013      	str	r3, [r2, #0]
	 Timettt = HAL_GetTick();
 80002ea:	f006 f959 	bl	80065a0 <HAL_GetTick>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200002a0 	.word	0x200002a0
 8000300:	2000043c 	.word	0x2000043c
 8000304:	20000b18 	.word	0x20000b18
 8000308:	20000332 	.word	0x20000332
 800030c:	200002b8 	.word	0x200002b8
 8000310:	2000029c 	.word	0x2000029c

08000314 <CAN_transmit_Interrupt>:

uint16_t mallbox[3] = {0};
uint16_t txmallbox =0;
uint16_t txmallbox_request =0;
void CAN_transmit_Interrupt(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
	if (tc)											// more messages to send
 800031a:	4b3b      	ldr	r3, [pc, #236]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d06d      	beq.n	8000400 <CAN_transmit_Interrupt+0xec>
	{
		CAN_TxHeaderTypeDef CanTxHeader;
		uint8_t CanTxData[8] = {0};
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
		CanTxHeader.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1] ;
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4a36      	ldr	r2, [pc, #216]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000336:	460b      	mov	r3, r1
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	492f      	ldr	r1, [pc, #188]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000354:	4603      	mov	r3, r0
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4403      	add	r3, r0
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	3301      	adds	r3, #1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4413      	add	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
		CanTxHeader.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	61bb      	str	r3, [r7, #24]
		CanTxHeader.IDE   = CAN_ID_STD;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
		CanTxHeader.RTR	= CAN_RTR_DATA;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
		memcpy(CanTxData,(void *)(tx[to]+2),8);
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <CAN_transmit_Interrupt+0xfc>)
 80003a0:	4413      	add	r3, r2
 80003a2:	1c9a      	adds	r2, r3, #2
 80003a4:	463b      	mov	r3, r7
 80003a6:	6810      	ldr	r0, [r2, #0]
 80003a8:	6851      	ldr	r1, [r2, #4]
 80003aa:	c303      	stmia	r3!, {r0, r1}
		if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &pTxMailbox) == HAL_OK)
 80003ac:	463a      	mov	r2, r7
 80003ae:	f107 0108 	add.w	r1, r7, #8
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <CAN_transmit_Interrupt+0x100>)
 80003b4:	4818      	ldr	r0, [pc, #96]	; (8000418 <CAN_transmit_Interrupt+0x104>)
 80003b6:	f006 fb29 	bl	8006a0c <HAL_CAN_AddTxMessage>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <CAN_transmit_Interrupt+0xba>
		{
			txmallbox++;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <CAN_transmit_Interrupt+0x108>)
 80003ca:	801a      	strh	r2, [r3, #0]
 80003cc:	e001      	b.n	80003d2 <CAN_transmit_Interrupt+0xbe>
		}
		else
		{
			Error_Handler();
 80003ce:	f005 fe31 	bl	8006034 <Error_Handler>
		}
		tc--;														//decrement TX message counter
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3b01      	subs	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <CAN_transmit_Interrupt+0xf4>)
 80003de:	701a      	strb	r2, [r3, #0]
		if (to == (TX_SIZE-1))					//increment TX message read pointer
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b07      	cmp	r3, #7
 80003e8:	d103      	bne.n	80003f2 <CAN_transmit_Interrupt+0xde>
			to = 0;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
		else
			to++;
	}
}
 80003f0:	e006      	b.n	8000400 <CAN_transmit_Interrupt+0xec>
			to++;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <CAN_transmit_Interrupt+0xf8>)
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200003e8 	.word	0x200003e8
 800040c:	200004ac 	.word	0x200004ac
 8000410:	20000458 	.word	0x20000458
 8000414:	200003e4 	.word	0x200003e4
 8000418:	20000854 	.word	0x20000854
 800041c:	200002ae 	.word	0x200002ae

08000420 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	mallbox[0]++;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8000432:	801a      	strh	r2, [r3, #0]
	CAN_transmit_Interrupt();
 8000434:	f7ff ff6e 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200002a8 	.word	0x200002a8

08000444 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	mallbox[1]++;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	3301      	adds	r3, #1
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000456:	805a      	strh	r2, [r3, #2]
	CAN_transmit_Interrupt();
 8000458:	f7ff ff5c 	bl	8000314 <CAN_transmit_Interrupt>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200002a8 	.word	0x200002a8

08000468 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	mallbox[2]++;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000472:	889b      	ldrh	r3, [r3, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800047a:	809a      	strh	r2, [r3, #4]
	CAN_transmit_Interrupt();
 800047c:	f7ff ff4a 	bl	8000314 <CAN_transmit_Interrupt>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200002a8 	.word	0x200002a8

0800048c <Init_Can>:

void Init_Can (void){
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0
	uint8_t i, j;

	rc = 0;       							  //clear all CAN variables
 8000492:	4b82      	ldr	r3, [pc, #520]	; (800069c <Init_Can+0x210>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	ri = 0;
 8000498:	4b81      	ldr	r3, [pc, #516]	; (80006a0 <Init_Can+0x214>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	ro = 0;
 800049e:	4b81      	ldr	r3, [pc, #516]	; (80006a4 <Init_Can+0x218>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	tc = 0;
 80004a4:	4b80      	ldr	r3, [pc, #512]	; (80006a8 <Init_Can+0x21c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	ti = 0;
 80004aa:	4b80      	ldr	r3, [pc, #512]	; (80006ac <Init_Can+0x220>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	to = 0;
 80004b0:	4b7f      	ldr	r3, [pc, #508]	; (80006b0 <Init_Can+0x224>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < RX_SIZE; i++)	//clear rx buffer
 80004b6:	2300      	movs	r3, #0
 80004b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004bc:	e01e      	b.n	80004fc <Init_Can+0x70>
		{
			for (j = 0; j < 10; j++)
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80004c4:	e011      	b.n	80004ea <Init_Can+0x5e>
				rx[i][j] = 0;
 80004c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80004ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80004ce:	4879      	ldr	r0, [pc, #484]	; (80006b4 <Init_Can+0x228>)
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4403      	add	r3, r0
 80004da:	440b      	add	r3, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++)
 80004e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004e4:	3301      	adds	r3, #1
 80004e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80004ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004ee:	2b09      	cmp	r3, #9
 80004f0:	d9e9      	bls.n	80004c6 <Init_Can+0x3a>
	for (i = 0; i < RX_SIZE; i++)	//clear rx buffer
 80004f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004f6:	3301      	adds	r3, #1
 80004f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	2b07      	cmp	r3, #7
 8000502:	d9dc      	bls.n	80004be <Init_Can+0x32>
		}
	for (i = 0; i < TX_SIZE; i++)	//clear tx buffer
 8000504:	2300      	movs	r3, #0
 8000506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800050a:	e01e      	b.n	800054a <Init_Can+0xbe>
		{
			for (j = 0; j < 10; j++)
 800050c:	2300      	movs	r3, #0
 800050e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000512:	e011      	b.n	8000538 <Init_Can+0xac>
				tx[i][j] = 0;
 8000514:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000518:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800051c:	4866      	ldr	r0, [pc, #408]	; (80006b8 <Init_Can+0x22c>)
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4403      	add	r3, r0
 8000528:	440b      	add	r3, r1
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++)
 800052e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000532:	3301      	adds	r3, #1
 8000534:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000538:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800053c:	2b09      	cmp	r3, #9
 800053e:	d9e9      	bls.n	8000514 <Init_Can+0x88>
	for (i = 0; i < TX_SIZE; i++)	//clear tx buffer
 8000540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000544:	3301      	adds	r3, #1
 8000546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800054a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800054e:	2b07      	cmp	r3, #7
 8000550:	d9dc      	bls.n	800050c <Init_Can+0x80>
		}
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh =((HEARTBEAT<<3)+HSE_ID)<<5;
 800055e:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000562:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =((HEARTBEAT<<3)+HSE_ID)<<5;
 8000568:	f24e 0320 	movw	r3, #57376	; 0xe020
 800056c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = ENABLE;
 8000576:	2301      	movs	r3, #1
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 800057a:	230e      	movs	r3, #14
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	484e      	ldr	r0, [pc, #312]	; (80006bc <Init_Can+0x230>)
 8000584:	f006 f935 	bl	80067f2 <HAL_CAN_ConfigFilter>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <Init_Can+0x106>
	{
	/* Filter configuration Error */
		Error_Handler();
 800058e:	f005 fd51 	bl	8006034 <Error_Handler>
	}
	sFilterConfig.FilterBank = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh =PDO_OUT<<8;
 8000596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 80005a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005a4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4842      	ldr	r0, [pc, #264]	; (80006bc <Init_Can+0x230>)
 80005b4:	f006 f91d 	bl	80067f2 <HAL_CAN_ConfigFilter>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <Init_Can+0x136>
	{
	/* Filter configuration Error */
		Error_Handler();
 80005be:	f005 fd39 	bl	8006034 <Error_Handler>
	}
	sFilterConfig.FilterBank = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = ((RSDO | (node_id >> 3)) << 8) + (node_id <<5);
 80005c6:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <Init_Can+0x234>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	021a      	lsls	r2, r3, #8
 80005d6:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <Init_Can+0x234>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	015b      	lsls	r3, r3, #5
 80005dc:	4413      	add	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 80005e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005e8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4832      	ldr	r0, [pc, #200]	; (80006bc <Init_Can+0x230>)
 80005f4:	f006 f8fd 	bl	80067f2 <HAL_CAN_ConfigFilter>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <Init_Can+0x176>
	{
	/* Filter configuration Error */
		Error_Handler();
 80005fe:	f005 fd19 	bl	8006034 <Error_Handler>
	}
	sFilterConfig.FilterBank = 3;
 8000602:	2303      	movs	r3, #3
 8000604:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = NMT <<8;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 800060e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000612:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4827      	ldr	r0, [pc, #156]	; (80006bc <Init_Can+0x230>)
 800061e:	f006 f8e8 	bl	80067f2 <HAL_CAN_ConfigFilter>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <Init_Can+0x1a0>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000628:	f005 fd04 	bl	8006034 <Error_Handler>
	}
	sFilterConfig.FilterBank = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = (MPDO << 8) +(EMS_ID << 5);
 8000630:	f24a 1360 	movw	r3, #41312	; 0xa160
 8000634:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 800063a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800063e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <Init_Can+0x230>)
 800064a:	f006 f8d2 	bl	80067f2 <HAL_CAN_ConfigFilter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <Init_Can+0x1cc>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000654:	f005 fcee 	bl	8006034 <Error_Handler>
	}
	sFilterConfig.FilterBank = 5;
 8000658:	2305      	movs	r3, #5
 800065a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterIdHigh = FC_D << 8;
 800065c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000660:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x00;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh =0xF000;
 8000666:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800066a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]

	if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <Init_Can+0x230>)
 8000676:	f006 f8bc 	bl	80067f2 <HAL_CAN_ConfigFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <Init_Can+0x1f8>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000680:	f005 fcd8 	bl	8006034 <Error_Handler>

	INTCONbits.GIEH		= 1;					// low priority interrupts enable
#else
	#warning  add filter and enbale interrupt

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING|CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000684:	2113      	movs	r1, #19
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <Init_Can+0x230>)
 8000688:	f006 fbab 	bl	8006de2 <HAL_CAN_ActivateNotification>
	{

	}
	HAL_CAN_Start(&hcan);
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <Init_Can+0x230>)
 800068e:	f006 f979 	bl	8006984 <HAL_CAN_Start>
#endif
}
 8000692:	bf00      	nop
 8000694:	3730      	adds	r7, #48	; 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200003e0 	.word	0x200003e0
 80006a0:	200004ae 	.word	0x200004ae
 80006a4:	200004ad 	.word	0x200004ad
 80006a8:	200003e8 	.word	0x200003e8
 80006ac:	200004af 	.word	0x200004af
 80006b0:	200004ac 	.word	0x200004ac
 80006b4:	200003ec 	.word	0x200003ec
 80006b8:	20000458 	.word	0x20000458
 80006bc:	20000854 	.word	0x20000854
 80006c0:	2000088f 	.word	0x2000088f

080006c4 <read_rx>:

void read_rx (void){
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
	uint8_t 	size;
	uint8_t	sub;
	uint32_t	value;
	uint8_t 	buffer [8];

	switch (rx [ro][0])
 80006ca:	4bb6      	ldr	r3, [pc, #728]	; (80009a4 <read_rx+0x2e0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4ab5      	ldr	r2, [pc, #724]	; (80009a8 <read_rx+0x2e4>)
 80006d2:	460b      	mov	r3, r1
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2bf0      	cmp	r3, #240	; 0xf0
 80006e2:	f000 83c6 	beq.w	8000e72 <read_rx+0x7ae>
 80006e6:	2bf0      	cmp	r3, #240	; 0xf0
 80006e8:	f300 84b3 	bgt.w	8001052 <read_rx+0x98e>
 80006ec:	2bd0      	cmp	r3, #208	; 0xd0
 80006ee:	f000 83f1 	beq.w	8000ed4 <read_rx+0x810>
 80006f2:	2bd0      	cmp	r3, #208	; 0xd0
 80006f4:	f300 84ad 	bgt.w	8001052 <read_rx+0x98e>
 80006f8:	2bc0      	cmp	r3, #192	; 0xc0
 80006fa:	d043      	beq.n	8000784 <read_rx+0xc0>
 80006fc:	2bc0      	cmp	r3, #192	; 0xc0
 80006fe:	f300 84a8 	bgt.w	8001052 <read_rx+0x98e>
 8000702:	2ba0      	cmp	r3, #160	; 0xa0
 8000704:	f000 8446 	beq.w	8000f94 <read_rx+0x8d0>
 8000708:	2ba0      	cmp	r3, #160	; 0xa0
 800070a:	f300 84a2 	bgt.w	8001052 <read_rx+0x98e>
 800070e:	2b00      	cmp	r3, #0
 8000710:	f000 8374 	beq.w	8000dfc <read_rx+0x738>
 8000714:	2b80      	cmp	r3, #128	; 0x80
 8000716:	f040 849c 	bne.w	8001052 <read_rx+0x98e>
		{// message function code
			case (PDO_OUT) :						//receive PDO virtual output
			 	index = rx[ro][2];				//read function code
 800071a:	4ba2      	ldr	r3, [pc, #648]	; (80009a4 <read_rx+0x2e0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4aa1      	ldr	r2, [pc, #644]	; (80009a8 <read_rx+0x2e4>)
 8000722:	460b      	mov	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	3302      	adds	r3, #2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	823b      	strh	r3, [r7, #16]
				if (index)								//function code > 0
 8000734:	8a3b      	ldrh	r3, [r7, #16]
 8000736:	2b00      	cmp	r3, #0
 8000738:	f000 8484 	beq.w	8001044 <read_rx+0x980>
					{
						if (nmtstate == OPERATIONAL)				// only in operational state
 800073c:	4b9b      	ldr	r3, [pc, #620]	; (80009ac <read_rx+0x2e8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b05      	cmp	r3, #5
 8000742:	f040 847f 	bne.w	8001044 <read_rx+0x980>
							{
								for (i = 0; i < MAX_IO_TYPE; i++)					// read output function
 8000746:	2300      	movs	r3, #0
 8000748:	77fb      	strb	r3, [r7, #31]
 800074a:	e013      	b.n	8000774 <read_rx+0xb0>
									virt_out [i] = rx[ro][i + 2];	// write to virtual output mapping
 800074c:	4b95      	ldr	r3, [pc, #596]	; (80009a4 <read_rx+0x2e0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461c      	mov	r4, r3
 8000752:	7ffb      	ldrb	r3, [r7, #31]
 8000754:	1c99      	adds	r1, r3, #2
 8000756:	7ffa      	ldrb	r2, [r7, #31]
 8000758:	4893      	ldr	r0, [pc, #588]	; (80009a8 <read_rx+0x2e4>)
 800075a:	4623      	mov	r3, r4
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4423      	add	r3, r4
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4403      	add	r3, r0
 8000764:	440b      	add	r3, r1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2d9      	uxtb	r1, r3
 800076a:	4b91      	ldr	r3, [pc, #580]	; (80009b0 <read_rx+0x2ec>)
 800076c:	5499      	strb	r1, [r3, r2]
								for (i = 0; i < MAX_IO_TYPE; i++)					// read output function
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	3301      	adds	r3, #1
 8000772:	77fb      	strb	r3, [r7, #31]
 8000774:	7ffb      	ldrb	r3, [r7, #31]
 8000776:	2b06      	cmp	r3, #6
 8000778:	d9e8      	bls.n	800074c <read_rx+0x88>
								set_output (virt_out);					// set physical outputs
 800077a:	488d      	ldr	r0, [pc, #564]	; (80009b0 <read_rx+0x2ec>)
 800077c:	f001 f99e 	bl	8001abc <set_output>
							}
					}
				break;
 8000780:	f000 bc60 	b.w	8001044 <read_rx+0x980>

			case (RSDO) :									// receive SDO message
				type = rx [ro][2];					// read SDO type	(������)
 8000784:	4b87      	ldr	r3, [pc, #540]	; (80009a4 <read_rx+0x2e0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	4a87      	ldr	r2, [pc, #540]	; (80009a8 <read_rx+0x2e4>)
 800078c:	460b      	mov	r3, r1
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	3302      	adds	r3, #2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	74fb      	strb	r3, [r7, #19]
				switch (type & COMMAND_SPECIFIER)			// check command specifier of SDO
 800079c:	7cfb      	ldrb	r3, [r7, #19]
 800079e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80007a2:	2b80      	cmp	r3, #128	; 0x80
 80007a4:	f000 831a 	beq.w	8000ddc <read_rx+0x718>
 80007a8:	2b80      	cmp	r3, #128	; 0x80
 80007aa:	f300 8321 	bgt.w	8000df0 <read_rx+0x72c>
 80007ae:	2b60      	cmp	r3, #96	; 0x60
 80007b0:	f000 823a 	beq.w	8000c28 <read_rx+0x564>
 80007b4:	2b60      	cmp	r3, #96	; 0x60
 80007b6:	f300 831b 	bgt.w	8000df0 <read_rx+0x72c>
 80007ba:	2b40      	cmp	r3, #64	; 0x40
 80007bc:	f000 8196 	beq.w	8000aec <read_rx+0x428>
 80007c0:	2b40      	cmp	r3, #64	; 0x40
 80007c2:	f300 8315 	bgt.w	8000df0 <read_rx+0x72c>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 809d 	beq.w	8000906 <read_rx+0x242>
 80007cc:	2b20      	cmp	r3, #32
 80007ce:	f040 830f 	bne.w	8000df0 <read_rx+0x72c>
					{
						case (INIT_WRITE_REQ):							//init write or expedited write
							index = *(uint16_t *)&rx[ro][3];			//read object index
 80007d2:	4b74      	ldr	r3, [pc, #464]	; (80009a4 <read_rx+0x2e0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	3303      	adds	r3, #3
 80007e2:	4a71      	ldr	r2, [pc, #452]	; (80009a8 <read_rx+0x2e4>)
 80007e4:	4413      	add	r3, r2
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	823b      	strh	r3, [r7, #16]
							subindex = rx[ro][5];							//read object subindex
 80007ea:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <read_rx+0x2e0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4619      	mov	r1, r3
 80007f0:	4a6d      	ldr	r2, [pc, #436]	; (80009a8 <read_rx+0x2e4>)
 80007f2:	460b      	mov	r3, r1
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	3305      	adds	r3, #5
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	73fb      	strb	r3, [r7, #15]
							value = search_dict(index, subindex, type, &pos);
 8000802:	7cfa      	ldrb	r2, [r7, #19]
 8000804:	7bf9      	ldrb	r1, [r7, #15]
 8000806:	8a38      	ldrh	r0, [r7, #16]
 8000808:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <read_rx+0x2f0>)
 800080a:	f003 fa5b 	bl	8003cc4 <search_dict>
 800080e:	61b8      	str	r0, [r7, #24]
							if (value)							//wrong access to object dictionary
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <read_rx+0x15a>
								abort_sdo (value);		//abort SDO transfer
 8000816:	69b8      	ldr	r0, [r7, #24]
 8000818:	f000 fd14 	bl	8001244 <abort_sdo>
													sdo_subindex = subindex;
													sdo_timer = SDO_TIMER;		// start SDO time out timer	(�ȴ��Է����Ͷ�д����)
												}
										}
								}
							break;
 800081c:	e2ec      	b.n	8000df8 <read_rx+0x734>
									if(index == PORT_OUT)
 800081e:	8a3b      	ldrh	r3, [r7, #16]
 8000820:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8000824:	4293      	cmp	r3, r2
 8000826:	d126      	bne.n	8000876 <read_rx+0x1b2>
											*((uint8_t *)dict [pos].pointer + subindex) = rx[ro][6];
 8000828:	4b5e      	ldr	r3, [pc, #376]	; (80009a4 <read_rx+0x2e0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <read_rx+0x2f0>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4a61      	ldr	r2, [pc, #388]	; (80009b8 <read_rx+0x2f4>)
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	4413      	add	r3, r2
 8000838:	3308      	adds	r3, #8
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	441a      	add	r2, r3
 8000840:	4959      	ldr	r1, [pc, #356]	; (80009a8 <read_rx+0x2e4>)
 8000842:	4603      	mov	r3, r0
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4403      	add	r3, r0
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	440b      	add	r3, r1
 800084c:	3306      	adds	r3, #6
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	7013      	strb	r3, [r2, #0]
											sdo_response (INIT_WRITE_RESP, index, subindex, *(uint32_t *)&rx[ro][6]);
 8000854:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <read_rx+0x2e0>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	3306      	adds	r3, #6
 8000864:	4a50      	ldr	r2, [pc, #320]	; (80009a8 <read_rx+0x2e4>)
 8000866:	4413      	add	r3, r2
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	8a39      	ldrh	r1, [r7, #16]
 800086e:	2060      	movs	r0, #96	; 0x60
 8000870:	f000 fd96 	bl	80013a0 <sdo_response>
							break;
 8000874:	e2c0      	b.n	8000df8 <read_rx+0x734>
									  	if (type & EXPEDITED_BIT)		// expedited transfer
 8000876:	7cfb      	ldrb	r3, [r7, #19]
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d032      	beq.n	80008e6 <read_rx+0x222>
											  	value = write_dict (pos, subindex, *(uint32_t *)&rx[ro][6]);
 8000880:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <read_rx+0x2f0>)
 8000882:	7818      	ldrb	r0, [r3, #0]
 8000884:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <read_rx+0x2e0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4613      	mov	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	3306      	adds	r3, #6
 8000894:	4a44      	ldr	r2, [pc, #272]	; (80009a8 <read_rx+0x2e4>)
 8000896:	4413      	add	r3, r2
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	4619      	mov	r1, r3
 800089e:	f003 f925 	bl	8003aec <write_dict>
 80008a2:	4603      	mov	r3, r0
 80008a4:	61bb      	str	r3, [r7, #24]
											  	if (value)						// value out of range
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <read_rx+0x1f0>
														abort_sdo (value);	// abort SDO transfer
 80008ac:	69b8      	ldr	r0, [r7, #24]
 80008ae:	f000 fcc9 	bl	8001244 <abort_sdo>
							break;
 80008b2:	e2a1      	b.n	8000df8 <read_rx+0x734>
															sdo_response (INIT_WRITE_RESP, index, subindex, *(uint32_t *)&rx[ro][6]);
 80008b4:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <read_rx+0x2e0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	3306      	adds	r3, #6
 80008c4:	4a38      	ldr	r2, [pc, #224]	; (80009a8 <read_rx+0x2e4>)
 80008c6:	4413      	add	r3, r2
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	8a39      	ldrh	r1, [r7, #16]
 80008ce:	2060      	movs	r0, #96	; 0x60
 80008d0:	f000 fd66 	bl	80013a0 <sdo_response>
															if(index == ARROW_MODE)
 80008d4:	8a3b      	ldrh	r3, [r7, #16]
 80008d6:	f242 42ca 	movw	r2, #9418	; 0x24ca
 80008da:	4293      	cmp	r3, r2
 80008dc:	f040 828c 	bne.w	8000df8 <read_rx+0x734>
																Arrow_Status( );
 80008e0:	f003 ffb6 	bl	8004850 <Arrow_Status>
							break;
 80008e4:	e288      	b.n	8000df8 <read_rx+0x734>
													sdo_response (INIT_WRITE_RESP, index, subindex, 0);
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	8a39      	ldrh	r1, [r7, #16]
 80008ea:	2300      	movs	r3, #0
 80008ec:	2060      	movs	r0, #96	; 0x60
 80008ee:	f000 fd57 	bl	80013a0 <sdo_response>
													sdo_index = index;				// save object index and subindex
 80008f2:	4a32      	ldr	r2, [pc, #200]	; (80009bc <read_rx+0x2f8>)
 80008f4:	8a3b      	ldrh	r3, [r7, #16]
 80008f6:	8013      	strh	r3, [r2, #0]
													sdo_subindex = subindex;
 80008f8:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <read_rx+0x2fc>)
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	7013      	strb	r3, [r2, #0]
													sdo_timer = SDO_TIMER;		// start SDO time out timer	(�ȴ��Է����Ͷ�д����)
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <read_rx+0x300>)
 8000900:	220a      	movs	r2, #10
 8000902:	701a      	strb	r2, [r3, #0]
							break;
 8000904:	e278      	b.n	8000df8 <read_rx+0x734>

						case (WRITE_SEGM_REQ):							// write segment
							if (!sdo_index)										// no init write request before
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <read_rx+0x2f8>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d103      	bne.n	8000918 <read_rx+0x254>
								abort_sdo (SDO_UNSUPPORTED);
 8000910:	482d      	ldr	r0, [pc, #180]	; (80009c8 <read_rx+0x304>)
 8000912:	f000 fc97 	bl	8001244 <abort_sdo>
 8000916:	e0df      	b.n	8000ad8 <read_rx+0x414>
							else if (type & TOGGLE_BIT)				// toggle bit must be 0 for 1. segment
 8000918:	7cfb      	ldrb	r3, [r7, #19]
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <read_rx+0x266>
								abort_sdo (SDO_TOGGLEBIT);
 8000922:	482a      	ldr	r0, [pc, #168]	; (80009cc <read_rx+0x308>)
 8000924:	f000 fc8e 	bl	8001244 <abort_sdo>
 8000928:	e0d6      	b.n	8000ad8 <read_rx+0x414>
							else if (!(type & LAST_SEGM_BIT))// more segments to write
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d103      	bne.n	800093c <read_rx+0x278>
								abort_sdo (SDO_L_TO_HIGH);
 8000934:	4826      	ldr	r0, [pc, #152]	; (80009d0 <read_rx+0x30c>)
 8000936:	f000 fc85 	bl	8001244 <abort_sdo>
 800093a:	e0cd      	b.n	8000ad8 <read_rx+0x414>
							else
								{
									switch (sdo_index)
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <read_rx+0x2f8>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000946:	f000 8083 	beq.w	8000a50 <read_rx+0x38c>
 800094a:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 800094e:	f300 80be 	bgt.w	8000ace <read_rx+0x40a>
 8000952:	f246 0211 	movw	r2, #24593	; 0x6011
 8000956:	4293      	cmp	r3, r2
 8000958:	d003      	beq.n	8000962 <read_rx+0x29e>
 800095a:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 800095e:	d01e      	beq.n	800099e <read_rx+0x2da>
 8000960:	e0b5      	b.n	8000ace <read_rx+0x40a>
										{
											case (VIRTUAL_OUTPUT) :	// virtual output mapping object
												for (i = 0; i < MAX_IO_TYPE; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	77fb      	strb	r3, [r7, #31]
 8000966:	e013      	b.n	8000990 <read_rx+0x2cc>
													virt_out [i] = rx[ro][3 + i];
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <read_rx+0x2e0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461c      	mov	r4, r3
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	1cd9      	adds	r1, r3, #3
 8000972:	7ffa      	ldrb	r2, [r7, #31]
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <read_rx+0x2e4>)
 8000976:	4623      	mov	r3, r4
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4423      	add	r3, r4
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4403      	add	r3, r0
 8000980:	440b      	add	r3, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2d9      	uxtb	r1, r3
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <read_rx+0x2ec>)
 8000988:	5499      	strb	r1, [r3, r2]
												for (i = 0; i < MAX_IO_TYPE; i++)
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	3301      	adds	r3, #1
 800098e:	77fb      	strb	r3, [r7, #31]
 8000990:	7ffb      	ldrb	r3, [r7, #31]
 8000992:	2b06      	cmp	r3, #6
 8000994:	d9e8      	bls.n	8000968 <read_rx+0x2a4>
												set_output (virt_out);
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <read_rx+0x2ec>)
 8000998:	f001 f890 	bl	8001abc <set_output>
												break;
 800099c:	e097      	b.n	8000ace <read_rx+0x40a>

											case (INPUT_GROUP):				// input group
												for (i = 0; i < 5; i++)	// dont write input state (uint8_t 5)
 800099e:	2300      	movs	r3, #0
 80009a0:	77fb      	strb	r3, [r7, #31]
 80009a2:	e051      	b.n	8000a48 <read_rx+0x384>
 80009a4:	200004ad 	.word	0x200004ad
 80009a8:	200003ec 	.word	0x200003ec
 80009ac:	20000b24 	.word	0x20000b24
 80009b0:	20000888 	.word	0x20000888
 80009b4:	2000033c 	.word	0x2000033c
 80009b8:	2000006c 	.word	0x2000006c
 80009bc:	20000322 	.word	0x20000322
 80009c0:	20000324 	.word	0x20000324
 80009c4:	20000325 	.word	0x20000325
 80009c8:	06010000 	.word	0x06010000
 80009cc:	05030000 	.word	0x05030000
 80009d0:	06070012 	.word	0x06070012
													{
														if (inpar [sdo_subindex - 1][i] != rx[ro][3 + i])
 80009d4:	4b9d      	ldr	r3, [pc, #628]	; (8000c4c <read_rx+0x588>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	7ff9      	ldrb	r1, [r7, #31]
 80009de:	489c      	ldr	r0, [pc, #624]	; (8000c50 <read_rx+0x58c>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	1a9b      	subs	r3, r3, r2
 80009e6:	4403      	add	r3, r0
 80009e8:	440b      	add	r3, r1
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b99      	ldr	r3, [pc, #612]	; (8000c54 <read_rx+0x590>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461c      	mov	r4, r3
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	1cd9      	adds	r1, r3, #3
 80009f6:	4898      	ldr	r0, [pc, #608]	; (8000c58 <read_rx+0x594>)
 80009f8:	4623      	mov	r3, r4
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4423      	add	r3, r4
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4403      	add	r3, r0
 8000a02:	440b      	add	r3, r1
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d01a      	beq.n	8000a42 <read_rx+0x37e>
															inpar [sdo_subindex - 1][i] = rx[ro][3 + i];
 8000a0c:	4b91      	ldr	r3, [pc, #580]	; (8000c54 <read_rx+0x590>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461d      	mov	r5, r3
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	1cd8      	adds	r0, r3, #3
 8000a16:	4b8d      	ldr	r3, [pc, #564]	; (8000c4c <read_rx+0x588>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	7ff9      	ldrb	r1, [r7, #31]
 8000a20:	4c8d      	ldr	r4, [pc, #564]	; (8000c58 <read_rx+0x594>)
 8000a22:	462b      	mov	r3, r5
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	442b      	add	r3, r5
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4423      	add	r3, r4
 8000a2c:	4403      	add	r3, r0
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2dc      	uxtb	r4, r3
 8000a32:	4887      	ldr	r0, [pc, #540]	; (8000c50 <read_rx+0x58c>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	1a9b      	subs	r3, r3, r2
 8000a3a:	4403      	add	r3, r0
 8000a3c:	440b      	add	r3, r1
 8000a3e:	4622      	mov	r2, r4
 8000a40:	701a      	strb	r2, [r3, #0]
												for (i = 0; i < 5; i++)	// dont write input state (uint8_t 5)
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	3301      	adds	r3, #1
 8000a46:	77fb      	strb	r3, [r7, #31]
 8000a48:	7ffb      	ldrb	r3, [r7, #31]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d9c2      	bls.n	80009d4 <read_rx+0x310>
													}
												break;
 8000a4e:	e03e      	b.n	8000ace <read_rx+0x40a>

											case (OUTPUT_GROUP):			// output group
												for (i = 0; i < 5; i++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	77fb      	strb	r3, [r7, #31]
 8000a54:	e035      	b.n	8000ac2 <read_rx+0x3fe>
													{
														if (outpar [sdo_subindex - 1][i] != rx[ro][3 + i])
 8000a56:	4b7d      	ldr	r3, [pc, #500]	; (8000c4c <read_rx+0x588>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	1e5a      	subs	r2, r3, #1
 8000a5e:	7ffb      	ldrb	r3, [r7, #31]
 8000a60:	497e      	ldr	r1, [pc, #504]	; (8000c5c <read_rx+0x598>)
 8000a62:	00d2      	lsls	r2, r2, #3
 8000a64:	440a      	add	r2, r1
 8000a66:	4413      	add	r3, r2
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b7a      	ldr	r3, [pc, #488]	; (8000c54 <read_rx+0x590>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461c      	mov	r4, r3
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	1cd9      	adds	r1, r3, #3
 8000a74:	4878      	ldr	r0, [pc, #480]	; (8000c58 <read_rx+0x594>)
 8000a76:	4623      	mov	r3, r4
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4423      	add	r3, r4
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4403      	add	r3, r0
 8000a80:	440b      	add	r3, r1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d018      	beq.n	8000abc <read_rx+0x3f8>
															outpar [sdo_subindex - 1][i] = rx[ro][3 + i];
 8000a8a:	4b72      	ldr	r3, [pc, #456]	; (8000c54 <read_rx+0x590>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461d      	mov	r5, r3
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	1cd8      	adds	r0, r3, #3
 8000a94:	4b6d      	ldr	r3, [pc, #436]	; (8000c4c <read_rx+0x588>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	1e59      	subs	r1, r3, #1
 8000a9c:	7ffa      	ldrb	r2, [r7, #31]
 8000a9e:	4c6e      	ldr	r4, [pc, #440]	; (8000c58 <read_rx+0x594>)
 8000aa0:	462b      	mov	r3, r5
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	442b      	add	r3, r5
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4423      	add	r3, r4
 8000aaa:	4403      	add	r3, r0
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2dc      	uxtb	r4, r3
 8000ab0:	486a      	ldr	r0, [pc, #424]	; (8000c5c <read_rx+0x598>)
 8000ab2:	00cb      	lsls	r3, r1, #3
 8000ab4:	4403      	add	r3, r0
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4622      	mov	r2, r4
 8000aba:	701a      	strb	r2, [r3, #0]
												for (i = 0; i < 5; i++)
 8000abc:	7ffb      	ldrb	r3, [r7, #31]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	77fb      	strb	r3, [r7, #31]
 8000ac2:	7ffb      	ldrb	r3, [r7, #31]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d9c6      	bls.n	8000a56 <read_rx+0x392>
													}
												set_io_config ();		// check if output is push output
 8000ac8:	f002 f888 	bl	8002bdc <set_io_config>
												break;
 8000acc:	bf00      	nop
										}
									sdo_segment (WRITE_SEGM_RESP, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2020      	movs	r0, #32
 8000ad4:	f000 fd0c 	bl	80014f0 <sdo_segment>
								}
							sdo_index    = 0;					// reset marker from init request
 8000ad8:	4b61      	ldr	r3, [pc, #388]	; (8000c60 <read_rx+0x59c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000ade:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <read_rx+0x588>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000ae4:	4b5f      	ldr	r3, [pc, #380]	; (8000c64 <read_rx+0x5a0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
							break;
 8000aea:	e186      	b.n	8000dfa <read_rx+0x736>

						case (INIT_READ_REQ):						// init read or expedited read
							index = *(uint16_t *)&rx[ro][3];	// read object index
 8000aec:	4b59      	ldr	r3, [pc, #356]	; (8000c54 <read_rx+0x590>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	3303      	adds	r3, #3
 8000afc:	4a56      	ldr	r2, [pc, #344]	; (8000c58 <read_rx+0x594>)
 8000afe:	4413      	add	r3, r2
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	823b      	strh	r3, [r7, #16]
							subindex = rx[ro][5];					// read object subindex
 8000b04:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <read_rx+0x590>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4a53      	ldr	r2, [pc, #332]	; (8000c58 <read_rx+0x594>)
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	3305      	adds	r3, #5
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	73fb      	strb	r3, [r7, #15]
							value = search_dict (index, subindex, type, &pos);
 8000b1c:	7cfa      	ldrb	r2, [r7, #19]
 8000b1e:	7bf9      	ldrb	r1, [r7, #15]
 8000b20:	8a38      	ldrh	r0, [r7, #16]
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <read_rx+0x5a4>)
 8000b24:	f003 f8ce 	bl	8003cc4 <search_dict>
 8000b28:	61b8      	str	r0, [r7, #24]
							if (value)										// wrong access to object dictionary
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <read_rx+0x474>
								abort_sdo (value);					// abort SDO transfer
 8000b30:	69b8      	ldr	r0, [r7, #24]
 8000b32:	f000 fb87 	bl	8001244 <abort_sdo>
										  	 		value = read_dict (pos, subindex);
													sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
												}
										}
								}
							break;
 8000b36:	e160      	b.n	8000dfa <read_rx+0x736>
									if(index == PORT_IN)
 8000b38:	8a3b      	ldrh	r3, [r7, #16]
 8000b3a:	f642 72fd 	movw	r2, #12285	; 0x2ffd
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d111      	bne.n	8000b66 <read_rx+0x4a2>
											value = (uint32_t)(*((uint8_t *)dict [pos].pointer + subindex));
 8000b42:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <read_rx+0x5a4>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <read_rx+0x5a8>)
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	61bb      	str	r3, [r7, #24]
											sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	8a39      	ldrh	r1, [r7, #16]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2042      	movs	r0, #66	; 0x42
 8000b60:	f000 fc1e 	bl	80013a0 <sdo_response>
							break;
 8000b64:	e149      	b.n	8000dfa <read_rx+0x736>
									else if(index == PORT_OUT)
 8000b66:	8a3b      	ldrh	r3, [r7, #16]
 8000b68:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d111      	bne.n	8000b94 <read_rx+0x4d0>
											value = (uint32_t)(*((uint8_t *)dict [pos].pointer + subindex));
 8000b70:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <read_rx+0x5a4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4a3d      	ldr	r2, [pc, #244]	; (8000c6c <read_rx+0x5a8>)
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	4413      	add	r3, r2
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	4413      	add	r3, r2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	61bb      	str	r3, [r7, #24]
											sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	8a39      	ldrh	r1, [r7, #16]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2042      	movs	r0, #66	; 0x42
 8000b8e:	f000 fc07 	bl	80013a0 <sdo_response>
							break;
 8000b92:	e132      	b.n	8000dfa <read_rx+0x736>
											size	= dict [pos].size;
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <read_rx+0x5a4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <read_rx+0x5a8>)
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	73bb      	strb	r3, [r7, #14]
											sub  	= dict [pos].sub;
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <read_rx+0x5a4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <read_rx+0x5a8>)
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	4413      	add	r3, r2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	737b      	strb	r3, [r7, #13]
											if (size > 4)							// normal transfer
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d91c      	bls.n	8000bf4 <read_rx+0x530>
													if ((!subindex) && sub)		// number of entries
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d109      	bne.n	8000bd4 <read_rx+0x510>
 8000bc0:	7b7b      	ldrb	r3, [r7, #13]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <read_rx+0x510>
														sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, sub);
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	8a39      	ldrh	r1, [r7, #16]
 8000bcc:	2042      	movs	r0, #66	; 0x42
 8000bce:	f000 fbe7 	bl	80013a0 <sdo_response>
							break;
 8000bd2:	e112      	b.n	8000dfa <read_rx+0x736>
															sdo_response (INIT_READ_RESP, index, subindex, size);
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	8a39      	ldrh	r1, [r7, #16]
 8000bda:	2040      	movs	r0, #64	; 0x40
 8000bdc:	f000 fbe0 	bl	80013a0 <sdo_response>
															sdo_index = index;		// save object index and subindex
 8000be0:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <read_rx+0x59c>)
 8000be2:	8a3b      	ldrh	r3, [r7, #16]
 8000be4:	8013      	strh	r3, [r2, #0]
															sdo_subindex = subindex;
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <read_rx+0x588>)
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	7013      	strb	r3, [r2, #0]
															sdo_timer = SDO_TIMER;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <read_rx+0x5a0>)
 8000bee:	220a      	movs	r2, #10
 8000bf0:	701a      	strb	r2, [r3, #0]
							break;
 8000bf2:	e102      	b.n	8000dfa <read_rx+0x736>
													if ((!subindex) && sub)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d107      	bne.n	8000c0a <read_rx+0x546>
 8000bfa:	7b7b      	ldrb	r3, [r7, #13]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <read_rx+0x546>
															size = 1;				// size is 1 uint8_t
 8000c00:	2301      	movs	r3, #1
 8000c02:	73bb      	strb	r3, [r7, #14]
															value = sub;
 8000c04:	7b7b      	ldrb	r3, [r7, #13]
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	e007      	b.n	8000c1a <read_rx+0x556>
										  	 		value = read_dict (pos, subindex);
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <read_rx+0x5a4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	7bfa      	ldrb	r2, [r7, #15]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 feb8 	bl	8003988 <read_dict>
 8000c18:	61b8      	str	r0, [r7, #24]
													sdo_response (INIT_READ_RESP | EXPEDITED_BIT, index, subindex, value);
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	8a39      	ldrh	r1, [r7, #16]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	2042      	movs	r0, #66	; 0x42
 8000c22:	f000 fbbd 	bl	80013a0 <sdo_response>
							break;
 8000c26:	e0e8      	b.n	8000dfa <read_rx+0x736>

						case (READ_SEGM_REQ):						//read segment
							if (!sdo_index)									//no init read request before
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <read_rx+0x59c>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <read_rx+0x576>
								abort_sdo (SDO_UNSUPPORTED);
 8000c32:	480f      	ldr	r0, [pc, #60]	; (8000c70 <read_rx+0x5ac>)
 8000c34:	f000 fb06 	bl	8001244 <abort_sdo>
 8000c38:	e0c6      	b.n	8000dc8 <read_rx+0x704>
							else if (type & TOGGLE_BIT)			// toggle bit must be 0 for 1. segment
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d019      	beq.n	8000c78 <read_rx+0x5b4>
								abort_sdo (SDO_TOGGLEBIT);
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <read_rx+0x5b0>)
 8000c46:	f000 fafd 	bl	8001244 <abort_sdo>
 8000c4a:	e0bd      	b.n	8000dc8 <read_rx+0x704>
 8000c4c:	20000324 	.word	0x20000324
 8000c50:	2000064c 	.word	0x2000064c
 8000c54:	200004ad 	.word	0x200004ad
 8000c58:	200003ec 	.word	0x200003ec
 8000c5c:	200008a0 	.word	0x200008a0
 8000c60:	20000322 	.word	0x20000322
 8000c64:	20000325 	.word	0x20000325
 8000c68:	2000033c 	.word	0x2000033c
 8000c6c:	2000006c 	.word	0x2000006c
 8000c70:	06010000 	.word	0x06010000
 8000c74:	05030000 	.word	0x05030000
							else
								{
									switch (sdo_index)
 8000c78:	4bb5      	ldr	r3, [pc, #724]	; (8000f50 <read_rx+0x88c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000c82:	f000 8094 	beq.w	8000dae <read_rx+0x6ea>
 8000c86:	f5b3 4fc4 	cmp.w	r3, #25088	; 0x6200
 8000c8a:	f300 809d 	bgt.w	8000dc8 <read_rx+0x704>
 8000c8e:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000c92:	d07d      	beq.n	8000d90 <read_rx+0x6cc>
 8000c94:	f5b3 4fc2 	cmp.w	r3, #24832	; 0x6100
 8000c98:	f300 8096 	bgt.w	8000dc8 <read_rx+0x704>
 8000c9c:	f246 0211 	movw	r2, #24593	; 0x6011
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d06f      	beq.n	8000d84 <read_rx+0x6c0>
 8000ca4:	f246 0211 	movw	r2, #24593	; 0x6011
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	f300 808d 	bgt.w	8000dc8 <read_rx+0x704>
 8000cae:	f246 0210 	movw	r2, #24592	; 0x6010
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d060      	beq.n	8000d78 <read_rx+0x6b4>
 8000cb6:	f246 0210 	movw	r2, #24592	; 0x6010
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f300 8084 	bgt.w	8000dc8 <read_rx+0x704>
 8000cc0:	f241 020a 	movw	r2, #4106	; 0x100a
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d03e      	beq.n	8000d46 <read_rx+0x682>
 8000cc8:	f241 020a 	movw	r2, #4106	; 0x100a
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	dc7b      	bgt.n	8000dc8 <read_rx+0x704>
 8000cd0:	f241 0208 	movw	r2, #4104	; 0x1008
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d004      	beq.n	8000ce2 <read_rx+0x61e>
 8000cd8:	f241 0209 	movw	r2, #4105	; 0x1009
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d019      	beq.n	8000d14 <read_rx+0x650>
 8000ce0:	e072      	b.n	8000dc8 <read_rx+0x704>
										{
											case (DEVICE_NAME) :		// device name
												for (i = 0; i < DV_SIZE; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	77fb      	strb	r3, [r7, #31]
 8000ce6:	e00b      	b.n	8000d00 <read_rx+0x63c>
													buffer [i] = device_name[i];
 8000ce8:	7ffa      	ldrb	r2, [r7, #31]
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
 8000cec:	4999      	ldr	r1, [pc, #612]	; (8000f54 <read_rx+0x890>)
 8000cee:	5c8a      	ldrb	r2, [r1, r2]
 8000cf0:	f107 0120 	add.w	r1, r7, #32
 8000cf4:	440b      	add	r3, r1
 8000cf6:	f803 2c1c 	strb.w	r2, [r3, #-28]
												for (i = 0; i < DV_SIZE; i++)
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	77fb      	strb	r3, [r7, #31]
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
 8000d02:	2b05      	cmp	r3, #5
 8000d04:	d9f0      	bls.n	8000ce8 <read_rx+0x624>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 6, buffer);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f000 fbef 	bl	80014f0 <sdo_segment>
												break;
 8000d12:	e059      	b.n	8000dc8 <read_rx+0x704>

											case (HW_VERSION) :			// hardware version
												for (i = 0; i < HW_SIZE; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	77fb      	strb	r3, [r7, #31]
 8000d18:	e00b      	b.n	8000d32 <read_rx+0x66e>
													buffer [i] = hardware_uea [i];
 8000d1a:	7ffa      	ldrb	r2, [r7, #31]
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]
 8000d1e:	498e      	ldr	r1, [pc, #568]	; (8000f58 <read_rx+0x894>)
 8000d20:	5c8a      	ldrb	r2, [r1, r2]
 8000d22:	f107 0120 	add.w	r1, r7, #32
 8000d26:	440b      	add	r3, r1
 8000d28:	f803 2c1c 	strb.w	r2, [r3, #-28]
												for (i = 0; i < HW_SIZE; i++)
 8000d2c:	7ffb      	ldrb	r3, [r7, #31]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	77fb      	strb	r3, [r7, #31]
 8000d32:	7ffb      	ldrb	r3, [r7, #31]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d9f0      	bls.n	8000d1a <read_rx+0x656>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 5, buffer);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f000 fbd6 	bl	80014f0 <sdo_segment>
												break;
 8000d44:	e040      	b.n	8000dc8 <read_rx+0x704>

											case (SW_VERSION) :			//* software version
												for (i = 0; i < SW_SIZE; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	77fb      	strb	r3, [r7, #31]
 8000d4a:	e00b      	b.n	8000d64 <read_rx+0x6a0>
													buffer [i] = version_uea [i];
 8000d4c:	7ffa      	ldrb	r2, [r7, #31]
 8000d4e:	7ffb      	ldrb	r3, [r7, #31]
 8000d50:	4982      	ldr	r1, [pc, #520]	; (8000f5c <read_rx+0x898>)
 8000d52:	5c8a      	ldrb	r2, [r1, r2]
 8000d54:	f107 0120 	add.w	r1, r7, #32
 8000d58:	440b      	add	r3, r1
 8000d5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
												for (i = 0; i < SW_SIZE; i++)
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	3301      	adds	r3, #1
 8000d62:	77fb      	strb	r3, [r7, #31]
 8000d64:	7ffb      	ldrb	r3, [r7, #31]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d9f0      	bls.n	8000d4c <read_rx+0x688>
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, 5, buffer);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fbbd 	bl	80014f0 <sdo_segment>
												break;
 8000d76:	e027      	b.n	8000dc8 <read_rx+0x704>

											case (VIRTUAL_INPUT)  :		// virtual input mapping object
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, virt_in);
 8000d78:	4a79      	ldr	r2, [pc, #484]	; (8000f60 <read_rx+0x89c>)
 8000d7a:	2107      	movs	r1, #7
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f000 fbb7 	bl	80014f0 <sdo_segment>
												break;
 8000d82:	e021      	b.n	8000dc8 <read_rx+0x704>

											case (VIRTUAL_OUTPUT)  :	// virtual output mapping object
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, virt_out);
 8000d84:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <read_rx+0x8a0>)
 8000d86:	2107      	movs	r1, #7
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fbb1 	bl	80014f0 <sdo_segment>
												break;
 8000d8e:	e01b      	b.n	8000dc8 <read_rx+0x704>

											case (INPUT_GROUP)    :		// input group
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, inpar [sdo_subindex - 1]);
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <read_rx+0x8a4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	1e5a      	subs	r2, r3, #1
 8000d98:	4613      	mov	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	4a73      	ldr	r2, [pc, #460]	; (8000f6c <read_rx+0x8a8>)
 8000da0:	4413      	add	r3, r2
 8000da2:	461a      	mov	r2, r3
 8000da4:	2107      	movs	r1, #7
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fba2 	bl	80014f0 <sdo_segment>
												break;
 8000dac:	e00c      	b.n	8000dc8 <read_rx+0x704>

											case (OUTPUT_GROUP)    :	// output group
												sdo_segment (READ_SEGM_RESP | LAST_SEGM_BIT, MAX_IO_TYPE, outpar [sdo_subindex - 1]);
 8000dae:	4b6e      	ldr	r3, [pc, #440]	; (8000f68 <read_rx+0x8a4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b01      	subs	r3, #1
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4a6d      	ldr	r2, [pc, #436]	; (8000f70 <read_rx+0x8ac>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2107      	movs	r1, #7
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 fb95 	bl	80014f0 <sdo_segment>
												break;
 8000dc6:	bf00      	nop
										}
								}
							sdo_index    = 0;				// reset marker from init request
 8000dc8:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <read_rx+0x88c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000dce:	4b66      	ldr	r3, [pc, #408]	; (8000f68 <read_rx+0x8a4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <read_rx+0x8b0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
							break;
 8000dda:	e00e      	b.n	8000dfa <read_rx+0x736>

						case (ABORT_REQ):				// abort request
							sdo_index    = 0;				// reset marker from init request
 8000ddc:	4b5c      	ldr	r3, [pc, #368]	; (8000f50 <read_rx+0x88c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]
							sdo_subindex = 0;
 8000de2:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <read_rx+0x8a4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
							sdo_timer    = 0;
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <read_rx+0x8b0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
							break;
 8000dee:	e004      	b.n	8000dfa <read_rx+0x736>

						default:
							abort_sdo (SDO_NOT_VALID);	// unknown SDO command specifier
 8000df0:	4861      	ldr	r0, [pc, #388]	; (8000f78 <read_rx+0x8b4>)
 8000df2:	f000 fa27 	bl	8001244 <abort_sdo>
							break;
 8000df6:	e000      	b.n	8000dfa <read_rx+0x736>
							break;
 8000df8:	bf00      	nop
					}
				break;
 8000dfa:	e12a      	b.n	8001052 <read_rx+0x98e>

			case (NMT) :											// network management
				i = rx [ro][3]; 								// read node id
 8000dfc:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <read_rx+0x8b8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <read_rx+0x8bc>)
 8000e04:	460b      	mov	r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3303      	adds	r3, #3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	77fb      	strb	r3, [r7, #31]
				if ((!i) || (i == node_id)) 		// for this node or for all nodes
 8000e14:	7ffb      	ldrb	r3, [r7, #31]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <read_rx+0x760>
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	; (8000f84 <read_rx+0x8c0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	7ffa      	ldrb	r2, [r7, #31]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d122      	bne.n	8000e6a <read_rx+0x7a6>
					{
						switch (rx [ro][2]) 					// command specifier
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <read_rx+0x8b8>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4a55      	ldr	r2, [pc, #340]	; (8000f80 <read_rx+0x8bc>)
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	3302      	adds	r3, #2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2bf0      	cmp	r3, #240	; 0xf0
 8000e3e:	d010      	beq.n	8000e62 <read_rx+0x79e>
 8000e40:	2bf0      	cmp	r3, #240	; 0xf0
 8000e42:	dc14      	bgt.n	8000e6e <read_rx+0x7aa>
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d002      	beq.n	8000e4e <read_rx+0x78a>
 8000e48:	2b81      	cmp	r3, #129	; 0x81
 8000e4a:	d004      	beq.n	8000e56 <read_rx+0x792>

								case (STOP_NODE)	 :						// reset node
								case (ENTER_PREOP) :						// reset node
								case (RESET_COMM)  :						// reset node
								default:
									break;				// do nothing (not implemented)
 8000e4c:	e00f      	b.n	8000e6e <read_rx+0x7aa>
									nmtstate = OPERATIONAL; 	// enter operational state
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <read_rx+0x8c4>)
 8000e50:	2205      	movs	r2, #5
 8000e52:	701a      	strb	r2, [r3, #0]
									break;
 8000e54:	e00c      	b.n	8000e70 <read_rx+0x7ac>
									merker = 0;
 8000e56:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <read_rx+0x8c8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
									HAL_NVIC_SystemReset();
 8000e5c:	f006 fb23 	bl	80074a6 <HAL_NVIC_SystemReset>
									break;
 8000e60:	e006      	b.n	8000e70 <read_rx+0x7ac>
									nmtstate = TEST_MODE;
 8000e62:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <read_rx+0x8c4>)
 8000e64:	22f0      	movs	r2, #240	; 0xf0
 8000e66:	701a      	strb	r2, [r3, #0]
									break;
 8000e68:	e002      	b.n	8000e70 <read_rx+0x7ac>
							}
					}
 8000e6a:	bf00      	nop
 8000e6c:	e0f1      	b.n	8001052 <read_rx+0x98e>
									break;				// do nothing (not implemented)
 8000e6e:	bf00      	nop
				break;
 8000e70:	e0ef      	b.n	8001052 <read_rx+0x98e>

			case (LSS) :										//LSS message for initialization
				type = rx [ro][2];						//read LSS service type
 8000e72:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <read_rx+0x8b8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4a41      	ldr	r2, [pc, #260]	; (8000f80 <read_rx+0x8bc>)
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	3302      	adds	r3, #2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	74fb      	strb	r3, [r7, #19]
				switch (type)
 8000e8a:	7cfb      	ldrb	r3, [r7, #19]
 8000e8c:	2b11      	cmp	r3, #17
 8000e8e:	f040 80db 	bne.w	8001048 <read_rx+0x984>
					{
						case (SET_NODE_ID) :			//set new node id
							i = rx [ro][3];					//read new node id
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <read_rx+0x8b8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <read_rx+0x8bc>)
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	77fb      	strb	r3, [r7, #31]
							if ((i > 127) || (!i))	//node id invalid
 8000eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db02      	blt.n	8000eb8 <read_rx+0x7f4>
 8000eb2:	7ffb      	ldrb	r3, [r7, #31]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d104      	bne.n	8000ec2 <read_rx+0x7fe>
								lss_response (SET_NODE_ID, OUT_OF_RANGE);
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2011      	movs	r0, #17
 8000ebc:	f000 fb8c 	bl	80015d8 <lss_response>
 8000ec0:	e006      	b.n	8000ed0 <read_rx+0x80c>
							else
								{
									node_id = i;
 8000ec2:	4a30      	ldr	r2, [pc, #192]	; (8000f84 <read_rx+0x8c0>)
 8000ec4:	7ffb      	ldrb	r3, [r7, #31]
 8000ec6:	7013      	strb	r3, [r2, #0]
									lss_response (SET_NODE_ID, 0);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2011      	movs	r0, #17
 8000ecc:	f000 fb84 	bl	80015d8 <lss_response>
								}
							break;
 8000ed0:	bf00      	nop
					}
				break;
 8000ed2:	e0b9      	b.n	8001048 <read_rx+0x984>

			case FC_D:				//Clock
				if (EMS_ID == rx [ro][1])
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <read_rx+0x8b8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4a29      	ldr	r2, [pc, #164]	; (8000f80 <read_rx+0x8bc>)
 8000edc:	460b      	mov	r3, r1
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b0b      	cmp	r3, #11
 8000eee:	f040 80ad 	bne.w	800104c <read_rx+0x988>
					{
						for( int i=0; i<4; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e027      	b.n	8000f48 <read_rx+0x884>
							{
								aBCAN_ReceiveBuf_Clock[i] = rx [ro][2 + i];
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <read_rx+0x8b8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	1c9a      	adds	r2, r3, #2
 8000f02:	491f      	ldr	r1, [pc, #124]	; (8000f80 <read_rx+0x8bc>)
 8000f04:	4603      	mov	r3, r0
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4403      	add	r3, r0
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	440b      	add	r3, r1
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2d9      	uxtb	r1, r3
 8000f14:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <read_rx+0x8cc>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4413      	add	r3, r2
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
								aBCAN_ReceiveBuf_Clock[i + 4] = rx [ro][6 + i];
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <read_rx+0x8b8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461c      	mov	r4, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	1d99      	adds	r1, r3, #6
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	1d1a      	adds	r2, r3, #4
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <read_rx+0x8bc>)
 8000f2e:	4623      	mov	r3, r4
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4423      	add	r3, r4
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4403      	add	r3, r0
 8000f38:	440b      	add	r3, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2d9      	uxtb	r1, r3
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <read_rx+0x8cc>)
 8000f40:	5499      	strb	r1, [r3, r2]
						for( int i=0; i<4; i++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	ddd4      	ble.n	8000ef8 <read_rx+0x834>
							}

					}
				break;
 8000f4e:	e07d      	b.n	800104c <read_rx+0x988>
 8000f50:	20000322 	.word	0x20000322
 8000f54:	080099f8 	.word	0x080099f8
 8000f58:	080099f0 	.word	0x080099f0
 8000f5c:	080099e8 	.word	0x080099e8
 8000f60:	2000087c 	.word	0x2000087c
 8000f64:	20000888 	.word	0x20000888
 8000f68:	20000324 	.word	0x20000324
 8000f6c:	2000064c 	.word	0x2000064c
 8000f70:	200008a0 	.word	0x200008a0
 8000f74:	20000325 	.word	0x20000325
 8000f78:	05040001 	.word	0x05040001
 8000f7c:	200004ad 	.word	0x200004ad
 8000f80:	200003ec 	.word	0x200003ec
 8000f84:	2000088f 	.word	0x2000088f
 8000f88:	20000b24 	.word	0x20000b24
 8000f8c:	20000337 	.word	0x20000337
 8000f90:	20000b88 	.word	0x20000b88

//����Ϣ��ʱֻ������ͣ�����״̬��Ϣ		2017-11-15		
			case (MPDO) :					// time stamp message
				sub = rx [ro][1];
 8000f94:	4b4c      	ldr	r3, [pc, #304]	; (80010c8 <read_rx+0xa04>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <read_rx+0xa08>)
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	737b      	strb	r3, [r7, #13]
				type = rx [ro][2];
 8000fac:	4b46      	ldr	r3, [pc, #280]	; (80010c8 <read_rx+0xa04>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <read_rx+0xa08>)
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	74fb      	strb	r3, [r7, #19]
				if((sub == EMS_ID) && (type == 0))
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	2b0b      	cmp	r3, #11
 8000fc8:	d142      	bne.n	8001050 <read_rx+0x98c>
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d13f      	bne.n	8001050 <read_rx+0x98c>
					{
						for(i = 0; i < 8; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	77fb      	strb	r3, [r7, #31]
 8000fd4:	e017      	b.n	8001006 <read_rx+0x942>
							buffer[i] = rx [ro][2 + i];
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <read_rx+0xa04>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461c      	mov	r4, r3
 8000fdc:	7ffb      	ldrb	r3, [r7, #31]
 8000fde:	1c99      	adds	r1, r3, #2
 8000fe0:	7ffa      	ldrb	r2, [r7, #31]
 8000fe2:	483a      	ldr	r0, [pc, #232]	; (80010cc <read_rx+0xa08>)
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4423      	add	r3, r4
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4403      	add	r3, r0
 8000fee:	440b      	add	r3, r1
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2d9      	uxtb	r1, r3
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4413      	add	r3, r2
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	f803 2c1c 	strb.w	r2, [r3, #-28]
						for(i = 0; i < 8; i++)
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	3301      	adds	r3, #1
 8001004:	77fb      	strb	r3, [r7, #31]
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d9e4      	bls.n	8000fd6 <read_rx+0x912>
						if(buffer[6] & 0x0A)							
 800100c:	7abb      	ldrb	r3, [r7, #10]
 800100e:	f003 030a 	and.w	r3, r3, #10
 8001012:	2b00      	cmp	r3, #0
 8001014:	d008      	beq.n	8001028 <read_rx+0x964>
							display[BUF_ARROW] |= OUT_OF_SERVICE;
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <read_rx+0xa0c>)
 8001018:	789b      	ldrb	r3, [r3, #2]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <read_rx+0xa0c>)
 8001024:	709a      	strb	r2, [r3, #2]
 8001026:	e007      	b.n	8001038 <read_rx+0x974>
						else
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <read_rx+0xa0c>)
 800102a:	789b      	ldrb	r3, [r3, #2]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <read_rx+0xa0c>)
 8001036:	709a      	strb	r2, [r3, #2]
						mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <read_rx+0xa0c>)
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <read_rx+0xa10>)
 8001040:	70da      	strb	r2, [r3, #3]
					}
				break;
 8001042:	e005      	b.n	8001050 <read_rx+0x98c>
				break;
 8001044:	bf00      	nop
 8001046:	e004      	b.n	8001052 <read_rx+0x98e>
				break;
 8001048:	bf00      	nop
 800104a:	e002      	b.n	8001052 <read_rx+0x98e>
				break;
 800104c:	bf00      	nop
 800104e:	e000      	b.n	8001052 <read_rx+0x98e>
				break;
 8001050:	bf00      	nop
//����Ϣ��ʱֻ������ͣ�����״̬��Ϣ		2017-11-15		
		}
	if (HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001052:	2112      	movs	r1, #18
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <read_rx+0xa14>)
 8001056:	f005 fee9 	bl	8006e2c <HAL_CAN_DeactivateNotification>
	{

	}
	//INTCONbits.GIEH		= 0;		// low priority interrupts disable
	if (ro == (RX_SIZE-1))		// increment RX message read pointer
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <read_rx+0xa04>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b07      	cmp	r3, #7
 8001060:	d103      	bne.n	800106a <read_rx+0x9a6>
		ro = 0;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <read_rx+0xa04>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e005      	b.n	8001076 <read_rx+0x9b2>
	else
		ro++;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <read_rx+0xa04>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <read_rx+0xa04>)
 8001074:	701a      	strb	r2, [r3, #0]
	rc--;											// decrement RX counter
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <read_rx+0xa18>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <read_rx+0xa18>)
 8001082:	701a      	strb	r2, [r3, #0]
	i = ri;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <read_rx+0xa1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	77fb      	strb	r3, [r7, #31]
	size = rc;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <read_rx+0xa18>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	73bb      	strb	r3, [r7, #14]
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001090:	2112      	movs	r1, #18
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <read_rx+0xa14>)
 8001094:	f005 fea5 	bl	8006de2 <HAL_CAN_ActivateNotification>
	{

	}
	//INTCONbits.GIEH		= 1;		// low priority interrupts enable
	if (i < ro)
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <read_rx+0xa04>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	7ffa      	ldrb	r2, [r7, #31]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d202      	bcs.n	80010a8 <read_rx+0x9e4>
		i += RX_SIZE;
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	3308      	adds	r3, #8
 80010a6:	77fb      	strb	r3, [r7, #31]
	if ((i - ro) != (size % RX_SIZE))
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <read_rx+0xa04>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	1a9a      	subs	r2, r3, r2
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d002      	beq.n	80010c0 <read_rx+0x9fc>
		{
			merker = RC_MERKER;	// set rc counter error marker
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <read_rx+0xa20>)
 80010bc:	225a      	movs	r2, #90	; 0x5a
 80010be:	701a      	strb	r2, [r3, #0]
		}
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdb0      	pop	{r4, r5, r7, pc}
 80010c8:	200004ad 	.word	0x200004ad
 80010cc:	200003ec 	.word	0x200003ec
 80010d0:	200005f8 	.word	0x200005f8
 80010d4:	200005fc 	.word	0x200005fc
 80010d8:	20000854 	.word	0x20000854
 80010dc:	200003e0 	.word	0x200003e0
 80010e0:	200004ae 	.word	0x200004ae
 80010e4:	20000337 	.word	0x20000337

080010e8 <can_transmit>:
/*=============================  �����Ƿ��ͳ���   ================================*/
// transmit a message if TX register is free or write message to buffer


uint32_t timeeeee ;
void can_transmit (void){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
	txmallbox_request++;
 80010ee:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <can_transmit+0x138>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <can_transmit+0x138>)
 80010f8:	801a      	strh	r2, [r3, #0]
	if ((!hse_heartbeat) || (merker == BS_MERKER))		// û��MCU����������busoff�������κ���Ϣ
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <can_transmit+0x13c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 808a 	beq.w	8001218 <can_transmit+0x130>
 8001104:	4b48      	ldr	r3, [pc, #288]	; (8001228 <can_transmit+0x140>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b55      	cmp	r3, #85	; 0x55
 800110a:	f000 8085 	beq.w	8001218 <can_transmit+0x130>
		return;

	if (ti == (TX_SIZE-1))								/* increment TX message write pointer	*/
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <can_transmit+0x144>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d103      	bne.n	800111e <can_transmit+0x36>
		ti = 0;
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <can_transmit+0x144>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e005      	b.n	800112a <can_transmit+0x42>
	else
		ti++;
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <can_transmit+0x144>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <can_transmit+0x144>)
 8001128:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_DeactivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800112a:	2101      	movs	r1, #1
 800112c:	4840      	ldr	r0, [pc, #256]	; (8001230 <can_transmit+0x148>)
 800112e:	f005 fe7d 	bl	8006e2c <HAL_CAN_DeactivateNotification>
	{

	}
	CAN_TxHeaderTypeDef CanTxHeader_t;
	uint8_t CanTxData_t[8] = {0};
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
	uint32_t Txmallbox;
	//INTCONbits.GIEH	= 0;								/* global interrupts disable			*/
	CanTxHeader_t.StdId = ((tx[to][0] & 0xF0)<<3) + tx[to][1];
 800113a:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <can_transmit+0x14c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <can_transmit+0x150>)
 8001144:	460b      	mov	r3, r1
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <can_transmit+0x14c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <can_transmit+0x150>)
 8001162:	4603      	mov	r3, r0
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4403      	add	r3, r0
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	440b      	add	r3, r1
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
	CanTxHeader_t.DLC   = tx[to][0] & 0x0F;		//read data lenght code
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <can_transmit+0x14c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <can_transmit+0x150>)
 8001180:	460b      	mov	r3, r1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	623b      	str	r3, [r7, #32]
	CanTxHeader_t.IDE   = CAN_ID_STD;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
	CanTxHeader_t.RTR	= CAN_RTR_DATA;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]

	memcpy(CanTxData_t,(void *)(tx[to]+2),8);
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <can_transmit+0x14c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <can_transmit+0x150>)
 80011ae:	4413      	add	r3, r2
 80011b0:	1c9a      	adds	r2, r3, #2
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	6810      	ldr	r0, [r2, #0]
 80011b8:	6851      	ldr	r1, [r2, #4]
 80011ba:	c303      	stmia	r3!, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader_t, CanTxData_t, &Txmallbox) == HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	f107 0110 	add.w	r1, r7, #16
 80011c6:	481a      	ldr	r0, [pc, #104]	; (8001230 <can_transmit+0x148>)
 80011c8:	f005 fc20 	bl	8006a0c <HAL_CAN_AddTxMessage>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <can_transmit+0x118>
	{
		txmallbox++;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <can_transmit+0x154>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <can_transmit+0x154>)
 80011dc:	801a      	strh	r2, [r3, #0]
		if (to == (TX_SIZE-1))							/* increment TX message read pointer	*/
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <can_transmit+0x14c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d103      	bne.n	80011f0 <can_transmit+0x108>
			to = 0;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <can_transmit+0x14c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e00e      	b.n	800120e <can_transmit+0x126>
		else
			to++;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <can_transmit+0x14c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <can_transmit+0x14c>)
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e006      	b.n	800120e <can_transmit+0x126>
	}
	else
	{
		tc++;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <can_transmit+0x158>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <can_transmit+0x158>)
 800120c:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800120e:	2101      	movs	r1, #1
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <can_transmit+0x148>)
 8001212:	f005 fde6 	bl	8006de2 <HAL_CAN_ActivateNotification>
 8001216:	e000      	b.n	800121a <can_transmit+0x132>
		return;
 8001218:	bf00      	nop
	{

	}


}
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002b0 	.word	0x200002b0
 8001224:	20000332 	.word	0x20000332
 8001228:	20000337 	.word	0x20000337
 800122c:	200004af 	.word	0x200004af
 8001230:	20000854 	.word	0x20000854
 8001234:	200004ac 	.word	0x200004ac
 8001238:	20000458 	.word	0x20000458
 800123c:	200002ae 	.word	0x200002ae
 8001240:	200003e8 	.word	0x200003e8

08001244 <abort_sdo>:

// abort SDO transfer
void abort_sdo (uint32_t errorcode){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 800124c:	bf00      	nop
 800124e:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <abort_sdo+0x144>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b08      	cmp	r3, #8
 8001256:	d0fa      	beq.n	800124e <abort_sdo+0xa>

	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <abort_sdo+0x148>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <abort_sdo+0x14c>)
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	22b8      	movs	r2, #184	; 0xb8
 800126c:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <abort_sdo+0x148>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <abort_sdo+0x150>)
 8001276:	7818      	ldrb	r0, [r3, #0]
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <abort_sdo+0x14c>)
 800127a:	460b      	mov	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	3301      	adds	r3, #1
 8001286:	4602      	mov	r2, r0
 8001288:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = ABORT_REQ;								/* write command specifier				*/
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <abort_sdo+0x148>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <abort_sdo+0x14c>)
 8001292:	460b      	mov	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	3302      	adds	r3, #2
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = sdo_index;								/* Index of last RX SDO					*/
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <abort_sdo+0x154>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <abort_sdo+0x148>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	b2d0      	uxtb	r0, r2
 80012b0:	4a37      	ldr	r2, [pc, #220]	; (8001390 <abort_sdo+0x14c>)
 80012b2:	460b      	mov	r3, r1
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	3303      	adds	r3, #3
 80012be:	4602      	mov	r2, r0
 80012c0:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = sdo_index >> 8;
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <abort_sdo+0x154>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <abort_sdo+0x148>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	b2d0      	uxtb	r0, r2
 80012d4:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <abort_sdo+0x14c>)
 80012d6:	460b      	mov	r3, r1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	3304      	adds	r3, #4
 80012e2:	4602      	mov	r2, r0
 80012e4:	701a      	strb	r2, [r3, #0]
	tx[ti][5] = sdo_subindex;							/* Sub-index last RX SDO				*/
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <abort_sdo+0x148>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <abort_sdo+0x158>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	4a27      	ldr	r2, [pc, #156]	; (8001390 <abort_sdo+0x14c>)
 80012f4:	460b      	mov	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	3305      	adds	r3, #5
 8001300:	4602      	mov	r2, r0
 8001302:	701a      	strb	r2, [r3, #0]
	tx[ti][6] = errorcode;								/* errorcode (reason for abort request	*/
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <abort_sdo+0x148>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b2d8      	uxtb	r0, r3
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <abort_sdo+0x14c>)
 8001310:	460b      	mov	r3, r1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	3306      	adds	r3, #6
 800131c:	4602      	mov	r2, r0
 800131e:	701a      	strb	r2, [r3, #0]
	tx[ti][7] = errorcode >>  8;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	0a1a      	lsrs	r2, r3, #8
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <abort_sdo+0x148>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	b2d0      	uxtb	r0, r2
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <abort_sdo+0x14c>)
 800132e:	460b      	mov	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3307      	adds	r3, #7
 800133a:	4602      	mov	r2, r0
 800133c:	701a      	strb	r2, [r3, #0]
	tx[ti][8] = errorcode >> 16;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	0c1a      	lsrs	r2, r3, #16
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <abort_sdo+0x148>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	b2d0      	uxtb	r0, r2
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <abort_sdo+0x14c>)
 800134c:	460b      	mov	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	3308      	adds	r3, #8
 8001358:	4602      	mov	r2, r0
 800135a:	701a      	strb	r2, [r3, #0]
	tx[ti][9] = errorcode >> 24;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	0e1a      	lsrs	r2, r3, #24
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <abort_sdo+0x148>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	b2d0      	uxtb	r0, r2
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <abort_sdo+0x14c>)
 800136a:	460b      	mov	r3, r1
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	3309      	adds	r3, #9
 8001376:	4602      	mov	r2, r0
 8001378:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 800137a:	f7ff feb5 	bl	80010e8 <can_transmit>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200003e8 	.word	0x200003e8
 800138c:	200004af 	.word	0x200004af
 8001390:	20000458 	.word	0x20000458
 8001394:	2000088f 	.word	0x2000088f
 8001398:	20000322 	.word	0x20000322
 800139c:	20000324 	.word	0x20000324

080013a0 <sdo_response>:

// SDO response
void sdo_response (uint8_t command, uint16_t index, uint8_t subindex, uint32_t value){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	460b      	mov	r3, r1
 80013ae:	80bb      	strh	r3, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71bb      	strb	r3, [r7, #6]
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80013b4:	bf00      	nop
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <sdo_response+0x140>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d0fa      	beq.n	80013b6 <sdo_response+0x16>

	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 80013c0:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <sdo_response+0x144>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <sdo_response+0x148>)
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	22b8      	movs	r2, #184	; 0xb8
 80013d4:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <sdo_response+0x144>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <sdo_response+0x14c>)
 80013de:	7818      	ldrb	r0, [r3, #0]
 80013e0:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <sdo_response+0x148>)
 80013e2:	460b      	mov	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	3301      	adds	r3, #1
 80013ee:	4602      	mov	r2, r0
 80013f0:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 80013f2:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <sdo_response+0x144>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <sdo_response+0x148>)
 80013fa:	460b      	mov	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	3302      	adds	r3, #2
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = index;									/* write index 							*/
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <sdo_response+0x144>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	b2d8      	uxtb	r0, r3
 8001414:	4a34      	ldr	r2, [pc, #208]	; (80014e8 <sdo_response+0x148>)
 8001416:	460b      	mov	r3, r1
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	3303      	adds	r3, #3
 8001422:	4602      	mov	r2, r0
 8001424:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = index >> 8;
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <sdo_response+0x144>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	b2d0      	uxtb	r0, r2
 8001434:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <sdo_response+0x148>)
 8001436:	460b      	mov	r3, r1
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	3304      	adds	r3, #4
 8001442:	4602      	mov	r2, r0
 8001444:	701a      	strb	r2, [r3, #0]
	tx[ti][5] = subindex;								/* write sub-index						*/
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <sdo_response+0x144>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <sdo_response+0x148>)
 800144e:	460b      	mov	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	3305      	adds	r3, #5
 800145a:	79ba      	ldrb	r2, [r7, #6]
 800145c:	701a      	strb	r2, [r3, #0]
	tx[ti][6] = value;									/* write value							*/
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <sdo_response+0x144>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2d8      	uxtb	r0, r3
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <sdo_response+0x148>)
 800146a:	460b      	mov	r3, r1
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	3306      	adds	r3, #6
 8001476:	4602      	mov	r2, r0
 8001478:	701a      	strb	r2, [r3, #0]
	tx[ti][7] = value >>  8;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0a1a      	lsrs	r2, r3, #8
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <sdo_response+0x144>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	b2d0      	uxtb	r0, r2
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <sdo_response+0x148>)
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3307      	adds	r3, #7
 8001494:	4602      	mov	r2, r0
 8001496:	701a      	strb	r2, [r3, #0]
	tx[ti][8] = value >> 16;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	0c1a      	lsrs	r2, r3, #16
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <sdo_response+0x144>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	b2d0      	uxtb	r0, r2
 80014a4:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <sdo_response+0x148>)
 80014a6:	460b      	mov	r3, r1
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3308      	adds	r3, #8
 80014b2:	4602      	mov	r2, r0
 80014b4:	701a      	strb	r2, [r3, #0]
	tx[ti][9] = value >> 24;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	0e1a      	lsrs	r2, r3, #24
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <sdo_response+0x144>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	b2d0      	uxtb	r0, r2
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <sdo_response+0x148>)
 80014c4:	460b      	mov	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	3309      	adds	r3, #9
 80014d0:	4602      	mov	r2, r0
 80014d2:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 80014d4:	f7ff fe08 	bl	80010e8 <can_transmit>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200003e8 	.word	0x200003e8
 80014e4:	200004af 	.word	0x200004af
 80014e8:	20000458 	.word	0x20000458
 80014ec:	2000088f 	.word	0x2000088f

080014f0 <sdo_segment>:

//SDO segment
void sdo_segment (uint8_t command, uint8_t size, uint8_t *value){
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 8001500:	bf00      	nop
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <sdo_segment+0xd8>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b08      	cmp	r3, #8
 800150a:	d0fa      	beq.n	8001502 <sdo_segment+0x12>
	tx[ti][0] = TSDO + 8; 								/* write function code + data length	*/
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <sdo_segment+0xdc>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <sdo_segment+0xe0>)
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	22b8      	movs	r2, #184	; 0xb8
 8001520:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <sdo_segment+0xdc>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <sdo_segment+0xe4>)
 800152a:	7818      	ldrb	r0, [r3, #0]
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <sdo_segment+0xe0>)
 800152e:	460b      	mov	r3, r1
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	3301      	adds	r3, #1
 800153a:	4602      	mov	r2, r0
 800153c:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <sdo_segment+0xdc>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <sdo_segment+0xe0>)
 8001546:	460b      	mov	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	3302      	adds	r3, #2
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e014      	b.n	8001586 <sdo_segment+0x96>
		tx[ti][3 + i] = *value++;						/* write value 							*/
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	603a      	str	r2, [r7, #0]
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <sdo_segment+0xdc>)
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	4610      	mov	r0, r2
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	3203      	adds	r2, #3
 800156c:	781c      	ldrb	r4, [r3, #0]
 800156e:	4918      	ldr	r1, [pc, #96]	; (80015d0 <sdo_segment+0xe0>)
 8001570:	4603      	mov	r3, r0
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4403      	add	r3, r0
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	4413      	add	r3, r2
 800157c:	4622      	mov	r2, r4
 800157e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	3301      	adds	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3e6      	bcc.n	800155c <sdo_segment+0x6c>
	for (i = size; i < 7; i++)
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e010      	b.n	80015b6 <sdo_segment+0xc6>
		tx[ti][3 + i] = 0;								/* set unused data bytes to 0			*/
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <sdo_segment+0xdc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	1cda      	adds	r2, r3, #3
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <sdo_segment+0xe0>)
 80015a0:	4603      	mov	r3, r0
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4403      	add	r3, r0
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	440b      	add	r3, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
	for (i = size; i < 7; i++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b06      	cmp	r3, #6
 80015ba:	d9eb      	bls.n	8001594 <sdo_segment+0xa4>
	can_transmit ();									/* transmit message						*/
 80015bc:	f7ff fd94 	bl	80010e8 <can_transmit>
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	200003e8 	.word	0x200003e8
 80015cc:	200004af 	.word	0x200004af
 80015d0:	20000458 	.word	0x20000458
 80015d4:	2000088f 	.word	0x2000088f

080015d8 <lss_response>:

//LSS response
void lss_response (uint8_t command, uint8_t value){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 80015e8:	bf00      	nop
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <lss_response+0xb4>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d0fa      	beq.n	80015ea <lss_response+0x12>
	tx[ti][0] = LSS + 8; 								/* write function code + data length	*/
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <lss_response+0xb8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <lss_response+0xbc>)
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	22f8      	movs	r2, #248	; 0xf8
 8001608:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = LSS_RES_ID;								/* write node id part of identifier		*/
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <lss_response+0xb8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <lss_response+0xbc>)
 8001612:	460b      	mov	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	3301      	adds	r3, #1
 800161e:	2264      	movs	r2, #100	; 0x64
 8001620:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = command;								/* write command specifier				*/
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <lss_response+0xb8>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <lss_response+0xbc>)
 800162a:	460b      	mov	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	3302      	adds	r3, #2
 8001636:	79fa      	ldrb	r2, [r7, #7]
 8001638:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = value;									/* write index 							*/
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <lss_response+0xb8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <lss_response+0xbc>)
 8001642:	460b      	mov	r3, r1
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	3303      	adds	r3, #3
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	701a      	strb	r2, [r3, #0]
	for (i = 4; i <= 9; i++)
 8001652:	2304      	movs	r3, #4
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e00f      	b.n	8001678 <lss_response+0xa0>
		tx[ti][i] = 0;									/* set unused data bytes to 0			*/
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <lss_response+0xb8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <lss_response+0xbc>)
 8001662:	4603      	mov	r3, r0
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4403      	add	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	4413      	add	r3, r2
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
	for (i = 4; i <= 9; i++)
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	3301      	adds	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b09      	cmp	r3, #9
 800167c:	d9ec      	bls.n	8001658 <lss_response+0x80>
	can_transmit ();									/* transmit message						*/
 800167e:	f7ff fd33 	bl	80010e8 <can_transmit>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200003e8 	.word	0x200003e8
 8001690:	200004af 	.word	0x200004af
 8001694:	20000458 	.word	0x20000458

08001698 <transmit_error>:

// transmit emergency message
void transmit_error (void){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 800169e:	bf00      	nop
 80016a0:	4b33      	ldr	r3, [pc, #204]	; (8001770 <transmit_error+0xd8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d0fa      	beq.n	80016a0 <transmit_error+0x8>
	tx[ti][0] = EMERGENCY + 8;							/* write function code + data length	*/
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <transmit_error+0xdc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4a31      	ldr	r2, [pc, #196]	; (8001778 <transmit_error+0xe0>)
 80016b2:	460b      	mov	r3, r1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	2218      	movs	r2, #24
 80016be:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <transmit_error+0xdc>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <transmit_error+0xe4>)
 80016c8:	7818      	ldrb	r0, [r3, #0]
 80016ca:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <transmit_error+0xe0>)
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3301      	adds	r3, #1
 80016d8:	4602      	mov	r2, r0
 80016da:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = errorcode;								/* write error code						*/
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <transmit_error+0xe8>)
 80016de:	881a      	ldrh	r2, [r3, #0]
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <transmit_error+0xdc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	b2d0      	uxtb	r0, r2
 80016e8:	4a23      	ldr	r2, [pc, #140]	; (8001778 <transmit_error+0xe0>)
 80016ea:	460b      	mov	r3, r1
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	3302      	adds	r3, #2
 80016f6:	4602      	mov	r2, r0
 80016f8:	701a      	strb	r2, [r3, #0]
	tx[ti][3] = errorcode >> 8;							/* write error code						*/
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <transmit_error+0xe8>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <transmit_error+0xdc>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	b2d0      	uxtb	r0, r2
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <transmit_error+0xe0>)
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	3303      	adds	r3, #3
 8001718:	4602      	mov	r2, r0
 800171a:	701a      	strb	r2, [r3, #0]
	tx[ti][4] = errorregister;							/* write error register					*/
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <transmit_error+0xdc>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <transmit_error+0xec>)
 8001724:	7818      	ldrb	r0, [r3, #0]
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <transmit_error+0xe0>)
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3304      	adds	r3, #4
 8001734:	4602      	mov	r2, r0
 8001736:	701a      	strb	r2, [r3, #0]
	for (i = 5; i <= 9; i++)
 8001738:	2305      	movs	r3, #5
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	e00f      	b.n	800175e <transmit_error+0xc6>
		tx[ti][i] = 0;									/* manufacture specific part not used	*/
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <transmit_error+0xdc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <transmit_error+0xe0>)
 8001748:	4603      	mov	r3, r0
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4403      	add	r3, r0
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	440b      	add	r3, r1
 8001752:	4413      	add	r3, r2
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
	for (i = 5; i <= 9; i++)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	3301      	adds	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d9ec      	bls.n	800173e <transmit_error+0xa6>
	can_transmit ();									/* transmit message						*/
 8001764:	f7ff fcc0 	bl	80010e8 <can_transmit>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200003e8 	.word	0x200003e8
 8001774:	200004af 	.word	0x200004af
 8001778:	20000458 	.word	0x20000458
 800177c:	2000088f 	.word	0x2000088f
 8001780:	2000033a 	.word	0x2000033a
 8001784:	20000338 	.word	0x20000338

08001788 <transmit_in>:

//ransmit special inputs and calls
 void transmit_in (uint8_t *input){
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	while (tc == TX_SIZE); 								/* wait for TX buffer free				*/
 8001790:	bf00      	nop
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <transmit_in+0x88>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b08      	cmp	r3, #8
 800179a:	d0fa      	beq.n	8001792 <transmit_in+0xa>
	tx[ti][0] = PDO_IN + MAX_IO_TYPE; 					/* write function code + data length	*/
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <transmit_in+0x8c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <transmit_in+0x90>)
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	2297      	movs	r2, #151	; 0x97
 80017b0:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = node_id;								/* write node id of UEA					*/
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <transmit_in+0x8c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <transmit_in+0x94>)
 80017ba:	7818      	ldrb	r0, [r3, #0]
 80017bc:	4a16      	ldr	r2, [pc, #88]	; (8001818 <transmit_in+0x90>)
 80017be:	460b      	mov	r3, r1
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	3301      	adds	r3, #1
 80017ca:	4602      	mov	r2, r0
 80017cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_IO_TYPE; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e014      	b.n	80017fe <transmit_in+0x76>
		tx[ti][2 + i] = *input++;						/* write input function					*/
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <transmit_in+0x8c>)
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	4610      	mov	r0, r2
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	3202      	adds	r2, #2
 80017e4:	781c      	ldrb	r4, [r3, #0]
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <transmit_in+0x90>)
 80017e8:	4603      	mov	r3, r0
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4403      	add	r3, r0
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	440b      	add	r3, r1
 80017f2:	4413      	add	r3, r2
 80017f4:	4622      	mov	r2, r4
 80017f6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_IO_TYPE; i++)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b06      	cmp	r3, #6
 8001802:	d9e7      	bls.n	80017d4 <transmit_in+0x4c>
	can_transmit ();									/* transmit message						*/
 8001804:	f7ff fc70 	bl	80010e8 <can_transmit>

}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	200003e8 	.word	0x200003e8
 8001814:	200004af 	.word	0x200004af
 8001818:	20000458 	.word	0x20000458
 800181c:	2000088f 	.word	0x2000088f

08001820 <transmit_load>:

//ransmit load measurement state
 void transmit_load (void){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t state;
	state = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < mInOut_Number; i++)
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	e020      	b.n	8001872 <transmit_load+0x52>
		{
			if (inpar [i][IO_BASIC_FUNC] == LOAD_IN)		/* load measurement input				*/
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	492a      	ldr	r1, [pc, #168]	; (80018dc <transmit_load+0xbc>)
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	440b      	add	r3, r1
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b84      	cmp	r3, #132	; 0x84
 8001840:	d114      	bne.n	800186c <transmit_load+0x4c>
			if (inpar [i][IO_STATE])						/* input is on							*/
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	4925      	ldr	r1, [pc, #148]	; (80018dc <transmit_load+0xbc>)
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	440b      	add	r3, r1
 800184e:	3305      	adds	r3, #5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <transmit_load+0x4c>
				state |= inpar [i][IO_SUB_FUNC];			/* set load measurement state			*/
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	4920      	ldr	r1, [pc, #128]	; (80018dc <transmit_load+0xbc>)
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	440b      	add	r3, r1
 8001862:	3301      	adds	r3, #1
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	4313      	orrs	r3, r2
 800186a:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < mInOut_Number; i++)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	3301      	adds	r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <transmit_load+0xc0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3d9      	bcc.n	8001830 <transmit_load+0x10>
		}
	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 800187c:	bf00      	nop
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <transmit_load+0xc4>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b08      	cmp	r3, #8
 8001886:	d0fa      	beq.n	800187e <transmit_load+0x5e>
	tx[ti][0] = FC_3 + 1; 								/* write function code + data length	*/
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <transmit_load+0xc8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <transmit_load+0xcc>)
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	2231      	movs	r2, #49	; 0x31
 800189c:	701a      	strb	r2, [r3, #0]
	tx[ti][1] = LOAD_ID;								/* write second part of ID				*/
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <transmit_load+0xc8>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <transmit_load+0xcc>)
 80018a6:	460b      	mov	r3, r1
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	3301      	adds	r3, #1
 80018b2:	2208      	movs	r2, #8
 80018b4:	701a      	strb	r2, [r3, #0]
	tx[ti][2] = state;									/* write load measurment state			*/
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <transmit_load+0xc8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <transmit_load+0xcc>)
 80018be:	460b      	mov	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	3302      	adds	r3, #2
 80018ca:	79ba      	ldrb	r2, [r7, #6]
 80018cc:	701a      	strb	r2, [r3, #0]
	can_transmit ();									/* transmit message						*/
 80018ce:	f7ff fc0b 	bl	80010e8 <can_transmit>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000064c 	.word	0x2000064c
 80018e0:	200001ec 	.word	0x200001ec
 80018e4:	200003e8 	.word	0x200003e8
 80018e8:	200004af 	.word	0x200004af
 80018ec:	20000458 	.word	0x20000458

080018f0 <CAN_transmit_heartbeat>:
 void CAN_transmit_heartbeat(void)
 {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
 	while (tc == TX_SIZE);								/* wait for TX buffer free				*/
 80018f4:	bf00      	nop
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <CAN_transmit_heartbeat+0x68>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d0fa      	beq.n	80018f6 <CAN_transmit_heartbeat+0x6>

 	tx[ti][0] = HEARTBEAT + 1; 								/* write function code + data length	*/
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <CAN_transmit_heartbeat+0x6c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	4a16      	ldr	r2, [pc, #88]	; (8001960 <CAN_transmit_heartbeat+0x70>)
 8001908:	460b      	mov	r3, r1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	22e1      	movs	r2, #225	; 0xe1
 8001914:	701a      	strb	r2, [r3, #0]
 	tx[ti][1] = node_id;								/* write node id of UEA					*/
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <CAN_transmit_heartbeat+0x6c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <CAN_transmit_heartbeat+0x74>)
 800191e:	7818      	ldrb	r0, [r3, #0]
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <CAN_transmit_heartbeat+0x70>)
 8001922:	460b      	mov	r3, r1
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	3301      	adds	r3, #1
 800192e:	4602      	mov	r2, r0
 8001930:	701a      	strb	r2, [r3, #0]
 	tx[ti][2] = nmtstate;								/* write command specifier				*/
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <CAN_transmit_heartbeat+0x6c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <CAN_transmit_heartbeat+0x78>)
 800193a:	7818      	ldrb	r0, [r3, #0]
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <CAN_transmit_heartbeat+0x70>)
 800193e:	460b      	mov	r3, r1
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3302      	adds	r3, #2
 800194a:	4602      	mov	r2, r0
 800194c:	701a      	strb	r2, [r3, #0]
 	can_transmit ();									/* transmit message						*/
 800194e:	f7ff fbcb 	bl	80010e8 <can_transmit>
 // 	TXB1SIDH 			= HEARTBEAT + (node_id >> 3);	// write ID bit 10 ... 3 for HEARTBEAT
 //	TXB1SIDL 			= node_id << 5;		// write ID bit  2 ... 0 for HEARTBEAT
 //	TXB1DLC	 			= 1;							// write data lenght code
 //	TXB1D0   			= nmtstate;				// write data uint8_t for HEARTBEAT
 }
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200003e8 	.word	0x200003e8
 800195c:	200004af 	.word	0x200004af
 8001960:	20000458 	.word	0x20000458
 8001964:	2000088f 	.word	0x2000088f
 8001968:	20000b24 	.word	0x20000b24

0800196c <check_for_call>:

//check if input/output is car call or hall call
uint8_t check_for_call (uint8_t value){
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	switch (value)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b91      	cmp	r3, #145	; 0x91
 800197a:	dc07      	bgt.n	800198c <check_for_call+0x20>
 800197c:	2b8f      	cmp	r3, #143	; 0x8f
 800197e:	da03      	bge.n	8001988 <check_for_call+0x1c>
 8001980:	2b02      	cmp	r3, #2
 8001982:	d001      	beq.n	8001988 <check_for_call+0x1c>
 8001984:	2b05      	cmp	r3, #5
 8001986:	d101      	bne.n	800198c <check_for_call+0x20>
			case (HALL_CALL)	 	  :						// standard hall call
			case (HALL_CALL_SPECIAL)  :				// special hall call
			case (HALL_CALL_ADVANCED) :			// advanced hall call
			case (HALL_CALL_EMERGENCY):			// emergency hall call
			case (CAR_CALL) 		  :
				return (1);			//car call
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <check_for_call+0x22>

			default:
				return (0);			//all other values
 800198c:	2300      	movs	r3, #0
		}
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <buzzer_signal>:

//set or reset buzzer
void buzzer_signal (uint8_t state, uint8_t reason){
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	uint8_t buzzer_old;
	uint8_t i;
	buzzer_old = buzzer;			// save old state of buzzer
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <buzzer_signal+0x114>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	73bb      	strb	r3, [r7, #14]
	if (state)								// set buzzer
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <buzzer_signal+0x2c>
		buzzer |= reason;				// save reason for buzzer
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <buzzer_signal+0x114>)
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <buzzer_signal+0x114>)
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e00b      	b.n	80019dc <buzzer_signal+0x44>
	else
		buzzer &= ~reason;			// reset reason for buzzer
 80019c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	b25a      	sxtb	r2, r3
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <buzzer_signal+0x114>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	4013      	ands	r3, r2
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <buzzer_signal+0x114>)
 80019da:	701a      	strb	r2, [r3, #0]
	if ((buzzer  && (!buzzer_old)) || ((!buzzer) && buzzer_old))
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <buzzer_signal+0x114>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <buzzer_signal+0x52>
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <buzzer_signal+0x60>
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <buzzer_signal+0x114>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d157      	bne.n	8001aa2 <buzzer_signal+0x10a>
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d054      	beq.n	8001aa2 <buzzer_signal+0x10a>
		{
			for (i = 0; i < mInOut_Number; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e04c      	b.n	8001a98 <buzzer_signal+0x100>
				{// search output parameter list
					if (outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <buzzer_signal+0x118>)
 8001a02:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001a06:	2b0e      	cmp	r3, #14
 8001a08:	d143      	bne.n	8001a92 <buzzer_signal+0xfa>
					if (outpar [i][IO_SUB_FUNC]   == BUZZER)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <buzzer_signal+0x118>)
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	2b80      	cmp	r3, #128	; 0x80
 8001a16:	d13c      	bne.n	8001a92 <buzzer_signal+0xfa>
						{
							if (buzzer)
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <buzzer_signal+0x114>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01b      	beq.n	8001a58 <buzzer_signal+0xc0>
								{
						  		bit_set (out[i/8], (i%8));								// set output
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	08db      	lsrs	r3, r3, #3
 8001a24:	b2d8      	uxtb	r0, r3
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <buzzer_signal+0x11c>)
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b25a      	sxtb	r2, r3
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	4602      	mov	r2, r0
 8001a44:	b2d9      	uxtb	r1, r3
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <buzzer_signal+0x11c>)
 8001a48:	5499      	strb	r1, [r3, r2]
						  		outpar [i][IO_STATE] = 1;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <buzzer_signal+0x118>)
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	2201      	movs	r2, #1
 8001a54:	715a      	strb	r2, [r3, #5]
 8001a56:	e01c      	b.n	8001a92 <buzzer_signal+0xfa>
						  	}
							else
								{
									bit_reset (out[i/8], (i%8));							// reset output
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	b2d8      	uxtb	r0, r3
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <buzzer_signal+0x11c>)
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	4602      	mov	r2, r0
 8001a80:	b2d9      	uxtb	r1, r3
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <buzzer_signal+0x11c>)
 8001a84:	5499      	strb	r1, [r3, r2]
						  		outpar [i][IO_STATE] = 0;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <buzzer_signal+0x118>)
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	3301      	adds	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <buzzer_signal+0x120>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3ad      	bcc.n	80019fe <buzzer_signal+0x66>
						  	}
						}
				}
		}
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000321 	.word	0x20000321
 8001ab0:	200008a0 	.word	0x200008a0
 8001ab4:	20000328 	.word	0x20000328
 8001ab8:	200001ec 	.word	0x200001ec

08001abc <set_output>:
uint8_t fire_alarm = 0;
uint8_t fire_evacuation = 0;
uint8_t fire_state = 0;

//set special outputs SPECIAL_FUNC
void set_output (uint8_t *virt){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t iotype;
	uint8_t sub = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73bb      	strb	r3, [r7, #14]

	iotype = virt [IO_BASIC_FUNC];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	737b      	strb	r3, [r7, #13]
	sub = virt [IO_SUB_FUNC];
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	73bb      	strb	r3, [r7, #14]
	if (check_for_call (iotype))
 8001ad4:	7b7b      	ldrb	r3, [r7, #13]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff48 	bl	800196c <check_for_call>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8156 	beq.w	8001d90 <set_output+0x2d4>
		{// car call, hall call or priority call
			if (iotype == HALL_CALL)				// read floor number
 8001ae4:	7b7b      	ldrb	r3, [r7, #13]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d103      	bne.n	8001af2 <set_output+0x36>
				i = virt [IO_FLOOR];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	78db      	ldrb	r3, [r3, #3]
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e002      	b.n	8001af8 <set_output+0x3c>
			else
				i = virt [IO_SUB_FUNC];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	73fb      	strb	r3, [r7, #15]
			if (i == 0xFF)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	d158      	bne.n	8001bb0 <set_output+0xf4>
				{// clear all calls
					for (i = 0; i < mInOut_Number; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e049      	b.n	8001b98 <set_output+0xdc>
						{// search output parameter list
							if ((outpar [i][IO_BASIC_FUNC] == iotype) && (outpar [i][IO_ENABLE] == ENABLE))
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	4a9e      	ldr	r2, [pc, #632]	; (8001d80 <set_output+0x2c4>)
 8001b08:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001b0c:	7b7a      	ldrb	r2, [r7, #13]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d13f      	bne.n	8001b92 <set_output+0xd6>
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	4a9a      	ldr	r2, [pc, #616]	; (8001d80 <set_output+0x2c4>)
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	799b      	ldrb	r3, [r3, #6]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d138      	bne.n	8001b92 <set_output+0xd6>
								{
									outpar [i][IO_ACK] &= ~virt [IO_LIFT];
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	4a97      	ldr	r2, [pc, #604]	; (8001d80 <set_output+0x2c4>)
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	79db      	ldrb	r3, [r3, #7]
 8001b2a:	b25a      	sxtb	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	b25a      	sxtb	r2, r3
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	4a8f      	ldr	r2, [pc, #572]	; (8001d80 <set_output+0x2c4>)
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	460a      	mov	r2, r1
 8001b48:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	4a8c      	ldr	r2, [pc, #560]	; (8001d80 <set_output+0x2c4>)
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	79db      	ldrb	r3, [r3, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11c      	bne.n	8001b92 <set_output+0xd6>
										{// all acknowledgements cancelled
				    					bit_reset (out[i/8], (i%8));				// clear output
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <set_output+0x2c8>)
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	b25a      	sxtb	r2, r3
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	4602      	mov	r2, r0
 8001b80:	b2d9      	uxtb	r1, r3
 8001b82:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <set_output+0x2c8>)
 8001b84:	5499      	strb	r1, [r3, r2]
				  						outpar [i][IO_STATE] = 0;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	4a7d      	ldr	r2, [pc, #500]	; (8001d80 <set_output+0x2c4>)
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <set_output+0x2cc>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3b0      	bcc.n	8001b04 <set_output+0x48>
				  					}
								}
						}
					memset(Callstatus,0,8);
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4879      	ldr	r0, [pc, #484]	; (8001d8c <set_output+0x2d0>)
 8001ba8:	f007 fa12 	bl	8008fd0 <memset>
 8001bac:	f000 bff6 	b.w	8002b9c <set_output+0x10e0>
				}
			else
				{// set or reset single call

					if (iotype == CAR_CALL)
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d141      	bne.n	8001c3a <set_output+0x17e>
					{
						if (virt [IO_STATE] & 0x01)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3305      	adds	r3, #5
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01c      	beq.n	8001bfe <set_output+0x142>
						{
							bit_set (Callstatus[(i-1)/8], (i-1)%8);
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da00      	bge.n	8001bce <set_output+0x112>
 8001bcc:	3307      	adds	r3, #7
 8001bce:	10db      	asrs	r3, r3, #3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <set_output+0x2d0>)
 8001bd4:	5c9b      	ldrb	r3, [r3, r2]
 8001bd6:	b259      	sxtb	r1, r3
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4258      	negs	r0, r3
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	f000 0007 	and.w	r0, r0, #7
 8001be6:	bf58      	it	pl
 8001be8:	4243      	negpl	r3, r0
 8001bea:	2001      	movs	r0, #1
 8001bec:	fa00 f303 	lsl.w	r3, r0, r3
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <set_output+0x2d0>)
 8001bfa:	5499      	strb	r1, [r3, r2]
 8001bfc:	e01d      	b.n	8001c3a <set_output+0x17e>
						}
						else
						{
							bit_reset (Callstatus[(i-1)/8], (i-1)%8);
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da00      	bge.n	8001c08 <set_output+0x14c>
 8001c06:	3307      	adds	r3, #7
 8001c08:	10db      	asrs	r3, r3, #3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <set_output+0x2d0>)
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	b259      	sxtb	r1, r3
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4258      	negs	r0, r3
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	f000 0007 	and.w	r0, r0, #7
 8001c20:	bf58      	it	pl
 8001c22:	4243      	negpl	r3, r0
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f303 	lsl.w	r3, r0, r3
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	400b      	ands	r3, r1
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	b2d9      	uxtb	r1, r3
 8001c36:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <set_output+0x2d0>)
 8001c38:	5499      	strb	r1, [r3, r2]
						}
					}
					for (i = 0; i < mInOut_Number; i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e097      	b.n	8001d70 <set_output+0x2b4>
						{// search output parameter list
							if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	494e      	ldr	r1, [pc, #312]	; (8001d80 <set_output+0x2c4>)
 8001c48:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 808c 	bne.w	8001d6a <set_output+0x2ae>
							if (virt [IO_SUB_FUNC]   == outpar [i][IO_SUB_FUNC])
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	4949      	ldr	r1, [pc, #292]	; (8001d80 <set_output+0x2c4>)
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	f040 8081 	bne.w	8001d6a <set_output+0x2ae>
							if (virt [IO_FLOOR]      == outpar [i][IO_FLOOR])
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3303      	adds	r3, #3
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4943      	ldr	r1, [pc, #268]	; (8001d80 <set_output+0x2c4>)
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	78db      	ldrb	r3, [r3, #3]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d176      	bne.n	8001d6a <set_output+0x2ae>
							if (virt [IO_LIFT]       &  outpar [i][IO_LIFT])
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	493e      	ldr	r1, [pc, #248]	; (8001d80 <set_output+0x2c4>)
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d06a      	beq.n	8001d6a <set_output+0x2ae>
							if (!((~virt [IO_DOOR])  & (outpar [i][IO_DOOR] & 0x0F)))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	4938      	ldr	r1, [pc, #224]	; (8001d80 <set_output+0x2c4>)
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d15c      	bne.n	8001d6a <set_output+0x2ae>
							if (outpar [i][IO_ENABLE] == ENABLE)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <set_output+0x2c4>)
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	799b      	ldrb	r3, [r3, #6]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d155      	bne.n	8001d6a <set_output+0x2ae>
								{// virtual output matches with physical
				  				if (virt [IO_STATE] & 0x01)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3305      	adds	r3, #5
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d02b      	beq.n	8001d24 <set_output+0x268>
					  				{// set acknowledgement
											bit_set (out[i/8], i%8);				// set physical output
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	08db      	lsrs	r3, r3, #3
 8001cd0:	b2d8      	uxtb	r0, r3
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <set_output+0x2c8>)
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	4602      	mov	r2, r0
 8001cf0:	b2d9      	uxtb	r1, r3
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <set_output+0x2c8>)
 8001cf4:	5499      	strb	r1, [r3, r2]
					  					outpar [i][IO_ACK] |= virt [IO_LIFT];
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <set_output+0x2c4>)
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	79d9      	ldrb	r1, [r3, #7]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3302      	adds	r3, #2
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	b2d1      	uxtb	r1, r2
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <set_output+0x2c4>)
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	460a      	mov	r2, r1
 8001d14:	71da      	strb	r2, [r3, #7]
					  					outpar [i][IO_STATE] = 1;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <set_output+0x2c4>)
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	2201      	movs	r2, #1
 8001d20:	715a      	strb	r2, [r3, #5]
 8001d22:	e022      	b.n	8001d6a <set_output+0x2ae>
					  				}
									else
										{// reset acknowledgement
					  					outpar [i][IO_ACK] = 0;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <set_output+0x2c4>)
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	71da      	strb	r2, [r3, #7]
											bit_reset (out[i/8], i%8);				// clear physical output
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	b2d8      	uxtb	r0, r3
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <set_output+0x2c8>)
 8001d3a:	5c9b      	ldrb	r3, [r3, r2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	4013      	ands	r3, r2
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	4602      	mov	r2, r0
 8001d58:	b2d9      	uxtb	r1, r3
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <set_output+0x2c8>)
 8001d5c:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <set_output+0x2c4>)
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	2200      	movs	r2, #0
 8001d68:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <set_output+0x2cc>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	f4ff af62 	bcc.w	8001c40 <set_output+0x184>
 8001d7c:	f000 bf0e 	b.w	8002b9c <set_output+0x10e0>
 8001d80:	200008a0 	.word	0x200008a0
 8001d84:	20000328 	.word	0x20000328
 8001d88:	200001ec 	.word	0x200001ec
 8001d8c:	200003b8 	.word	0x200003b8
										}
								}
						}
				 }
		}
	else if (iotype == POSITION_INDICATOR)
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	f040 81a3 	bne.w	80020de <set_output+0x622>
		{//��ʾ��Ϣ
			if (virt [IO_LIFT] == disp_lift)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	4b9d      	ldr	r3, [pc, #628]	; (8002014 <set_output+0x558>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d179      	bne.n	8001e9a <set_output+0x3de>
	  		{// display message is for this lift
					display [BUF_TEN] = virt [IO_DOOR];				// 1. digit; not CANopen compatible
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	791a      	ldrb	r2, [r3, #4]
 8001daa:	4b9b      	ldr	r3, [pc, #620]	; (8002018 <set_output+0x55c>)
 8001dac:	701a      	strb	r2, [r3, #0]
					display [BUF_UNIT] = virt [IO_STATE];			// 2. digit; not CANopen compatible
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	795a      	ldrb	r2, [r3, #5]
 8001db2:	4b99      	ldr	r3, [pc, #612]	; (8002018 <set_output+0x55c>)
 8001db4:	705a      	strb	r2, [r3, #1]
					if(display [BUF_TEN] == 0x20)
 8001db6:	4b98      	ldr	r3, [pc, #608]	; (8002018 <set_output+0x55c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d102      	bne.n	8001dc6 <set_output+0x30a>
						display [BUF_TEN] = 0;
 8001dc0:	4b95      	ldr	r3, [pc, #596]	; (8002018 <set_output+0x55c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
					if(display [BUF_UNIT] == 0x20)
 8001dc6:	4b94      	ldr	r3, [pc, #592]	; (8002018 <set_output+0x55c>)
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d102      	bne.n	8001dd6 <set_output+0x31a>
						display [BUF_UNIT] = 0;
 8001dd0:	4b91      	ldr	r3, [pc, #580]	; (8002018 <set_output+0x55c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
					if (!display [BUF_UNIT] && !display [BUF_TEN])							// lift out of work
 8001dd6:	4b90      	ldr	r3, [pc, #576]	; (8002018 <set_output+0x55c>)
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <set_output+0x33a>
 8001de0:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <set_output+0x55c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <set_output+0x33a>
					{
						display [BUF_TEN] = A_BETR;
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <set_output+0x55c>)
 8001dec:	2226      	movs	r2, #38	; 0x26
 8001dee:	701a      	strb	r2, [r3, #0]
						display [BUF_UNIT] = A_BETR;
 8001df0:	4b89      	ldr	r3, [pc, #548]	; (8002018 <set_output+0x55c>)
 8001df2:	2226      	movs	r2, #38	; 0x26
 8001df4:	705a      	strb	r2, [r3, #1]
					}
					if((display[BUF_UNIT] != 'J') && (display[BUF_TEN] != 'X'))
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <set_output+0x55c>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b4a      	cmp	r3, #74	; 0x4a
 8001dfe:	d04c      	beq.n	8001e9a <set_output+0x3de>
 8001e00:	4b85      	ldr	r3, [pc, #532]	; (8002018 <set_output+0x55c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b58      	cmp	r3, #88	; 0x58
 8001e08:	d047      	beq.n	8001e9a <set_output+0x3de>
					{
						if((virt[IO_SUB_FUNC]<56) &&(virt[IO_SUB_FUNC]))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b37      	cmp	r3, #55	; 0x37
 8001e12:	d842      	bhi.n	8001e9a <set_output+0x3de>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03d      	beq.n	8001e9a <set_output+0x3de>
						{
							if((FloorName[virt[IO_SUB_FUNC]-1][0] !=display [BUF_TEN]) ||(FloorName[virt[IO_SUB_FUNC]-1][1] !=display [BUF_UNIT]))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3301      	adds	r3, #1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	4a7d      	ldr	r2, [pc, #500]	; (800201c <set_output+0x560>)
 8001e28:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e2c:	4b7a      	ldr	r3, [pc, #488]	; (8002018 <set_output+0x55c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d10c      	bne.n	8001e50 <set_output+0x394>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	4a77      	ldr	r2, [pc, #476]	; (800201c <set_output+0x560>)
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	785a      	ldrb	r2, [r3, #1]
 8001e46:	4b74      	ldr	r3, [pc, #464]	; (8002018 <set_output+0x55c>)
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d024      	beq.n	8001e9a <set_output+0x3de>
							{
								if((display [BUF_TEN]!=A_BETR) &&(display [BUF_UNIT]!=A_BETR))
 8001e50:	4b71      	ldr	r3, [pc, #452]	; (8002018 <set_output+0x55c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b26      	cmp	r3, #38	; 0x26
 8001e58:	d01f      	beq.n	8001e9a <set_output+0x3de>
 8001e5a:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <set_output+0x55c>)
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b26      	cmp	r3, #38	; 0x26
 8001e62:	d01a      	beq.n	8001e9a <set_output+0x3de>
								{
									FloorName[virt[IO_SUB_FUNC]-1][0] =display [BUF_TEN];
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3301      	adds	r3, #1
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <set_output+0x55c>)
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	b2d1      	uxtb	r1, r2
 8001e72:	4a6a      	ldr	r2, [pc, #424]	; (800201c <set_output+0x560>)
 8001e74:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
									FloorName[virt[IO_SUB_FUNC]-1][1] =display [BUF_UNIT];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	4a65      	ldr	r2, [pc, #404]	; (8002018 <set_output+0x55c>)
 8001e82:	7852      	ldrb	r2, [r2, #1]
 8001e84:	b2d1      	uxtb	r1, r2
 8001e86:	4a65      	ldr	r2, [pc, #404]	; (800201c <set_output+0x560>)
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	705a      	strb	r2, [r3, #1]
									Flash_Write_Bytes(DATA_START_ADDRESS, (uint8_t *)&FloorName, sizeof(FloorName));
 8001e90:	226e      	movs	r2, #110	; 0x6e
 8001e92:	4962      	ldr	r1, [pc, #392]	; (800201c <set_output+0x560>)
 8001e94:	4862      	ldr	r0, [pc, #392]	; (8002020 <set_output+0x564>)
 8001e96:	f002 fd5f 	bl	8004958 <Flash_Write_Bytes>
								}
							}
						}
					}
				}
			for (i = 0; i < mInOut_Number; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e116      	b.n	80020ce <set_output+0x612>
				{// search output parameter list
					if ((outpar [i][IO_BASIC_FUNC] == POSITION_INDICATOR) &&
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	4a60      	ldr	r2, [pc, #384]	; (8002024 <set_output+0x568>)
 8001ea4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	f040 810c 	bne.w	80020c6 <set_output+0x60a>
							(outpar [i][IO_LIFT] == virt [IO_LIFT]) &&
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	4a5c      	ldr	r2, [pc, #368]	; (8002024 <set_output+0x568>)
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	789a      	ldrb	r2, [r3, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3302      	adds	r3, #2
 8001ebc:	781b      	ldrb	r3, [r3, #0]
					if ((outpar [i][IO_BASIC_FUNC] == POSITION_INDICATOR) &&
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	f040 8101 	bne.w	80020c6 <set_output+0x60a>
							(outpar [i][IO_ENABLE] == ENABLE))
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	4a57      	ldr	r2, [pc, #348]	; (8002024 <set_output+0x568>)
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	799b      	ldrb	r3, [r3, #6]
							(outpar [i][IO_LIFT] == virt [IO_LIFT]) &&
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	f040 80f9 	bne.w	80020c6 <set_output+0x60a>
						{// position ind. output for this lift
							switch (outpar [i][IO_SUB_FUNC])
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	4a53      	ldr	r2, [pc, #332]	; (8002024 <set_output+0x568>)
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	f000 80a4 	beq.w	800202c <set_output+0x570>
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	f300 80ef 	bgt.w	80020c8 <set_output+0x60c>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <set_output+0x438>
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d044      	beq.n	8001f7c <set_output+0x4c0>
 8001ef2:	e0e9      	b.n	80020c8 <set_output+0x60c>
								{// type of output
									case (ONE_OF_N):					// 1 of n controlled display
										if (virt [IO_SUB_FUNC] == outpar [i][IO_FLOOR])
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	4949      	ldr	r1, [pc, #292]	; (8002024 <set_output+0x568>)
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	78db      	ldrb	r3, [r3, #3]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11b      	bne.n	8001f40 <set_output+0x484>
											{
												bit_set (out[i/8], i%8);		// set physical output
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	08db      	lsrs	r3, r3, #3
 8001f0c:	b2d8      	uxtb	r0, r3
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b45      	ldr	r3, [pc, #276]	; (8002028 <set_output+0x56c>)
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	b25a      	sxtb	r2, r3
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	b2d9      	uxtb	r1, r3
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <set_output+0x56c>)
 8001f30:	5499      	strb	r1, [r3, r2]
												outpar [i][IO_STATE] = 1;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <set_output+0x568>)
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	715a      	strb	r2, [r3, #5]
					  				else
											{
							  				bit_reset (out[i/8], i%8);		// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001f3e:	e0c3      	b.n	80020c8 <set_output+0x60c>
							  				bit_reset (out[i/8], i%8);		// reset physical output
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	08db      	lsrs	r3, r3, #3
 8001f44:	b2d8      	uxtb	r0, r3
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <set_output+0x56c>)
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	b25a      	sxtb	r2, r3
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	b25b      	sxtb	r3, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	b25b      	sxtb	r3, r3
 8001f62:	4013      	ands	r3, r2
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	4602      	mov	r2, r0
 8001f68:	b2d9      	uxtb	r1, r3
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <set_output+0x56c>)
 8001f6c:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <set_output+0x568>)
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	715a      	strb	r2, [r3, #5]
										break;
 8001f7a:	e0a5      	b.n	80020c8 <set_output+0x60c>

									case (BINARY):						// binary controlled display
										if ((virt [IO_SUB_FUNC] >> (outpar [i][IO_FLOOR] - 1)) & 0x01)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	4a27      	ldr	r2, [pc, #156]	; (8002024 <set_output+0x568>)
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	78db      	ldrb	r3, [r3, #3]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	fa41 f303 	asr.w	r3, r1, r3
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <set_output+0x51a>
											{
												bit_set (out[i/8], i&8);			// set physical output
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	b2d8      	uxtb	r0, r3
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <set_output+0x56c>)
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b25a      	sxtb	r2, r3
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	b2d9      	uxtb	r1, r3
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <set_output+0x56c>)
 8001fc6:	5499      	strb	r1, [r3, r2]
					 							outpar [i][IO_STATE] = 1;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <set_output+0x568>)
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	715a      	strb	r2, [r3, #5]
					  				else
											{
							  				bit_reset (out[i/8], i%8);			// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8001fd4:	e078      	b.n	80020c8 <set_output+0x60c>
							  				bit_reset (out[i/8], i%8);			// reset physical output
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	b2d8      	uxtb	r0, r3
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <set_output+0x56c>)
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	b25a      	sxtb	r2, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	b2d9      	uxtb	r1, r3
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <set_output+0x56c>)
 8002002:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <set_output+0x568>)
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	2200      	movs	r2, #0
 800200e:	715a      	strb	r2, [r3, #5]
										break;
 8002010:	e05a      	b.n	80020c8 <set_output+0x60c>
 8002012:	bf00      	nop
 8002014:	20000c50 	.word	0x20000c50
 8002018:	200005f8 	.word	0x200005f8
 800201c:	20000344 	.word	0x20000344
 8002020:	0801fc00 	.word	0x0801fc00
 8002024:	200008a0 	.word	0x200008a0
 8002028:	20000328 	.word	0x20000328

									case (GRAY):						// gray code controlled display
										if ((graycode [virt [IO_SUB_FUNC]] >> (outpar [i][IO_FLOOR] - 1)) & 0x01)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <set_output+0x820>)
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	4619      	mov	r1, r3
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	4aa8      	ldr	r2, [pc, #672]	; (80022e0 <set_output+0x824>)
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	3b01      	subs	r3, #1
 8002046:	fa41 f303 	asr.w	r3, r1, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01b      	beq.n	800208a <set_output+0x5ce>
											{
												bit_set (out[i/8], i%8);			// set physical output
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	b2d8      	uxtb	r0, r3
 8002058:	4602      	mov	r2, r0
 800205a:	4ba2      	ldr	r3, [pc, #648]	; (80022e4 <set_output+0x828>)
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b25a      	sxtb	r2, r3
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	b25b      	sxtb	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b25b      	sxtb	r3, r3
 8002074:	4602      	mov	r2, r0
 8002076:	b2d9      	uxtb	r1, r3
 8002078:	4b9a      	ldr	r3, [pc, #616]	; (80022e4 <set_output+0x828>)
 800207a:	5499      	strb	r1, [r3, r2]
												outpar [i][IO_STATE] = 1;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	4a98      	ldr	r2, [pc, #608]	; (80022e0 <set_output+0x824>)
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	2201      	movs	r2, #1
 8002086:	715a      	strb	r2, [r3, #5]
						  			else
											{
							  				bit_reset (out[i/8], i%8);			// reset physical output
						  					outpar [i][IO_STATE] = 0;
											}
										break;
 8002088:	e01e      	b.n	80020c8 <set_output+0x60c>
							  				bit_reset (out[i/8], i%8);			// reset physical output
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	b2d8      	uxtb	r0, r3
 8002090:	4602      	mov	r2, r0
 8002092:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <set_output+0x828>)
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	b25a      	sxtb	r2, r3
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	4602      	mov	r2, r0
 80020b2:	b2d9      	uxtb	r1, r3
 80020b4:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <set_output+0x828>)
 80020b6:	5499      	strb	r1, [r3, r2]
						  					outpar [i][IO_STATE] = 0;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4a89      	ldr	r2, [pc, #548]	; (80022e0 <set_output+0x824>)
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	2200      	movs	r2, #0
 80020c2:	715a      	strb	r2, [r3, #5]
										break;
 80020c4:	e000      	b.n	80020c8 <set_output+0x60c>
								}
						}
 80020c6:	bf00      	nop
			for (i = 0; i < mInOut_Number; i++)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	3301      	adds	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	4b86      	ldr	r3, [pc, #536]	; (80022e8 <set_output+0x82c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f4ff aee3 	bcc.w	8001ea0 <set_output+0x3e4>
 80020da:	f000 bd5f 	b.w	8002b9c <set_output+0x10e0>
				}
		}
	else if ((iotype == DIRECTION_IND) && (virt [IO_LIFT] == disp_lift))
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	2b42      	cmp	r3, #66	; 0x42
 80020e2:	d152      	bne.n	800218a <set_output+0x6ce>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3302      	adds	r3, #2
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b80      	ldr	r3, [pc, #512]	; (80022ec <set_output+0x830>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d14b      	bne.n	800218a <set_output+0x6ce>
		{//�����
			if (!virt [IO_STATE] & 0x01)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3305      	adds	r3, #5
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <set_output+0x658>
			{
				display[BUF_ARROW] &= 0xF0;
 80020fc:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <set_output+0x834>)
 80020fe:	789b      	ldrb	r3, [r3, #2]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f023 030f 	bic.w	r3, r3, #15
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <set_output+0x834>)
 800210a:	709a      	strb	r2, [r3, #2]
				Arrow_state = 0;
 800210c:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <set_output+0x838>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e025      	b.n	8002160 <set_output+0x6a4>
			}
			else
			{
				display[BUF_ARROW] = (display[BUF_ARROW] & 0xF0) | ((virt [IO_SUB_FUNC] & 0x03) | ((virt [IO_SUB_FUNC] >> 2) & 0x0C));
 8002114:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <set_output+0x834>)
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	b25b      	sxtb	r3, r3
 800211c:	f023 030f 	bic.w	r3, r3, #15
 8002120:	b25a      	sxtb	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3301      	adds	r3, #1
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	b259      	sxtb	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	b2db      	uxtb	r3, r3
 800213a:	b25b      	sxtb	r3, r3
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	b25b      	sxtb	r3, r3
 8002142:	430b      	orrs	r3, r1
 8002144:	b25b      	sxtb	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b25b      	sxtb	r3, r3
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <set_output+0x834>)
 800214e:	709a      	strb	r2, [r3, #2]
				Arrow_state =(virt [IO_SUB_FUNC] & 0x33);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3301      	adds	r3, #1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <set_output+0x838>)
 800215e:	701a      	strb	r2, [r3, #0]
			}
			if ((display[BUF_ARROW] & 0x03) > 2)
 8002160:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <set_output+0x834>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b02      	cmp	r3, #2
 800216c:	f340 8516 	ble.w	8002b9c <set_output+0x10e0>
			{
				display[BUF_ARROW] &= 0xF0;
 8002170:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <set_output+0x834>)
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f023 030f 	bic.w	r3, r3, #15
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <set_output+0x834>)
 800217e:	709a      	strb	r2, [r3, #2]
				Arrow_state =0;
 8002180:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <set_output+0x838>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
			if ((display[BUF_ARROW] & 0x03) > 2)
 8002186:	f000 bd09 	b.w	8002b9c <set_output+0x10e0>
			}


		}
	else if((iotype == LIGHT_FUNC) &&
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	2b49      	cmp	r3, #73	; 0x49
 800218e:	f040 80db 	bne.w	8002348 <set_output+0x88c>
			(sub & (HALL_LANTERN_UP | HALL_LANTERN_DN | DIRECTION_IND_UP | DIRECTION_IND_DN)))
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	f003 030f 	and.w	r3, r3, #15
	else if((iotype == LIGHT_FUNC) &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80d5 	beq.w	8002348 <set_output+0x88c>
		{			
			for (i = 0; i < mInOut_Number; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	e0c9      	b.n	8002338 <set_output+0x87c>
				{// search output parameter list
					if ((virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC]) &&
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	494d      	ldr	r1, [pc, #308]	; (80022e0 <set_output+0x824>)
 80021ac:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 80be 	bne.w	8002332 <set_output+0x876>
							(virt [IO_LIFT]  	  == outpar [i][IO_LIFT]) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3302      	adds	r3, #2
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	4948      	ldr	r1, [pc, #288]	; (80022e0 <set_output+0x824>)
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	789b      	ldrb	r3, [r3, #2]
					if ((virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC]) &&
 80021c6:	429a      	cmp	r2, r3
 80021c8:	f040 80b3 	bne.w	8002332 <set_output+0x876>
							(outpar [i][IO_ENABLE] == ENABLE))
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	4a44      	ldr	r2, [pc, #272]	; (80022e0 <set_output+0x824>)
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	799b      	ldrb	r3, [r3, #6]
							(virt [IO_LIFT]  	  == outpar [i][IO_LIFT]) &&
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 80ab 	bne.w	8002332 <set_output+0x876>
						{
							if (((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x0F) || (!outpar [i][IO_SUB_FUNC])) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	493e      	ldr	r1, [pc, #248]	; (80022e0 <set_output+0x824>)
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	4013      	ands	r3, r2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <set_output+0x74a>
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	4a39      	ldr	r2, [pc, #228]	; (80022e0 <set_output+0x824>)
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d178      	bne.n	80022f8 <set_output+0x83c>
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3303      	adds	r3, #3
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4934      	ldr	r1, [pc, #208]	; (80022e0 <set_output+0x824>)
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	78db      	ldrb	r3, [r3, #3]
							if (((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x0F) || (!outpar [i][IO_SUB_FUNC])) &&
 8002216:	429a      	cmp	r2, r3
 8002218:	d00b      	beq.n	8002232 <set_output+0x776>
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3303      	adds	r3, #3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2bff      	cmp	r3, #255	; 0xff
 8002222:	d006      	beq.n	8002232 <set_output+0x776>
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <set_output+0x824>)
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	78db      	ldrb	r3, [r3, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d162      	bne.n	80022f8 <set_output+0x83c>
								  ((virt [IO_DOOR]   & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR])))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4929      	ldr	r1, [pc, #164]	; (80022e0 <set_output+0x824>)
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	791b      	ldrb	r3, [r3, #4]
 8002242:	4013      	ands	r3, r2
 8002244:	b2db      	uxtb	r3, r3
								  ((virt [IO_FLOOR] == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR])) &&
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <set_output+0x79c>
								  ((virt [IO_DOOR]   & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR])))
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <set_output+0x824>)
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d14f      	bne.n	80022f8 <set_output+0x83c>
								{
									if (virt [IO_STATE] & 0x01)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3305      	adds	r3, #5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01b      	beq.n	800229e <set_output+0x7e2>
										{
											bit_set (out[i/8], i % 8);							//set physical output
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	b2d8      	uxtb	r0, r3
 800226c:	4602      	mov	r2, r0
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <set_output+0x828>)
 8002270:	5c9b      	ldrb	r3, [r3, r2]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	b25a      	sxtb	r2, r3
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	b25b      	sxtb	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b25b      	sxtb	r3, r3
 8002288:	4602      	mov	r2, r0
 800228a:	b2d9      	uxtb	r1, r3
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <set_output+0x828>)
 800228e:	5499      	strb	r1, [r3, r2]
					  		 			outpar [i][IO_STATE] = 1;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <set_output+0x824>)
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	2201      	movs	r2, #1
 800229a:	715a      	strb	r2, [r3, #5]
									if (virt [IO_STATE] & 0x01)
 800229c:	e049      	b.n	8002332 <set_output+0x876>
										}
									else
										{
											bit_reset (out[i/8], i % 8);						//reset physical output
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	b2d8      	uxtb	r0, r3
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <set_output+0x828>)
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	b25a      	sxtb	r2, r3
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	4602      	mov	r2, r0
 80022c6:	b2d9      	uxtb	r1, r3
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <set_output+0x828>)
 80022ca:	5499      	strb	r1, [r3, r2]
					    				outpar [i][IO_STATE] = 0;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <set_output+0x824>)
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	2200      	movs	r2, #0
 80022d6:	715a      	strb	r2, [r3, #5]
									if (virt [IO_STATE] & 0x01)
 80022d8:	e02b      	b.n	8002332 <set_output+0x876>
 80022da:	bf00      	nop
 80022dc:	080099a8 	.word	0x080099a8
 80022e0:	200008a0 	.word	0x200008a0
 80022e4:	20000328 	.word	0x20000328
 80022e8:	200001ec 	.word	0x200001ec
 80022ec:	20000c50 	.word	0x20000c50
 80022f0:	200005f8 	.word	0x200005f8
 80022f4:	200003c8 	.word	0x200003c8
										}
							 	}
							else
								{// reset all not matching indications
									bit_reset (out[i/8], i % 8);								//reset physical output
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	08db      	lsrs	r3, r3, #3
 80022fc:	b2d8      	uxtb	r0, r3
 80022fe:	4602      	mov	r2, r0
 8002300:	4b86      	ldr	r3, [pc, #536]	; (800251c <set_output+0xa60>)
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	b25a      	sxtb	r2, r3
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	2101      	movs	r1, #1
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	b25b      	sxtb	r3, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	b25b      	sxtb	r3, r3
 800231a:	4013      	ands	r3, r2
 800231c:	b25b      	sxtb	r3, r3
 800231e:	4602      	mov	r2, r0
 8002320:	b2d9      	uxtb	r1, r3
 8002322:	4b7e      	ldr	r3, [pc, #504]	; (800251c <set_output+0xa60>)
 8002324:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_STATE] = 0;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4a7d      	ldr	r2, [pc, #500]	; (8002520 <set_output+0xa64>)
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	2200      	movs	r2, #0
 8002330:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <set_output+0xa68>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	429a      	cmp	r2, r3
 8002340:	f4ff af30 	bcc.w	80021a4 <set_output+0x6e8>
	else if((iotype == LIGHT_FUNC) &&
 8002344:	f000 bc2a 	b.w	8002b9c <set_output+0x10e0>
								}
						}
				}
		}
	else if (iotype == SPEAKER_BUZ)
 8002348:	7b7b      	ldrb	r3, [r7, #13]
 800234a:	2b4c      	cmp	r3, #76	; 0x4c
 800234c:	d155      	bne.n	80023fa <set_output+0x93e>
		{//��վ��
			switch(sub)
 800234e:	7bbb      	ldrb	r3, [r7, #14]
 8002350:	2b10      	cmp	r3, #16
 8002352:	d01e      	beq.n	8002392 <set_output+0x8d6>
 8002354:	2b10      	cmp	r3, #16
 8002356:	f300 8421 	bgt.w	8002b9c <set_output+0x10e0>
 800235a:	2b04      	cmp	r3, #4
 800235c:	d002      	beq.n	8002364 <set_output+0x8a8>
 800235e:	2b08      	cmp	r3, #8
 8002360:	f040 841c 	bne.w	8002b9c <set_output+0x10e0>
				{
					case BUZZER_FIRE:
					case BUZZER_LEVELING:						
						if(virt[IO_STATE])					
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3305      	adds	r3, #5
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <set_output+0x8c4>
							buzzer |= BUZ_WORKING;
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <set_output+0xa6c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <set_output+0xa6c>)
 800237a:	701a      	strb	r2, [r3, #0]
						else
							buzzer &= ~BUZ_WORKING;
						break;
 800237c:	f000 bc0e 	b.w	8002b9c <set_output+0x10e0>
							buzzer &= ~BUZ_WORKING;
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <set_output+0xa6c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <set_output+0xa6c>)
 800238c:	701a      	strb	r2, [r3, #0]
						break;
 800238e:	f000 bc05 	b.w	8002b9c <set_output+0x10e0>

					case BUZZER_NORMAL:
						if(virt[IO_STATE])		
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3305      	adds	r3, #5
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d026      	beq.n	80023ea <set_output+0x92e>
							{
								if(virt[IO_DOOR] & BIT_0)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01b      	beq.n	80023e2 <set_output+0x926>
									{
										buzzer |= (BUZ_WORKING | BUZ_PULSE);
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <set_output+0xa6c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f043 0303 	orr.w	r3, r3, #3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <set_output+0xa6c>)
 80023b6:	701a      	strb	r2, [r3, #0]
										bFunc.buz_state = true;
 80023b8:	4a5c      	ldr	r2, [pc, #368]	; (800252c <set_output+0xa70>)
 80023ba:	7813      	ldrb	r3, [r2, #0]
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	7013      	strb	r3, [r2, #0]
										att_alarm_timer = virt[IO_FLOOR];
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	78da      	ldrb	r2, [r3, #3]
 80023c6:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <set_output+0xa74>)
 80023c8:	701a      	strb	r2, [r3, #0]
										buz_alarm_timer = att_alarm_timer;
 80023ca:	4b59      	ldr	r3, [pc, #356]	; (8002530 <set_output+0xa74>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b59      	ldr	r3, [pc, #356]	; (8002534 <set_output+0xa78>)
 80023d0:	701a      	strb	r2, [r3, #0]
										buz_alarm_totaltimer = virt[IO_DOOR] >> 1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b56      	ldr	r3, [pc, #344]	; (8002538 <set_output+0xa7c>)
 80023de:	701a      	strb	r2, [r3, #0]
									buzzer = BUZ_WORKING;
							}
						else
							buzzer &= ~(BUZ_WORKING | BUZ_PULSE);

						break;
 80023e0:	e3dc      	b.n	8002b9c <set_output+0x10e0>
									buzzer = BUZ_WORKING;
 80023e2:	4b51      	ldr	r3, [pc, #324]	; (8002528 <set_output+0xa6c>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
						break;
 80023e8:	e3d8      	b.n	8002b9c <set_output+0x10e0>
							buzzer &= ~(BUZ_WORKING | BUZ_PULSE);
 80023ea:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <set_output+0xa6c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <set_output+0xa6c>)
 80023f6:	701a      	strb	r2, [r3, #0]
						break;
 80023f8:	e3d0      	b.n	8002b9c <set_output+0x10e0>
				}
		}
	else if (iotype == ARRIVAL_INDICATION)
 80023fa:	7b7b      	ldrb	r3, [r7, #13]
 80023fc:	2b44      	cmp	r3, #68	; 0x44
 80023fe:	f040 809d 	bne.w	800253c <set_output+0xa80>
		{//��վ��
			for (i = 0; i < mInOut_Number; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e081      	b.n	800250c <set_output+0xa50>
				{// search output parameter list
					if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	4944      	ldr	r1, [pc, #272]	; (8002520 <set_output+0xa64>)
 8002410:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002414:	429a      	cmp	r2, r3
 8002416:	d176      	bne.n	8002506 <set_output+0xa4a>
					if ((virt [IO_SUB_FUNC]   & outpar [i][IO_SUB_FUNC] & 0x03) || (!outpar [i][IO_SUB_FUNC]))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3301      	adds	r3, #1
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	493f      	ldr	r1, [pc, #252]	; (8002520 <set_output+0xa64>)
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	4013      	ands	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <set_output+0x986>
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	4a3a      	ldr	r2, [pc, #232]	; (8002520 <set_output+0xa64>)
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d161      	bne.n	8002506 <set_output+0xa4a>
					if ((virt [IO_FLOOR]     == outpar [i][IO_FLOOR]) || (virt [IO_FLOOR] == 0xFF) || (!outpar [i][IO_FLOOR]))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3303      	adds	r3, #3
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	4935      	ldr	r1, [pc, #212]	; (8002520 <set_output+0xa64>)
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	429a      	cmp	r2, r3
 8002454:	d00b      	beq.n	800246e <set_output+0x9b2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3303      	adds	r3, #3
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2bff      	cmp	r3, #255	; 0xff
 800245e:	d006      	beq.n	800246e <set_output+0x9b2>
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <set_output+0xa64>)
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	78db      	ldrb	r3, [r3, #3]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d14b      	bne.n	8002506 <set_output+0xa4a>
					if (virt [IO_LIFT]       == outpar [i][IO_LIFT])
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3302      	adds	r3, #2
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	492a      	ldr	r1, [pc, #168]	; (8002520 <set_output+0xa64>)
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	789b      	ldrb	r3, [r3, #2]
 800247e:	429a      	cmp	r2, r3
 8002480:	d141      	bne.n	8002506 <set_output+0xa4a>
					if ((virt [IO_DOOR]       & outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	4925      	ldr	r1, [pc, #148]	; (8002520 <set_output+0xa64>)
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	4013      	ands	r3, r2
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <set_output+0x9ec>
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <set_output+0xa64>)
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	791b      	ldrb	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d12e      	bne.n	8002506 <set_output+0xa4a>
					if (outpar [i][IO_ENABLE] == ENABLE)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <set_output+0xa64>)
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	799b      	ldrb	r3, [r3, #6]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d127      	bne.n	8002506 <set_output+0xa4a>
						{
							if (virt [IO_STATE] & 0x01)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3305      	adds	r3, #5
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <set_output+0xa4a>
								{
									bit_set (out[i/8], i%8);							// set physical output
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	08db      	lsrs	r3, r3, #3
 80024c8:	b2d8      	uxtb	r0, r3
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <set_output+0xa60>)
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b25a      	sxtb	r2, r3
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	4602      	mov	r2, r0
 80024e8:	b2d9      	uxtb	r1, r3
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <set_output+0xa60>)
 80024ec:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_ACK] = 20;			// set on timer 20 * 500 ms = 10 s	(��վ�Ƴ�����20s)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <set_output+0xa64>)
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	2214      	movs	r2, #20
 80024f8:	71da      	strb	r2, [r3, #7]
									outpar [i][IO_STATE] = 1;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	4a08      	ldr	r2, [pc, #32]	; (8002520 <set_output+0xa64>)
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	2201      	movs	r2, #1
 8002504:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	3301      	adds	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <set_output+0xa68>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	429a      	cmp	r2, r3
 8002514:	f4ff af78 	bcc.w	8002408 <set_output+0x94c>
 8002518:	e340      	b.n	8002b9c <set_output+0x10e0>
 800251a:	bf00      	nop
 800251c:	20000328 	.word	0x20000328
 8002520:	200008a0 	.word	0x200008a0
 8002524:	200001ec 	.word	0x200001ec
 8002528:	20000321 	.word	0x20000321
 800252c:	20000ba4 	.word	0x20000ba4
 8002530:	20000334 	.word	0x20000334
 8002534:	20000335 	.word	0x20000335
 8002538:	20000336 	.word	0x20000336
								}
						}
				}
		}
	else if((iotype == SPECIAL_FUNC) || (iotype == FIRE_FUNCTION)|| (iotype == CALL_TYPE))
 800253c:	7b7b      	ldrb	r3, [r7, #13]
 800253e:	2b0e      	cmp	r3, #14
 8002540:	d006      	beq.n	8002550 <set_output+0xa94>
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	2b14      	cmp	r3, #20
 8002546:	d003      	beq.n	8002550 <set_output+0xa94>
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	2b15      	cmp	r3, #21
 800254c:	f040 8267 	bne.w	8002a1e <set_output+0xf62>
		{//���⹦��
			switch(sub)
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	2b10      	cmp	r3, #16
 8002554:	d062      	beq.n	800261c <set_output+0xb60>
 8002556:	2b10      	cmp	r3, #16
 8002558:	f2c0 817d 	blt.w	8002856 <set_output+0xd9a>
 800255c:	2bae      	cmp	r3, #174	; 0xae
 800255e:	f300 817a 	bgt.w	8002856 <set_output+0xd9a>
 8002562:	2b86      	cmp	r3, #134	; 0x86
 8002564:	f2c0 8177 	blt.w	8002856 <set_output+0xd9a>
 8002568:	3b86      	subs	r3, #134	; 0x86
 800256a:	2b28      	cmp	r3, #40	; 0x28
 800256c:	f200 8173 	bhi.w	8002856 <set_output+0xd9a>
 8002570:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <set_output+0xabc>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	080027eb 	.word	0x080027eb
 800257c:	080026ad 	.word	0x080026ad
 8002580:	0800271b 	.word	0x0800271b
 8002584:	080027eb 	.word	0x080027eb
 8002588:	08002857 	.word	0x08002857
 800258c:	08002857 	.word	0x08002857
 8002590:	08002857 	.word	0x08002857
 8002594:	08002857 	.word	0x08002857
 8002598:	08002857 	.word	0x08002857
 800259c:	0800271b 	.word	0x0800271b
 80025a0:	0800271b 	.word	0x0800271b
 80025a4:	08002857 	.word	0x08002857
 80025a8:	08002857 	.word	0x08002857
 80025ac:	08002831 	.word	0x08002831
 80025b0:	08002857 	.word	0x08002857
 80025b4:	08002857 	.word	0x08002857
 80025b8:	08002857 	.word	0x08002857
 80025bc:	08002857 	.word	0x08002857
 80025c0:	08002857 	.word	0x08002857
 80025c4:	08002857 	.word	0x08002857
 80025c8:	08002857 	.word	0x08002857
 80025cc:	08002857 	.word	0x08002857
 80025d0:	08002857 	.word	0x08002857
 80025d4:	08002857 	.word	0x08002857
 80025d8:	08002831 	.word	0x08002831
 80025dc:	08002857 	.word	0x08002857
 80025e0:	08002857 	.word	0x08002857
 80025e4:	08002857 	.word	0x08002857
 80025e8:	08002857 	.word	0x08002857
 80025ec:	08002857 	.word	0x08002857
 80025f0:	08002857 	.word	0x08002857
 80025f4:	08002857 	.word	0x08002857
 80025f8:	08002857 	.word	0x08002857
 80025fc:	08002857 	.word	0x08002857
 8002600:	08002663 	.word	0x08002663
 8002604:	08002857 	.word	0x08002857
 8002608:	08002857 	.word	0x08002857
 800260c:	08002857 	.word	0x08002857
 8002610:	08002857 	.word	0x08002857
 8002614:	080027a1 	.word	0x080027a1
 8002618:	080026ad 	.word	0x080026ad
				{
					case OUT_OF_ORDER:
						if(virt[IO_STATE])
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3305      	adds	r3, #5
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00e      	beq.n	8002644 <set_output+0xb88>
						{
							display[BUF_ARROW] |= OUT_OF_SERVICE;
 8002626:	4b9a      	ldr	r3, [pc, #616]	; (8002890 <set_output+0xdd4>)
 8002628:	789b      	ldrb	r3, [r3, #2]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b97      	ldr	r3, [pc, #604]	; (8002890 <set_output+0xdd4>)
 8002634:	709a      	strb	r2, [r3, #2]
							display_message |= ERROR_OUTOFORDER;
 8002636:	4b97      	ldr	r3, [pc, #604]	; (8002894 <set_output+0xdd8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f043 0308 	orr.w	r3, r3, #8
 800263e:	4a95      	ldr	r2, [pc, #596]	; (8002894 <set_output+0xdd8>)
 8002640:	6013      	str	r3, [r2, #0]
						else
						{
							display_message &= ~ERROR_OUTOFORDER;
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
						}
						break;
 8002642:	e1eb      	b.n	8002a1c <set_output+0xf60>
							display_message &= ~ERROR_OUTOFORDER;
 8002644:	4b93      	ldr	r3, [pc, #588]	; (8002894 <set_output+0xdd8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0308 	bic.w	r3, r3, #8
 800264c:	4a91      	ldr	r2, [pc, #580]	; (8002894 <set_output+0xdd8>)
 800264e:	6013      	str	r3, [r2, #0]
							display[BUF_ARROW] &= ~OUT_OF_SERVICE;
 8002650:	4b8f      	ldr	r3, [pc, #572]	; (8002890 <set_output+0xdd4>)
 8002652:	789b      	ldrb	r3, [r3, #2]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b8c      	ldr	r3, [pc, #560]	; (8002890 <set_output+0xdd4>)
 800265e:	709a      	strb	r2, [r3, #2]
						break;
 8002660:	e1dc      	b.n	8002a1c <set_output+0xf60>

					case UPS_EVAC_READY_SPEAKER:
						if(virt[IO_STATE])
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3305      	adds	r3, #5
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00f      	beq.n	800268c <set_output+0xbd0>
							{
								bTime.Time_alarm_fg = 1;
 800266c:	4a8a      	ldr	r2, [pc, #552]	; (8002898 <set_output+0xddc>)
 800266e:	7813      	ldrb	r3, [r2, #0]
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 10;
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <set_output+0xde0>)
 8002678:	220a      	movs	r2, #10
 800267a:	701a      	strb	r2, [r3, #0]
								buzzer |= BUZ_WORKING;
 800267c:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <set_output+0xde4>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b86      	ldr	r3, [pc, #536]	; (80028a0 <set_output+0xde4>)
 8002688:	701a      	strb	r2, [r3, #0]
							{
								bTime.Time_alarm_fg = 0;
								att_alarm_timer = 0;
								buzzer &= ~BUZ_WORKING;
							}
						break;
 800268a:	e1c7      	b.n	8002a1c <set_output+0xf60>
								bTime.Time_alarm_fg = 0;
 800268c:	4a82      	ldr	r2, [pc, #520]	; (8002898 <set_output+0xddc>)
 800268e:	7813      	ldrb	r3, [r2, #0]
 8002690:	f36f 1345 	bfc	r3, #5, #1
 8002694:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 0;
 8002696:	4b81      	ldr	r3, [pc, #516]	; (800289c <set_output+0xde0>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
								buzzer &= ~BUZ_WORKING;
 800269c:	4b80      	ldr	r3, [pc, #512]	; (80028a0 <set_output+0xde4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b7e      	ldr	r3, [pc, #504]	; (80028a0 <set_output+0xde4>)
 80026a8:	701a      	strb	r2, [r3, #0]
						break;
 80026aa:	e1b7      	b.n	8002a1c <set_output+0xf60>
						
					case OVER_LOAD_STATE:					
					case DOOR_CONN_ALARM:
						if(virt[IO_STATE])
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3305      	adds	r3, #5
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <set_output+0xc2c>
							{
								if(sub == OVER_LOAD_STATE)
 80026b6:	7bbb      	ldrb	r3, [r7, #14]
 80026b8:	2b87      	cmp	r3, #135	; 0x87
 80026ba:	d107      	bne.n	80026cc <set_output+0xc10>
									display[BUF_ARROW] |= OVER_LOAD;
 80026bc:	4b74      	ldr	r3, [pc, #464]	; (8002890 <set_output+0xdd4>)
 80026be:	789b      	ldrb	r3, [r3, #2]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f043 0310 	orr.w	r3, r3, #16
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b71      	ldr	r3, [pc, #452]	; (8002890 <set_output+0xdd4>)
 80026ca:	709a      	strb	r2, [r3, #2]
								buzzer |= BUZ_WORKING;
 80026cc:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <set_output+0xde4>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <set_output+0xde4>)
 80026d8:	701a      	strb	r2, [r3, #0]
								display_message |= ERROR_OVERLOAD;
 80026da:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <set_output+0xdd8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	4a6c      	ldr	r2, [pc, #432]	; (8002894 <set_output+0xdd8>)
 80026e4:	6013      	str	r3, [r2, #0]
								if(sub == OVER_LOAD_STATE)
									display[BUF_ARROW] &= ~OVER_LOAD;
								buzzer &= ~BUZ_WORKING;
								display_message &= ~ERROR_OVERLOAD;
							}
						break;
 80026e6:	e199      	b.n	8002a1c <set_output+0xf60>
								if(sub == OVER_LOAD_STATE)
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	2b87      	cmp	r3, #135	; 0x87
 80026ec:	d107      	bne.n	80026fe <set_output+0xc42>
									display[BUF_ARROW] &= ~OVER_LOAD;
 80026ee:	4b68      	ldr	r3, [pc, #416]	; (8002890 <set_output+0xdd4>)
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f023 0310 	bic.w	r3, r3, #16
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <set_output+0xdd4>)
 80026fc:	709a      	strb	r2, [r3, #2]
								buzzer &= ~BUZ_WORKING;
 80026fe:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <set_output+0xde4>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <set_output+0xde4>)
 800270a:	701a      	strb	r2, [r3, #0]
								display_message &= ~ERROR_OVERLOAD;
 800270c:	4b61      	ldr	r3, [pc, #388]	; (8002894 <set_output+0xdd8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	4a5f      	ldr	r2, [pc, #380]	; (8002894 <set_output+0xdd8>)
 8002716:	6013      	str	r3, [r2, #0]
						break;
 8002718:	e180      	b.n	8002a1c <set_output+0xf60>
						
					case FIRE_ALARM:
					case FIRE_EVACUATION:
					case FIRE_STATE:
						switch(sub)
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	2b90      	cmp	r3, #144	; 0x90
 800271e:	d006      	beq.n	800272e <set_output+0xc72>
 8002720:	2b90      	cmp	r3, #144	; 0x90
 8002722:	dc13      	bgt.n	800274c <set_output+0xc90>
 8002724:	2b88      	cmp	r3, #136	; 0x88
 8002726:	d00c      	beq.n	8002742 <set_output+0xc86>
 8002728:	2b8f      	cmp	r3, #143	; 0x8f
 800272a:	d005      	beq.n	8002738 <set_output+0xc7c>
 800272c:	e00e      	b.n	800274c <set_output+0xc90>
							{
								case FIRE_ALARM:
									fire_alarm = virt[IO_STATE];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	795a      	ldrb	r2, [r3, #5]
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <set_output+0xde8>)
 8002734:	701a      	strb	r2, [r3, #0]
									break;
 8002736:	e009      	b.n	800274c <set_output+0xc90>
								case FIRE_EVACUATION:
									fire_evacuation = virt[IO_STATE];
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	795a      	ldrb	r2, [r3, #5]
 800273c:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <set_output+0xdec>)
 800273e:	701a      	strb	r2, [r3, #0]
									break;
 8002740:	e004      	b.n	800274c <set_output+0xc90>
								case FIRE_STATE:
									fire_state = virt[IO_STATE];
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	795a      	ldrb	r2, [r3, #5]
 8002746:	4b59      	ldr	r3, [pc, #356]	; (80028ac <set_output+0xdf0>)
 8002748:	701a      	strb	r2, [r3, #0]
									break;
 800274a:	bf00      	nop
							}
						if(fire_alarm | fire_evacuation | fire_state)
 800274c:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <set_output+0xde8>)
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <set_output+0xdec>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b54      	ldr	r3, [pc, #336]	; (80028ac <set_output+0xdf0>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00e      	beq.n	8002782 <set_output+0xcc6>
							{
								display[BUF_ARROW] |= FIRE_CASE;
 8002764:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <set_output+0xdd4>)
 8002766:	789b      	ldrb	r3, [r3, #2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0320 	orr.w	r3, r3, #32
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <set_output+0xdd4>)
 8002772:	709a      	strb	r2, [r3, #2]
								display_message |= ERROR_FIRECASE;
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <set_output+0xdd8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	4a45      	ldr	r2, [pc, #276]	; (8002894 <set_output+0xdd8>)
 800277e:	6013      	str	r3, [r2, #0]
							{
								display[BUF_ARROW] &= ~FIRE_CASE;
								display_message &= ~ERROR_FIRECASE;
							}

						break;
 8002780:	e14c      	b.n	8002a1c <set_output+0xf60>
								display[BUF_ARROW] &= ~FIRE_CASE;
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <set_output+0xdd4>)
 8002784:	789b      	ldrb	r3, [r3, #2]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f023 0320 	bic.w	r3, r3, #32
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b40      	ldr	r3, [pc, #256]	; (8002890 <set_output+0xdd4>)
 8002790:	709a      	strb	r2, [r3, #2]
								display_message &= ~ERROR_FIRECASE;
 8002792:	4b40      	ldr	r3, [pc, #256]	; (8002894 <set_output+0xdd8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	4a3e      	ldr	r2, [pc, #248]	; (8002894 <set_output+0xdd8>)
 800279c:	6013      	str	r3, [r2, #0]
						break;
 800279e:	e13d      	b.n	8002a1c <set_output+0xf60>
					case ATT_BUZ_ALARM:				
						if(virt[IO_STATE])
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3305      	adds	r3, #5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <set_output+0xd0e>
							{						
								buzzer |= BUZ_WORKING;
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <set_output+0xde4>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <set_output+0xde4>)
 80027b6:	701a      	strb	r2, [r3, #0]
								bTime.Time_alarm_fg = 1;
 80027b8:	4a37      	ldr	r2, [pc, #220]	; (8002898 <set_output+0xddc>)
 80027ba:	7813      	ldrb	r3, [r2, #0]
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 3;
 80027c2:	4b36      	ldr	r3, [pc, #216]	; (800289c <set_output+0xde0>)
 80027c4:	2203      	movs	r2, #3
 80027c6:	701a      	strb	r2, [r3, #0]
							{
								buzzer &= ~BUZ_WORKING;
								bTime.Time_alarm_fg = 0;
								att_alarm_timer = 0;
							}
						break;					
 80027c8:	e128      	b.n	8002a1c <set_output+0xf60>
								buzzer &= ~BUZ_WORKING;
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <set_output+0xde4>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <set_output+0xde4>)
 80027d6:	701a      	strb	r2, [r3, #0]
								bTime.Time_alarm_fg = 0;
 80027d8:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <set_output+0xddc>)
 80027da:	7813      	ldrb	r3, [r2, #0]
 80027dc:	f36f 1345 	bfc	r3, #5, #1
 80027e0:	7013      	strb	r3, [r2, #0]
								att_alarm_timer = 0;
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <set_output+0xde0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
						break;					
 80027e8:	e118      	b.n	8002a1c <set_output+0xf60>
						
					case FULL_LOAD_STATE:
					case OCCUPIED:
						if(virt[IO_STATE])
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3305      	adds	r3, #5
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <set_output+0xd56>
						{
							display[BUF_MESSAGE] |= FULLLOAD;
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <set_output+0xdd4>)
 80027f6:	78db      	ldrb	r3, [r3, #3]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <set_output+0xdd4>)
 8002802:	70da      	strb	r2, [r3, #3]
							display_message |= ERROR_FULLLOAD;
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <set_output+0xdd8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <set_output+0xdd8>)
 800280e:	6013      	str	r3, [r2, #0]
						else
						{
							display_message &= ~ERROR_FULLLOAD;
							display[BUF_MESSAGE] &= ~FULLLOAD;
						}
						break;		
 8002810:	e104      	b.n	8002a1c <set_output+0xf60>
							display_message &= ~ERROR_FULLLOAD;
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <set_output+0xdd8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <set_output+0xdd8>)
 800281c:	6013      	str	r3, [r2, #0]
							display[BUF_MESSAGE] &= ~FULLLOAD;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <set_output+0xdd4>)
 8002820:	78db      	ldrb	r3, [r3, #3]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <set_output+0xdd4>)
 800282c:	70da      	strb	r2, [r3, #3]
						break;		
 800282e:	e0f5      	b.n	8002a1c <set_output+0xf60>
					case UPS_EVACUATION:
					case EVACUATION_ACTIVE:
						if(virt[IO_STATE])
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3305      	adds	r3, #5
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <set_output+0xd8c>
							display_message |= ERROR_EMERGENCY;
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <set_output+0xdd8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <set_output+0xdd8>)
 8002844:	6013      	str	r3, [r2, #0]
						else
							display_message &= ~ERROR_EMERGENCY;
						break;
 8002846:	e0e9      	b.n	8002a1c <set_output+0xf60>
							display_message &= ~ERROR_EMERGENCY;
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <set_output+0xdd8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 0302 	bic.w	r3, r3, #2
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <set_output+0xdd8>)
 8002852:	6013      	str	r3, [r2, #0]
						break;
 8002854:	e0e2      	b.n	8002a1c <set_output+0xf60>
					default:
						if(sub == DOOR_STOP)
 8002856:	7bbb      	ldrb	r3, [r7, #14]
 8002858:	2ba1      	cmp	r3, #161	; 0xa1
 800285a:	d115      	bne.n	8002888 <set_output+0xdcc>
							{
								if(virt[IO_STATE])
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3305      	adds	r3, #5
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <set_output+0xdbc>
									display[BUF_ARROW] |= IN_USE;
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <set_output+0xdd4>)
 8002868:	789b      	ldrb	r3, [r3, #2]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <set_output+0xdd4>)
 8002874:	709a      	strb	r2, [r3, #2]
 8002876:	e007      	b.n	8002888 <set_output+0xdcc>
								else
									display[BUF_ARROW] &= ~IN_USE;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <set_output+0xdd4>)
 800287a:	789b      	ldrb	r3, [r3, #2]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <set_output+0xdd4>)
 8002886:	709a      	strb	r2, [r3, #2]
							}
						for (i = 0; i < mInOut_Number; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e0ad      	b.n	80029ea <set_output+0xf2e>
 800288e:	bf00      	nop
 8002890:	200005f8 	.word	0x200005f8
 8002894:	200002fc 	.word	0x200002fc
 8002898:	20000620 	.word	0x20000620
 800289c:	20000334 	.word	0x20000334
 80028a0:	20000321 	.word	0x20000321
 80028a4:	200002b2 	.word	0x200002b2
 80028a8:	200002b3 	.word	0x200002b3
 80028ac:	200002b4 	.word	0x200002b4
							{// search output parameter list
								if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	499a      	ldr	r1, [pc, #616]	; (8002b20 <set_output+0x1064>)
 80028b8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 8091 	bne.w	80029e4 <set_output+0xf28>
								if ((virt [IO_SUB_FUNC]  == outpar [i][IO_SUB_FUNC]) || (!virt [IO_SUB_FUNC]))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3301      	adds	r3, #1
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	4995      	ldr	r1, [pc, #596]	; (8002b20 <set_output+0x1064>)
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d005      	beq.n	80028e2 <set_output+0xe26>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3301      	adds	r3, #1
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8081 	bne.w	80029e4 <set_output+0xf28>
								if (virt [IO_FLOOR] 		 == outpar [i][IO_FLOOR])
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3303      	adds	r3, #3
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	498d      	ldr	r1, [pc, #564]	; (8002b20 <set_output+0x1064>)
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	78db      	ldrb	r3, [r3, #3]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d176      	bne.n	80029e4 <set_output+0xf28>
								if (virt [IO_LIFT]			 == outpar [i][IO_LIFT])
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3302      	adds	r3, #2
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	4988      	ldr	r1, [pc, #544]	; (8002b20 <set_output+0x1064>)
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	789b      	ldrb	r3, [r3, #2]
 8002906:	429a      	cmp	r2, r3
 8002908:	d16c      	bne.n	80029e4 <set_output+0xf28>
								if ((virt [IO_DOOR] &  outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	4983      	ldr	r1, [pc, #524]	; (8002b20 <set_output+0x1064>)
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	791b      	ldrb	r3, [r3, #4]
 800291a:	4013      	ands	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <set_output+0xe74>
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <set_output+0x1064>)
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	791b      	ldrb	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d159      	bne.n	80029e4 <set_output+0xf28>
								if (outpar [i][IO_ENABLE] == ENABLE)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4a7b      	ldr	r2, [pc, #492]	; (8002b20 <set_output+0x1064>)
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	799b      	ldrb	r3, [r3, #6]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d152      	bne.n	80029e4 <set_output+0xf28>
									{
										if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == BUZZER))
 800293e:	7b7b      	ldrb	r3, [r7, #13]
 8002940:	2b0e      	cmp	r3, #14
 8002942:	d10f      	bne.n	8002964 <set_output+0xea8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3301      	adds	r3, #1
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d10a      	bne.n	8002964 <set_output+0xea8>
											buzzer_signal (virt [IO_STATE] & 0x01, 0x01);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3305      	adds	r3, #5
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f81b 	bl	8001998 <buzzer_signal>
 8002962:	e03f      	b.n	80029e4 <set_output+0xf28>
										else
											{
												if (virt [IO_STATE] & 0x01)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3305      	adds	r3, #5
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01b      	beq.n	80029aa <set_output+0xeee>
													{
														bit_set (out[i/8], i%8); 				// set physical output
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	08db      	lsrs	r3, r3, #3
 8002976:	b2d8      	uxtb	r0, r3
 8002978:	4602      	mov	r2, r0
 800297a:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <set_output+0x1068>)
 800297c:	5c9b      	ldrb	r3, [r3, r2]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	b25a      	sxtb	r2, r3
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	b25b      	sxtb	r3, r3
 8002990:	4313      	orrs	r3, r2
 8002992:	b25b      	sxtb	r3, r3
 8002994:	4602      	mov	r2, r0
 8002996:	b2d9      	uxtb	r1, r3
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <set_output+0x1068>)
 800299a:	5499      	strb	r1, [r3, r2]
														outpar [i][IO_STATE] = 1;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <set_output+0x1064>)
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	2201      	movs	r2, #1
 80029a6:	715a      	strb	r2, [r3, #5]
 80029a8:	e01c      	b.n	80029e4 <set_output+0xf28>
													}
												else
													{
														bit_reset (out[i/8], i%8); 			// reset physical output
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	b2d8      	uxtb	r0, r3
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <set_output+0x1068>)
 80029b4:	5c9b      	ldrb	r3, [r3, r2]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	4013      	ands	r3, r2
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	4602      	mov	r2, r0
 80029d2:	b2d9      	uxtb	r1, r3
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <set_output+0x1068>)
 80029d6:	5499      	strb	r1, [r3, r2]
														outpar [i][IO_STATE] = 0;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <set_output+0x1064>)
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	2200      	movs	r2, #0
 80029e2:	715a      	strb	r2, [r3, #5]
						for (i = 0; i < mInOut_Number; i++)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	3301      	adds	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <set_output+0x106c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f4ff af5d 	bcc.w	80028b0 <set_output+0xdf4>
													}
											}
									}
							}
						if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == OVER_LOAD_STATE))
 80029f6:	7b7b      	ldrb	r3, [r7, #13]
 80029f8:	2b0e      	cmp	r3, #14
 80029fa:	d10e      	bne.n	8002a1a <set_output+0xf5e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3301      	adds	r3, #1
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b87      	cmp	r3, #135	; 0x87
 8002a04:	d109      	bne.n	8002a1a <set_output+0xf5e>
							buzzer_signal (virt [IO_STATE] & 0x01, 0x80);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3305      	adds	r3, #5
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe ffbf 	bl	8001998 <buzzer_signal>
						break;
 8002a1a:	bf00      	nop
			switch(sub)
 8002a1c:	e0be      	b.n	8002b9c <set_output+0x10e0>
				}
		}	
	else
		{//�����ź�
			for (i = 0; i < mInOut_Number; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e0a3      	b.n	8002b6c <set_output+0x10b0>
				{// search output parameter list
					if (virt [IO_BASIC_FUNC] == outpar [i][IO_BASIC_FUNC])
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	493d      	ldr	r1, [pc, #244]	; (8002b20 <set_output+0x1064>)
 8002a2c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f040 8098 	bne.w	8002b66 <set_output+0x10aa>
					if ((virt [IO_SUB_FUNC]  == outpar [i][IO_SUB_FUNC]) || (!virt [IO_SUB_FUNC]))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	4938      	ldr	r1, [pc, #224]	; (8002b20 <set_output+0x1064>)
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d005      	beq.n	8002a56 <set_output+0xf9a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 8088 	bne.w	8002b66 <set_output+0x10aa>
					if (virt [IO_FLOOR]      == outpar [i][IO_FLOOR])
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3303      	adds	r3, #3
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	4930      	ldr	r1, [pc, #192]	; (8002b20 <set_output+0x1064>)
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	78db      	ldrb	r3, [r3, #3]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d17d      	bne.n	8002b66 <set_output+0x10aa>
					if (virt [IO_LIFT]       == outpar [i][IO_LIFT])
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	492b      	ldr	r1, [pc, #172]	; (8002b20 <set_output+0x1064>)
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	789b      	ldrb	r3, [r3, #2]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d173      	bne.n	8002b66 <set_output+0x10aa>
					if ((virt [IO_DOOR] &  outpar [i][IO_DOOR]) || (!outpar [i][IO_DOOR]))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	4926      	ldr	r1, [pc, #152]	; (8002b20 <set_output+0x1064>)
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	791b      	ldrb	r3, [r3, #4]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <set_output+0xfe8>
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <set_output+0x1064>)
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	791b      	ldrb	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d160      	bne.n	8002b66 <set_output+0x10aa>
					if (outpar [i][IO_ENABLE] == ENABLE)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <set_output+0x1064>)
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	799b      	ldrb	r3, [r3, #6]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d159      	bne.n	8002b66 <set_output+0x10aa>
						{
							if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == BUZZER))
 8002ab2:	7b7b      	ldrb	r3, [r7, #13]
 8002ab4:	2b0e      	cmp	r3, #14
 8002ab6:	d10f      	bne.n	8002ad8 <set_output+0x101c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3301      	adds	r3, #1
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d10a      	bne.n	8002ad8 <set_output+0x101c>
								buzzer_signal (virt [IO_STATE] & 0x01, 0x01);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3305      	adds	r3, #5
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe ff61 	bl	8001998 <buzzer_signal>
 8002ad6:	e046      	b.n	8002b66 <set_output+0x10aa>
							else
								{
									if (virt [IO_STATE] & 0x01)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3305      	adds	r3, #5
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d022      	beq.n	8002b2c <set_output+0x1070>
										{
											bit_set (out[i/8], i%8);					// set physical output
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	b2d8      	uxtb	r0, r3
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <set_output+0x1068>)
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	b25a      	sxtb	r2, r3
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	4602      	mov	r2, r0
 8002b0a:	b2d9      	uxtb	r1, r3
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <set_output+0x1068>)
 8002b0e:	5499      	strb	r1, [r3, r2]
					 						outpar [i][IO_STATE] = 1;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <set_output+0x1064>)
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	2201      	movs	r2, #1
 8002b1a:	715a      	strb	r2, [r3, #5]
 8002b1c:	e023      	b.n	8002b66 <set_output+0x10aa>
 8002b1e:	bf00      	nop
 8002b20:	200008a0 	.word	0x200008a0
 8002b24:	20000328 	.word	0x20000328
 8002b28:	200001ec 	.word	0x200001ec
										}
									else
										{
											bit_reset (out[i/8], i%8);				// reset physical output
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	b2d8      	uxtb	r0, r3
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <set_output+0x110c>)
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	b25a      	sxtb	r2, r3
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	4602      	mov	r2, r0
 8002b54:	b2d9      	uxtb	r1, r3
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <set_output+0x110c>)
 8002b58:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <set_output+0x1110>)
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	2200      	movs	r2, #0
 8002b64:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <set_output+0x1114>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f4ff af56 	bcc.w	8002a24 <set_output+0xf68>
										}
								}
						}
				}
			if ((iotype == SPECIAL_FUNC) && (virt [IO_SUB_FUNC] == OVER_LOAD_STATE))
 8002b78:	7b7b      	ldrb	r3, [r7, #13]
 8002b7a:	2b0e      	cmp	r3, #14
 8002b7c:	d10e      	bne.n	8002b9c <set_output+0x10e0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3301      	adds	r3, #1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b87      	cmp	r3, #135	; 0x87
 8002b86:	d109      	bne.n	8002b9c <set_output+0x10e0>
				buzzer_signal (virt [IO_STATE] & 0x01, 0x80);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3305      	adds	r3, #5
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fefe 	bl	8001998 <buzzer_signal>
		}
	mDisp_buf[BUF_TEN + 1] = display[BUF_TEN];
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <set_output+0x1118>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <set_output+0x111c>)
 8002ba4:	705a      	strb	r2, [r3, #1]
	mDisp_buf[BUF_UNIT + 1] = display[BUF_UNIT];
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <set_output+0x1118>)
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <set_output+0x111c>)
 8002bae:	709a      	strb	r2, [r3, #2]
	mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <set_output+0x1118>)
 8002bb2:	789b      	ldrb	r3, [r3, #2]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <set_output+0x111c>)
 8002bb8:	70da      	strb	r2, [r3, #3]
	Display_device();
 8002bba:	f001 fe25 	bl	8004808 <Display_device>
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000328 	.word	0x20000328
 8002bcc:	200008a0 	.word	0x200008a0
 8002bd0:	200001ec 	.word	0x200001ec
 8002bd4:	200005f8 	.word	0x200005f8
 8002bd8:	200005fc 	.word	0x200005fc

08002bdc <set_io_config>:

// set configuration of IO
void set_io_config (void){
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for(i=0; i<MAX_IN_BYTE; i++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	e006      	b.n	8002bf6 <set_io_config+0x1a>
		outpush[i] = 0;
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <set_io_config+0x138>)
 8002bec:	2100      	movs	r1, #0
 8002bee:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<MAX_IN_BYTE; i++)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d9f5      	bls.n	8002be8 <set_io_config+0xc>

	for (i = 0; i < mInOut_Number; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	e07c      	b.n	8002cfc <set_io_config+0x120>
		{
			switch (outpar [i][IO_BASIC_FUNC])
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	4a44      	ldr	r2, [pc, #272]	; (8002d18 <set_io_config+0x13c>)
 8002c06:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002c0a:	2b91      	cmp	r3, #145	; 0x91
 8002c0c:	dc5d      	bgt.n	8002cca <set_io_config+0xee>
 8002c0e:	2b8f      	cmp	r3, #143	; 0x8f
 8002c10:	da47      	bge.n	8002ca2 <set_io_config+0xc6>
 8002c12:	2b0e      	cmp	r3, #14
 8002c14:	d006      	beq.n	8002c24 <set_io_config+0x48>
 8002c16:	2b0e      	cmp	r3, #14
 8002c18:	dc57      	bgt.n	8002cca <set_io_config+0xee>
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d041      	beq.n	8002ca2 <set_io_config+0xc6>
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d03f      	beq.n	8002ca2 <set_io_config+0xc6>
 8002c22:	e052      	b.n	8002cca <set_io_config+0xee>
				{
					case (SPECIAL_FUNC):
						switch (outpar [i][IO_SUB_FUNC])
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <set_io_config+0x13c>)
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	785b      	ldrb	r3, [r3, #1]
 8002c2e:	2ba1      	cmp	r3, #161	; 0xa1
 8002c30:	d00c      	beq.n	8002c4c <set_io_config+0x70>
 8002c32:	2ba1      	cmp	r3, #161	; 0xa1
 8002c34:	dc1e      	bgt.n	8002c74 <set_io_config+0x98>
 8002c36:	2b9a      	cmp	r3, #154	; 0x9a
 8002c38:	d008      	beq.n	8002c4c <set_io_config+0x70>
 8002c3a:	2b9a      	cmp	r3, #154	; 0x9a
 8002c3c:	dc1a      	bgt.n	8002c74 <set_io_config+0x98>
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d004      	beq.n	8002c4c <set_io_config+0x70>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dd16      	ble.n	8002c74 <set_io_config+0x98>
 8002c46:	3b09      	subs	r3, #9
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d813      	bhi.n	8002c74 <set_io_config+0x98>
								case (FAN_1) :
								case (HALLCALL_BYPASS) :
								case (DOOR_OPEN) :
								case (DOOR_CLOSE):
								case (DOOR_STOP) :
									bit_set (outpush[i/8], i);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	b2d8      	uxtb	r0, r3
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <set_io_config+0x138>)
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	b25a      	sxtb	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	b2d9      	uxtb	r1, r3
 8002c6e:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <set_io_config+0x138>)
 8002c70:	5499      	strb	r1, [r3, r2]
									break;
 8002c72:	e015      	b.n	8002ca0 <set_io_config+0xc4>

								default:
									bit_reset (outpush[i/8], i);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	b2d8      	uxtb	r0, r3
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <set_io_config+0x138>)
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	b25a      	sxtb	r2, r3
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	4013      	ands	r3, r2
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	4602      	mov	r2, r0
 8002c98:	b2d9      	uxtb	r1, r3
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <set_io_config+0x138>)
 8002c9c:	5499      	strb	r1, [r3, r2]
									break;
 8002c9e:	bf00      	nop
							}
						break;
 8002ca0:	e029      	b.n	8002cf6 <set_io_config+0x11a>
					case (CAR_CALL):
					case (HALL_CALL):
					case (HALL_CALL_SPECIAL):
					case (HALL_CALL_ADVANCED):
					case (HALL_CALL_EMERGENCY):
						bit_set (outpush[i/8], i);
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	b2d8      	uxtb	r0, r3
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <set_io_config+0x138>)
 8002cac:	5c9b      	ldrb	r3, [r3, r2]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	b25a      	sxtb	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <set_io_config+0x138>)
 8002cc6:	5499      	strb	r1, [r3, r2]
						break;
 8002cc8:	e015      	b.n	8002cf6 <set_io_config+0x11a>

					default:
						bit_reset (outpush[i/8], i);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	b2d8      	uxtb	r0, r3
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <set_io_config+0x138>)
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	b25a      	sxtb	r2, r3
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	4602      	mov	r2, r0
 8002cee:	b2d9      	uxtb	r1, r3
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <set_io_config+0x138>)
 8002cf2:	5499      	strb	r1, [r3, r2]
						break;
 8002cf4:	bf00      	nop
	for (i = 0; i < mInOut_Number; i++)
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	71fb      	strb	r3, [r7, #7]
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <set_io_config+0x140>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	f4ff af7d 	bcc.w	8002c02 <set_io_config+0x26>
				}
		}
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000c3c 	.word	0x20000c3c
 8002d18:	200008a0 	.word	0x200008a0
 8002d1c:	200001ec 	.word	0x200001ec

08002d20 <Dwin_write>:
#include "main.h"
#include  "AllHeader.h"
extern UART_HandleTypeDef huart1;
#define D_PORT huart1
static void Dwin_write(uint8_t *data,uint16_t len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&D_PORT, data, len, 100);
 8002d2c:	887a      	ldrh	r2, [r7, #2]
 8002d2e:	2364      	movs	r3, #100	; 0x64
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4803      	ldr	r0, [pc, #12]	; (8002d40 <Dwin_write+0x20>)
 8002d34:	f005 ff75 	bl	8008c22 <HAL_UART_Transmit>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000ad4 	.word	0x20000ad4

08002d44 <Dwin_Write_VP>:
int Dwin_Write_VP(uint16_t Addr,uint8_t *data,uint16_t len)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b09c      	sub	sp, #112	; 0x70
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	80fb      	strh	r3, [r7, #6]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80bb      	strh	r3, [r7, #4]
	uint8_t DwinBuf[100];
	DwinBuf[0]= 0x5A;
 8002d54:	235a      	movs	r3, #90	; 0x5a
 8002d56:	723b      	strb	r3, [r7, #8]
	DwinBuf[1]= 0xA5;
 8002d58:	23a5      	movs	r3, #165	; 0xa5
 8002d5a:	727b      	strb	r3, [r7, #9]
	DwinBuf[2]= (len+1)*2 +1;  //
 8002d5c:	88bb      	ldrh	r3, [r7, #4]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	72bb      	strb	r3, [r7, #10]
	DwinBuf[3]= 0x82;
 8002d6c:	2382      	movs	r3, #130	; 0x82
 8002d6e:	72fb      	strb	r3, [r7, #11]
	DwinBuf[4]= Addr>>8;
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	733b      	strb	r3, [r7, #12]
	DwinBuf[5]= Addr;
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<len;i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d84:	e01f      	b.n	8002dc6 <Dwin_Write_VP+0x82>
	{
		DwinBuf[6+i*2] = data[i*2];
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	441a      	add	r2, r3
 8002d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d92:	3303      	adds	r3, #3
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f803 2c68 	strb.w	r2, [r3, #-104]
		DwinBuf[6+i*2+1] = data[i*2+1];
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	3301      	adds	r3, #1
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	441a      	add	r2, r3
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	3303      	adds	r3, #3
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	3301      	adds	r3, #1
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002dba:	440b      	add	r3, r1
 8002dbc:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(int i=0;i<len;i++)
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dc6:	88bb      	ldrh	r3, [r7, #4]
 8002dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	dbdb      	blt.n	8002d86 <Dwin_Write_VP+0x42>
	}
    len = (len+1)*2 +4;
 8002dce:	88bb      	ldrh	r3, [r7, #4]
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	80bb      	strh	r3, [r7, #4]
    Dwin_write(DwinBuf, len);
 8002dd8:	88ba      	ldrh	r2, [r7, #4]
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff9d 	bl	8002d20 <Dwin_write>
	return 1;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3770      	adds	r7, #112	; 0x70
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <Dwin_Change_Current_FloorName>:
uint32_t display_message = 0;

char Textmessage[50]= "PLEASE ENTER DESTINATION FLOOR";
char TextErrmessage[50]= "PLEASE ENTER DESTINATION FLOOR";
void Dwin_Change_Current_FloorName(char * flName)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	uint8_t Buf[20] = {0};
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
	Buf[0]=0x10;
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	723b      	strb	r3, [r7, #8]
	Buf[1]=0x01;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	727b      	strb	r3, [r7, #9]
	uint16_t tmp;
	if((display [BUF_TEN] == 0x20) || (display [BUF_TEN] == 0x00) )
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <Dwin_Change_Current_FloorName+0xb4>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d004      	beq.n	8002e26 <Dwin_Change_Current_FloorName+0x36>
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <Dwin_Change_Current_FloorName+0xb4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d117      	bne.n	8002e56 <Dwin_Change_Current_FloorName+0x66>
	{
		if(( display [BUF_UNIT]<0x40) &&( display [BUF_UNIT]>0x29))
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <Dwin_Change_Current_FloorName+0xb4>)
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b3f      	cmp	r3, #63	; 0x3f
 8002e2e:	d807      	bhi.n	8002e40 <Dwin_Change_Current_FloorName+0x50>
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <Dwin_Change_Current_FloorName+0xb4>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b29      	cmp	r3, #41	; 0x29
 8002e38:	d902      	bls.n	8002e40 <Dwin_Change_Current_FloorName+0x50>
			tmp=FLOOR_NAME_X- 50;
 8002e3a:	2346      	movs	r3, #70	; 0x46
 8002e3c:	83fb      	strh	r3, [r7, #30]
 8002e3e:	e001      	b.n	8002e44 <Dwin_Change_Current_FloorName+0x54>
		else
			tmp=FLOOR_NAME_X - 60;
 8002e40:	233c      	movs	r3, #60	; 0x3c
 8002e42:	83fb      	strh	r3, [r7, #30]
		Buf[2]=tmp>>8;
 8002e44:	8bfb      	ldrh	r3, [r7, #30]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	72bb      	strb	r3, [r7, #10]
		Buf[3]=tmp;
 8002e4e:	8bfb      	ldrh	r3, [r7, #30]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	72fb      	strb	r3, [r7, #11]
 8002e54:	e003      	b.n	8002e5e <Dwin_Change_Current_FloorName+0x6e>

	}
	else
	{
		Buf[2]=FLOOR_NAME_X>>8;
 8002e56:	2300      	movs	r3, #0
 8002e58:	72bb      	strb	r3, [r7, #10]
		Buf[3]=FLOOR_NAME_X;
 8002e5a:	2378      	movs	r3, #120	; 0x78
 8002e5c:	72fb      	strb	r3, [r7, #11]
	}
	Buf[4]=FLOOR_NAME_Y>>8;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	733b      	strb	r3, [r7, #12]
	Buf[5]=FLOOR_NAME_Y;
 8002e62:	23d0      	movs	r3, #208	; 0xd0
 8002e64:	737b      	strb	r3, [r7, #13]
	Dwin_Write_VP(FLOORNAME_SP,Buf,3);        //change location
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f44f 40a2 	mov.w	r0, #20736	; 0x5100
 8002e72:	f7ff ff67 	bl	8002d44 <Dwin_Write_VP>
	Buf[0] = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	723b      	strb	r3, [r7, #8]
	Buf[2] = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	72bb      	strb	r3, [r7, #10]
	Buf[1] = flName[0];
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	727b      	strb	r3, [r7, #9]
	Buf[3] = flName[1];
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3301      	adds	r3, #1
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	72fb      	strb	r3, [r7, #11]
	Dwin_Write_VP(FLOORNAME_VP, Buf, 2);
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	2202      	movs	r2, #2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e98:	f7ff ff54 	bl	8002d44 <Dwin_Write_VP>
}
 8002e9c:	bf00      	nop
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200005f8 	.word	0x200005f8

08002ea8 <Dwin_switch_to_next_page>:
void Dwin_switch_to_next_page(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
	static int PageCnt = 0;
	uint8_t Buf[20] = {0};
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	Buf[0]= 0x5A;
 8002ec0:	235a      	movs	r3, #90	; 0x5a
 8002ec2:	713b      	strb	r3, [r7, #4]
	Buf[1] = 0x01;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	717b      	strb	r3, [r7, #5]
	Buf[2] = 0x00;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	71bb      	strb	r3, [r7, #6]
	Buf[3] = PageCnt;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <Dwin_switch_to_next_page+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	71fb      	strb	r3, [r7, #7]
	Dwin_Write_VP(0X0084,Buf,2) ;
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	2084      	movs	r0, #132	; 0x84
 8002edc:	f7ff ff32 	bl	8002d44 <Dwin_Write_VP>
	PageCnt++;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <Dwin_switch_to_next_page+0x58>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <Dwin_switch_to_next_page+0x58>)
 8002ee8:	6013      	str	r3, [r2, #0]
	if(PageCnt == MAX_PAGE)
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <Dwin_switch_to_next_page+0x58>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d102      	bne.n	8002ef8 <Dwin_switch_to_next_page+0x50>
	{
		PageCnt = 0;
 8002ef2:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <Dwin_switch_to_next_page+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
	}
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2000030c 	.word	0x2000030c

08002f04 <Dwin_update_time>:
void Dwin_update_time(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
	int WeekDay;
	uint8_t Buf[20] = {0};
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
	Buf[0]=aBCAN_ReceiveBuf_Clock[2]/10 +0x30;
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	4a73      	ldr	r2, [pc, #460]	; (80030ec <Dwin_update_time+0x1e8>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3330      	adds	r3, #48	; 0x30
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	703b      	strb	r3, [r7, #0]
	Buf[1]=aBCAN_ReceiveBuf_Clock[2]%10 +0x30;
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002f30:	789a      	ldrb	r2, [r3, #2]
 8002f32:	4b6e      	ldr	r3, [pc, #440]	; (80030ec <Dwin_update_time+0x1e8>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	08d9      	lsrs	r1, r3, #3
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3330      	adds	r3, #48	; 0x30
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	707b      	strb	r3, [r7, #1]
	Buf[2]=':';
 8002f4c:	233a      	movs	r3, #58	; 0x3a
 8002f4e:	70bb      	strb	r3, [r7, #2]
	Buf[3]=aBCAN_ReceiveBuf_Clock[1]/10 +0x30;
 8002f50:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	4a65      	ldr	r2, [pc, #404]	; (80030ec <Dwin_update_time+0x1e8>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	08db      	lsrs	r3, r3, #3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	3330      	adds	r3, #48	; 0x30
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	70fb      	strb	r3, [r7, #3]
	Buf[4]=aBCAN_ReceiveBuf_Clock[1]%10 +0x30;
 8002f64:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002f66:	785a      	ldrb	r2, [r3, #1]
 8002f68:	4b60      	ldr	r3, [pc, #384]	; (80030ec <Dwin_update_time+0x1e8>)
 8002f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6e:	08d9      	lsrs	r1, r3, #3
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3330      	adds	r3, #48	; 0x30
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	713b      	strb	r3, [r7, #4]
	Buf[5]=0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	717b      	strb	r3, [r7, #5]
	Dwin_Write_VP(TIME_VP,Buf,3);        //set time
 8002f86:	463b      	mov	r3, r7
 8002f88:	2203      	movs	r2, #3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f241 0025 	movw	r0, #4133	; 0x1025
 8002f90:	f7ff fed8 	bl	8002d44 <Dwin_Write_VP>
	Buf[0]=aBCAN_ReceiveBuf_Clock[3]/10 +0x30;
 8002f94:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002f96:	78db      	ldrb	r3, [r3, #3]
 8002f98:	4a54      	ldr	r2, [pc, #336]	; (80030ec <Dwin_update_time+0x1e8>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	3330      	adds	r3, #48	; 0x30
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	703b      	strb	r3, [r7, #0]
	Buf[1]=aBCAN_ReceiveBuf_Clock[3]%10 +0x30;
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002faa:	78da      	ldrb	r2, [r3, #3]
 8002fac:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <Dwin_update_time+0x1e8>)
 8002fae:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3330      	adds	r3, #48	; 0x30
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	707b      	strb	r3, [r7, #1]
	Buf[2]='.';
 8002fc6:	232e      	movs	r3, #46	; 0x2e
 8002fc8:	70bb      	strb	r3, [r7, #2]
	Buf[3]=(aBCAN_ReceiveBuf_Clock[4] >> 3) / 10 +0x30;
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002fcc:	791b      	ldrb	r3, [r3, #4]
 8002fce:	08db      	lsrs	r3, r3, #3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4a46      	ldr	r2, [pc, #280]	; (80030ec <Dwin_update_time+0x1e8>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3330      	adds	r3, #48	; 0x30
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	70fb      	strb	r3, [r7, #3]
	Buf[4]=(aBCAN_ReceiveBuf_Clock[4] >> 3) % 10 +0x30;
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <Dwin_update_time+0x1e4>)
 8002fe4:	791b      	ldrb	r3, [r3, #4]
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4b40      	ldr	r3, [pc, #256]	; (80030ec <Dwin_update_time+0x1e8>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	08d9      	lsrs	r1, r3, #3
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3330      	adds	r3, #48	; 0x30
 8003000:	b2db      	uxtb	r3, r3
 8003002:	713b      	strb	r3, [r7, #4]
	Buf[5]='.';
 8003004:	232e      	movs	r3, #46	; 0x2e
 8003006:	717b      	strb	r3, [r7, #5]
	Buf[6]=aBCAN_ReceiveBuf_Clock[5]/10 +0x30;
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <Dwin_update_time+0x1e4>)
 800300a:	795b      	ldrb	r3, [r3, #5]
 800300c:	4a37      	ldr	r2, [pc, #220]	; (80030ec <Dwin_update_time+0x1e8>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3330      	adds	r3, #48	; 0x30
 8003018:	b2db      	uxtb	r3, r3
 800301a:	71bb      	strb	r3, [r7, #6]
	Buf[7]=aBCAN_ReceiveBuf_Clock[5]%10 +0x30;
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <Dwin_update_time+0x1e4>)
 800301e:	795a      	ldrb	r2, [r3, #5]
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <Dwin_update_time+0x1e8>)
 8003022:	fba3 1302 	umull	r1, r3, r3, r2
 8003026:	08d9      	lsrs	r1, r3, #3
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3330      	adds	r3, #48	; 0x30
 8003036:	b2db      	uxtb	r3, r3
 8003038:	71fb      	strb	r3, [r7, #7]
	Dwin_Write_VP(DATE_VP,Buf,4);        //set time
 800303a:	463b      	mov	r3, r7
 800303c:	2204      	movs	r2, #4
 800303e:	4619      	mov	r1, r3
 8003040:	f241 0006 	movw	r0, #4102	; 0x1006
 8003044:	f7ff fe7e 	bl	8002d44 <Dwin_Write_VP>

	WeekDay= aBCAN_ReceiveBuf_Clock[4]&0x07;
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <Dwin_update_time+0x1e4>)
 800304a:	791b      	ldrb	r3, [r3, #4]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3b01      	subs	r3, #1
 8003056:	2b06      	cmp	r3, #6
 8003058:	d83a      	bhi.n	80030d0 <Dwin_update_time+0x1cc>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <Dwin_update_time+0x15c>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	0800307d 	.word	0x0800307d
 8003064:	08003089 	.word	0x08003089
 8003068:	08003095 	.word	0x08003095
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030b9 	.word	0x080030b9
 8003078:	080030c5 	.word	0x080030c5
	switch(WeekDay)
	{
		case 1:
			sprintf((char *)Buf,"MONDAY   ");
 800307c:	463b      	mov	r3, r7
 800307e:	491c      	ldr	r1, [pc, #112]	; (80030f0 <Dwin_update_time+0x1ec>)
 8003080:	4618      	mov	r0, r3
 8003082:	f005 ffad 	bl	8008fe0 <siprintf>
			break;
 8003086:	e024      	b.n	80030d2 <Dwin_update_time+0x1ce>
		case 2:
			sprintf((char *)Buf,"TUESDAY  ");
 8003088:	463b      	mov	r3, r7
 800308a:	491a      	ldr	r1, [pc, #104]	; (80030f4 <Dwin_update_time+0x1f0>)
 800308c:	4618      	mov	r0, r3
 800308e:	f005 ffa7 	bl	8008fe0 <siprintf>
			break;
 8003092:	e01e      	b.n	80030d2 <Dwin_update_time+0x1ce>
		case 3:
			sprintf((char *)Buf,"WEDNESDAY");
 8003094:	463b      	mov	r3, r7
 8003096:	4918      	ldr	r1, [pc, #96]	; (80030f8 <Dwin_update_time+0x1f4>)
 8003098:	4618      	mov	r0, r3
 800309a:	f005 ffa1 	bl	8008fe0 <siprintf>
			break;
 800309e:	e018      	b.n	80030d2 <Dwin_update_time+0x1ce>
		case 4:
			sprintf((char *)Buf,"THURSDAY ");
 80030a0:	463b      	mov	r3, r7
 80030a2:	4916      	ldr	r1, [pc, #88]	; (80030fc <Dwin_update_time+0x1f8>)
 80030a4:	4618      	mov	r0, r3
 80030a6:	f005 ff9b 	bl	8008fe0 <siprintf>
			break;
 80030aa:	e012      	b.n	80030d2 <Dwin_update_time+0x1ce>
		case 5:
			sprintf((char *)Buf,"FRIDAY    ");
 80030ac:	463b      	mov	r3, r7
 80030ae:	4914      	ldr	r1, [pc, #80]	; (8003100 <Dwin_update_time+0x1fc>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f005 ff95 	bl	8008fe0 <siprintf>
			break;
 80030b6:	e00c      	b.n	80030d2 <Dwin_update_time+0x1ce>
		case 6:
			sprintf((char *)Buf,"SATURDAY  ");
 80030b8:	463b      	mov	r3, r7
 80030ba:	4912      	ldr	r1, [pc, #72]	; (8003104 <Dwin_update_time+0x200>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 ff8f 	bl	8008fe0 <siprintf>
			break;
 80030c2:	e006      	b.n	80030d2 <Dwin_update_time+0x1ce>
		case 7:
			sprintf((char *)Buf,"SUNDAY    ");
 80030c4:	463b      	mov	r3, r7
 80030c6:	4910      	ldr	r1, [pc, #64]	; (8003108 <Dwin_update_time+0x204>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 ff89 	bl	8008fe0 <siprintf>
			break;
 80030ce:	e000      	b.n	80030d2 <Dwin_update_time+0x1ce>
		default:
			break;
 80030d0:	bf00      	nop
	}
	Dwin_Write_VP(WEEKDAY_VP,Buf,5);        //set time
 80030d2:	463b      	mov	r3, r7
 80030d4:	2205      	movs	r2, #5
 80030d6:	4619      	mov	r1, r3
 80030d8:	f241 0010 	movw	r0, #4112	; 0x1010
 80030dc:	f7ff fe32 	bl	8002d44 <Dwin_Write_VP>
}
 80030e0:	bf00      	nop
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000b88 	.word	0x20000b88
 80030ec:	cccccccd 	.word	0xcccccccd
 80030f0:	08009850 	.word	0x08009850
 80030f4:	0800985c 	.word	0x0800985c
 80030f8:	08009868 	.word	0x08009868
 80030fc:	08009874 	.word	0x08009874
 8003100:	08009880 	.word	0x08009880
 8003104:	0800988c 	.word	0x0800988c
 8003108:	08009898 	.word	0x08009898

0800310c <DWin_Calltable_Process>:
void DWin_Calltable_Process(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b09c      	sub	sp, #112	; 0x70
 8003110:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint8_t change;
	change=0;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t Buf[100] = {0};
 8003118:	2300      	movs	r3, #0
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	2260      	movs	r2, #96	; 0x60
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f005 ff54 	bl	8008fd0 <memset>
	for(i =0;i<50;i++)
 8003128:	2300      	movs	r3, #0
 800312a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800312e:	e00c      	b.n	800314a <DWin_Calltable_Process+0x3e>
	{
		Buf[i]=0;
 8003130:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003134:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003138:	4413      	add	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	f803 2c70 	strb.w	r2, [r3, #-112]
	for(i =0;i<50;i++)
 8003140:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003144:	3301      	adds	r3, #1
 8003146:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800314a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800314e:	2b31      	cmp	r3, #49	; 0x31
 8003150:	d9ee      	bls.n	8003130 <DWin_Calltable_Process+0x24>
	}

	for(i=0;i<8;i++)
 8003152:	2300      	movs	r3, #0
 8003154:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8003158:	e019      	b.n	800318e <DWin_Calltable_Process+0x82>
	{
		if(Callstatus[i] != Callstatus_old[i])
 800315a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800315e:	4aa9      	ldr	r2, [pc, #676]	; (8003404 <DWin_Calltable_Process+0x2f8>)
 8003160:	5cd2      	ldrb	r2, [r2, r3]
 8003162:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003166:	49a8      	ldr	r1, [pc, #672]	; (8003408 <DWin_Calltable_Process+0x2fc>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	429a      	cmp	r2, r3
 800316c:	d00a      	beq.n	8003184 <DWin_Calltable_Process+0x78>
		{
			change=1;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			Callstatus_old[i] = Callstatus[i];
 8003174:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8003178:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800317c:	49a1      	ldr	r1, [pc, #644]	; (8003404 <DWin_Calltable_Process+0x2f8>)
 800317e:	5c89      	ldrb	r1, [r1, r2]
 8003180:	4aa1      	ldr	r2, [pc, #644]	; (8003408 <DWin_Calltable_Process+0x2fc>)
 8003182:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<8;i++)
 8003184:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003188:	3301      	adds	r3, #1
 800318a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800318e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003192:	2b07      	cmp	r3, #7
 8003194:	d9e1      	bls.n	800315a <DWin_Calltable_Process+0x4e>
		}
	}
	if(change)
 8003196:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80b3 	beq.w	8003306 <DWin_Calltable_Process+0x1fa>
	{
			for(i =0;i<150;i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80031a6:	e009      	b.n	80031bc <DWin_Calltable_Process+0xb0>
			{
				FloorName_Registed[i]=0;
 80031a8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80031ac:	4a97      	ldr	r2, [pc, #604]	; (800340c <DWin_Calltable_Process+0x300>)
 80031ae:	2100      	movs	r1, #0
 80031b0:	54d1      	strb	r1, [r2, r3]
			for(i =0;i<150;i++)
 80031b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80031b6:	3301      	adds	r3, #1
 80031b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80031bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80031c0:	2b95      	cmp	r3, #149	; 0x95
 80031c2:	d9f1      	bls.n	80031a8 <DWin_Calltable_Process+0x9c>
			}
			Tol_Floor_Registed=0;
 80031c4:	4b92      	ldr	r3, [pc, #584]	; (8003410 <DWin_Calltable_Process+0x304>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
			FloorName_Registed_length=0;
 80031ca:	4b92      	ldr	r3, [pc, #584]	; (8003414 <DWin_Calltable_Process+0x308>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	801a      	strh	r2, [r3, #0]

			for(i=0;i<8;i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80031d6:	e087      	b.n	80032e8 <DWin_Calltable_Process+0x1dc>
			{
				for(j=0;j<8;j++)
 80031d8:	2300      	movs	r3, #0
 80031da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80031de:	e07a      	b.n	80032d6 <DWin_Calltable_Process+0x1ca>
				{

					if(bit_select(Callstatus_old[i],j))
 80031e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80031e4:	4a88      	ldr	r2, [pc, #544]	; (8003408 <DWin_Calltable_Process+0x2fc>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80031ee:	fa42 f303 	asr.w	r3, r2, r3
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d068      	beq.n	80032cc <DWin_Calltable_Process+0x1c0>
					{
						FloorName_Registed[FloorName_Registed_length]= 0x20;
 80031fa:	4b86      	ldr	r3, [pc, #536]	; (8003414 <DWin_Calltable_Process+0x308>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <DWin_Calltable_Process+0x300>)
 8003202:	2120      	movs	r1, #32
 8003204:	5499      	strb	r1, [r3, r2]
						FloorName_Registed_length++;
 8003206:	4b83      	ldr	r3, [pc, #524]	; (8003414 <DWin_Calltable_Process+0x308>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	4b81      	ldr	r3, [pc, #516]	; (8003414 <DWin_Calltable_Process+0x308>)
 8003210:	801a      	strh	r2, [r3, #0]
						if((FloorName[i*8+j][0] !=0x20) && (FloorName[i*8+j][0]!=0x00))
 8003212:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003216:	00da      	lsls	r2, r3, #3
 8003218:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800321c:	4413      	add	r3, r2
 800321e:	4a7e      	ldr	r2, [pc, #504]	; (8003418 <DWin_Calltable_Process+0x30c>)
 8003220:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003224:	2b20      	cmp	r3, #32
 8003226:	d01e      	beq.n	8003266 <DWin_Calltable_Process+0x15a>
 8003228:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800322c:	00da      	lsls	r2, r3, #3
 800322e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003232:	4413      	add	r3, r2
 8003234:	4a78      	ldr	r2, [pc, #480]	; (8003418 <DWin_Calltable_Process+0x30c>)
 8003236:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d013      	beq.n	8003266 <DWin_Calltable_Process+0x15a>
						{
							FloorName_Registed[FloorName_Registed_length]= FloorName[i*8+j][0];
 800323e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003242:	00da      	lsls	r2, r3, #3
 8003244:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003248:	4413      	add	r3, r2
 800324a:	4a72      	ldr	r2, [pc, #456]	; (8003414 <DWin_Calltable_Process+0x308>)
 800324c:	8812      	ldrh	r2, [r2, #0]
 800324e:	4611      	mov	r1, r2
 8003250:	4a71      	ldr	r2, [pc, #452]	; (8003418 <DWin_Calltable_Process+0x30c>)
 8003252:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8003256:	4b6d      	ldr	r3, [pc, #436]	; (800340c <DWin_Calltable_Process+0x300>)
 8003258:	545a      	strb	r2, [r3, r1]
							FloorName_Registed_length++;
 800325a:	4b6e      	ldr	r3, [pc, #440]	; (8003414 <DWin_Calltable_Process+0x308>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <DWin_Calltable_Process+0x308>)
 8003264:	801a      	strh	r2, [r3, #0]
						}
						FloorName_Registed[FloorName_Registed_length]= FloorName[i*8+j][1];
 8003266:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800326a:	00da      	lsls	r2, r3, #3
 800326c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003270:	4413      	add	r3, r2
 8003272:	4a68      	ldr	r2, [pc, #416]	; (8003414 <DWin_Calltable_Process+0x308>)
 8003274:	8812      	ldrh	r2, [r2, #0]
 8003276:	4611      	mov	r1, r2
 8003278:	4a67      	ldr	r2, [pc, #412]	; (8003418 <DWin_Calltable_Process+0x30c>)
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	785a      	ldrb	r2, [r3, #1]
 8003280:	4b62      	ldr	r3, [pc, #392]	; (800340c <DWin_Calltable_Process+0x300>)
 8003282:	545a      	strb	r2, [r3, r1]
						FloorName_Registed_length++;
 8003284:	4b63      	ldr	r3, [pc, #396]	; (8003414 <DWin_Calltable_Process+0x308>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <DWin_Calltable_Process+0x308>)
 800328e:	801a      	strh	r2, [r3, #0]
						FloorName_Registed[FloorName_Registed_length]= 0x20;
 8003290:	4b60      	ldr	r3, [pc, #384]	; (8003414 <DWin_Calltable_Process+0x308>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <DWin_Calltable_Process+0x300>)
 8003298:	2120      	movs	r1, #32
 800329a:	5499      	strb	r1, [r3, r2]
						FloorName_Registed_length++;
 800329c:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <DWin_Calltable_Process+0x308>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <DWin_Calltable_Process+0x308>)
 80032a6:	801a      	strh	r2, [r3, #0]
						FloorName_Registed[FloorName_Registed_length]= '|';
 80032a8:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <DWin_Calltable_Process+0x308>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b57      	ldr	r3, [pc, #348]	; (800340c <DWin_Calltable_Process+0x300>)
 80032b0:	217c      	movs	r1, #124	; 0x7c
 80032b2:	5499      	strb	r1, [r3, r2]
						FloorName_Registed_length++;
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <DWin_Calltable_Process+0x308>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b55      	ldr	r3, [pc, #340]	; (8003414 <DWin_Calltable_Process+0x308>)
 80032be:	801a      	strh	r2, [r3, #0]
						Tol_Floor_Registed++;
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <DWin_Calltable_Process+0x304>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b51      	ldr	r3, [pc, #324]	; (8003410 <DWin_Calltable_Process+0x304>)
 80032ca:	701a      	strb	r2, [r3, #0]
				for(j=0;j<8;j++)
 80032cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80032d0:	3301      	adds	r3, #1
 80032d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80032d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80032da:	2b07      	cmp	r3, #7
 80032dc:	d980      	bls.n	80031e0 <DWin_Calltable_Process+0xd4>
			for(i=0;i<8;i++)
 80032de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80032e2:	3301      	adds	r3, #1
 80032e4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80032e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	f67f af73 	bls.w	80031d8 <DWin_Calltable_Process+0xcc>
					}

				}
			}

			if(Tol_Floor_Registed	==1)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <DWin_Calltable_Process+0x304>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <DWin_Calltable_Process+0x1fa>
			{
				FloorName_Registed_Time=0;
 80032fa:	4b48      	ldr	r3, [pc, #288]	; (800341c <DWin_Calltable_Process+0x310>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
				FloorName_Registed_Page =0;
 8003300:	4b47      	ldr	r3, [pc, #284]	; (8003420 <DWin_Calltable_Process+0x314>)
 8003302:	2200      	movs	r2, #0
 8003304:	801a      	strh	r2, [r3, #0]
			}
	}
	if((HAL_GetTick() > FloorName_Registed_Time ) || (change))
 8003306:	f003 f94b 	bl	80065a0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	4b43      	ldr	r3, [pc, #268]	; (800341c <DWin_Calltable_Process+0x310>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d804      	bhi.n	800331e <DWin_Calltable_Process+0x212>
 8003314:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80bd 	beq.w	8003498 <DWin_Calltable_Process+0x38c>
	{
		uint16_t index_start =0;
 800331e:	2300      	movs	r3, #0
 8003320:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		uint16_t forcnt =0;
 8003324:	2300      	movs	r3, #0
 8003326:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		uint16_t Count =0; //cont '|'
 800332a:	2300      	movs	r3, #0
 800332c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

		index_start = FloorName_Registed_Page *6;
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <DWin_Calltable_Process+0x314>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	0052      	lsls	r2, r2, #1
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		if(index_start)
 8003340:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003344:	2b00      	cmp	r3, #0
 8003346:	d025      	beq.n	8003394 <DWin_Calltable_Process+0x288>
		{
			for (forcnt =0;forcnt<FloorName_Registed_length;forcnt++)
 8003348:	2300      	movs	r3, #0
 800334a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800334e:	e01b      	b.n	8003388 <DWin_Calltable_Process+0x27c>
			{
				if(FloorName_Registed[forcnt] == '|')
 8003350:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003354:	4a2d      	ldr	r2, [pc, #180]	; (800340c <DWin_Calltable_Process+0x300>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	2b7c      	cmp	r3, #124	; 0x7c
 800335a:	d110      	bne.n	800337e <DWin_Calltable_Process+0x272>
				{
					Count++;
 800335c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003360:	3301      	adds	r3, #1
 8003362:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					if(Count == index_start)
 8003366:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800336a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800336e:	429a      	cmp	r2, r3
 8003370:	d105      	bne.n	800337e <DWin_Calltable_Process+0x272>
					{
						index_start = forcnt+1;
 8003372:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003376:	3301      	adds	r3, #1
 8003378:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
						break;
 800337c:	e00a      	b.n	8003394 <DWin_Calltable_Process+0x288>
			for (forcnt =0;forcnt<FloorName_Registed_length;forcnt++)
 800337e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003382:	3301      	adds	r3, #1
 8003384:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <DWin_Calltable_Process+0x308>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003390:	429a      	cmp	r2, r3
 8003392:	d3dd      	bcc.n	8003350 <DWin_Calltable_Process+0x244>
				}
			}
		}


		Count =0;
 8003394:	2300      	movs	r3, #0
 8003396:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		for(forcnt = index_start;forcnt<FloorName_Registed_length;forcnt++)
 800339a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800339e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80033a2:	e044      	b.n	800342e <DWin_Calltable_Process+0x322>
		{
			Buf[forcnt-index_start] = FloorName_Registed[forcnt];
 80033a4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80033a8:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 80033ac:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80033b0:	1acb      	subs	r3, r1, r3
 80033b2:	4916      	ldr	r1, [pc, #88]	; (800340c <DWin_Calltable_Process+0x300>)
 80033b4:	5c8a      	ldrb	r2, [r1, r2]
 80033b6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80033ba:	440b      	add	r3, r1
 80033bc:	f803 2c70 	strb.w	r2, [r3, #-112]
			if(Buf[forcnt-index_start] == '|')
 80033c0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80033c4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80033ce:	4413      	add	r3, r2
 80033d0:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80033d4:	2b7c      	cmp	r3, #124	; 0x7c
 80033d6:	d125      	bne.n	8003424 <DWin_Calltable_Process+0x318>
			{
				Count++;
 80033d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033dc:	3301      	adds	r3, #1
 80033de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				if(Count ==6)
 80033e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d11c      	bne.n	8003424 <DWin_Calltable_Process+0x318>
				{
					Buf[forcnt-index_start]=0x20; //remove '|'
 80033ea:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80033ee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80033f8:	4413      	add	r3, r2
 80033fa:	2220      	movs	r2, #32
 80033fc:	f803 2c70 	strb.w	r2, [r3, #-112]
					break;
 8003400:	e01b      	b.n	800343a <DWin_Calltable_Process+0x32e>
 8003402:	bf00      	nop
 8003404:	200003b8 	.word	0x200003b8
 8003408:	200003c0 	.word	0x200003c0
 800340c:	200004b0 	.word	0x200004b0
 8003410:	200005e4 	.word	0x200005e4
 8003414:	200005dc 	.word	0x200005dc
 8003418:	20000344 	.word	0x20000344
 800341c:	200005e0 	.word	0x200005e0
 8003420:	200005e6 	.word	0x200005e6
		for(forcnt = index_start;forcnt<FloorName_Registed_length;forcnt++)
 8003424:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003428:	3301      	adds	r3, #1
 800342a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <DWin_Calltable_Process+0x394>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003436:	429a      	cmp	r2, r3
 8003438:	d3b4      	bcc.n	80033a4 <DWin_Calltable_Process+0x298>
				}

			}

		}
		Dwin_Write_VP(0x1400,(uint8_t *)Buf,(forcnt-index_start)/2+2);
 800343a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800343e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	0fda      	lsrs	r2, r3, #31
 8003446:	4413      	add	r3, r2
 8003448:	105b      	asrs	r3, r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	3302      	adds	r3, #2
 800344e:	b29a      	uxth	r2, r3
 8003450:	463b      	mov	r3, r7
 8003452:	4619      	mov	r1, r3
 8003454:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003458:	f7ff fc74 	bl	8002d44 <Dwin_Write_VP>
		FloorName_Registed_Page++;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <DWin_Calltable_Process+0x398>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <DWin_Calltable_Process+0x398>)
 8003466:	801a      	strh	r2, [r3, #0]
		if(FloorName_Registed_Page > ((Tol_Floor_Registed-1) /6))
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <DWin_Calltable_Process+0x398>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	4619      	mov	r1, r3
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <DWin_Calltable_Process+0x39c>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <DWin_Calltable_Process+0x3a0>)
 8003476:	fb82 0203 	smull	r0, r2, r2, r3
 800347a:	17db      	asrs	r3, r3, #31
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	4299      	cmp	r1, r3
 8003480:	dd02      	ble.n	8003488 <DWin_Calltable_Process+0x37c>
		{
			FloorName_Registed_Page=0;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <DWin_Calltable_Process+0x398>)
 8003484:	2200      	movs	r2, #0
 8003486:	801a      	strh	r2, [r3, #0]
		}
		FloorName_Registed_Time = HAL_GetTick()+1500;
 8003488:	f003 f88a 	bl	80065a0 <HAL_GetTick>
 800348c:	4603      	mov	r3, r0
 800348e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003492:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <DWin_Calltable_Process+0x3a4>)
 8003494:	6013      	str	r3, [r2, #0]
	}
	return;
 8003496:	bf00      	nop
 8003498:	bf00      	nop

}
 800349a:	3770      	adds	r7, #112	; 0x70
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	200005dc 	.word	0x200005dc
 80034a4:	200005e6 	.word	0x200005e6
 80034a8:	200005e4 	.word	0x200005e4
 80034ac:	2aaaaaab 	.word	0x2aaaaaab
 80034b0:	200005e0 	.word	0x200005e0

080034b4 <DWIN_Arrow_Process>:
void DWIN_Arrow_Process(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b09a      	sub	sp, #104	; 0x68
 80034b8:	af00      	add	r7, sp, #0
	static uint8_t Arrow_state_old = 1;
	uint8_t arrow;
	uint8_t Buf[100] = {0};
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	2260      	movs	r2, #96	; 0x60
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f005 fd82 	bl	8008fd0 <memset>
	if(Arrow_state_old == Arrow_state)
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <DWIN_Arrow_Process+0x134>)
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <DWIN_Arrow_Process+0x138>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f000 8083 	beq.w	80035e0 <DWIN_Arrow_Process+0x12c>
		return ;
	Arrow_state_old = Arrow_state;
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <DWIN_Arrow_Process+0x138>)
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <DWIN_Arrow_Process+0x134>)
 80034e0:	701a      	strb	r2, [r3, #0]
	Buf[0]=00;
 80034e2:	2300      	movs	r3, #0
 80034e4:	713b      	strb	r3, [r7, #4]
	Buf[2]=00;
 80034e6:	2300      	movs	r3, #0
 80034e8:	71bb      	strb	r3, [r7, #6]
	Buf[4]=00;
 80034ea:	2300      	movs	r3, #0
 80034ec:	723b      	strb	r3, [r7, #8]
	switch(Arrow_state_old)
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <DWIN_Arrow_Process+0x134>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b22      	cmp	r3, #34	; 0x22
 80034f4:	d86b      	bhi.n	80035ce <DWIN_Arrow_Process+0x11a>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <DWIN_Arrow_Process+0x48>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003589 	.word	0x08003589
 8003500:	08003597 	.word	0x08003597
 8003504:	080035a5 	.word	0x080035a5
 8003508:	080035cf 	.word	0x080035cf
 800350c:	080035cf 	.word	0x080035cf
 8003510:	080035cf 	.word	0x080035cf
 8003514:	080035cf 	.word	0x080035cf
 8003518:	080035cf 	.word	0x080035cf
 800351c:	080035cf 	.word	0x080035cf
 8003520:	080035cf 	.word	0x080035cf
 8003524:	080035cf 	.word	0x080035cf
 8003528:	080035cf 	.word	0x080035cf
 800352c:	080035cf 	.word	0x080035cf
 8003530:	080035cf 	.word	0x080035cf
 8003534:	080035cf 	.word	0x080035cf
 8003538:	080035cf 	.word	0x080035cf
 800353c:	080035cf 	.word	0x080035cf
 8003540:	080035b3 	.word	0x080035b3
 8003544:	080035cf 	.word	0x080035cf
 8003548:	080035cf 	.word	0x080035cf
 800354c:	080035cf 	.word	0x080035cf
 8003550:	080035cf 	.word	0x080035cf
 8003554:	080035cf 	.word	0x080035cf
 8003558:	080035cf 	.word	0x080035cf
 800355c:	080035cf 	.word	0x080035cf
 8003560:	080035cf 	.word	0x080035cf
 8003564:	080035cf 	.word	0x080035cf
 8003568:	080035cf 	.word	0x080035cf
 800356c:	080035cf 	.word	0x080035cf
 8003570:	080035cf 	.word	0x080035cf
 8003574:	080035cf 	.word	0x080035cf
 8003578:	080035cf 	.word	0x080035cf
 800357c:	080035cf 	.word	0x080035cf
 8003580:	080035cf 	.word	0x080035cf
 8003584:	080035c1 	.word	0x080035c1
	{
		case 0:   //hide

			Buf[1]=ARROW_STOP;
 8003588:	236e      	movs	r3, #110	; 0x6e
 800358a:	717b      	strb	r3, [r7, #5]
			Buf[3]=ARROW_STOP;
 800358c:	236e      	movs	r3, #110	; 0x6e
 800358e:	71fb      	strb	r3, [r7, #7]
			Buf[5]=ARROW_STOP;
 8003590:	236e      	movs	r3, #110	; 0x6e
 8003592:	727b      	strb	r3, [r7, #9]
			break;
 8003594:	e01c      	b.n	80035d0 <DWIN_Arrow_Process+0x11c>
		case 0x01:
			Buf[1]=ARROW_UP_START;
 8003596:	2300      	movs	r3, #0
 8003598:	717b      	strb	r3, [r7, #5]
			Buf[3]=ARROW_UP_START;
 800359a:	2300      	movs	r3, #0
 800359c:	71fb      	strb	r3, [r7, #7]
			Buf[5]=ARROW_UP_START;
 800359e:	2300      	movs	r3, #0
 80035a0:	727b      	strb	r3, [r7, #9]
			break;
 80035a2:	e015      	b.n	80035d0 <DWIN_Arrow_Process+0x11c>
		case 0x02:
			Buf[1]=ARROW_DOWN_START;
 80035a4:	2337      	movs	r3, #55	; 0x37
 80035a6:	717b      	strb	r3, [r7, #5]
			Buf[3]=ARROW_DOWN_START;
 80035a8:	2337      	movs	r3, #55	; 0x37
 80035aa:	71fb      	strb	r3, [r7, #7]
			Buf[5]=ARROW_DOWN_START;
 80035ac:	2337      	movs	r3, #55	; 0x37
 80035ae:	727b      	strb	r3, [r7, #9]
			break;
 80035b0:	e00e      	b.n	80035d0 <DWIN_Arrow_Process+0x11c>
		case 0x11:
			Buf[1]=ARROW_UP_STOP;
 80035b2:	2300      	movs	r3, #0
 80035b4:	717b      	strb	r3, [r7, #5]
			Buf[3]=ARROW_UP_START;
 80035b6:	2300      	movs	r3, #0
 80035b8:	71fb      	strb	r3, [r7, #7]
			Buf[5]=ARROW_UP_END;
 80035ba:	2336      	movs	r3, #54	; 0x36
 80035bc:	727b      	strb	r3, [r7, #9]

			break;
 80035be:	e007      	b.n	80035d0 <DWIN_Arrow_Process+0x11c>
		case 0x22:
			Buf[1]=ARROW_DOWN_STOP;
 80035c0:	2337      	movs	r3, #55	; 0x37
 80035c2:	717b      	strb	r3, [r7, #5]
			Buf[3]=ARROW_DOWN_START;
 80035c4:	2337      	movs	r3, #55	; 0x37
 80035c6:	71fb      	strb	r3, [r7, #7]
			Buf[5]=ARROW_DOWN_END;
 80035c8:	236d      	movs	r3, #109	; 0x6d
 80035ca:	727b      	strb	r3, [r7, #9]
			break;
 80035cc:	e000      	b.n	80035d0 <DWIN_Arrow_Process+0x11c>
		default:
			break;
 80035ce:	bf00      	nop
	}
	Dwin_Write_VP(ARROW_ICON_SP+6,(uint8_t *)&Buf,3);
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	2203      	movs	r2, #3
 80035d4:	4619      	mov	r1, r3
 80035d6:	f245 0006 	movw	r0, #20486	; 0x5006
 80035da:	f7ff fbb3 	bl	8002d44 <Dwin_Write_VP>
 80035de:	e000      	b.n	80035e2 <DWIN_Arrow_Process+0x12e>
		return ;
 80035e0:	bf00      	nop
}
 80035e2:	3768      	adds	r7, #104	; 0x68
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000006a 	.word	0x2000006a
 80035ec:	200003c8 	.word	0x200003c8

080035f0 <DWIN_show_message>:
static uint8_t virt_key[2] = {0x20,0x20};
static uint8_t virt_key_cnt =0;
uint32_t Keytimout=0;
void DWIN_show_message(char *Message, uint32_t time)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	User_Message.DataSize = sprintf(User_Message.Data,Message);
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4809      	ldr	r0, [pc, #36]	; (8003624 <DWIN_show_message+0x34>)
 80035fe:	f005 fcef 	bl	8008fe0 <siprintf>
 8003602:	4603      	mov	r3, r0
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <DWIN_show_message+0x34>)
 8003608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	User_Message.Timeshow = time;
 800360c:	4a05      	ldr	r2, [pc, #20]	; (8003624 <DWIN_show_message+0x34>)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6393      	str	r3, [r2, #56]	; 0x38
	User_Message.IsChange = 1;
 8003612:	4b04      	ldr	r3, [pc, #16]	; (8003624 <DWIN_show_message+0x34>)
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200002bc 	.word	0x200002bc

08003628 <DWIN_Reset_show_message>:
void DWIN_Reset_show_message(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	User_Message.DataSize = sprintf(User_Message.Data," ");
 800362c:	4908      	ldr	r1, [pc, #32]	; (8003650 <DWIN_Reset_show_message+0x28>)
 800362e:	4809      	ldr	r0, [pc, #36]	; (8003654 <DWIN_Reset_show_message+0x2c>)
 8003630:	f005 fcd6 	bl	8008fe0 <siprintf>
 8003634:	4603      	mov	r3, r0
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <DWIN_Reset_show_message+0x2c>)
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	User_Message.Timeshow = 0;
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <DWIN_Reset_show_message+0x2c>)
 8003640:	2200      	movs	r2, #0
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
	User_Message.IsChange = 0;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <DWIN_Reset_show_message+0x2c>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	080098a4 	.word	0x080098a4
 8003654:	200002bc 	.word	0x200002bc

08003658 <DWIN_add_key>:
void DWIN_add_key(uint8_t key)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
	DWIN_Reset_show_message();
 8003662:	f7ff ffe1 	bl	8003628 <DWIN_Reset_show_message>
	if (key!= 'C')
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	2b43      	cmp	r3, #67	; 0x43
 800366a:	d01e      	beq.n	80036aa <DWIN_add_key+0x52>
	{
		virt_key[virt_key_cnt] =key;
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <DWIN_add_key+0x60>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <DWIN_add_key+0x64>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	5453      	strb	r3, [r2, r1]
		virt_key_cnt++;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <DWIN_add_key+0x60>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <DWIN_add_key+0x60>)
 8003682:	701a      	strb	r2, [r3, #0]
		if(virt_key_cnt ==2)
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <DWIN_add_key+0x60>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d103      	bne.n	8003694 <DWIN_add_key+0x3c>
		{
			virt_key_cnt =0;
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <DWIN_add_key+0x60>)
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Keytimout = 0;
	}
}
 8003692:	e00d      	b.n	80036b0 <DWIN_add_key+0x58>
		else if(virt_key_cnt ==1)
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <DWIN_add_key+0x60>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d109      	bne.n	80036b0 <DWIN_add_key+0x58>
			virt_key[virt_key_cnt] = 0x20;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <DWIN_add_key+0x60>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <DWIN_add_key+0x64>)
 80036a4:	2120      	movs	r1, #32
 80036a6:	5499      	strb	r1, [r3, r2]
}
 80036a8:	e002      	b.n	80036b0 <DWIN_add_key+0x58>
		Keytimout = 0;
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <DWIN_add_key+0x68>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000300 	.word	0x20000300
 80036bc:	20000068 	.word	0x20000068
 80036c0:	20000304 	.word	0x20000304

080036c4 <DWIN_Message_Process>:
static uint32_t display_message_old;
void DWIN_Message_Process(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b09a      	sub	sp, #104	; 0x68
 80036c8:	af00      	add	r7, sp, #0
	static uint32_t Message_Time=0;
	static uint8_t virt_key_old[2];
	uint8_t Buf[100] = {0};
 80036ca:	2300      	movs	r3, #0
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	2260      	movs	r2, #96	; 0x60
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 fc7b 	bl	8008fd0 <memset>


	if(display_message_old != display_message)
 80036da:	4b97      	ldr	r3, [pc, #604]	; (8003938 <DWIN_Message_Process+0x274>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b97      	ldr	r3, [pc, #604]	; (800393c <DWIN_Message_Process+0x278>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d065      	beq.n	80037b2 <DWIN_Message_Process+0xee>
	{
		display_message_old = display_message;
 80036e6:	4b95      	ldr	r3, [pc, #596]	; (800393c <DWIN_Message_Process+0x278>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a93      	ldr	r2, [pc, #588]	; (8003938 <DWIN_Message_Process+0x274>)
 80036ec:	6013      	str	r3, [r2, #0]
		DWIN_Reset_show_message();
 80036ee:	f7ff ff9b 	bl	8003628 <DWIN_Reset_show_message>
		if(display_message_old)
 80036f2:	4b91      	ldr	r3, [pc, #580]	; (8003938 <DWIN_Message_Process+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d050      	beq.n	800379c <DWIN_Message_Process+0xd8>
		{
			if(display_message_old & ERROR_FIRECASE)
 80036fa:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <DWIN_Message_Process+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <DWIN_Message_Process+0x4a>
			{
				sprintf(TextErrmessage,"   ERROR_FIRECASE");
 8003706:	498e      	ldr	r1, [pc, #568]	; (8003940 <DWIN_Message_Process+0x27c>)
 8003708:	488e      	ldr	r0, [pc, #568]	; (8003944 <DWIN_Message_Process+0x280>)
 800370a:	f005 fc69 	bl	8008fe0 <siprintf>

			}
			if(display_message_old & ERROR_EMERGENCY)
 800370e:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <DWIN_Message_Process+0x274>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <DWIN_Message_Process+0x5e>
			{
				sprintf(TextErrmessage,"   ERROR_EMERGENCY");
 800371a:	498b      	ldr	r1, [pc, #556]	; (8003948 <DWIN_Message_Process+0x284>)
 800371c:	4889      	ldr	r0, [pc, #548]	; (8003944 <DWIN_Message_Process+0x280>)
 800371e:	f005 fc5f 	bl	8008fe0 <siprintf>
			}
			if(display_message_old & ERROR_OVERLOAD)
 8003722:	4b85      	ldr	r3, [pc, #532]	; (8003938 <DWIN_Message_Process+0x274>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <DWIN_Message_Process+0x72>
			{
				sprintf(TextErrmessage,"   ERROR_OVERLOAD");
 800372e:	4987      	ldr	r1, [pc, #540]	; (800394c <DWIN_Message_Process+0x288>)
 8003730:	4884      	ldr	r0, [pc, #528]	; (8003944 <DWIN_Message_Process+0x280>)
 8003732:	f005 fc55 	bl	8008fe0 <siprintf>
			}
			if(display_message_old & ERROR_OUTOFORDER)
 8003736:	4b80      	ldr	r3, [pc, #512]	; (8003938 <DWIN_Message_Process+0x274>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <DWIN_Message_Process+0x86>
			{
				sprintf(TextErrmessage,"    OUT OF ORDER");
 8003742:	4983      	ldr	r1, [pc, #524]	; (8003950 <DWIN_Message_Process+0x28c>)
 8003744:	487f      	ldr	r0, [pc, #508]	; (8003944 <DWIN_Message_Process+0x280>)
 8003746:	f005 fc4b 	bl	8008fe0 <siprintf>
			}
			if(display_message_old & ERROR_GENEFAULT)
 800374a:	4b7b      	ldr	r3, [pc, #492]	; (8003938 <DWIN_Message_Process+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <DWIN_Message_Process+0x9a>
			{
				sprintf(TextErrmessage,"   ERROR_GENEFAULT");
 8003756:	497f      	ldr	r1, [pc, #508]	; (8003954 <DWIN_Message_Process+0x290>)
 8003758:	487a      	ldr	r0, [pc, #488]	; (8003944 <DWIN_Message_Process+0x280>)
 800375a:	f005 fc41 	bl	8008fe0 <siprintf>
			}
			if(display_message_old & ERROR_INSPECTION)
 800375e:	4b76      	ldr	r3, [pc, #472]	; (8003938 <DWIN_Message_Process+0x274>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <DWIN_Message_Process+0xae>
			{
				sprintf(TextErrmessage,"   ERROR_INSPECTION");
 800376a:	497b      	ldr	r1, [pc, #492]	; (8003958 <DWIN_Message_Process+0x294>)
 800376c:	4875      	ldr	r0, [pc, #468]	; (8003944 <DWIN_Message_Process+0x280>)
 800376e:	f005 fc37 	bl	8008fe0 <siprintf>
			}
			if(display_message_old & ERROR_FULLLOAD)
 8003772:	4b71      	ldr	r3, [pc, #452]	; (8003938 <DWIN_Message_Process+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <DWIN_Message_Process+0xc2>
			{
				sprintf(TextErrmessage,"   ERROR_FULLLOAD");
 800377e:	4977      	ldr	r1, [pc, #476]	; (800395c <DWIN_Message_Process+0x298>)
 8003780:	4870      	ldr	r0, [pc, #448]	; (8003944 <DWIN_Message_Process+0x280>)
 8003782:	f005 fc2d 	bl	8008fe0 <siprintf>
			}
			if(display_message_old & ERROR_VIPRUN)
 8003786:	4b6c      	ldr	r3, [pc, #432]	; (8003938 <DWIN_Message_Process+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <DWIN_Message_Process+0xe8>
			{
				sprintf(TextErrmessage,"   ERROR_VIPRUN");
 8003792:	4973      	ldr	r1, [pc, #460]	; (8003960 <DWIN_Message_Process+0x29c>)
 8003794:	486b      	ldr	r0, [pc, #428]	; (8003944 <DWIN_Message_Process+0x280>)
 8003796:	f005 fc23 	bl	8008fe0 <siprintf>
 800379a:	e007      	b.n	80037ac <DWIN_Message_Process+0xe8>
			}
		}
		else
		{

			sprintf(TextErrmessage," ");
 800379c:	4971      	ldr	r1, [pc, #452]	; (8003964 <DWIN_Message_Process+0x2a0>)
 800379e:	4869      	ldr	r0, [pc, #420]	; (8003944 <DWIN_Message_Process+0x280>)
 80037a0:	f005 fc1e 	bl	8008fe0 <siprintf>
			sprintf(Textmessage,"PLEASE ENTER DESTINATION FLOOR");
 80037a4:	4970      	ldr	r1, [pc, #448]	; (8003968 <DWIN_Message_Process+0x2a4>)
 80037a6:	4871      	ldr	r0, [pc, #452]	; (800396c <DWIN_Message_Process+0x2a8>)
 80037a8:	f005 fc1a 	bl	8008fe0 <siprintf>

		}
		Keytimout = 0;
 80037ac:	4b70      	ldr	r3, [pc, #448]	; (8003970 <DWIN_Message_Process+0x2ac>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
	}
	if(User_Message.Timeshow)
 80037b2:	4b70      	ldr	r3, [pc, #448]	; (8003974 <DWIN_Message_Process+0x2b0>)
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d036      	beq.n	8003828 <DWIN_Message_Process+0x164>
	{
		if(User_Message.IsChange)
 80037ba:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <DWIN_Message_Process+0x2b0>)
 80037bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <DWIN_Message_Process+0x126>
		{
			User_Message.IsChange = 0;
 80037c4:	4b6b      	ldr	r3, [pc, #428]	; (8003974 <DWIN_Message_Process+0x2b0>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			Message_Time = HAL_GetTick()+ User_Message.Timeshow;
 80037cc:	f002 fee8 	bl	80065a0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b68      	ldr	r3, [pc, #416]	; (8003974 <DWIN_Message_Process+0x2b0>)
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	4413      	add	r3, r2
 80037d8:	4a67      	ldr	r2, [pc, #412]	; (8003978 <DWIN_Message_Process+0x2b4>)
 80037da:	6013      	str	r3, [r2, #0]
//			memcpy(Textmessageold,Textmessage,50);
			sprintf((char *)Textmessage,User_Message.Data);   //show message
 80037dc:	4965      	ldr	r1, [pc, #404]	; (8003974 <DWIN_Message_Process+0x2b0>)
 80037de:	4863      	ldr	r0, [pc, #396]	; (800396c <DWIN_Message_Process+0x2a8>)
 80037e0:	f005 fbfe 	bl	8008fe0 <siprintf>

			Keytimout = 0;
 80037e4:	4b62      	ldr	r3, [pc, #392]	; (8003970 <DWIN_Message_Process+0x2ac>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
//			virt_key_old[0] = virt_key[0] = 0x20;
//			virt_key_old[1] = virt_key[1] = 0x20;
//			Dwin_Write_VP(0x1100,Buf,2);        //clear floor call
		}

		if((HAL_GetTick() > Message_Time) &&(User_Message.Timeshow != (0-1)))
 80037ea:	f002 fed9 	bl	80065a0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <DWIN_Message_Process+0x2b4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d917      	bls.n	8003828 <DWIN_Message_Process+0x164>
 80037f8:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <DWIN_Message_Process+0x2b0>)
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d012      	beq.n	8003828 <DWIN_Message_Process+0x164>
		{
			User_Message.Timeshow = 0;
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <DWIN_Message_Process+0x2b0>)
 8003804:	2200      	movs	r2, #0
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
			if(display_message_old)
 8003808:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <DWIN_Message_Process+0x274>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <DWIN_Message_Process+0x156>
			{
				sprintf(Textmessage,TextErrmessage);
 8003810:	494c      	ldr	r1, [pc, #304]	; (8003944 <DWIN_Message_Process+0x280>)
 8003812:	4856      	ldr	r0, [pc, #344]	; (800396c <DWIN_Message_Process+0x2a8>)
 8003814:	f005 fbe4 	bl	8008fe0 <siprintf>
 8003818:	e003      	b.n	8003822 <DWIN_Message_Process+0x15e>
			}
			else
			{
				sprintf(Textmessage,"PLEASE ENTER DESTINATION FLOOR");
 800381a:	4953      	ldr	r1, [pc, #332]	; (8003968 <DWIN_Message_Process+0x2a4>)
 800381c:	4853      	ldr	r0, [pc, #332]	; (800396c <DWIN_Message_Process+0x2a8>)
 800381e:	f005 fbdf 	bl	8008fe0 <siprintf>
			}
			Keytimout = 0;
 8003822:	4b53      	ldr	r3, [pc, #332]	; (8003970 <DWIN_Message_Process+0x2ac>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
		}
		//return;
	}

	if((virt_key[0]!=virt_key_old[0])||(virt_key[1]!=virt_key_old[1]))
 8003828:	4b54      	ldr	r3, [pc, #336]	; (800397c <DWIN_Message_Process+0x2b8>)
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	4b54      	ldr	r3, [pc, #336]	; (8003980 <DWIN_Message_Process+0x2bc>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d105      	bne.n	8003840 <DWIN_Message_Process+0x17c>
 8003834:	4b51      	ldr	r3, [pc, #324]	; (800397c <DWIN_Message_Process+0x2b8>)
 8003836:	785a      	ldrb	r2, [r3, #1]
 8003838:	4b51      	ldr	r3, [pc, #324]	; (8003980 <DWIN_Message_Process+0x2bc>)
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	429a      	cmp	r2, r3
 800383e:	d040      	beq.n	80038c2 <DWIN_Message_Process+0x1fe>
	{
		virt_key_old[0] = virt_key[0];
 8003840:	4b4e      	ldr	r3, [pc, #312]	; (800397c <DWIN_Message_Process+0x2b8>)
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <DWIN_Message_Process+0x2bc>)
 8003846:	701a      	strb	r2, [r3, #0]
		virt_key_old[1] = virt_key[1];
 8003848:	4b4c      	ldr	r3, [pc, #304]	; (800397c <DWIN_Message_Process+0x2b8>)
 800384a:	785a      	ldrb	r2, [r3, #1]
 800384c:	4b4c      	ldr	r3, [pc, #304]	; (8003980 <DWIN_Message_Process+0x2bc>)
 800384e:	705a      	strb	r2, [r3, #1]
		if(User_Message.Timeshow)
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <DWIN_Message_Process+0x2b0>)
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <DWIN_Message_Process+0x1a4>
		{
			Keytimout = HAL_GetTick()+300;
 8003858:	f002 fea2 	bl	80065a0 <HAL_GetTick>
 800385c:	4603      	mov	r3, r0
 800385e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003862:	4a43      	ldr	r2, [pc, #268]	; (8003970 <DWIN_Message_Process+0x2ac>)
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e006      	b.n	8003876 <DWIN_Message_Process+0x1b2>
		}
		else
		{
			Keytimout = HAL_GetTick()+1500;
 8003868:	f002 fe9a 	bl	80065a0 <HAL_GetTick>
 800386c:	4603      	mov	r3, r0
 800386e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003872:	4a3f      	ldr	r2, [pc, #252]	; (8003970 <DWIN_Message_Process+0x2ac>)
 8003874:	6013      	str	r3, [r2, #0]
		}
		for(int cnt =0;cnt<30;cnt++)
 8003876:	2300      	movs	r3, #0
 8003878:	667b      	str	r3, [r7, #100]	; 0x64
 800387a:	e007      	b.n	800388c <DWIN_Message_Process+0x1c8>
		{
			Buf[cnt] =0;
 800387c:	463a      	mov	r2, r7
 800387e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003880:	4413      	add	r3, r2
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
		for(int cnt =0;cnt<30;cnt++)
 8003886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003888:	3301      	adds	r3, #1
 800388a:	667b      	str	r3, [r7, #100]	; 0x64
 800388c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800388e:	2b1d      	cmp	r3, #29
 8003890:	ddf4      	ble.n	800387c <DWIN_Message_Process+0x1b8>
		}
		Dwin_Write_VP(0x1500,Buf,15);     //hide message
 8003892:	463b      	mov	r3, r7
 8003894:	220f      	movs	r2, #15
 8003896:	4619      	mov	r1, r3
 8003898:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800389c:	f7ff fa52 	bl	8002d44 <Dwin_Write_VP>
		Buf[0]=00;
 80038a0:	2300      	movs	r3, #0
 80038a2:	703b      	strb	r3, [r7, #0]
		Buf[1]=virt_key_old [0];
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <DWIN_Message_Process+0x2bc>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	707b      	strb	r3, [r7, #1]
		Buf[2]=00;
 80038aa:	2300      	movs	r3, #0
 80038ac:	70bb      	strb	r3, [r7, #2]
		Buf[3]=virt_key_old [1];
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <DWIN_Message_Process+0x2bc>)
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	70fb      	strb	r3, [r7, #3]
		Dwin_Write_VP(0x1100,Buf,2);
 80038b4:	463b      	mov	r3, r7
 80038b6:	2202      	movs	r2, #2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80038be:	f7ff fa41 	bl	8002d44 <Dwin_Write_VP>
	}
	if(HAL_GetTick()>Keytimout)
 80038c2:	f002 fe6d 	bl	80065a0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <DWIN_Message_Process+0x2ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d92f      	bls.n	8003930 <DWIN_Message_Process+0x26c>
	{
		sprintf((char *)Buf,Textmessage);   //show message
 80038d0:	463b      	mov	r3, r7
 80038d2:	4926      	ldr	r1, [pc, #152]	; (800396c <DWIN_Message_Process+0x2a8>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f005 fb83 	bl	8008fe0 <siprintf>
		Dwin_Write_VP(0x1500,Buf,15);     //write buf to VP
 80038da:	463b      	mov	r3, r7
 80038dc:	220f      	movs	r2, #15
 80038de:	4619      	mov	r1, r3
 80038e0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80038e4:	f7ff fa2e 	bl	8002d44 <Dwin_Write_VP>
		virt_key_cnt =0;
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <DWIN_Message_Process+0x2c0>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
			Buf[0]=00;
 80038ee:	2300      	movs	r3, #0
 80038f0:	703b      	strb	r3, [r7, #0]
			Buf[1]=0x20;
 80038f2:	2320      	movs	r3, #32
 80038f4:	707b      	strb	r3, [r7, #1]
			Buf[2]=00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	70bb      	strb	r3, [r7, #2]
			Buf[3]=0x20;
 80038fa:	2320      	movs	r3, #32
 80038fc:	70fb      	strb	r3, [r7, #3]
			virt_key_old[0] = virt_key[0] = 0x20;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <DWIN_Message_Process+0x2b8>)
 8003900:	2220      	movs	r2, #32
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <DWIN_Message_Process+0x2b8>)
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <DWIN_Message_Process+0x2bc>)
 800390a:	701a      	strb	r2, [r3, #0]
			virt_key_old[1] = virt_key[1] = 0x20;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <DWIN_Message_Process+0x2b8>)
 800390e:	2220      	movs	r2, #32
 8003910:	705a      	strb	r2, [r3, #1]
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <DWIN_Message_Process+0x2b8>)
 8003914:	785a      	ldrb	r2, [r3, #1]
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <DWIN_Message_Process+0x2bc>)
 8003918:	705a      	strb	r2, [r3, #1]
			Dwin_Write_VP(0x1100,Buf,2);        //clear floor call
 800391a:	463b      	mov	r3, r7
 800391c:	2202      	movs	r2, #2
 800391e:	4619      	mov	r1, r3
 8003920:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003924:	f7ff fa0e 	bl	8002d44 <Dwin_Write_VP>
			Keytimout = 0-1;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <DWIN_Message_Process+0x2ac>)
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	601a      	str	r2, [r3, #0]
	}
}
 8003930:	bf00      	nop
 8003932:	3768      	adds	r7, #104	; 0x68
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000308 	.word	0x20000308
 800393c:	200002fc 	.word	0x200002fc
 8003940:	080098a8 	.word	0x080098a8
 8003944:	20000034 	.word	0x20000034
 8003948:	080098bc 	.word	0x080098bc
 800394c:	080098d0 	.word	0x080098d0
 8003950:	080098e4 	.word	0x080098e4
 8003954:	080098f8 	.word	0x080098f8
 8003958:	0800990c 	.word	0x0800990c
 800395c:	08009920 	.word	0x08009920
 8003960:	08009934 	.word	0x08009934
 8003964:	080098a4 	.word	0x080098a4
 8003968:	08009944 	.word	0x08009944
 800396c:	20000000 	.word	0x20000000
 8003970:	20000304 	.word	0x20000304
 8003974:	200002bc 	.word	0x200002bc
 8003978:	20000310 	.word	0x20000310
 800397c:	20000068 	.word	0x20000068
 8003980:	20000314 	.word	0x20000314
 8003984:	20000300 	.word	0x20000300

08003988 <read_dict>:
};

/************************************************************************************************/
/* Read object dictionary																		*/
/************************************************************************************************/
uint32_t read_dict (uint8_t pos, uint8_t subindex){
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	460a      	mov	r2, r1
 8003992:	71fb      	strb	r3, [r7, #7]
 8003994:	4613      	mov	r3, r2
 8003996:	71bb      	strb	r3, [r7, #6]
	uint16_t address;
	uint8_t ee_addr = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	757b      	strb	r3, [r7, #21]
	uint8_t i;
	uint8_t value [4];
	uint8_t size;
	size = dict [pos].size;
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <read_dict+0x160>)
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	4413      	add	r3, r2
 80039a4:	3304      	adds	r3, #4
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	74fb      	strb	r3, [r7, #19]

	if (subindex)										/* more than 1 subindex					*/
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <read_dict+0x40>
		{
			address = (subindex - 1) * size;
 80039b0:	79bb      	ldrb	r3, [r7, #6]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	7cfa      	ldrb	r2, [r7, #19]
 80039b8:	b292      	uxth	r2, r2
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	82fb      	strh	r3, [r7, #22]
			ee_addr = subindex - 1;
 80039c0:	79bb      	ldrb	r3, [r7, #6]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	757b      	strb	r3, [r7, #21]
 80039c6:	e003      	b.n	80039d0 <read_dict+0x48>
		}
	else
		{
			ee_addr = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	757b      	strb	r3, [r7, #21]
			address = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	82fb      	strh	r3, [r7, #22]
		}
	switch (dict [pos].object)
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4a45      	ldr	r2, [pc, #276]	; (8003ae8 <read_dict+0x160>)
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 80039de:	d03d      	beq.n	8003a5c <read_dict+0xd4>
 80039e0:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 80039e4:	dc4e      	bgt.n	8003a84 <read_dict+0xfc>
 80039e6:	f246 2260 	movw	r2, #25184	; 0x6260
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d011      	beq.n	8003a12 <read_dict+0x8a>
 80039ee:	f246 2260 	movw	r2, #25184	; 0x6260
 80039f2:	4293      	cmp	r3, r2
 80039f4:	dc46      	bgt.n	8003a84 <read_dict+0xfc>
 80039f6:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 80039fa:	d01e      	beq.n	8003a3a <read_dict+0xb2>
 80039fc:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8003a00:	dc40      	bgt.n	8003a84 <read_dict+0xfc>
 8003a02:	f241 0216 	movw	r2, #4118	; 0x1016
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d036      	beq.n	8003a78 <read_dict+0xf0>
 8003a0a:	f246 1260 	movw	r2, #24928	; 0x6160
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d138      	bne.n	8003a84 <read_dict+0xfc>
		{
			case (INPUT_PARA3):
			case (OUTPUT_PARA3):
				return (((uint32_t)bit_select (*((uint8_t *)dict [pos].pointer + ee_addr/8), ee_addr%8)) << 15);
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <read_dict+0x160>)
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	4413      	add	r3, r2
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	7d7a      	ldrb	r2, [r7, #21]
 8003a20:	08d2      	lsrs	r2, r2, #3
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	7d7b      	ldrb	r3, [r7, #21]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	fa42 f303 	asr.w	r3, r2, r3
 8003a34:	03db      	lsls	r3, r3, #15
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	e050      	b.n	8003adc <read_dict+0x154>

			case (INPUT_PARA4):
				return (*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1) * MAX_IO_TYPE)));
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <read_dict+0x160>)
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4413      	add	r3, r2
 8003a42:	3308      	adds	r3, #8
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	79bb      	ldrb	r3, [r7, #6]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4619      	mov	r1, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a5b      	subs	r3, r3, r1
 8003a56:	4413      	add	r3, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	e03f      	b.n	8003adc <read_dict+0x154>

			case (OUTPUT_PARA4):
				return (*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1) * (MAX_IO_TYPE + 1))));
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <read_dict+0x160>)
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	4413      	add	r3, r2
 8003a64:	3308      	adds	r3, #8
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	79ba      	ldrb	r2, [r7, #6]
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	00d2      	lsls	r2, r2, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	e031      	b.n	8003adc <read_dict+0x154>

			case (CONS_HB_TIME):
				return ((((uint32_t)subindex) << 16) + (HSETIME * 500));
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003a80:	3310      	adds	r3, #16
 8003a82:	e02b      	b.n	8003adc <read_dict+0x154>

			default:
				*(uint32_t *)value = 0;						/* clear variable						*/
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
				if (dict [pos].pointer)				/* object in RAM						*/
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <read_dict+0x160>)
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4413      	add	r3, r2
 8003a94:	3308      	adds	r3, #8
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01e      	beq.n	8003ada <read_dict+0x152>
					{
						for (i = 0; i < size; i++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	753b      	strb	r3, [r7, #20]
 8003aa0:	e013      	b.n	8003aca <read_dict+0x142>
		        	value [i] = *((uint8_t *)dict [pos].pointer + address + i);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <read_dict+0x160>)
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3308      	adds	r3, #8
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	8af9      	ldrh	r1, [r7, #22]
 8003ab0:	7d3b      	ldrb	r3, [r7, #20]
 8003ab2:	440b      	add	r3, r1
 8003ab4:	441a      	add	r2, r3
 8003ab6:	7d3b      	ldrb	r3, [r7, #20]
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	f107 0118 	add.w	r1, r7, #24
 8003abe:	440b      	add	r3, r1
 8003ac0:	f803 2c0c 	strb.w	r2, [r3, #-12]
						for (i = 0; i < size; i++)
 8003ac4:	7d3b      	ldrb	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	753b      	strb	r3, [r7, #20]
 8003aca:	7d3a      	ldrb	r2, [r7, #20]
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d3e7      	bcc.n	8003aa2 <read_dict+0x11a>
						return (*(uint32_t *)value);
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e000      	b.n	8003adc <read_dict+0x154>
					}
				else
					return (0);
 8003ada:	2300      	movs	r3, #0
		}
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2000006c 	.word	0x2000006c

08003aec <write_dict>:

/************************************************************************************************/
/* Write object dictionary																		*/
/************************************************************************************************/
uint8_t write_dict (uint8_t pos, uint8_t subindex, uint32_t value){
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	603a      	str	r2, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	460b      	mov	r3, r1
 8003afa:	71bb      	strb	r3, [r7, #6]
	uint8_t j;
	uint16_t address;
	uint8_t ee_addr;
	uint8_t size;

	size = dict [pos].size;
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	4a70      	ldr	r2, [pc, #448]	; (8003cc0 <write_dict+0x1d4>)
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	72bb      	strb	r3, [r7, #10]

	if (subindex)			// more than 1 subindex
 8003b0a:	79bb      	ldrb	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <write_dict+0x3e>
		{
			address = ((uint16_t)(subindex - 1)) * size;
 8003b10:	79bb      	ldrb	r3, [r7, #6]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	7aba      	ldrb	r2, [r7, #10]
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	81bb      	strh	r3, [r7, #12]
			ee_addr = subindex - 1;
 8003b22:	79bb      	ldrb	r3, [r7, #6]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	72fb      	strb	r3, [r7, #11]
 8003b28:	e003      	b.n	8003b32 <write_dict+0x46>
		}
	else
		{
			ee_addr = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	72fb      	strb	r3, [r7, #11]
			address = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	81bb      	strh	r3, [r7, #12]
		}
	switch (dict [pos].object)
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	4a62      	ldr	r2, [pc, #392]	; (8003cc0 <write_dict+0x1d4>)
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	4413      	add	r3, r2
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8003b40:	d078      	beq.n	8003c34 <write_dict+0x148>
 8003b42:	f5b3 4fc5 	cmp.w	r3, #25216	; 0x6280
 8003b46:	f300 808d 	bgt.w	8003c64 <write_dict+0x178>
 8003b4a:	f246 2260 	movw	r2, #25184	; 0x6260
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00c      	beq.n	8003b6c <write_dict+0x80>
 8003b52:	f246 2260 	movw	r2, #25184	; 0x6260
 8003b56:	4293      	cmp	r3, r2
 8003b58:	f300 8084 	bgt.w	8003c64 <write_dict+0x178>
 8003b5c:	f246 1260 	movw	r2, #24928	; 0x6160
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <write_dict+0x80>
 8003b64:	f5b3 4fc3 	cmp.w	r3, #24960	; 0x6180
 8003b68:	d049      	beq.n	8003bfe <write_dict+0x112>
 8003b6a:	e07b      	b.n	8003c64 <write_dict+0x178>
		{
			case (INPUT_PARA3):
			case (OUTPUT_PARA3):
				i = *((uint8_t *)dict [pos].pointer + ee_addr/8);
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	4a54      	ldr	r2, [pc, #336]	; (8003cc0 <write_dict+0x1d4>)
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	3308      	adds	r3, #8
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	7afa      	ldrb	r2, [r7, #11]
 8003b7a:	08d2      	lsrs	r2, r2, #3
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	73fb      	strb	r3, [r7, #15]
				j = (value >> 15) & 1;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	0bdb      	lsrs	r3, r3, #15
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	727b      	strb	r3, [r7, #9]
				if (((i >> (ee_addr % 8)) & 1) != j)
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	fa42 f303 	asr.w	r3, r2, r3
 8003b9c:	f003 0201 	and.w	r2, r3, #1
 8003ba0:	7a7b      	ldrb	r3, [r7, #9]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d01d      	beq.n	8003be2 <write_dict+0xf6>
					{
						if (j)
 8003ba6:	7a7b      	ldrb	r3, [r7, #9]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <write_dict+0xda>
							bit_set (i, ee_addr % 8);
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	b25a      	sxtb	r2, r3
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	e00d      	b.n	8003be2 <write_dict+0xf6>
						else
							bit_reset (i, ee_addr % 8);
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	2201      	movs	r2, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	b25a      	sxtb	r2, r3
 8003bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	73fb      	strb	r3, [r7, #15]
					}
				*((uint8_t *)dict [pos].pointer + ee_addr/8) = i;
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	4a36      	ldr	r2, [pc, #216]	; (8003cc0 <write_dict+0x1d4>)
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	4413      	add	r3, r2
 8003bea:	3308      	adds	r3, #8
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	7afa      	ldrb	r2, [r7, #11]
 8003bf0:	08d2      	lsrs	r2, r2, #3
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	701a      	strb	r2, [r3, #0]
				return (0);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e05a      	b.n	8003cb4 <write_dict+0x1c8>

			case (INPUT_PARA4):
				if (dict[pos].pointer)
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	4a2f      	ldr	r2, [pc, #188]	; (8003cc0 <write_dict+0x1d4>)
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	3308      	adds	r3, #8
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04c      	beq.n	8003ca8 <write_dict+0x1bc>
					{
						*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1)) * MAX_IO_TYPE) = (uint8_t)value;
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a2b      	ldr	r2, [pc, #172]	; (8003cc0 <write_dict+0x1d4>)
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	4413      	add	r3, r2
 8003c18:	3308      	adds	r3, #8
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	79bb      	ldrb	r3, [r7, #6]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	460b      	mov	r3, r1
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	1a5b      	subs	r3, r3, r1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b2c2      	uxtb	r2, r0
 8003c30:	701a      	strb	r2, [r3, #0]
					}
				break;
 8003c32:	e039      	b.n	8003ca8 <write_dict+0x1bc>

			case (OUTPUT_PARA4):
				if (dict[pos].pointer)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <write_dict+0x1d4>)
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d033      	beq.n	8003cac <write_dict+0x1c0>
					{
						*((uint8_t *)dict[pos].pointer + ((uint16_t)(subindex - 1)) * (MAX_IO_TYPE + 1)) = (uint8_t)value;
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <write_dict+0x1d4>)
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3308      	adds	r3, #8
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	79ba      	ldrb	r2, [r7, #6]
 8003c54:	b292      	uxth	r2, r2
 8003c56:	3a01      	subs	r2, #1
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	00d2      	lsls	r2, r2, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2ca      	uxtb	r2, r1
 8003c60:	701a      	strb	r2, [r3, #0]
					}
				break;
 8003c62:	e023      	b.n	8003cac <write_dict+0x1c0>

			default:
				if (dict [pos].pointer)						/* object in RAM						*/
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <write_dict+0x1d4>)
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01d      	beq.n	8003cb0 <write_dict+0x1c4>
					{
						for (i = 0; i < size; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e011      	b.n	8003c9e <write_dict+0x1b2>
		     		 	*((uint8_t *)dict [pos].pointer + address + i) = *((uint8_t *)&value+i);
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	463a      	mov	r2, r7
 8003c7e:	441a      	add	r2, r3
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	490f      	ldr	r1, [pc, #60]	; (8003cc0 <write_dict+0x1d4>)
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	440b      	add	r3, r1
 8003c88:	3308      	adds	r3, #8
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	89b8      	ldrh	r0, [r7, #12]
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	4403      	add	r3, r0
 8003c92:	440b      	add	r3, r1
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	701a      	strb	r2, [r3, #0]
						for (i = 0; i < size; i++)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	7abb      	ldrb	r3, [r7, #10]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3e9      	bcc.n	8003c7a <write_dict+0x18e>
					}
				break;
 8003ca6:	e003      	b.n	8003cb0 <write_dict+0x1c4>
				break;
 8003ca8:	bf00      	nop
 8003caa:	e002      	b.n	8003cb2 <write_dict+0x1c6>
				break;
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <write_dict+0x1c6>
				break;
 8003cb0:	bf00      	nop
		}
	return (0);
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	2000006c 	.word	0x2000006c

08003cc4 <search_dict>:


/************************************************************************************************/
/* Search object dictionary for an entry														*/
/************************************************************************************************/
uint32_t search_dict (uint16_t index, uint8_t subindex, uint8_t type, uint8_t *pos){
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	80fb      	strh	r3, [r7, #6]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	717b      	strb	r3, [r7, #5]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	713b      	strb	r3, [r7, #4]
	uint8_t i;
	uint8_t index_exists;
	uint8_t subindex_exists;
	uint8_t size;
	i = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
	index_exists = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73bb      	strb	r3, [r7, #14]
	subindex_exists = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	737b      	strb	r3, [r7, #13]
	while (dict [i].object != ENDSTRING)		//search whole dictionary
 8003ce4:	e06b      	b.n	8003dbe <search_dict+0xfa>
		{
			if (dict [i].object == index)					//found object
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	4a41      	ldr	r2, [pc, #260]	; (8003df0 <search_dict+0x12c>)
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	4413      	add	r3, r2
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d160      	bne.n	8003db8 <search_dict+0xf4>
				{
					if (subindex <= dict [i].sub)				//subindex of object valid
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <search_dict+0x12c>)
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	797a      	ldrb	r2, [r7, #5]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d855      	bhi.n	8003db4 <search_dict+0xf0>
						{
							if ((type & COMMAND_SPECIFIER) == INIT_WRITE_REQ)
 8003d08:	793b      	ldrb	r3, [r7, #4]
 8003d0a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d14b      	bne.n	8003daa <search_dict+0xe6>
								{/// write access to object dictionary
									size = dict [i].size;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	4a36      	ldr	r2, [pc, #216]	; (8003df0 <search_dict+0x12c>)
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	733b      	strb	r3, [r7, #12]
									if ((type & EXPEDITED_BIT) && (size > 4) &&	 (subindex || (!dict [i].sub)))
 8003d20:	793b      	ldrb	r3, [r7, #4]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <search_dict+0x86>
 8003d2a:	7b3b      	ldrb	r3, [r7, #12]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d90c      	bls.n	8003d4a <search_dict+0x86>
 8003d30:	797b      	ldrb	r3, [r7, #5]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <search_dict+0x82>
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	4a2d      	ldr	r2, [pc, #180]	; (8003df0 <search_dict+0x12c>)
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <search_dict+0x86>
										return (SDO_UNSUPPORTED);		// exped. transfer to object > 4 uint8_ts
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <search_dict+0x130>)
 8003d48:	e04d      	b.n	8003de6 <search_dict+0x122>
									else if (!((type & EXPEDITED_BIT)) && (size <= 4))
 8003d4a:	793b      	ldrb	r3, [r7, #4]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <search_dict+0x9a>
 8003d54:	7b3b      	ldrb	r3, [r7, #12]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d801      	bhi.n	8003d5e <search_dict+0x9a>
										return (SDO_UNSUPPORTED);		// normal transfer to object <= 4 uint8_ts
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <search_dict+0x130>)
 8003d5c:	e043      	b.n	8003de6 <search_dict+0x122>
									else if (!dict [i].access)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <search_dict+0x12c>)
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	3303      	adds	r3, #3
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <search_dict+0xae>
										return (SDO_WRITE_OF_RO);		// write access to read only object
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <search_dict+0x134>)
 8003d70:	e039      	b.n	8003de6 <search_dict+0x122>
									else if ((!subindex) && dict [i].sub && index != PORT_OUT && index != PORT_IN)
 8003d72:	797b      	ldrb	r3, [r7, #5]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d113      	bne.n	8003da0 <search_dict+0xdc>
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <search_dict+0x12c>)
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	4413      	add	r3, r2
 8003d80:	3302      	adds	r3, #2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <search_dict+0xdc>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d006      	beq.n	8003da0 <search_dict+0xdc>
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	f642 72fd 	movw	r2, #12285	; 0x2ffd
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d001      	beq.n	8003da0 <search_dict+0xdc>
										return (SDO_WRITE_OF_RO);		// write access to number of entries
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <search_dict+0x134>)
 8003d9e:	e022      	b.n	8003de6 <search_dict+0x122>
									*pos = i;							//set number of entry in dictionary
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	701a      	strb	r2, [r3, #0]
									return (0);						//write access possible
 8003da6:	2300      	movs	r3, #0
 8003da8:	e01d      	b.n	8003de6 <search_dict+0x122>
								}
							else										//read access
								{
									*pos = i;							//set number of entry in dictionary
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	701a      	strb	r2, [r3, #0]
									return (0);						//read access possible
 8003db0:	2300      	movs	r3, #0
 8003db2:	e018      	b.n	8003de6 <search_dict+0x122>
								}
							subindex_exists = 1;		//object exists,but access not valid
						}
					index_exists = 1;					//object exists,but subindex not valid
 8003db4:	2301      	movs	r3, #1
 8003db6:	73bb      	strb	r3, [r7, #14]
				}
			i++;												//go to next dictionary entry
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
	while (dict [i].object != ENDSTRING)		//search whole dictionary
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <search_dict+0x12c>)
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d18a      	bne.n	8003ce6 <search_dict+0x22>
		}
	if (subindex_exists)					// object exists,but access not valid
 8003dd0:	7b7b      	ldrb	r3, [r7, #13]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <search_dict+0x116>
		return (SDO_WRITE_OF_RO);	// set error code
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <search_dict+0x134>)
 8003dd8:	e005      	b.n	8003de6 <search_dict+0x122>
	if (index_exists)							// object exists,but subindex not valid
 8003dda:	7bbb      	ldrb	r3, [r7, #14]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <search_dict+0x120>
		return (SDO_SUB_WRONG);		// set error code
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <search_dict+0x138>)
 8003de2:	e000      	b.n	8003de6 <search_dict+0x122>
	return (SDO_NOT_EXIST);				// no entry in object dictionary
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <search_dict+0x13c>)
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	2000006c 	.word	0x2000006c
 8003df4:	06010000 	.word	0x06010000
 8003df8:	06010002 	.word	0x06010002
 8003dfc:	06090011 	.word	0x06090011
 8003e00:	06020000 	.word	0x06020000

08003e04 <Get_NodeID>:

#define	_SUBPROG_C_
#include	"AllHeader.h"
extern uint16_t Led_virt;

uint8_t Get_NodeID(void){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
	uint8_t i, dat1 = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<10; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	e015      	b.n	8003e40 <Get_NodeID+0x3c>
		{
			if(HAL_GPIO_ReadPin(NODE_ID_GPIO_Port,NODE_ID_Pin))
 8003e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e18:	4811      	ldr	r0, [pc, #68]	; (8003e60 <Get_NodeID+0x5c>)
 8003e1a:	f003 fe21 	bl	8007a60 <HAL_GPIO_ReadPin>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <Get_NodeID+0x26>
				dat1++;
 8003e24:	79bb      	ldrb	r3, [r7, #6]
 8003e26:	3301      	adds	r3, #1
 8003e28:	71bb      	strb	r3, [r7, #6]
			__NOP();__NOP();__NOP();__NOP();
 8003e2a:	bf00      	nop
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
			__NOP();__NOP();__NOP();__NOP();
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
	for(i=0; i<10; i++)
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	71fb      	strb	r3, [r7, #7]
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	2b09      	cmp	r3, #9
 8003e44:	d9e6      	bls.n	8003e14 <Get_NodeID+0x10>
		}
	if(dat1 >= 7)
 8003e46:	79bb      	ldrb	r3, [r7, #6]
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d902      	bls.n	8003e52 <Get_NodeID+0x4e>
		i =  0x10;
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	71fb      	strb	r3, [r7, #7]
 8003e50:	e001      	b.n	8003e56 <Get_NodeID+0x52>
	else
		i =  0x11;
 8003e52:	2311      	movs	r3, #17
 8003e54:	71fb      	strb	r3, [r7, #7]

	return i;
 8003e56:	79fb      	ldrb	r3, [r7, #7]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40010c00 	.word	0x40010c00

08003e64 <Check_InChange>:


uint8_t Check_InChange(uint8_t* buf1, uint8_t* buf2){
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	uint8_t i;

	for(i=0; i<mMax_InByte; i++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	e00e      	b.n	8003e92 <Check_InChange+0x2e>
		{
			if(buf1[i] != buf2[i])
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	440b      	add	r3, r1
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <Check_InChange+0x28>
				return 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e008      	b.n	8003e9e <Check_InChange+0x3a>
	for(i=0; i<mMax_InByte; i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <Check_InChange+0x44>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3eb      	bcc.n	8003e74 <Check_InChange+0x10>
		}
	return 0;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	20000bf0 	.word	0x20000bf0

08003eac <SPI_SendOneByte>:

void Init_SPI(void){

}

uint8_t SPI_SendOneByte(uint8_t dat){
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
	SCK = 0;
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <SPI_SendOneByte+0x58>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
	__NOP();
 8003ebc:	bf00      	nop
	for(int i=7;i>=0;i--)
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e016      	b.n	8003ef2 <SPI_SendOneByte+0x46>
	{
		PIN_A7 = (dat >> i) &0x01;
 8003ec4:	79fa      	ldrb	r2, [r7, #7]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	fa42 f303 	asr.w	r3, r2, r3
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <SPI_SendOneByte+0x5c>)
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	6013      	str	r3, [r2, #0]
		__NOP();
 8003ed4:	bf00      	nop
		SCK =1;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <SPI_SendOneByte+0x58>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
		__NOP();
 8003edc:	bf00      	nop
		__NOP();
 8003ede:	bf00      	nop
		SCK =0;
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <SPI_SendOneByte+0x58>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
		__NOP();
 8003ee6:	bf00      	nop
		__NOP();
 8003ee8:	bf00      	nop
		__NOP();
 8003eea:	bf00      	nop
	for(int i=7;i>=0;i--)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dae5      	bge.n	8003ec4 <SPI_SendOneByte+0x18>
//	SSPBUF = dat;
//	while(!(SSPSTAT & 0x01))
//		ClrWdt();
//	dat = SSPBUF;

	return dat;
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	42210194 	.word	0x42210194
 8003f08:	4221019c 	.word	0x4221019c

08003f0c <ReadInput>:
 														>0:  ���ڰ�ť�壬������166��ʱ�����(1�鰴ť��16���������)
 2��һ��SPI����: ����9���ֽڣ�һ��Ƭѡ��Ч(Ƭѡÿ��ѭ���ƶ�һ�ֽ�)���ܹ�9��ѭ��
 3��9��ѭ����ϣ�����һ��ѭ���ر���������Ƭѡ
============================================================================================================*/
uint8_t 	volatile	Userin[MAX_IN_BYTE];								/* variable for input after debouncing	*/
void ReadInput(void){
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
//	memcpy((void *)in,(void *)Userin,MAX_IN_BYTE);
//	return ;
	uint8_t i, j, temp;
	uint32_t kCode[3] = {0,0,0};
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
//			(((uint32_t)PORTE & 0x07) << 4) |			// PE0~PE2
//			((uint32_t)PORTD << 7) |					// PD0~PD7
//			(((uint32_t)PORTB & 0x03) << 15) |			// PB0~PB1
//			(((uint32_t)PORTB & 0x30) << 13) |			// PB4~PB5
//			(((uint32_t)PORTC & 0x07) << 19));			// PC0~PC2
	kCode[0] = ((GPIOB->IDR) & 0x3FFF);
 8003f1e:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <ReadInput+0x1a4>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f26:	603b      	str	r3, [r7, #0]

	HC166_PARA_EN(); __NOP();__NOP();__NOP();__NOP();
 8003f28:	4b62      	ldr	r3, [pc, #392]	; (80040b4 <ReadInput+0x1a8>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
	HC166_CLK_LOW();__NOP();__NOP();__NOP();__NOP();
 8003f36:	4b60      	ldr	r3, [pc, #384]	; (80040b8 <ReadInput+0x1ac>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
	HC166_CLK_HIGH();__NOP();__NOP();__NOP();__NOP();
 8003f44:	4b5c      	ldr	r3, [pc, #368]	; (80040b8 <ReadInput+0x1ac>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
	HC166_CLK_LOW();__NOP();__NOP();__NOP();__NOP();
 8003f52:	4b59      	ldr	r3, [pc, #356]	; (80040b8 <ReadInput+0x1ac>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
	HC166_SERI_EN(); __NOP();__NOP();__NOP();__NOP();
 8003f60:	4b54      	ldr	r3, [pc, #336]	; (80040b4 <ReadInput+0x1a8>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
	HC595_LUCK_DIS();
 8003f6e:	4b53      	ldr	r3, [pc, #332]	; (80040bc <ReadInput+0x1b0>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

	temp =21;
 8003f74:	2315      	movs	r3, #21
 8003f76:	737b      	strb	r3, [r7, #13]
	for(j=0; j<8; j++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73bb      	strb	r3, [r7, #14]
 8003f7c:	e02d      	b.n	8003fda <ReadInput+0xce>
		{
			if (PIN_A6)
 8003f7e:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <ReadInput+0x1b4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d017      	beq.n	8003fb6 <ReadInput+0xaa>
				kCode[temp / 32] |= (0x01ul << (temp % 32));
 8003f86:	7b7b      	ldrb	r3, [r7, #13]
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	b2d8      	uxtb	r0, r3
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	f107 0210 	add.w	r2, r7, #16
 8003f94:	4413      	add	r3, r2
 8003f96:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003f9a:	7b7b      	ldrb	r3, [r7, #13]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	008b      	lsls	r3, r1, #2
 8003fac:	f107 0110 	add.w	r1, r7, #16
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f843 2c10 	str.w	r2, [r3, #-16]
			HC166_CLK_HIGH();__NOP();__NOP();__NOP();__NOP();
 8003fb6:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <ReadInput+0x1ac>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
			HC166_CLK_LOW();__NOP();__NOP();
 8003fc4:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <ReadInput+0x1ac>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
			--temp;
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	737b      	strb	r3, [r7, #13]
	for(j=0; j<8; j++)
 8003fd4:	7bbb      	ldrb	r3, [r7, #14]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73bb      	strb	r3, [r7, #14]
 8003fda:	7bbb      	ldrb	r3, [r7, #14]
 8003fdc:	2b07      	cmp	r3, #7
 8003fde:	d9ce      	bls.n	8003f7e <ReadInput+0x72>
		}

	__NOP();__NOP();__NOP();__NOP();
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
	__NOP();__NOP();__NOP();__NOP();
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
	__NOP();__NOP();__NOP();__NOP();
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
			__NOP();__NOP();__NOP();__NOP();
			__NOP();__NOP();__NOP();__NOP();
//			SSPCON1 = 0x32;
		}
#endif
	for (i=0; i<MAX_IN_BYTE; ++i)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e015      	b.n	800402a <ReadInput+0x11e>
		{	
			input[2][i] = input[1][i];
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	4930      	ldr	r1, [pc, #192]	; (80040c4 <ReadInput+0x1b8>)
 8004004:	440a      	add	r2, r1
 8004006:	7a52      	ldrb	r2, [r2, #9]
 8004008:	b2d1      	uxtb	r1, r2
 800400a:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <ReadInput+0x1b8>)
 800400c:	4413      	add	r3, r2
 800400e:	460a      	mov	r2, r1
 8004010:	749a      	strb	r2, [r3, #18]
			input[1][i] = input[0][i];
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	492b      	ldr	r1, [pc, #172]	; (80040c4 <ReadInput+0x1b8>)
 8004018:	5c8a      	ldrb	r2, [r1, r2]
 800401a:	b2d1      	uxtb	r1, r2
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <ReadInput+0x1b8>)
 800401e:	4413      	add	r3, r2
 8004020:	460a      	mov	r2, r1
 8004022:	725a      	strb	r2, [r3, #9]
	for (i=0; i<MAX_IN_BYTE; ++i)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	3301      	adds	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d9e6      	bls.n	8003ffe <ReadInput+0xf2>
		}
	input[0][0] = (uint8_t)kCode[0];
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <ReadInput+0x1b8>)
 8004036:	701a      	strb	r2, [r3, #0]
	input[0][1] = (uint8_t)(kCode[0] >> 8);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <ReadInput+0x1b8>)
 8004040:	705a      	strb	r2, [r3, #1]
	input[0][2] = (uint8_t)(kCode[0] >> 16);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	b2da      	uxtb	r2, r3
 8004048:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <ReadInput+0x1b8>)
 800404a:	709a      	strb	r2, [r3, #2]
	j = 3;
 800404c:	2303      	movs	r3, #3
 800404e:	73bb      	strb	r3, [r7, #14]
				input[0][8] = (uint8_t)kCode[2];
				j = 9;
				break;				
		}
#endif
	for (i=0; i<j; ++i)
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e021      	b.n	800409a <ReadInput+0x18e>
		{	
			if (input[2][i] == input[1][i] && input[1][i] == input[0][i])
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <ReadInput+0x1b8>)
 800405a:	4413      	add	r3, r2
 800405c:	7c9b      	ldrb	r3, [r3, #18]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	4918      	ldr	r1, [pc, #96]	; (80040c4 <ReadInput+0x1b8>)
 8004064:	440b      	add	r3, r1
 8004066:	7a5b      	ldrb	r3, [r3, #9]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	429a      	cmp	r2, r3
 800406c:	d112      	bne.n	8004094 <ReadInput+0x188>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <ReadInput+0x1b8>)
 8004072:	4413      	add	r3, r2
 8004074:	7a5b      	ldrb	r3, [r3, #9]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	4912      	ldr	r1, [pc, #72]	; (80040c4 <ReadInput+0x1b8>)
 800407c:	5ccb      	ldrb	r3, [r1, r3]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <ReadInput+0x188>
				in[i] = input[2][i];
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	490e      	ldr	r1, [pc, #56]	; (80040c4 <ReadInput+0x1b8>)
 800408a:	440a      	add	r2, r1
 800408c:	7c92      	ldrb	r2, [r2, #18]
 800408e:	b2d1      	uxtb	r1, r2
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <ReadInput+0x1bc>)
 8004092:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<j; ++i)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	3301      	adds	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	7bbb      	ldrb	r3, [r7, #14]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3d9      	bcc.n	8004056 <ReadInput+0x14a>
		}
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010c00 	.word	0x40010c00
 80040b4:	422101bc 	.word	0x422101bc
 80040b8:	42210194 	.word	0x42210194
 80040bc:	42210184 	.word	0x42210184
 80040c0:	42210118 	.word	0x42210118
 80040c4:	20000838 	.word	0x20000838
 80040c8:	20000624 	.word	0x20000624

080040cc <Out_Prog>:

/*========================         ����źŴ���          ===================================
	1������ź�: ֻ����70����ť�ƣ�������2����վ�ӣ�1�����ط���������������ĳ�����
	2���ߵ�ƽ����
==============================================================================================*/
void Out_Prog(void){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
	uint8_t i, j, temp;
	uint16_t shift = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	817b      	strh	r3, [r7, #10]
	uint8_t out_state[MAX_IN_BYTE];
	static uint8_t out_old[MAX_IN_BYTE] = {0,0,0,0,0,0,0,0,0};

	for(i=2; i<mMax_InByte; i++)
 80040d6:	2302      	movs	r3, #2
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	e011      	b.n	8004100 <Out_Prog+0x34>
		out_state[i] = out[i] ^ out_polarity[i];		// read input state; invert if desired
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	4a8b      	ldr	r2, [pc, #556]	; (800430c <Out_Prog+0x240>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	b2d9      	uxtb	r1, r3
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	4a8a      	ldr	r2, [pc, #552]	; (8004310 <Out_Prog+0x244>)
 80040e8:	5cd2      	ldrb	r2, [r2, r3]
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	404a      	eors	r2, r1
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f107 0110 	add.w	r1, r7, #16
 80040f4:	440b      	add	r3, r1
 80040f6:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i=2; i<mMax_InByte; i++)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	3301      	adds	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	4b84      	ldr	r3, [pc, #528]	; (8004314 <Out_Prog+0x248>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3e8      	bcc.n	80040dc <Out_Prog+0x10>
	out_state[0] = ((out[0]&0x03) | (uint8_t)Led_virt) ^  out_polarity[0];
 800410a:	4b80      	ldr	r3, [pc, #512]	; (800430c <Out_Prog+0x240>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	b25b      	sxtb	r3, r3
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	b25a      	sxtb	r2, r3
 8004118:	4b7f      	ldr	r3, [pc, #508]	; (8004318 <Out_Prog+0x24c>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b25b      	sxtb	r3, r3
 800411e:	4313      	orrs	r3, r2
 8004120:	b25a      	sxtb	r2, r3
 8004122:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <Out_Prog+0x244>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b25b      	sxtb	r3, r3
 8004128:	4053      	eors	r3, r2
 800412a:	b25b      	sxtb	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	703b      	strb	r3, [r7, #0]
	out_state[1] = (uint8_t)(Led_virt>>8) ^  out_polarity[1];
 8004130:	4b79      	ldr	r3, [pc, #484]	; (8004318 <Out_Prog+0x24c>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	b29b      	uxth	r3, r3
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4b75      	ldr	r3, [pc, #468]	; (8004310 <Out_Prog+0x244>)
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	4053      	eors	r3, r2
 8004140:	b2db      	uxtb	r3, r3
 8004142:	707b      	strb	r3, [r7, #1]
	if(Check_InChange(out_state, out_old) == 0)	return;
 8004144:	463b      	mov	r3, r7
 8004146:	4975      	ldr	r1, [pc, #468]	; (800431c <Out_Prog+0x250>)
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fe8b 	bl	8003e64 <Check_InChange>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80d7 	beq.w	8004304 <Out_Prog+0x238>

	HC595_LUCK_DIS();
 8004156:	4b72      	ldr	r3, [pc, #456]	; (8004320 <Out_Prog+0x254>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

	if( mExtern_Number )
 800415c:	4b71      	ldr	r3, [pc, #452]	; (8004324 <Out_Prog+0x258>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8084 	beq.w	800426e <Out_Prog+0x1a2>
		{//������չ��
			for(i=mExtern_Number; i>0; i--)
 8004166:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <Out_Prog+0x258>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	e041      	b.n	80041f2 <Out_Prog+0x126>
				{
					shift = (((uint16_t)out_state[i * 2 + 2] << 8) | out_state[i * 2 + 1]) << 2;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3301      	adds	r3, #1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	f107 0210 	add.w	r2, r7, #16
 8004178:	4413      	add	r3, r2
 800417a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	b21a      	sxth	r2, r3
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	3301      	adds	r3, #1
 8004188:	f107 0110 	add.w	r1, r7, #16
 800418c:	440b      	add	r3, r1
 800418e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004192:	b21b      	sxth	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b21b      	sxth	r3, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	817b      	strh	r3, [r7, #10]
					temp = out_state[i * 2] & 0xC0; 	//ȡ����2λ
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	f107 0210 	add.w	r2, r7, #16
 80041a6:	4413      	add	r3, r2
 80041a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80041ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041b0:	737b      	strb	r3, [r7, #13]
					shift |= (temp >> 6);
 80041b2:	7b7b      	ldrb	r3, [r7, #13]
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	4313      	orrs	r3, r2
 80041be:	817b      	strh	r3, [r7, #10]
					out_state[i * 2 + 2] = (uint8_t)(shift >> 8);
 80041c0:	897b      	ldrh	r3, [r7, #10]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	3301      	adds	r3, #1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	f107 0110 	add.w	r1, r7, #16
 80041d2:	440b      	add	r3, r1
 80041d4:	f803 2c10 	strb.w	r2, [r3, #-16]
					out_state[i * 2 + 1] = ((uint8_t)shift);
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	3301      	adds	r3, #1
 80041de:	897a      	ldrh	r2, [r7, #10]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	f107 0110 	add.w	r1, r7, #16
 80041e6:	440b      	add	r3, r1
 80041e8:	f803 2c10 	strb.w	r2, [r3, #-16]
			for(i=mExtern_Number; i>0; i--)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ba      	bne.n	800416e <Out_Prog+0xa2>
				}
			for(i = mExtern_Number * 2 + 3; i > 0; i--)
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <Out_Prog+0x258>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	3303      	adds	r3, #3
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	e027      	b.n	8004256 <Out_Prog+0x18a>
				{
					temp = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 800420a:	2300      	movs	r3, #0
 800420c:	73bb      	strb	r3, [r7, #14]
 800420e:	e018      	b.n	8004242 <Out_Prog+0x176>
						{
							temp <<= 1;
 8004210:	7b7b      	ldrb	r3, [r7, #13]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	737b      	strb	r3, [r7, #13]
							if(out_state[i-1] & (1 << j))
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3b01      	subs	r3, #1
 800421a:	f107 0210 	add.w	r2, r7, #16
 800421e:	4413      	add	r3, r2
 8004220:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004224:	461a      	mov	r2, r3
 8004226:	7bbb      	ldrb	r3, [r7, #14]
 8004228:	fa42 f303 	asr.w	r3, r2, r3
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <Out_Prog+0x170>
								temp |= 0x01;
 8004234:	7b7b      	ldrb	r3, [r7, #13]
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	3301      	adds	r3, #1
 8004240:	73bb      	strb	r3, [r7, #14]
 8004242:	7bbb      	ldrb	r3, [r7, #14]
 8004244:	2b07      	cmp	r3, #7
 8004246:	d9e3      	bls.n	8004210 <Out_Prog+0x144>
						}
					SPI_SendOneByte(temp);
 8004248:	7b7b      	ldrb	r3, [r7, #13]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fe2e 	bl	8003eac <SPI_SendOneByte>
			for(i = mExtern_Number * 2 + 3; i > 0; i--)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	3b01      	subs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1d4      	bne.n	8004206 <Out_Prog+0x13a>
				}
			HC595_LUCK_EN();
 800425c:	4b30      	ldr	r3, [pc, #192]	; (8004320 <Out_Prog+0x254>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]
			__NOP();__NOP();
 8004262:	bf00      	nop
 8004264:	bf00      	nop
			HC595_LUCK_DIS();
 8004266:	4b2e      	ldr	r3, [pc, #184]	; (8004320 <Out_Prog+0x254>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e035      	b.n	80042da <Out_Prog+0x20e>
		}
	else
		{//û����չ��
			for(i=3; i>0; i--)
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e027      	b.n	80042c4 <Out_Prog+0x1f8>
				{
					temp = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 8004278:	2300      	movs	r3, #0
 800427a:	73bb      	strb	r3, [r7, #14]
 800427c:	e018      	b.n	80042b0 <Out_Prog+0x1e4>
						{
							temp <<= 1;
 800427e:	7b7b      	ldrb	r3, [r7, #13]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	737b      	strb	r3, [r7, #13]
							if(out_state[i-1] & (1 << j))
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	3b01      	subs	r3, #1
 8004288:	f107 0210 	add.w	r2, r7, #16
 800428c:	4413      	add	r3, r2
 800428e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004292:	461a      	mov	r2, r3
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	fa42 f303 	asr.w	r3, r2, r3
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <Out_Prog+0x1de>
								temp |= 0x01;
 80042a2:	7b7b      	ldrb	r3, [r7, #13]
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	737b      	strb	r3, [r7, #13]
					for(j=0; j<8; j++)
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	3301      	adds	r3, #1
 80042ae:	73bb      	strb	r3, [r7, #14]
 80042b0:	7bbb      	ldrb	r3, [r7, #14]
 80042b2:	2b07      	cmp	r3, #7
 80042b4:	d9e3      	bls.n	800427e <Out_Prog+0x1b2>
						}
					SPI_SendOneByte(temp);
 80042b6:	7b7b      	ldrb	r3, [r7, #13]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fdf7 	bl	8003eac <SPI_SendOneByte>
			for(i=3; i>0; i--)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1d4      	bne.n	8004274 <Out_Prog+0x1a8>
				}
			HC595_LUCK_EN();
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <Out_Prog+0x254>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
			__NOP();__NOP();
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
			HC595_LUCK_DIS();
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <Out_Prog+0x254>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
		}
	for(i=0; i<mMax_InByte; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	e00b      	b.n	80042f8 <Out_Prog+0x22c>
		out_old[i] = out_state[i];
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f107 0110 	add.w	r1, r7, #16
 80042e8:	440a      	add	r2, r1
 80042ea:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80042ee:	4a0b      	ldr	r2, [pc, #44]	; (800431c <Out_Prog+0x250>)
 80042f0:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<mMax_InByte; i++)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	3301      	adds	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <Out_Prog+0x248>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d3ee      	bcc.n	80042e0 <Out_Prog+0x214>
 8004302:	e000      	b.n	8004306 <Out_Prog+0x23a>
	if(Check_InChange(out_state, out_old) == 0)	return;
 8004304:	bf00      	nop
}
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000328 	.word	0x20000328
 8004310:	20000630 	.word	0x20000630
 8004314:	20000bf0 	.word	0x20000bf0
 8004318:	20000206 	.word	0x20000206
 800431c:	20000318 	.word	0x20000318
 8004320:	42210184 	.word	0x42210184
 8004324:	20000331 	.word	0x20000331

08004328 <test_mode>:

void test_mode(void){
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t help;
	uint8_t instate[MAX_IN_BYTE];
	uint8_t testno = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	75bb      	strb	r3, [r7, #22]
	uint8_t pBuf[5];

	for(i=0; i<MAX_IN_BYTE; i++)
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
 8004336:	e015      	b.n	8004364 <test_mode+0x3c>
	{
		in_polarity[i] = 0;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	4aab      	ldr	r2, [pc, #684]	; (80045e8 <test_mode+0x2c0>)
 800433c:	2100      	movs	r1, #0
 800433e:	54d1      	strb	r1, [r2, r3]
		out_polarity[i] = 0;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	4aaa      	ldr	r2, [pc, #680]	; (80045ec <test_mode+0x2c4>)
 8004344:	2100      	movs	r1, #0
 8004346:	54d1      	strb	r1, [r2, r3]
		outpush[i] = 0;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	4aa9      	ldr	r2, [pc, #676]	; (80045f0 <test_mode+0x2c8>)
 800434c:	2100      	movs	r1, #0
 800434e:	54d1      	strb	r1, [r2, r3]
		instate[i] = 0;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	f107 0218 	add.w	r2, r7, #24
 8004356:	4413      	add	r3, r2
 8004358:	2200      	movs	r2, #0
 800435a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i=0; i<MAX_IN_BYTE; i++)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	3301      	adds	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b08      	cmp	r3, #8
 8004368:	d9e6      	bls.n	8004338 <test_mode+0x10>
	}

	for (i = 1; i < MAX_IO_TYPE; i++)
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
 800436e:	e006      	b.n	800437e <test_mode+0x56>
  	virt_in  [i] = 0;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	4aa0      	ldr	r2, [pc, #640]	; (80045f4 <test_mode+0x2cc>)
 8004374:	2100      	movs	r1, #0
 8004376:	54d1      	strb	r1, [r2, r3]
	for (i = 1; i < MAX_IO_TYPE; i++)
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	3301      	adds	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b06      	cmp	r3, #6
 8004382:	d9f5      	bls.n	8004370 <test_mode+0x48>
	virt_in  [IO_BASIC_FUNC] = TEST_IO;
 8004384:	4b9b      	ldr	r3, [pc, #620]	; (80045f4 <test_mode+0x2cc>)
 8004386:	22f0      	movs	r2, #240	; 0xf0
 8004388:	701a      	strb	r2, [r3, #0]
	heartbeat = 200;
 800438a:	4b9b      	ldr	r3, [pc, #620]	; (80045f8 <test_mode+0x2d0>)
 800438c:	22c8      	movs	r2, #200	; 0xc8
 800438e:	701a      	strb	r2, [r3, #0]
//	TRISCbits.TRISC7	= 0;			//RC7 is output
//	LATCbits.LATC6 = 0;
//	LATCbits.LATC7 = 0;

	//����ģʽĬ��Ϊ3����չ��
	mExtern_Number = 3;
 8004390:	4b9a      	ldr	r3, [pc, #616]	; (80045fc <test_mode+0x2d4>)
 8004392:	2203      	movs	r2, #3
 8004394:	701a      	strb	r2, [r3, #0]
	mInOut_Number = (mExtern_Number*16 + 22) % (MAX_IN + 1);
 8004396:	4b99      	ldr	r3, [pc, #612]	; (80045fc <test_mode+0x2d4>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	f103 0216 	add.w	r2, r3, #22
 80043a0:	4b97      	ldr	r3, [pc, #604]	; (8004600 <test_mode+0x2d8>)
 80043a2:	fb83 1302 	smull	r1, r3, r3, r2
 80043a6:	4413      	add	r3, r2
 80043a8:	1199      	asrs	r1, r3, #6
 80043aa:	17d3      	asrs	r3, r2, #31
 80043ac:	1ac9      	subs	r1, r1, r3
 80043ae:	460b      	mov	r3, r1
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	440b      	add	r3, r1
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	1a5b      	subs	r3, r3, r1
 80043b8:	1ad1      	subs	r1, r2, r3
 80043ba:	b2ca      	uxtb	r2, r1
 80043bc:	4b91      	ldr	r3, [pc, #580]	; (8004604 <test_mode+0x2dc>)
 80043be:	701a      	strb	r2, [r3, #0]
	mMax_InByte = (mInOut_Number >> 3) + 1;
 80043c0:	4b90      	ldr	r3, [pc, #576]	; (8004604 <test_mode+0x2dc>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	4b8e      	ldr	r3, [pc, #568]	; (8004608 <test_mode+0x2e0>)
 80043ce:	701a      	strb	r2, [r3, #0]

	while (1)
		{
			if (!heartbeat)
 80043d0:	4b89      	ldr	r3, [pc, #548]	; (80045f8 <test_mode+0x2d0>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <test_mode+0xb6>
				{
//					TXB1D0    = nmtstate;							/* write data uint8_t for HEARTBEAT		*/
//					TXB1CONbits.TXREQ = 1;							// transmit request
					heartbeat = 200;
 80043d8:	4b87      	ldr	r3, [pc, #540]	; (80045f8 <test_mode+0x2d0>)
 80043da:	22c8      	movs	r2, #200	; 0xc8
 80043dc:	701a      	strb	r2, [r3, #0]
				}
			ClrWdt();
 80043de:	f000 fda7 	bl	8004f30 <ClrWdt>

			if ( Check_InChange(instate, (uint8_t *)in) )					// input state changed
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	4989      	ldr	r1, [pc, #548]	; (800460c <test_mode+0x2e4>)
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fd3b 	bl	8003e64 <Check_InChange>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8085 	beq.w	8004500 <test_mode+0x1d8>
				{
					for(i=0; i<mInOut_Number; i++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]
 80043fa:	e067      	b.n	80044cc <test_mode+0x1a4>
						{
							help = bit_select (instate[i/8], i%8);
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f107 0218 	add.w	r2, r7, #24
 8004406:	4413      	add	r3, r2
 8004408:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800440c:	461a      	mov	r2, r3
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	fa42 f303 	asr.w	r3, r2, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	757b      	strb	r3, [r7, #21]
							if (help != bit_select (in[i/8], i%8))
 8004420:	7d7a      	ldrb	r2, [r7, #21]
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	4b78      	ldr	r3, [pc, #480]	; (800460c <test_mode+0x2e4>)
 800442c:	5c5b      	ldrb	r3, [r3, r1]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	4619      	mov	r1, r3
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	fa41 f303 	asr.w	r3, r1, r3
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	429a      	cmp	r2, r3
 8004442:	d040      	beq.n	80044c6 <test_mode+0x19e>
								{// input has changed
									virt_in[IO_BASIC_FUNC] = CAR_CALL;
 8004444:	4b6b      	ldr	r3, [pc, #428]	; (80045f4 <test_mode+0x2cc>)
 8004446:	2205      	movs	r2, #5
 8004448:	701a      	strb	r2, [r3, #0]
									virt_in[IO_SUB_FUNC] = i + 1;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	3301      	adds	r3, #1
 800444e:	b2da      	uxtb	r2, r3
 8004450:	4b68      	ldr	r3, [pc, #416]	; (80045f4 <test_mode+0x2cc>)
 8004452:	705a      	strb	r2, [r3, #1]
									virt_in[IO_LIFT] = LIFT1;
 8004454:	4b67      	ldr	r3, [pc, #412]	; (80045f4 <test_mode+0x2cc>)
 8004456:	2201      	movs	r2, #1
 8004458:	709a      	strb	r2, [r3, #2]
									virt_in[IO_STATE] = help;
 800445a:	4a66      	ldr	r2, [pc, #408]	; (80045f4 <test_mode+0x2cc>)
 800445c:	7d7b      	ldrb	r3, [r7, #21]
 800445e:	7153      	strb	r3, [r2, #5]

									if (help)
 8004460:	7d7b      	ldrb	r3, [r7, #21]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01a      	beq.n	800449c <test_mode+0x174>
										{
											transmit_in (virt_in);
 8004466:	4863      	ldr	r0, [pc, #396]	; (80045f4 <test_mode+0x2cc>)
 8004468:	f7fd f98e 	bl	8001788 <transmit_in>
											bit_reset(out[i/8], i % 8);
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	b2d8      	uxtb	r0, r3
 8004472:	4602      	mov	r2, r0
 8004474:	4b66      	ldr	r3, [pc, #408]	; (8004610 <test_mode+0x2e8>)
 8004476:	5c9b      	ldrb	r3, [r3, r2]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	b25a      	sxtb	r2, r3
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	b25b      	sxtb	r3, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	b25b      	sxtb	r3, r3
 800448e:	4013      	ands	r3, r2
 8004490:	b25b      	sxtb	r3, r3
 8004492:	4602      	mov	r2, r0
 8004494:	b2d9      	uxtb	r1, r3
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <test_mode+0x2e8>)
 8004498:	5499      	strb	r1, [r3, r2]
 800449a:	e014      	b.n	80044c6 <test_mode+0x19e>
										}
									else
										bit_set(out[i/8], i % 8);
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	08db      	lsrs	r3, r3, #3
 80044a0:	b2d8      	uxtb	r0, r3
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b5a      	ldr	r3, [pc, #360]	; (8004610 <test_mode+0x2e8>)
 80044a6:	5c9b      	ldrb	r3, [r3, r2]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	b25a      	sxtb	r2, r3
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	4602      	mov	r2, r0
 80044c0:	b2d9      	uxtb	r1, r3
 80044c2:	4b53      	ldr	r3, [pc, #332]	; (8004610 <test_mode+0x2e8>)
 80044c4:	5499      	strb	r1, [r3, r2]
					for(i=0; i<mInOut_Number; i++)
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	3301      	adds	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
 80044cc:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <test_mode+0x2dc>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	7dfa      	ldrb	r2, [r7, #23]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d392      	bcc.n	80043fc <test_mode+0xd4>
								}
						}

					for(i=0; i<mMax_InByte; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	75fb      	strb	r3, [r7, #23]
 80044da:	e00c      	b.n	80044f6 <test_mode+0x1ce>
						instate[i] = in[i];
 80044dc:	7dfa      	ldrb	r2, [r7, #23]
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	494a      	ldr	r1, [pc, #296]	; (800460c <test_mode+0x2e4>)
 80044e2:	5c8a      	ldrb	r2, [r1, r2]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f107 0118 	add.w	r1, r7, #24
 80044ea:	440b      	add	r3, r1
 80044ec:	f803 2c10 	strb.w	r2, [r3, #-16]
					for(i=0; i<mMax_InByte; i++)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	3301      	adds	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
 80044f6:	4b44      	ldr	r3, [pc, #272]	; (8004608 <test_mode+0x2e0>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	7dfa      	ldrb	r2, [r7, #23]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3ed      	bcc.n	80044dc <test_mode+0x1b4>
				}
			if (rc)
 8004500:	4b44      	ldr	r3, [pc, #272]	; (8004614 <test_mode+0x2ec>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8139 	beq.w	800477e <test_mode+0x456>
				{
					if (rx [ro][0] == PDO_OUT)
 800450c:	4b42      	ldr	r3, [pc, #264]	; (8004618 <test_mode+0x2f0>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	4619      	mov	r1, r3
 8004512:	4a42      	ldr	r2, [pc, #264]	; (800461c <test_mode+0x2f4>)
 8004514:	460b      	mov	r3, r1
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	f040 80f6 	bne.w	8004714 <test_mode+0x3ec>
						{
							if(rx [ro][2] == CAR_CALL)
 8004528:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <test_mode+0x2f0>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	4a3b      	ldr	r2, [pc, #236]	; (800461c <test_mode+0x2f4>)
 8004530:	460b      	mov	r3, r1
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	3302      	adds	r3, #2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b05      	cmp	r3, #5
 8004542:	d16f      	bne.n	8004624 <test_mode+0x2fc>
								{
									for (i = 0; i < MAX_IO_TYPE; i++) 				// read output function
 8004544:	2300      	movs	r3, #0
 8004546:	75fb      	strb	r3, [r7, #23]
 8004548:	e013      	b.n	8004572 <test_mode+0x24a>
										virt_out [i] = rx[ro][i + 2]; // write to virtual output mapping
 800454a:	4b33      	ldr	r3, [pc, #204]	; (8004618 <test_mode+0x2f0>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461c      	mov	r4, r3
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	1c99      	adds	r1, r3, #2
 8004554:	7dfa      	ldrb	r2, [r7, #23]
 8004556:	4831      	ldr	r0, [pc, #196]	; (800461c <test_mode+0x2f4>)
 8004558:	4623      	mov	r3, r4
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4423      	add	r3, r4
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4403      	add	r3, r0
 8004562:	440b      	add	r3, r1
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2d9      	uxtb	r1, r3
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <test_mode+0x2f8>)
 800456a:	5499      	strb	r1, [r3, r2]
									for (i = 0; i < MAX_IO_TYPE; i++) 				// read output function
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	3301      	adds	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b06      	cmp	r3, #6
 8004576:	d9e8      	bls.n	800454a <test_mode+0x222>
									j = virt_out[IO_SUB_FUNC] - 1;
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <test_mode+0x2f8>)
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	3b01      	subs	r3, #1
 800457e:	753b      	strb	r3, [r7, #20]

									// virtual output matches with physical
									if (virt_out[IO_STATE] & 0x01)
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <test_mode+0x2f8>)
 8004582:	795b      	ldrb	r3, [r3, #5]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <test_mode+0x290>
										{// set acknowledgement
											bit_set (out[j/8], j%8);				// set physical output
 800458c:	7d3b      	ldrb	r3, [r7, #20]
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	b2d8      	uxtb	r0, r3
 8004592:	4602      	mov	r2, r0
 8004594:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <test_mode+0x2e8>)
 8004596:	5c9b      	ldrb	r3, [r3, r2]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	b25a      	sxtb	r2, r3
 800459c:	7d3b      	ldrb	r3, [r7, #20]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	4602      	mov	r2, r0
 80045b0:	b2d9      	uxtb	r1, r3
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <test_mode+0x2e8>)
 80045b4:	5499      	strb	r1, [r3, r2]
 80045b6:	e0cd      	b.n	8004754 <test_mode+0x42c>
										}
									else
										{// reset acknowledgement
											bit_reset (out[j/8], j%8);				// clear physical output
 80045b8:	7d3b      	ldrb	r3, [r7, #20]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	b2d8      	uxtb	r0, r3
 80045be:	4602      	mov	r2, r0
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <test_mode+0x2e8>)
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	b25a      	sxtb	r2, r3
 80045c8:	7d3b      	ldrb	r3, [r7, #20]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	4013      	ands	r3, r2
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	4602      	mov	r2, r0
 80045e0:	b2d9      	uxtb	r1, r3
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <test_mode+0x2e8>)
 80045e4:	5499      	strb	r1, [r3, r2]
 80045e6:	e0b5      	b.n	8004754 <test_mode+0x42c>
 80045e8:	20000614 	.word	0x20000614
 80045ec:	20000630 	.word	0x20000630
 80045f0:	20000c3c 	.word	0x20000c3c
 80045f4:	2000087c 	.word	0x2000087c
 80045f8:	20000c38 	.word	0x20000c38
 80045fc:	20000331 	.word	0x20000331
 8004600:	e6c2b449 	.word	0xe6c2b449
 8004604:	200001ec 	.word	0x200001ec
 8004608:	20000bf0 	.word	0x20000bf0
 800460c:	20000624 	.word	0x20000624
 8004610:	20000328 	.word	0x20000328
 8004614:	200003e0 	.word	0x200003e0
 8004618:	200004ad 	.word	0x200004ad
 800461c:	200003ec 	.word	0x200003ec
 8004620:	20000888 	.word	0x20000888
										}
								}
							else if(rx [ro][2] == ARRIVAL_INDICATION)
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <test_mode+0x4a8>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	4a6a      	ldr	r2, [pc, #424]	; (80047d4 <test_mode+0x4ac>)
 800462c:	460b      	mov	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	3302      	adds	r3, #2
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b44      	cmp	r3, #68	; 0x44
 800463e:	d12f      	bne.n	80046a0 <test_mode+0x378>
								{//��վ��
									if(rx [ro][IO_STATE + 2])
 8004640:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <test_mode+0x4a8>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4619      	mov	r1, r3
 8004646:	4a63      	ldr	r2, [pc, #396]	; (80047d4 <test_mode+0x4ac>)
 8004648:	460b      	mov	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	3307      	adds	r3, #7
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <test_mode+0x356>
										{
											bit_set (out[2], 6);				// set physical output
 800465c:	4b5e      	ldr	r3, [pc, #376]	; (80047d8 <test_mode+0x4b0>)
 800465e:	789b      	ldrb	r3, [r3, #2]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <test_mode+0x4b0>)
 800466a:	709a      	strb	r2, [r3, #2]
											bit_set (out[2], 7);				// set physical output
 800466c:	4b5a      	ldr	r3, [pc, #360]	; (80047d8 <test_mode+0x4b0>)
 800466e:	789b      	ldrb	r3, [r3, #2]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004676:	b2da      	uxtb	r2, r3
 8004678:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <test_mode+0x4b0>)
 800467a:	709a      	strb	r2, [r3, #2]
 800467c:	e06a      	b.n	8004754 <test_mode+0x42c>
//											LATCbits.LATC6 = 1;
//											LATCbits.LATC7 = 1;
										}
									else
										{
											bit_reset (out[2], 6);				// set physical output
 800467e:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <test_mode+0x4b0>)
 8004680:	789b      	ldrb	r3, [r3, #2]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	b2da      	uxtb	r2, r3
 800468a:	4b53      	ldr	r3, [pc, #332]	; (80047d8 <test_mode+0x4b0>)
 800468c:	709a      	strb	r2, [r3, #2]
											bit_reset (out[2], 7);				// set physical output
 800468e:	4b52      	ldr	r3, [pc, #328]	; (80047d8 <test_mode+0x4b0>)
 8004690:	789b      	ldrb	r3, [r3, #2]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4b4f      	ldr	r3, [pc, #316]	; (80047d8 <test_mode+0x4b0>)
 800469c:	709a      	strb	r2, [r3, #2]
 800469e:	e059      	b.n	8004754 <test_mode+0x42c>
//											LATCbits.LATC6 = 0;
//											LATCbits.LATC7 = 0;
										}
								}
							else if((rx [ro][2] == SPECIAL_FUNC) && (rx [ro][3] == BUZZER))
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <test_mode+0x4a8>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	4619      	mov	r1, r3
 80046a6:	4a4b      	ldr	r2, [pc, #300]	; (80047d4 <test_mode+0x4ac>)
 80046a8:	460b      	mov	r3, r1
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	3302      	adds	r3, #2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b0e      	cmp	r3, #14
 80046ba:	d14b      	bne.n	8004754 <test_mode+0x42c>
 80046bc:	4b44      	ldr	r3, [pc, #272]	; (80047d0 <test_mode+0x4a8>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	4619      	mov	r1, r3
 80046c2:	4a44      	ldr	r2, [pc, #272]	; (80047d4 <test_mode+0x4ac>)
 80046c4:	460b      	mov	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	4413      	add	r3, r2
 80046ce:	3303      	adds	r3, #3
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d13d      	bne.n	8004754 <test_mode+0x42c>
								{
									if(rx [ro][IO_STATE + 2])
 80046d8:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <test_mode+0x4a8>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <test_mode+0x4ac>)
 80046e0:	460b      	mov	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	3307      	adds	r3, #7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <test_mode+0x3dc>
										buzzer |= BUZ_WORKING;
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <test_mode+0x4b4>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <test_mode+0x4b4>)
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e027      	b.n	8004754 <test_mode+0x42c>
									else
										buzzer &= ~BUZ_WORKING;
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <test_mode+0x4b4>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4b33      	ldr	r3, [pc, #204]	; (80047dc <test_mode+0x4b4>)
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e01f      	b.n	8004754 <test_mode+0x42c>
								}
						}
					else if ((rx [ro][0] == NMT) && (rx [ro][2] == RESET_NODE))
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <test_mode+0x4a8>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <test_mode+0x4ac>)
 800471c:	460b      	mov	r3, r1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d112      	bne.n	8004754 <test_mode+0x42c>
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <test_mode+0x4a8>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <test_mode+0x4ac>)
 8004736:	460b      	mov	r3, r1
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	3302      	adds	r3, #2
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b81      	cmp	r3, #129	; 0x81
 8004748:	d104      	bne.n	8004754 <test_mode+0x42c>
						{
							merker = 0;
 800474a:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <test_mode+0x4b8>)
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
							HAL_NVIC_SystemReset();
 8004750:	f002 fea9 	bl	80074a6 <HAL_NVIC_SystemReset>
							//Reset();
						}
					if (ro == (RX_SIZE-1))						/* increment RX message read pointer	*/
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <test_mode+0x4a8>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b07      	cmp	r3, #7
 800475a:	d103      	bne.n	8004764 <test_mode+0x43c>
						ro = 0;
 800475c:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <test_mode+0x4a8>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e005      	b.n	8004770 <test_mode+0x448>
					else
						ro++;
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <test_mode+0x4a8>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <test_mode+0x4a8>)
 800476e:	701a      	strb	r2, [r3, #0]
					rc--;										/* decrement RX counter					*/
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <test_mode+0x4bc>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <test_mode+0x4bc>)
 800477c:	701a      	strb	r2, [r3, #0]
				}

			if(bTime.Time_10ms)
 800477e:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <test_mode+0x4c0>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	f43f ae21 	beq.w	80043d0 <test_mode+0xa8>
				{
					ReadInput();		//��ȡ���еİ�ť����
 800478e:	f7ff fbbd 	bl	8003f0c <ReadInput>
					Out_Prog(); 					//�������е����(������ʾ���)
 8004792:	f7ff fc9b 	bl	80040cc <Out_Prog>
					bTime.Time_10ms = 0;
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <test_mode+0x4c0>)
 8004798:	7813      	ldrb	r3, [r2, #0]
 800479a:	f36f 0300 	bfc	r3, #0, #1
 800479e:	7013      	strb	r3, [r2, #0]
					if((++testno % 10) == 0)
 80047a0:	7dbb      	ldrb	r3, [r7, #22]
 80047a2:	3301      	adds	r3, #1
 80047a4:	75bb      	strb	r3, [r7, #22]
 80047a6:	7dba      	ldrb	r2, [r7, #22]
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <test_mode+0x4c4>)
 80047aa:	fba3 1302 	umull	r1, r3, r3, r2
 80047ae:	08d9      	lsrs	r1, r3, #3
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f ae07 	bne.w	80043d0 <test_mode+0xa8>
						{
							pBuf[0] = 0xA0;
 80047c2:	23a0      	movs	r3, #160	; 0xa0
 80047c4:	703b      	strb	r3, [r7, #0]
							pBuf[1]++;
 80047c6:	787b      	ldrb	r3, [r7, #1]
 80047c8:	3301      	adds	r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	707b      	strb	r3, [r7, #1]
			if (!heartbeat)
 80047ce:	e5ff      	b.n	80043d0 <test_mode+0xa8>
 80047d0:	200004ad 	.word	0x200004ad
 80047d4:	200003ec 	.word	0x200003ec
 80047d8:	20000328 	.word	0x20000328
 80047dc:	20000321 	.word	0x20000321
 80047e0:	20000337 	.word	0x20000337
 80047e4:	200003e0 	.word	0x200003e0
 80047e8:	20000620 	.word	0x20000620
 80047ec:	cccccccd 	.word	0xcccccccd

080047f0 <UART_SendBuf>:

#define	_DISPLAY_C_
#include	"AllHeader.h"


void UART_SendBuf(uint8_t* pBuf, uint8_t len){
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
//		-- uart_send_len;
//		bFunc.uart_send_busy = true;
//	}
//	PIE1bits.TXIE		= 1;
//	INTCONbits.GIEL	= 1;
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
	...

08004808 <Display_device>:

void Display_device(void){
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	uint8_t i, checksum;

	checksum = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	71bb      	strb	r3, [r7, #6]
	mDisp_buf[0] = 0xB0;	
 8004812:	4b0e      	ldr	r3, [pc, #56]	; (800484c <Display_device+0x44>)
 8004814:	22b0      	movs	r2, #176	; 0xb0
 8004816:	701a      	strb	r2, [r3, #0]
	for (i=0; i<4; ++i)
 8004818:	2300      	movs	r3, #0
 800481a:	71fb      	strb	r3, [r7, #7]
 800481c:	e008      	b.n	8004830 <Display_device+0x28>
		checksum += mDisp_buf[i];
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <Display_device+0x44>)
 8004822:	5cd2      	ldrb	r2, [r2, r3]
 8004824:	79bb      	ldrb	r3, [r7, #6]
 8004826:	4413      	add	r3, r2
 8004828:	71bb      	strb	r3, [r7, #6]
	for (i=0; i<4; ++i)
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	3301      	adds	r3, #1
 800482e:	71fb      	strb	r3, [r7, #7]
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d9f3      	bls.n	800481e <Display_device+0x16>
	mDisp_buf[4] = checksum;
 8004836:	4a05      	ldr	r2, [pc, #20]	; (800484c <Display_device+0x44>)
 8004838:	79bb      	ldrb	r3, [r7, #6]
 800483a:	7113      	strb	r3, [r2, #4]

	UART_SendBuf(mDisp_buf, 5);
 800483c:	2105      	movs	r1, #5
 800483e:	4803      	ldr	r0, [pc, #12]	; (800484c <Display_device+0x44>)
 8004840:	f7ff ffd6 	bl	80047f0 <UART_SendBuf>
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	200005fc 	.word	0x200005fc

08004850 <Arrow_Status>:

void Arrow_Status(void){
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
	uint8_t buf[5], checksum = 0, i;
 8004856:	2300      	movs	r3, #0
 8004858:	71fb      	strb	r3, [r7, #7]

	buf[0] = 0xA0;
 800485a:	23a0      	movs	r3, #160	; 0xa0
 800485c:	703b      	strb	r3, [r7, #0]
	buf[1] = display[BUF_MESSAGE];
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <Arrow_Status+0x6c>)
 8004860:	78db      	ldrb	r3, [r3, #3]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	70bb      	strb	r3, [r7, #2]
	buf[3] = mArrow_State % 3;
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <Arrow_Status+0x70>)
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <Arrow_Status+0x74>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	0859      	lsrs	r1, r3, #1
 8004876:	460b      	mov	r3, r1
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	440b      	add	r3, r1
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<4; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	71bb      	strb	r3, [r7, #6]
 8004886:	e00b      	b.n	80048a0 <Arrow_Status+0x50>
		checksum += buf[i];
 8004888:	79bb      	ldrb	r3, [r7, #6]
 800488a:	f107 0208 	add.w	r2, r7, #8
 800488e:	4413      	add	r3, r2
 8004890:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	4413      	add	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<4; i++)
 800489a:	79bb      	ldrb	r3, [r7, #6]
 800489c:	3301      	adds	r3, #1
 800489e:	71bb      	strb	r3, [r7, #6]
 80048a0:	79bb      	ldrb	r3, [r7, #6]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d9f0      	bls.n	8004888 <Arrow_Status+0x38>
	buf[4] = checksum;
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	713b      	strb	r3, [r7, #4]
	UART_SendBuf(buf, 5);
 80048aa:	463b      	mov	r3, r7
 80048ac:	2105      	movs	r1, #5
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff ff9e 	bl	80047f0 <UART_SendBuf>
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	200005f8 	.word	0x200005f8
 80048c0:	20000604 	.word	0x20000604
 80048c4:	aaaaaaab 	.word	0xaaaaaaab

080048c8 <Flash_Unlock>:
{
	HAL_FLASH_Lock();
}

void Flash_Unlock()
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80048cc:	f002 fe6c 	bl	80075a8 <HAL_FLASH_Unlock>
}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <Flash_Erase>:

void Flash_Erase(uint32_t addr)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  while((FLASH->SR&FLASH_SR_BSY));
 80048dc:	bf00      	nop
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <Flash_Erase+0x64>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f9      	bne.n	80048de <Flash_Erase+0xa>
  FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <Flash_Erase+0x64>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <Flash_Erase+0x64>)
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	6113      	str	r3, [r2, #16]
  FLASH->AR = addr; //Page Address
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <Flash_Erase+0x64>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6153      	str	r3, [r2, #20]
  FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <Flash_Erase+0x64>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <Flash_Erase+0x64>)
 8004902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004906:	6113      	str	r3, [r2, #16]
  while((FLASH->SR&FLASH_SR_BSY));
 8004908:	bf00      	nop
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <Flash_Erase+0x64>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f9      	bne.n	800490a <Flash_Erase+0x36>
	FLASH->CR &= ~FLASH_SR_BSY;
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <Flash_Erase+0x64>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <Flash_Erase+0x64>)
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	6113      	str	r3, [r2, #16]
  FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <Flash_Erase+0x64>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4a04      	ldr	r2, [pc, #16]	; (8004938 <Flash_Erase+0x64>)
 8004928:	f023 0302 	bic.w	r3, r3, #2
 800492c:	6113      	str	r3, [r2, #16]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40022000 	.word	0x40022000

0800493c <Flash_Read_Int>:
	FLASH->CR &= ~FLASH_CR_PG;
	Flash_Lock();
}

uint16_t Flash_Read_Int(uint32_t addr)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	uint16_t* val = (uint16_t *)addr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]
	return *val;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	881b      	ldrh	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
	...

08004958 <Flash_Write_Bytes>:
  FLASH->CR &= ~FLASH_CR_PG;
  FLASH->CR |= FLASH_CR_LOCK;
}

void Flash_Write_Bytes(uint32_t addr, uint8_t* data,uint16_t len)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  Flash_Unlock();
 8004966:	f7ff ffaf 	bl	80048c8 <Flash_Unlock>
  Flash_Erase(addr);
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ffb2 	bl	80048d4 <Flash_Erase>
  FLASH->CR |= FLASH_CR_PG;
 8004970:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6113      	str	r3, [r2, #16]
	uint16_t var = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	827b      	strh	r3, [r7, #18]

  for(int i=0; i<len; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e012      	b.n	80049ac <Flash_Write_Bytes+0x54>
  {
	  var = (uint16_t)data[i];
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	4413      	add	r3, r2
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	827b      	strh	r3, [r7, #18]
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (addr + i*2), var);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	461a      	mov	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	18d1      	adds	r1, r2, r3
 800499a:	8a7a      	ldrh	r2, [r7, #18]
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	2001      	movs	r0, #1
 80049a2:	f002 fd91 	bl	80074c8 <HAL_FLASH_Program>
  for(int i=0; i<len; i++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	dbe8      	blt.n	8004986 <Flash_Write_Bytes+0x2e>
//    while(FLASH->SR &  FLASH_SR_BSY)
//    {}
//
//    *(__IO uint16_t*)(addr + i*2) = var;
  }
	while((FLASH->SR&FLASH_SR_BSY)){};
 80049b4:	bf00      	nop
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f9      	bne.n	80049b6 <Flash_Write_Bytes+0x5e>
  FLASH->CR &= ~FLASH_CR_PG;
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_LOCK;
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <Flash_Write_Bytes+0x8c>)
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	6113      	str	r3, [r2, #16]
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40022000 	.word	0x40022000

080049e8 <Flash_Read_Bytes>:
void Flash_Read_Bytes(uint8_t* dataOut, uint32_t addr1, uint16_t len)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]

	for(int i = 0; i < len; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e011      	b.n	8004a20 <Flash_Read_Bytes+0x38>
	{
		dataOut[i] = Flash_Read_Int(addr1 + (uint32_t)(i*2));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	461a      	mov	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff98 	bl	800493c <Flash_Read_Int>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4619      	mov	r1, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	b2ca      	uxtb	r2, r1
 8004a18:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	dbe9      	blt.n	80049fc <Flash_Read_Bytes+0x14>
	}
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_TIM_PeriodElapsedCallback>:
uint8_t Callstatus_old[8] = {0,0,0,0,0,0,0,0};
uint8_t Arrow_state = 0;
extern _Message User_Message ;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]

	static uint32_t time0_cnt = 0;
	static uint32_t reloadtime =0;
	if(htim->Instance == htim1.Instance)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b87      	ldr	r3, [pc, #540]	; (8004c64 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d161      	bne.n	8004b10 <HAL_TIM_PeriodElapsedCallback+0xdc>
	{
		bTime.Time_10ms = 1;
 8004a4c:	4a86      	ldr	r2, [pc, #536]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004a4e:	7813      	ldrb	r3, [r2, #0]
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	7013      	strb	r3, [r2, #0]
		time1_cnt++;
 8004a56:	4b85      	ldr	r3, [pc, #532]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4a83      	ldr	r2, [pc, #524]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004a5e:	6013      	str	r3, [r2, #0]
		time10ms = HAL_GetTick() - reloadtime;
 8004a60:	f001 fd9e 	bl	80065a0 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b82      	ldr	r3, [pc, #520]	; (8004c70 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	4a81      	ldr	r2, [pc, #516]	; (8004c74 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004a6e:	6013      	str	r3, [r2, #0]
		reloadtime = HAL_GetTick();
 8004a70:	f001 fd96 	bl	80065a0 <HAL_GetTick>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4a7e      	ldr	r2, [pc, #504]	; (8004c70 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8004a78:	6013      	str	r3, [r2, #0]
		Keytimout --;
 8004a7a:	4b7f      	ldr	r3, [pc, #508]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	4a7d      	ldr	r2, [pc, #500]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004a82:	6013      	str	r3, [r2, #0]
		LedOfftimout --;
 8004a84:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004a8c:	6013      	str	r3, [r2, #0]
		if((time1_cnt % 10) == 0)
 8004a8e:	4b77      	ldr	r3, [pc, #476]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004a94:	fba3 2301 	umull	r2, r3, r3, r1
 8004a98:	08da      	lsrs	r2, r3, #3
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	1aca      	subs	r2, r1, r3
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d120      	bne.n	8004aea <HAL_TIM_PeriodElapsedCallback+0xb6>
			{//100ms
				bTime.Time_100ms = 1;
 8004aa8:	4a6f      	ldr	r2, [pc, #444]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004aaa:	7813      	ldrb	r3, [r2, #0]
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	7013      	strb	r3, [r2, #0]
				if (bBusOffTimer)
 8004ab2:	4b74      	ldr	r3, [pc, #464]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d006      	beq.n	8004ac8 <HAL_TIM_PeriodElapsedCallback+0x94>
					-- bBusOffTimer;
 8004aba:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b70      	ldr	r3, [pc, #448]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e010      	b.n	8004aea <HAL_TIM_PeriodElapsedCallback+0xb6>
				else
					{
						if(bFunc.buz_set_id)
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_TIM_PeriodElapsedCallback+0xb6>
							{
								Disable_BUZ();
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2101      	movs	r1, #1
 8004ada:	486c      	ldr	r0, [pc, #432]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004adc:	f002 ffd7 	bl	8007a8e <HAL_GPIO_WritePin>
								bFunc.buz_set_id = 0;
 8004ae0:	4a69      	ldr	r2, [pc, #420]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004ae2:	7813      	ldrb	r3, [r2, #0]
 8004ae4:	f36f 0300 	bfc	r3, #0, #1
 8004ae8:	7013      	strb	r3, [r2, #0]
							}
					}
			}
		if((time1_cnt % 200) == 0)
 8004aea:	4b60      	ldr	r3, [pc, #384]	; (8004c6c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	21c8      	movs	r1, #200	; 0xc8
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 8123 	bne.w	8004d4a <HAL_TIM_PeriodElapsedCallback+0x316>
			bTime.Time_2s = 1;
 8004b04:	4a58      	ldr	r2, [pc, #352]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004b06:	7813      	ldrb	r3, [r2, #0]
 8004b08:	f043 0308 	orr.w	r3, r3, #8
 8004b0c:	7013      	strb	r3, [r2, #0]
										}
								}
						}

	}
}
 8004b0e:	e11c      	b.n	8004d4a <HAL_TIM_PeriodElapsedCallback+0x316>
	else if(htim->Instance == htim2.Instance)  // 500ms
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	f040 8116 	bne.w	8004d4a <HAL_TIM_PeriodElapsedCallback+0x316>
					bTime.Time_500ms = true;
 8004b1e:	4a52      	ldr	r2, [pc, #328]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004b20:	7813      	ldrb	r3, [r2, #0]
 8004b22:	f043 0304 	orr.w	r3, r3, #4
 8004b26:	7013      	strb	r3, [r2, #0]
					bTime.flash_floor_500ms = true;
 8004b28:	4a4f      	ldr	r2, [pc, #316]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004b2a:	7813      	ldrb	r3, [r2, #0]
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b30:	7013      	strb	r3, [r2, #0]
					time0_cnt++;
 8004b32:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	4a57      	ldr	r2, [pc, #348]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004b3a:	6013      	str	r3, [r2, #0]
					if (!nmtstate)						// only during Boot up
 8004b3c:	4b57      	ldr	r3, [pc, #348]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_TIM_PeriodElapsedCallback+0x128>
							if (nmtwait)					// waiting time for first heartbeat
 8004b44:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <HAL_TIM_PeriodElapsedCallback+0x128>
								nmtwait--;
 8004b4e:	4b54      	ldr	r3, [pc, #336]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b51      	ldr	r3, [pc, #324]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004b5a:	701a      	strb	r2, [r3, #0]
					if (heartbeat)						// decrement heartbeat timer
 8004b5c:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_TIM_PeriodElapsedCallback+0x13c>
						heartbeat--;
 8004b64:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004b6e:	701a      	strb	r2, [r3, #0]
					if (sdo_timer)			// check for SDO transfer time out
 8004b70:	4b4d      	ldr	r3, [pc, #308]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_TIM_PeriodElapsedCallback+0x150>
						sdo_timer--;
 8004b78:	4b4b      	ldr	r3, [pc, #300]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004b82:	701a      	strb	r2, [r3, #0]
					if (hsetime)
 8004b84:	4b49      	ldr	r3, [pc, #292]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d010      	beq.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0x17c>
							hsetime--;
 8004b8e:	4b47      	ldr	r3, [pc, #284]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	4b44      	ldr	r3, [pc, #272]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004b9a:	701a      	strb	r2, [r3, #0]
							if (!hsetime) 		// HSE heartbeat time out
 8004b9c:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0x17c>
								bFunc.hsecheck = true; 	// HSE check necessary
 8004ba6:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004ba8:	7813      	ldrb	r3, [r2, #0]
 8004baa:	f043 0320 	orr.w	r3, r3, #32
 8004bae:	7013      	strb	r3, [r2, #0]
					if((time0_cnt % 10) == 0)
 8004bb0:	4b39      	ldr	r3, [pc, #228]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bba:	08da      	lsrs	r2, r3, #3
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	1aca      	subs	r2, r1, r3
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	d114      	bne.n	8004bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>
						bTime.Time_5s = 1;
 8004bca:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004bcc:	7813      	ldrb	r3, [r2, #0]
 8004bce:	f043 0310 	orr.w	r3, r3, #16
 8004bd2:	7013      	strb	r3, [r2, #0]
						if((time0_cnt % 20) == 0)
 8004bd4:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004bd6:	6819      	ldr	r1, [r3, #0]
 8004bd8:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004bda:	fba3 2301 	umull	r2, r3, r3, r1
 8004bde:	091a      	lsrs	r2, r3, #4
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	1aca      	subs	r2, r1, r3
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_TIM_PeriodElapsedCallback+0x1c0>
							Time10s = 1;
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
					if(att_alarm_timer)
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d026      	beq.n	8004c4a <HAL_TIM_PeriodElapsedCallback+0x216>
							--att_alarm_timer;
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c06:	701a      	strb	r2, [r3, #0]
							if(!att_alarm_timer)
 8004c08:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d11c      	bne.n	8004c4a <HAL_TIM_PeriodElapsedCallback+0x216>
									if(bTime.Time_alarm_fg)
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <HAL_TIM_PeriodElapsedCallback+0x1f8>
										buzzer &= ~BUZ_WORKING;
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004c2a:	701a      	strb	r2, [r3, #0]
									bFunc.buz_state = !bFunc.buz_state;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2d9      	uxtb	r1, r3
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004c42:	7813      	ldrb	r3, [r2, #0]
 8004c44:	f361 0341 	bfi	r3, r1, #1, #1
 8004c48:	7013      	strb	r3, [r2, #0]
					if(buz_alarm_totaltimer)
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_TIM_PeriodElapsedCallback+0x22a>
						--buz_alarm_totaltimer;
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004c5c:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < mInOut_Number; i++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	e06d      	b.n	8004d40 <HAL_TIM_PeriodElapsedCallback+0x30c>
 8004c64:	20000b28 	.word	0x20000b28
 8004c68:	20000620 	.word	0x20000620
 8004c6c:	200003b4 	.word	0x200003b4
 8004c70:	200003cc 	.word	0x200003cc
 8004c74:	20000b20 	.word	0x20000b20
 8004c78:	200001f0 	.word	0x200001f0
 8004c7c:	200001f4 	.word	0x200001f4
 8004c80:	cccccccd 	.word	0xcccccccd
 8004c84:	20000333 	.word	0x20000333
 8004c88:	20000ba4 	.word	0x20000ba4
 8004c8c:	40010800 	.word	0x40010800
 8004c90:	51eb851f 	.word	0x51eb851f
 8004c94:	20000ba8 	.word	0x20000ba8
 8004c98:	200003d0 	.word	0x200003d0
 8004c9c:	20000b24 	.word	0x20000b24
 8004ca0:	20000b85 	.word	0x20000b85
 8004ca4:	20000c38 	.word	0x20000c38
 8004ca8:	20000325 	.word	0x20000325
 8004cac:	20000b18 	.word	0x20000b18
 8004cb0:	20000208 	.word	0x20000208
 8004cb4:	20000334 	.word	0x20000334
 8004cb8:	20000321 	.word	0x20000321
 8004cbc:	20000336 	.word	0x20000336
							if (outpar [i][IO_BASIC_FUNC] == ARRIVAL_INDICATION)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004cc4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004cc8:	2b44      	cmp	r3, #68	; 0x44
 8004cca:	d136      	bne.n	8004d3a <HAL_TIM_PeriodElapsedCallback+0x306>
							if (outpar [i][IO_ACK])
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	79db      	ldrb	r3, [r3, #7]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d02f      	beq.n	8004d3a <HAL_TIM_PeriodElapsedCallback+0x306>
									outpar [i][IO_ACK]--; 			//decrement time counter
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	491d      	ldr	r1, [pc, #116]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004cde:	00d3      	lsls	r3, r2, #3
 8004ce0:	440b      	add	r3, r1
 8004ce2:	79db      	ldrb	r3, [r3, #7]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b2d8      	uxtb	r0, r3
 8004ce8:	491a      	ldr	r1, [pc, #104]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004cea:	00d3      	lsls	r3, r2, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	4602      	mov	r2, r0
 8004cf0:	71da      	strb	r2, [r3, #7]
									if (!outpar [i][IO_ACK])		//time out
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	79db      	ldrb	r3, [r3, #7]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11c      	bne.n	8004d3a <HAL_TIM_PeriodElapsedCallback+0x306>
											bit_reset (out[i/8], i % 8);			// switch off output
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	08db      	lsrs	r3, r3, #3
 8004d04:	b2d8      	uxtb	r0, r3
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	b25a      	sxtb	r2, r3
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	4013      	ands	r3, r2
 8004d24:	b25b      	sxtb	r3, r3
 8004d26:	4602      	mov	r2, r0
 8004d28:	b2d9      	uxtb	r1, r3
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004d2c:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < mInOut_Number; i++)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d3ba      	bcc.n	8004cc0 <HAL_TIM_PeriodElapsedCallback+0x28c>
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200008a0 	.word	0x200008a0
 8004d58:	20000328 	.word	0x20000328
 8004d5c:	200001ec 	.word	0x200001ec

08004d60 <check_hse>:
void check_hse (uint8_t mode){
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
	uint8_t help;
	uint8_t i;

	help = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
	if (!hsetime)								/* 5s no heartbeat from HSE				*/
 8004d6e:	4b69      	ldr	r3, [pc, #420]	; (8004f14 <check_hse+0x1b4>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d122      	bne.n	8004dbe <check_hse+0x5e>
		{
			help = 1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
			hsetime  = HSETIME;						/* restart HSE heartbeat timer			*/
 8004d7c:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <check_hse+0x1b4>)
 8004d7e:	2214      	movs	r2, #20
 8004d80:	701a      	strb	r2, [r3, #0]
			display[BUF_TEN] = 'N';			//A_BETR;
 8004d82:	4b65      	ldr	r3, [pc, #404]	; (8004f18 <check_hse+0x1b8>)
 8004d84:	224e      	movs	r2, #78	; 0x4e
 8004d86:	701a      	strb	r2, [r3, #0]
			display[BUF_UNIT] = 'C';		//A_BETR;
 8004d88:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <check_hse+0x1b8>)
 8004d8a:	2243      	movs	r2, #67	; 0x43
 8004d8c:	705a      	strb	r2, [r3, #1]
			display[BUF_ARROW] = 0;
 8004d8e:	4b62      	ldr	r3, [pc, #392]	; (8004f18 <check_hse+0x1b8>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	709a      	strb	r2, [r3, #2]
			display[BUF_MESSAGE] = 0;
 8004d94:	4b60      	ldr	r3, [pc, #384]	; (8004f18 <check_hse+0x1b8>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	70da      	strb	r2, [r3, #3]
			hse_heartbeat = 0;
 8004d9a:	4b60      	ldr	r3, [pc, #384]	; (8004f1c <check_hse+0x1bc>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
			mDisp_buf[BUF_TEN + 1] = display[BUF_TEN];
 8004da0:	4b5d      	ldr	r3, [pc, #372]	; (8004f18 <check_hse+0x1b8>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	4b5e      	ldr	r3, [pc, #376]	; (8004f20 <check_hse+0x1c0>)
 8004da8:	705a      	strb	r2, [r3, #1]
			mDisp_buf[BUF_UNIT + 1] = display[BUF_UNIT];
 8004daa:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <check_hse+0x1b8>)
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	4b5b      	ldr	r3, [pc, #364]	; (8004f20 <check_hse+0x1c0>)
 8004db2:	709a      	strb	r2, [r3, #2]
			mDisp_buf[BUF_ARROW + 1] = display[BUF_ARROW];
 8004db4:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <check_hse+0x1b8>)
 8004db6:	789b      	ldrb	r3, [r3, #2]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4b59      	ldr	r3, [pc, #356]	; (8004f20 <check_hse+0x1c0>)
 8004dbc:	70da      	strb	r2, [r3, #3]
		}

	if (help && mode)											/* one or more HSE not available		*/
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80a2 	beq.w	8004f0a <check_hse+0x1aa>
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 809e 	beq.w	8004f0a <check_hse+0x1aa>
		{
			for (i = 0; i < mInOut_Number; i++)					/* check all call indications			*/
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73bb      	strb	r3, [r7, #14]
 8004dd2:	e094      	b.n	8004efe <check_hse+0x19e>
				{
					if (check_for_call (outpar [i][IO_BASIC_FUNC]))
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	4a53      	ldr	r2, [pc, #332]	; (8004f24 <check_hse+0x1c4>)
 8004dd8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fc fdc5 	bl	800196c <check_for_call>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d037      	beq.n	8004e58 <check_hse+0xf8>
						{											/* output is call acknowledgement		*/
				  		outpar [i][IO_ACK] &= ~help;
 8004de8:	7bbb      	ldrb	r3, [r7, #14]
 8004dea:	4a4e      	ldr	r2, [pc, #312]	; (8004f24 <check_hse+0x1c4>)
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	79db      	ldrb	r3, [r3, #7]
 8004df2:	b25a      	sxtb	r2, r3
 8004df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b25a      	sxtb	r2, r3
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	b2d1      	uxtb	r1, r2
 8004e04:	4a47      	ldr	r2, [pc, #284]	; (8004f24 <check_hse+0x1c4>)
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4413      	add	r3, r2
 8004e0a:	460a      	mov	r2, r1
 8004e0c:	71da      	strb	r2, [r3, #7]
							if (!outpar [i][IO_ACK])				/* all acknowledgements cancelled		*/
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	4a44      	ldr	r2, [pc, #272]	; (8004f24 <check_hse+0x1c4>)
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	79db      	ldrb	r3, [r3, #7]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d16d      	bne.n	8004ef8 <check_hse+0x198>
								{
									bit_reset (out[i/8], i%8);					/* clear output							*/
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	b2d8      	uxtb	r0, r3
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <check_hse+0x1c8>)
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	b25a      	sxtb	r2, r3
 8004e2c:	7bbb      	ldrb	r3, [r7, #14]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	b25b      	sxtb	r3, r3
 8004e3e:	4013      	ands	r3, r2
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	4602      	mov	r2, r0
 8004e44:	b2d9      	uxtb	r1, r3
 8004e46:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <check_hse+0x1c8>)
 8004e48:	5499      	strb	r1, [r3, r2]
									outpar [i][IO_STATE] = 0;
 8004e4a:	7bbb      	ldrb	r3, [r7, #14]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	; (8004f24 <check_hse+0x1c4>)
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	2200      	movs	r2, #0
 8004e54:	715a      	strb	r2, [r3, #5]
 8004e56:	e04f      	b.n	8004ef8 <check_hse+0x198>
								}
						}
					else										/* all other output functions			*/
						{
							if (outpar [i][IO_LIFT] & help)			/* output for this lift					*/
 8004e58:	7bbb      	ldrb	r3, [r7, #14]
 8004e5a:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <check_hse+0x1c4>)
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	789a      	ldrb	r2, [r3, #2]
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	4013      	ands	r3, r2
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d045      	beq.n	8004ef8 <check_hse+0x198>
								{
									if ((outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC) &&
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <check_hse+0x1c4>)
 8004e70:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004e74:	2b0e      	cmp	r3, #14
 8004e76:	d122      	bne.n	8004ebe <check_hse+0x15e>
									    (outpar [i][IO_SUB_FUNC]	  == OUT_OF_ORDER))
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <check_hse+0x1c4>)
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	785b      	ldrb	r3, [r3, #1]
									if ((outpar [i][IO_BASIC_FUNC] == SPECIAL_FUNC) &&
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d11b      	bne.n	8004ebe <check_hse+0x15e>
										{
											bit_set (out[i/8], i%8);				/* set physical output					*/
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	b2d8      	uxtb	r0, r3
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <check_hse+0x1c8>)
 8004e90:	5c9b      	ldrb	r3, [r3, r2]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	b25a      	sxtb	r2, r3
 8004e96:	7bbb      	ldrb	r3, [r7, #14]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	b2d9      	uxtb	r1, r3
 8004eac:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <check_hse+0x1c8>)
 8004eae:	5499      	strb	r1, [r3, r2]
					 						outpar [i][IO_STATE] = 1;
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <check_hse+0x1c4>)
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	2201      	movs	r2, #1
 8004eba:	715a      	strb	r2, [r3, #5]
 8004ebc:	e01c      	b.n	8004ef8 <check_hse+0x198>
										}
									else
										{
											bit_reset (out[i/8], i%8);				/* reset physical output				*/
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	b2d8      	uxtb	r0, r3
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <check_hse+0x1c8>)
 8004ec8:	5c9b      	ldrb	r3, [r3, r2]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	b25a      	sxtb	r2, r3
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	b25b      	sxtb	r3, r3
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	b2d9      	uxtb	r1, r3
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <check_hse+0x1c8>)
 8004eea:	5499      	strb	r1, [r3, r2]
											outpar [i][IO_STATE] = 0;
 8004eec:	7bbb      	ldrb	r3, [r7, #14]
 8004eee:	4a0d      	ldr	r2, [pc, #52]	; (8004f24 <check_hse+0x1c4>)
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < mInOut_Number; i++)					/* check all call indications			*/
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	3301      	adds	r3, #1
 8004efc:	73bb      	strb	r3, [r7, #14]
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <check_hse+0x1cc>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	7bba      	ldrb	r2, [r7, #14]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	f4ff af65 	bcc.w	8004dd4 <check_hse+0x74>
										}
								}
						}
				}
		}
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000b18 	.word	0x20000b18
 8004f18:	200005f8 	.word	0x200005f8
 8004f1c:	20000332 	.word	0x20000332
 8004f20:	200005fc 	.word	0x200005fc
 8004f24:	200008a0 	.word	0x200008a0
 8004f28:	20000328 	.word	0x20000328
 8004f2c:	200001ec 	.word	0x200001ec

08004f30 <ClrWdt>:
void ClrWdt (void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
#if ! USER_DEBUG
	HAL_IWDG_Refresh(&hiwdg);
 8004f34:	4803      	ldr	r0, [pc, #12]	; (8004f44 <ClrWdt+0x14>)
 8004f36:	f002 fe04 	bl	8007b42 <HAL_IWDG_Refresh>
	HAL_WWDG_Refresh(&hwwdg);
 8004f3a:	4803      	ldr	r0, [pc, #12]	; (8004f48 <ClrWdt+0x18>)
 8004f3c:	f004 f800 	bl	8008f40 <HAL_WWDG_Refresh>
#endif
}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000640 	.word	0x20000640
 8004f48:	20000b70 	.word	0x20000b70

08004f4c <Find_target_Floor>:
int Find_target_Floor(int len)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	if(len ==1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <Find_target_Floor+0x1e>
	{
		virt_key[1] = virt_key[0];
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <Find_target_Floor+0x80>)
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <Find_target_Floor+0x80>)
 8004f60:	705a      	strb	r2, [r3, #1]
		virt_key[0] = 0;
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <Find_target_Floor+0x80>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e006      	b.n	8004f78 <Find_target_Floor+0x2c>
	}
	else
	{
		if(virt_key[0] == '0')
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <Find_target_Floor+0x80>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d102      	bne.n	8004f78 <Find_target_Floor+0x2c>
			virt_key[0] =0;
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <Find_target_Floor+0x80>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
	}
	for(int icc=0;icc<TOTAL_FLOOR;icc++)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e01c      	b.n	8004fb8 <Find_target_Floor+0x6c>
	{
		if((FloorName[icc][0] == virt_key[0]) && (FloorName[icc][1] == virt_key[1]) )
 8004f7e:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <Find_target_Floor+0x84>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <Find_target_Floor+0x80>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d111      	bne.n	8004fb2 <Find_target_Floor+0x66>
 8004f8e:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <Find_target_Floor+0x84>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	785a      	ldrb	r2, [r3, #1]
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <Find_target_Floor+0x80>)
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d108      	bne.n	8004fb2 <Find_target_Floor+0x66>
		{
			targetfloor = icc+1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <Find_target_Floor+0x88>)
 8004faa:	701a      	strb	r2, [r3, #0]
			return targetfloor;
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <Find_target_Floor+0x88>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	e007      	b.n	8004fc2 <Find_target_Floor+0x76>
	for(int icc=0;icc<TOTAL_FLOOR;icc++)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b36      	cmp	r3, #54	; 0x36
 8004fbc:	dddf      	ble.n	8004f7e <Find_target_Floor+0x32>
		}
	}
	return -1;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	20000340 	.word	0x20000340
 8004fd0:	20000344 	.word	0x20000344
 8004fd4:	200003b2 	.word	0x200003b2

08004fd8 <Flash_Clear_Floor_Name>:

uint8_t Clear_Flash =0;
void Flash_Clear_Floor_Name()
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
	memset(FloorName,'+',sizeof(FloorName));
 8004fdc:	226e      	movs	r2, #110	; 0x6e
 8004fde:	212b      	movs	r1, #43	; 0x2b
 8004fe0:	4804      	ldr	r0, [pc, #16]	; (8004ff4 <Flash_Clear_Floor_Name+0x1c>)
 8004fe2:	f003 fff5 	bl	8008fd0 <memset>
	Flash_Write_Bytes(DATA_START_ADDRESS,(uint8_t *)&FloorName,  sizeof(FloorName));
 8004fe6:	226e      	movs	r2, #110	; 0x6e
 8004fe8:	4902      	ldr	r1, [pc, #8]	; (8004ff4 <Flash_Clear_Floor_Name+0x1c>)
 8004fea:	4803      	ldr	r0, [pc, #12]	; (8004ff8 <Flash_Clear_Floor_Name+0x20>)
 8004fec:	f7ff fcb4 	bl	8004958 <Flash_Write_Bytes>
}
 8004ff0:	bf00      	nop
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000344 	.word	0x20000344
 8004ff8:	0801fc00 	.word	0x0801fc00

08004ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b095      	sub	sp, #84	; 0x54
 8005000:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005002:	f001 fa75 	bl	80064f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005006:	f000 fdf7 	bl	8005bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800500a:	f000 ff9f 	bl	8005f4c <MX_GPIO_Init>
  MX_CAN_Init();
 800500e:	f000 fe3b 	bl	8005c88 <MX_CAN_Init>
  MX_TIM1_Init();
 8005012:	f000 fe89 	bl	8005d28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8005016:	f000 fed7 	bl	8005dc8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800501a:	f000 ff23 	bl	8005e64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800501e:	f000 ff4b 	bl	8005eb8 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8005022:	f000 fe67 	bl	8005cf4 <MX_IWDG_Init>
  MX_WWDG_Init();
 8005026:	f000 ff71 	bl	8005f0c <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  ClrWdt();							//reset watchdog timer
 800502a:	f7ff ff81 	bl	8004f30 <ClrWdt>
  Flash_Read_Bytes((uint8_t *)&FloorName, DATA_START_ADDRESS, sizeof(FloorName));
 800502e:	226e      	movs	r2, #110	; 0x6e
 8005030:	4988      	ldr	r1, [pc, #544]	; (8005254 <main+0x258>)
 8005032:	4889      	ldr	r0, [pc, #548]	; (8005258 <main+0x25c>)
 8005034:	f7ff fcd8 	bl	80049e8 <Flash_Read_Bytes>
  __HAL_DBGMCU_FREEZE_WWDG();
 8005038:	4b88      	ldr	r3, [pc, #544]	; (800525c <main+0x260>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a87      	ldr	r2, [pc, #540]	; (800525c <main+0x260>)
 800503e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005042:	6053      	str	r3, [r2, #4]
  __HAL_DBGMCU_FREEZE_IWDG();
 8005044:	4b85      	ldr	r3, [pc, #532]	; (800525c <main+0x260>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a84      	ldr	r2, [pc, #528]	; (800525c <main+0x260>)
 800504a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504e:	6053      	str	r3, [r2, #4]
 	//Flash_ReadChar(data,DATA_START_ADDRESS,LENGTH_START_ADDRESS);

  mMax_InByte =3;
 8005050:	4b83      	ldr	r3, [pc, #524]	; (8005260 <main+0x264>)
 8005052:	2203      	movs	r2, #3
 8005054:	701a      	strb	r2, [r3, #0]
  memset((void*)out,0xFF,8);
 8005056:	2208      	movs	r2, #8
 8005058:	21ff      	movs	r1, #255	; 0xff
 800505a:	4882      	ldr	r0, [pc, #520]	; (8005264 <main+0x268>)
 800505c:	f003 ffb8 	bl	8008fd0 <memset>
  Led_virt = 0xFFFF;
 8005060:	4b81      	ldr	r3, [pc, #516]	; (8005268 <main+0x26c>)
 8005062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005066:	801a      	strh	r2, [r3, #0]
  Out_Prog();
 8005068:	f7ff f830 	bl	80040cc <Out_Prog>
  for(int ct =0;ct<200;ct++)
 800506c:	2300      	movs	r3, #0
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005070:	e007      	b.n	8005082 <main+0x86>
  {
		  ClrWdt ();
 8005072:	f7ff ff5d 	bl	8004f30 <ClrWdt>
		  HAL_Delay(1);
 8005076:	2001      	movs	r0, #1
 8005078:	f001 fa9c 	bl	80065b4 <HAL_Delay>
  for(int ct =0;ct<200;ct++)
 800507c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507e:	3301      	adds	r3, #1
 8005080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005084:	2bc7      	cmp	r3, #199	; 0xc7
 8005086:	ddf4      	ble.n	8005072 <main+0x76>
  }

  memset((void*)out,0x00,8);
 8005088:	2208      	movs	r2, #8
 800508a:	2100      	movs	r1, #0
 800508c:	4875      	ldr	r0, [pc, #468]	; (8005264 <main+0x268>)
 800508e:	f003 ff9f 	bl	8008fd0 <memset>
  Led_virt = 0x00;
 8005092:	4b75      	ldr	r3, [pc, #468]	; (8005268 <main+0x26c>)
 8005094:	2200      	movs	r2, #0
 8005096:	801a      	strh	r2, [r3, #0]
  Out_Prog();
 8005098:	f7ff f818 	bl	80040cc <Out_Prog>
  	uint8_t i, j;

	if (merker == RC_MERKER)									// restart by after Rx counter error
 800509c:	4b73      	ldr	r3, [pc, #460]	; (800526c <main+0x270>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b5a      	cmp	r3, #90	; 0x5a
 80050a2:	d106      	bne.n	80050b2 <main+0xb6>
		{
			errorregister |= ER_COMMUNICATION;						// set error bits
 80050a4:	4b72      	ldr	r3, [pc, #456]	; (8005270 <main+0x274>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f043 0310 	orr.w	r3, r3, #16
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4b70      	ldr	r3, [pc, #448]	; (8005270 <main+0x274>)
 80050b0:	701a      	strb	r2, [r3, #0]
		}
	nmtstate  	= BOOT_UP;		// set CAN NMT state to Boot up
 80050b2:	4b70      	ldr	r3, [pc, #448]	; (8005274 <main+0x278>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
	nmtwait = 2;	// waiting time to 1. heartbeat in INI-Mode waiting time	1s
 80050b8:	4b6f      	ldr	r3, [pc, #444]	; (8005278 <main+0x27c>)
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]

	hsetime = HSETIME;
 80050be:	4b6f      	ldr	r3, [pc, #444]	; (800527c <main+0x280>)
 80050c0:	2214      	movs	r2, #20
 80050c2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_IN_BYTE; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80050ca:	e033      	b.n	8005134 <main+0x138>
	{
		out[i] = 0;
 80050cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050d0:	4a64      	ldr	r2, [pc, #400]	; (8005264 <main+0x268>)
 80050d2:	2100      	movs	r1, #0
 80050d4:	54d1      	strb	r1, [r2, r3]
		in[i] = 0x00;
 80050d6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050da:	4a69      	ldr	r2, [pc, #420]	; (8005280 <main+0x284>)
 80050dc:	2100      	movs	r1, #0
 80050de:	54d1      	strb	r1, [r2, r3]
		input[0][i] = 0x00;
 80050e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050e4:	4a67      	ldr	r2, [pc, #412]	; (8005284 <main+0x288>)
 80050e6:	2100      	movs	r1, #0
 80050e8:	54d1      	strb	r1, [r2, r3]
		input[1][i] = 0x00;
 80050ea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050ee:	4a65      	ldr	r2, [pc, #404]	; (8005284 <main+0x288>)
 80050f0:	4413      	add	r3, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	725a      	strb	r2, [r3, #9]
		input[2][i] = 0x00;
 80050f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050fa:	4a62      	ldr	r2, [pc, #392]	; (8005284 <main+0x288>)
 80050fc:	4413      	add	r3, r2
 80050fe:	2200      	movs	r2, #0
 8005100:	749a      	strb	r2, [r3, #18]
		inold[i] = 0x00;
 8005102:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005106:	4a60      	ldr	r2, [pc, #384]	; (8005288 <main+0x28c>)
 8005108:	2100      	movs	r1, #0
 800510a:	54d1      	strb	r1, [r2, r3]
		instate[i] = 0;
 800510c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005110:	4a5e      	ldr	r2, [pc, #376]	; (800528c <main+0x290>)
 8005112:	2100      	movs	r1, #0
 8005114:	54d1      	strb	r1, [r2, r3]
		in_polarity[i] = 0;
 8005116:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800511a:	4a5d      	ldr	r2, [pc, #372]	; (8005290 <main+0x294>)
 800511c:	2100      	movs	r1, #0
 800511e:	54d1      	strb	r1, [r2, r3]
		out_polarity[i] = 0;
 8005120:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005124:	4a5b      	ldr	r2, [pc, #364]	; (8005294 <main+0x298>)
 8005126:	2100      	movs	r1, #0
 8005128:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < MAX_IN_BYTE; i++)
 800512a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800512e:	3301      	adds	r3, #1
 8005130:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005134:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005138:	2b08      	cmp	r3, #8
 800513a:	d9c7      	bls.n	80050cc <main+0xd0>
	}
	for (i = 0; i < MAX_IN; i++)
 800513c:	2300      	movs	r3, #0
 800513e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005142:	e02b      	b.n	800519c <main+0x1a0>
	{
		inpar  [i][IO_STATE] = 0;
 8005144:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005148:	4953      	ldr	r1, [pc, #332]	; (8005298 <main+0x29c>)
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	440b      	add	r3, r1
 8005152:	3305      	adds	r3, #5
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
		outpar [i][IO_STATE] = 0;
 8005158:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800515c:	4a4f      	ldr	r2, [pc, #316]	; (800529c <main+0x2a0>)
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	715a      	strb	r2, [r3, #5]
		inpar  [i][IO_BASIC_FUNC] = 0;
 8005166:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800516a:	494b      	ldr	r1, [pc, #300]	; (8005298 <main+0x29c>)
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	440b      	add	r3, r1
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
		outpar [i][IO_BASIC_FUNC] = 0;
 8005178:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800517c:	4a47      	ldr	r2, [pc, #284]	; (800529c <main+0x2a0>)
 800517e:	2100      	movs	r1, #0
 8005180:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		outpar [i][IO_ACK] = 0;
 8005184:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005188:	4a44      	ldr	r2, [pc, #272]	; (800529c <main+0x2a0>)
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	2200      	movs	r2, #0
 8005190:	71da      	strb	r2, [r3, #7]
	for (i = 0; i < MAX_IN; i++)
 8005192:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005196:	3301      	adds	r3, #1
 8005198:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800519c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051a0:	2b45      	cmp	r3, #69	; 0x45
 80051a2:	d9cf      	bls.n	8005144 <main+0x148>
	}
	for(i = 0; i < 4; i++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80051aa:	e009      	b.n	80051c0 <main+0x1c4>
		display[i] = 0;
 80051ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051b0:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <main+0x2a4>)
 80051b2:	2100      	movs	r1, #0
 80051b4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 4; i++)
 80051b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051ba:	3301      	adds	r3, #1
 80051bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80051c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d9f1      	bls.n	80051ac <main+0x1b0>
	for(i = 0; i < 5; i++)
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80051ce:	e009      	b.n	80051e4 <main+0x1e8>
		mDisp_buf[i] = 0;
 80051d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051d4:	4a33      	ldr	r2, [pc, #204]	; (80052a4 <main+0x2a8>)
 80051d6:	2100      	movs	r1, #0
 80051d8:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 5; i++)
 80051da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051de:	3301      	adds	r3, #1
 80051e0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80051e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d9f1      	bls.n	80051d0 <main+0x1d4>

	mArrow_State = 0;
 80051ec:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <main+0x2ac>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
	mExtern_Number = 0;
 80051f2:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <main+0x2b0>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 80051f8:	482d      	ldr	r0, [pc, #180]	; (80052b0 <main+0x2b4>)
 80051fa:	f003 f91b 	bl	8008434 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80051fe:	482d      	ldr	r0, [pc, #180]	; (80052b4 <main+0x2b8>)
 8005200:	f003 f918 	bl	8008434 <HAL_TIM_Base_Start_IT>
	while (nmtwait)				// waiting time to 1. heartbeat
 8005204:	e00f      	b.n	8005226 <main+0x22a>
		{
		 ClrWdt();							//reset watchdog timer
 8005206:	f7ff fe93 	bl	8004f30 <ClrWdt>
			if(bTime.Time_10ms)
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <main+0x2bc>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <main+0x22a>
				{
					ReadInput();
 8005218:	f7fe fe78 	bl	8003f0c <ReadInput>
					bTime.Time_10ms = 0;
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <main+0x2bc>)
 800521e:	7813      	ldrb	r3, [r2, #0]
 8005220:	f36f 0300 	bfc	r3, #0, #1
 8005224:	7013      	strb	r3, [r2, #0]
	while (nmtwait)				// waiting time to 1. heartbeat
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <main+0x27c>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ea      	bne.n	8005206 <main+0x20a>
				}
		}
	node_id = Get_NodeID();
 8005230:	f7fe fde8 	bl	8003e04 <Get_NodeID>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <main+0x2c0>)
 800523a:	701a      	strb	r2, [r3, #0]

	Init_Can();
 800523c:	f7fb f926 	bl	800048c <Init_Can>

	heartbeat = HEARTBEAT_TIME;
 8005240:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <main+0x2c4>)
 8005242:	2204      	movs	r2, #4
 8005244:	701a      	strb	r2, [r3, #0]

	nmtstate = PRE_OP;						// set state pre-operational
 8005246:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <main+0x278>)
 8005248:	227f      	movs	r2, #127	; 0x7f
 800524a:	701a      	strb	r2, [r3, #0]
	disp_lift = LIFT1;
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <main+0x2c8>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]

	while (nmtstate == PRE_OP)
 8005252:	e09b      	b.n	800538c <main+0x390>
 8005254:	0801fc00 	.word	0x0801fc00
 8005258:	20000344 	.word	0x20000344
 800525c:	e0042000 	.word	0xe0042000
 8005260:	20000bf0 	.word	0x20000bf0
 8005264:	20000328 	.word	0x20000328
 8005268:	20000206 	.word	0x20000206
 800526c:	20000337 	.word	0x20000337
 8005270:	20000338 	.word	0x20000338
 8005274:	20000b24 	.word	0x20000b24
 8005278:	20000b85 	.word	0x20000b85
 800527c:	20000b18 	.word	0x20000b18
 8005280:	20000624 	.word	0x20000624
 8005284:	20000838 	.word	0x20000838
 8005288:	20000608 	.word	0x20000608
 800528c:	20000894 	.word	0x20000894
 8005290:	20000614 	.word	0x20000614
 8005294:	20000630 	.word	0x20000630
 8005298:	2000064c 	.word	0x2000064c
 800529c:	200008a0 	.word	0x200008a0
 80052a0:	200005f8 	.word	0x200005f8
 80052a4:	200005fc 	.word	0x200005fc
 80052a8:	20000604 	.word	0x20000604
 80052ac:	20000331 	.word	0x20000331
 80052b0:	20000b28 	.word	0x20000b28
 80052b4:	20000ba8 	.word	0x20000ba8
 80052b8:	20000620 	.word	0x20000620
 80052bc:	2000088f 	.word	0x2000088f
 80052c0:	20000c38 	.word	0x20000c38
 80052c4:	20000c50 	.word	0x20000c50
	{//�ȴ������������ָ��
		ClrWdt ();
 80052c8:	f7ff fe32 	bl	8004f30 <ClrWdt>
		if (rc)					// Message in receive buffer
 80052cc:	4b9f      	ldr	r3, [pc, #636]	; (800554c <main+0x550>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <main+0x2de>
			read_rx ();		// read and handle message
 80052d6:	f7fb f9f5 	bl	80006c4 <read_rx>
		if (sdo_index && !sdo_timer)
 80052da:	4b9d      	ldr	r3, [pc, #628]	; (8005550 <main+0x554>)
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <main+0x2fc>
 80052e4:	4b9b      	ldr	r3, [pc, #620]	; (8005554 <main+0x558>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <main+0x2fc>
			{// SDO segment transfer time out
				sdo_index = 0;
 80052ec:	4b98      	ldr	r3, [pc, #608]	; (8005550 <main+0x554>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	801a      	strh	r2, [r3, #0]
				abort_sdo (SDO_TIMEOUT);						//send SDO abort request
 80052f2:	4899      	ldr	r0, [pc, #612]	; (8005558 <main+0x55c>)
 80052f4:	f7fb ffa6 	bl	8001244 <abort_sdo>
			}

		if (bFunc.hsecheck)
 80052f8:	4b98      	ldr	r3, [pc, #608]	; (800555c <main+0x560>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <main+0x31a>
			{// HSE heartbeat check necessary
				bFunc.hsecheck = false;
 8005306:	4a95      	ldr	r2, [pc, #596]	; (800555c <main+0x560>)
 8005308:	7813      	ldrb	r3, [r2, #0]
 800530a:	f36f 1345 	bfc	r3, #5, #1
 800530e:	7013      	strb	r3, [r2, #0]
				check_hse (0);									// check if a HSE is not available
 8005310:	2000      	movs	r0, #0
 8005312:	f7ff fd25 	bl	8004d60 <check_hse>
			}
		if ((!heartbeat) && (hse_heartbeat) && (!bBusOffTimer))	//time to send heartbeat message
 8005316:	4b92      	ldr	r3, [pc, #584]	; (8005560 <main+0x564>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10c      	bne.n	8005338 <main+0x33c>
 800531e:	4b91      	ldr	r3, [pc, #580]	; (8005564 <main+0x568>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <main+0x33c>
 8005326:	4b90      	ldr	r3, [pc, #576]	; (8005568 <main+0x56c>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d104      	bne.n	8005338 <main+0x33c>
			{
				heartbeat = HEARTBEAT_TIME;
 800532e:	4b8c      	ldr	r3, [pc, #560]	; (8005560 <main+0x564>)
 8005330:	2204      	movs	r2, #4
 8005332:	701a      	strb	r2, [r3, #0]
				CAN_transmit_heartbeat();
 8005334:	f7fc fadc 	bl	80018f0 <CAN_transmit_heartbeat>
			}

		if (errorcode)
 8005338:	4b8c      	ldr	r3, [pc, #560]	; (800556c <main+0x570>)
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <main+0x354>
			{// error occured
				transmit_error ();	// send emergency message
 8005340:	f7fc f9aa 	bl	8001698 <transmit_error>
				errorregister = 0;	// reset error
 8005344:	4b8a      	ldr	r3, [pc, #552]	; (8005570 <main+0x574>)
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]
				errorcode = 0;
 800534a:	4b88      	ldr	r3, [pc, #544]	; (800556c <main+0x570>)
 800534c:	2200      	movs	r2, #0
 800534e:	801a      	strh	r2, [r3, #0]
			}
		if ((merker == BS_MERKER) && (!bBusOffTimer))
 8005350:	4b88      	ldr	r3, [pc, #544]	; (8005574 <main+0x578>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b55      	cmp	r3, #85	; 0x55
 8005356:	d113      	bne.n	8005380 <main+0x384>
 8005358:	4b83      	ldr	r3, [pc, #524]	; (8005568 <main+0x56c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10f      	bne.n	8005380 <main+0x384>
			{
				Init_Can();
 8005360:	f7fb f894 	bl	800048c <Init_Can>
				errorregister |= ER_COMMUNICATION;			// set error bits
 8005364:	4b82      	ldr	r3, [pc, #520]	; (8005570 <main+0x574>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f043 0310 	orr.w	r3, r3, #16
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b80      	ldr	r3, [pc, #512]	; (8005570 <main+0x574>)
 8005370:	701a      	strb	r2, [r3, #0]
				errorcode = E_BUS_OFF_A;									// set error code
 8005372:	4b7e      	ldr	r3, [pc, #504]	; (800556c <main+0x570>)
 8005374:	f248 1240 	movw	r2, #33088	; 0x8140
 8005378:	801a      	strh	r2, [r3, #0]
				merker = 0;
 800537a:	4b7e      	ldr	r3, [pc, #504]	; (8005574 <main+0x578>)
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
			}
		if(nmtstate == TEST_MODE)
 8005380:	4b7d      	ldr	r3, [pc, #500]	; (8005578 <main+0x57c>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2bf0      	cmp	r3, #240	; 0xf0
 8005386:	d101      	bne.n	800538c <main+0x390>
			{
				test_mode();
 8005388:	f7fe ffce 	bl	8004328 <test_mode>
	while (nmtstate == PRE_OP)
 800538c:	4b7a      	ldr	r3, [pc, #488]	; (8005578 <main+0x57c>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b7f      	cmp	r3, #127	; 0x7f
 8005392:	d099      	beq.n	80052c8 <main+0x2cc>
			}
	}
	hsetime = HSETIME ;		//start timer with different times
 8005394:	4b79      	ldr	r3, [pc, #484]	; (800557c <main+0x580>)
 8005396:	2214      	movs	r2, #20
 8005398:	701a      	strb	r2, [r3, #0]
	bFunc.hsecheck = false;					//no HSE check now
 800539a:	4a70      	ldr	r2, [pc, #448]	; (800555c <main+0x560>)
 800539c:	7813      	ldrb	r3, [r2, #0]
 800539e:	f36f 1345 	bfc	r3, #5, #1
 80053a2:	7013      	strb	r3, [r2, #0]
	ClrWdt();							//reset watchdog timer
 80053a4:	f7ff fdc4 	bl	8004f30 <ClrWdt>

	mInOut_Number = (mExtern_Number * 16 + 22) % (MAX_IN + 1);
 80053a8:	4b75      	ldr	r3, [pc, #468]	; (8005580 <main+0x584>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	f103 0216 	add.w	r2, r3, #22
 80053b2:	4b74      	ldr	r3, [pc, #464]	; (8005584 <main+0x588>)
 80053b4:	fb83 1302 	smull	r1, r3, r3, r2
 80053b8:	4413      	add	r3, r2
 80053ba:	1199      	asrs	r1, r3, #6
 80053bc:	17d3      	asrs	r3, r2, #31
 80053be:	1ac9      	subs	r1, r1, r3
 80053c0:	460b      	mov	r3, r1
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	1a5b      	subs	r3, r3, r1
 80053ca:	1ad1      	subs	r1, r2, r3
 80053cc:	b2ca      	uxtb	r2, r1
 80053ce:	4b6e      	ldr	r3, [pc, #440]	; (8005588 <main+0x58c>)
 80053d0:	701a      	strb	r2, [r3, #0]
	mMax_InByte = (mInOut_Number >> 3) + 1;
 80053d2:	4b6d      	ldr	r3, [pc, #436]	; (8005588 <main+0x58c>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	3301      	adds	r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4b6b      	ldr	r3, [pc, #428]	; (800558c <main+0x590>)
 80053e0:	701a      	strb	r2, [r3, #0]

	set_io_config ();
 80053e2:	f7fd fbfb 	bl	8002bdc <set_io_config>
	Arrow_Status();
 80053e6:	f7ff fa33 	bl	8004850 <Arrow_Status>
	int cntt =0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	647b      	str	r3, [r7, #68]	; 0x44

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Clear_Flash)
 80053ee:	4b68      	ldr	r3, [pc, #416]	; (8005590 <main+0x594>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <main+0x404>
	  {
		  Flash_Clear_Floor_Name();
 80053f6:	f7ff fdef 	bl	8004fd8 <Flash_Clear_Floor_Name>
		  Clear_Flash =0;
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <main+0x594>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
	  }
	  ClrWdt();							//reset watchdog timer
 8005400:	f7ff fd96 	bl	8004f30 <ClrWdt>
		if (rc)													// Message in receive buffer
 8005404:	4b51      	ldr	r3, [pc, #324]	; (800554c <main+0x550>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <main+0x416>
			read_rx ();										// read and handle message
 800540e:	f7fb f959 	bl	80006c4 <read_rx>
		if ((!heartbeat) && (hse_heartbeat) && (!bBusOffTimer))	//time to send heartbeat message
 8005412:	4b53      	ldr	r3, [pc, #332]	; (8005560 <main+0x564>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10c      	bne.n	8005434 <main+0x438>
 800541a:	4b52      	ldr	r3, [pc, #328]	; (8005564 <main+0x568>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <main+0x438>
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <main+0x56c>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <main+0x438>
			{// time to send heartbeat message
				heartbeat = HEARTBEAT_TIME;
 800542a:	4b4d      	ldr	r3, [pc, #308]	; (8005560 <main+0x564>)
 800542c:	2204      	movs	r2, #4
 800542e:	701a      	strb	r2, [r3, #0]
				CAN_transmit_heartbeat();
 8005430:	f7fc fa5e 	bl	80018f0 <CAN_transmit_heartbeat>
			}
		if (bFunc.hsecheck)
 8005434:	4b49      	ldr	r3, [pc, #292]	; (800555c <main+0x560>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <main+0x456>
			{// HSE heartbeat check necessary
				bFunc.hsecheck = false;
 8005442:	4a46      	ldr	r2, [pc, #280]	; (800555c <main+0x560>)
 8005444:	7813      	ldrb	r3, [r2, #0]
 8005446:	f36f 1345 	bfc	r3, #5, #1
 800544a:	7013      	strb	r3, [r2, #0]
				check_hse (1);									// check if a HSE is not available
 800544c:	2001      	movs	r0, #1
 800544e:	f7ff fc87 	bl	8004d60 <check_hse>
			}

		if(bTime.Time_100ms)
 8005452:	4b50      	ldr	r3, [pc, #320]	; (8005594 <main+0x598>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d042      	beq.n	80054e6 <main+0x4ea>
			{
			 	 Dwin_Change_Current_FloorName((char *)display);
 8005460:	484d      	ldr	r0, [pc, #308]	; (8005598 <main+0x59c>)
 8005462:	f7fd fcc5 	bl	8002df0 <Dwin_Change_Current_FloorName>

				Display_device();			//100ms ����һ����ʾ��Ϣ
 8005466:	f7ff f9cf 	bl	8004808 <Display_device>
				if(!(buzzer & BUZ_WORKING))
 800546a:	4b4c      	ldr	r3, [pc, #304]	; (800559c <main+0x5a0>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d105      	bne.n	8005482 <main+0x486>
					Disable_BUZ();
 8005476:	2200      	movs	r2, #0
 8005478:	2101      	movs	r1, #1
 800547a:	4849      	ldr	r0, [pc, #292]	; (80055a0 <main+0x5a4>)
 800547c:	f002 fb07 	bl	8007a8e <HAL_GPIO_WritePin>
 8005480:	e02c      	b.n	80054dc <main+0x4e0>
				else if(buzzer & BUZ_PULSE)
 8005482:	4b46      	ldr	r3, [pc, #280]	; (800559c <main+0x5a0>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d021      	beq.n	80054d2 <main+0x4d6>
					{
						if(bFunc.buz_state)
 800548e:	4b33      	ldr	r3, [pc, #204]	; (800555c <main+0x560>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <main+0x4ac>
							Enable_BUZ();
 800549c:	2201      	movs	r2, #1
 800549e:	2101      	movs	r1, #1
 80054a0:	483f      	ldr	r0, [pc, #252]	; (80055a0 <main+0x5a4>)
 80054a2:	f002 faf4 	bl	8007a8e <HAL_GPIO_WritePin>
 80054a6:	e00c      	b.n	80054c2 <main+0x4c6>
						else if(!att_alarm_timer)
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <main+0x5a8>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <main+0x4c6>
							{
								Disable_BUZ();
 80054b0:	2200      	movs	r2, #0
 80054b2:	2101      	movs	r1, #1
 80054b4:	483a      	ldr	r0, [pc, #232]	; (80055a0 <main+0x5a4>)
 80054b6:	f002 faea 	bl	8007a8e <HAL_GPIO_WritePin>
								att_alarm_timer = buz_alarm_timer;
 80054ba:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <main+0x5ac>)
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	4b39      	ldr	r3, [pc, #228]	; (80055a4 <main+0x5a8>)
 80054c0:	701a      	strb	r2, [r3, #0]
							}
						if(!buz_alarm_totaltimer)
 80054c2:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <main+0x5b0>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d108      	bne.n	80054dc <main+0x4e0>
							buzzer &= !(BUZ_WORKING | BUZ_PULSE);
 80054ca:	4b34      	ldr	r3, [pc, #208]	; (800559c <main+0x5a0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	e004      	b.n	80054dc <main+0x4e0>
					}
				else
					Enable_BUZ();
 80054d2:	2201      	movs	r2, #1
 80054d4:	2101      	movs	r1, #1
 80054d6:	4832      	ldr	r0, [pc, #200]	; (80055a0 <main+0x5a4>)
 80054d8:	f002 fad9 	bl	8007a8e <HAL_GPIO_WritePin>
				bTime.Time_100ms = 0;
 80054dc:	4a2d      	ldr	r2, [pc, #180]	; (8005594 <main+0x598>)
 80054de:	7813      	ldrb	r3, [r2, #0]
 80054e0:	f36f 0341 	bfc	r3, #1, #1
 80054e4:	7013      	strb	r3, [r2, #0]
			}
		if(bTime.Time_2s)
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <main+0x598>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d006      	beq.n	8005502 <main+0x506>
			{
				Arrow_Status();
 80054f4:	f7ff f9ac 	bl	8004850 <Arrow_Status>
				bTime.Time_2s = 0;
 80054f8:	4a26      	ldr	r2, [pc, #152]	; (8005594 <main+0x598>)
 80054fa:	7813      	ldrb	r3, [r2, #0]
 80054fc:	f36f 03c3 	bfc	r3, #3, #1
 8005500:	7013      	strb	r3, [r2, #0]
			}
		if(bTime.Time_10ms)
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <main+0x598>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00e      	beq.n	800552e <main+0x532>
			{
				DWIN_Message_Process();
 8005510:	f7fe f8d8 	bl	80036c4 <DWIN_Message_Process>
				DWin_Calltable_Process();
 8005514:	f7fd fdfa 	bl	800310c <DWin_Calltable_Process>
				DWIN_Arrow_Process();
 8005518:	f7fd ffcc 	bl	80034b4 <DWIN_Arrow_Process>
				ReadInput();		//��ȡ���еİ�ť����
 800551c:	f7fe fcf6 	bl	8003f0c <ReadInput>
				Out_Prog(); 					//�������е����(������ʾ���)
 8005520:	f7fe fdd4 	bl	80040cc <Out_Prog>
				bTime.Time_10ms = 0;
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <main+0x598>)
 8005526:	7813      	ldrb	r3, [r2, #0]
 8005528:	f36f 0300 	bfc	r3, #0, #1
 800552c:	7013      	strb	r3, [r2, #0]
			}
		if(Time10s)
 800552e:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <main+0x5b4>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d006      	beq.n	8005544 <main+0x548>
		{
			Dwin_update_time();
 8005536:	f7fd fce5 	bl	8002f04 <Dwin_update_time>
			Dwin_switch_to_next_page();
 800553a:	f7fd fcb5 	bl	8002ea8 <Dwin_switch_to_next_page>
			Time10s = 0;
 800553e:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <main+0x5b4>)
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
		}
		for(i = 0; i < mMax_InByte; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800554a:	e047      	b.n	80055dc <main+0x5e0>
 800554c:	200003e0 	.word	0x200003e0
 8005550:	20000322 	.word	0x20000322
 8005554:	20000325 	.word	0x20000325
 8005558:	05040000 	.word	0x05040000
 800555c:	20000ba4 	.word	0x20000ba4
 8005560:	20000c38 	.word	0x20000c38
 8005564:	20000332 	.word	0x20000332
 8005568:	20000333 	.word	0x20000333
 800556c:	2000033a 	.word	0x2000033a
 8005570:	20000338 	.word	0x20000338
 8005574:	20000337 	.word	0x20000337
 8005578:	20000b24 	.word	0x20000b24
 800557c:	20000b18 	.word	0x20000b18
 8005580:	20000331 	.word	0x20000331
 8005584:	e6c2b449 	.word	0xe6c2b449
 8005588:	200001ec 	.word	0x200001ec
 800558c:	20000bf0 	.word	0x20000bf0
 8005590:	200003c9 	.word	0x200003c9
 8005594:	20000620 	.word	0x20000620
 8005598:	200005f8 	.word	0x200005f8
 800559c:	20000321 	.word	0x20000321
 80055a0:	40010800 	.word	0x40010800
 80055a4:	20000334 	.word	0x20000334
 80055a8:	20000335 	.word	0x20000335
 80055ac:	20000336 	.word	0x20000336
 80055b0:	20000208 	.word	0x20000208
			instate_Pre[i] = in[i] ^ in_polarity[i];		// read input state; invert if desired
 80055b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80055b8:	4aa9      	ldr	r2, [pc, #676]	; (8005860 <main+0x864>)
 80055ba:	5cd3      	ldrb	r3, [r2, r3]
 80055bc:	b2d9      	uxtb	r1, r3
 80055be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80055c2:	4aa8      	ldr	r2, [pc, #672]	; (8005864 <main+0x868>)
 80055c4:	5cd2      	ldrb	r2, [r2, r3]
 80055c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80055ca:	404a      	eors	r2, r1
 80055cc:	b2d1      	uxtb	r1, r2
 80055ce:	4aa6      	ldr	r2, [pc, #664]	; (8005868 <main+0x86c>)
 80055d0:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i < mMax_InByte; i++)
 80055d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80055d6:	3301      	adds	r3, #1
 80055d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80055dc:	4ba3      	ldr	r3, [pc, #652]	; (800586c <main+0x870>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d3e5      	bcc.n	80055b4 <main+0x5b8>
		instate[0] = (instate_Pre[0] & 0x3);      //close and openbutton
 80055e8:	4b9f      	ldr	r3, [pc, #636]	; (8005868 <main+0x86c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	4b9f      	ldr	r3, [pc, #636]	; (8005870 <main+0x874>)
 80055f4:	701a      	strb	r2, [r3, #0]
		uint16_t keytmp = (uint16_t)((instate_Pre[0] | ((uint16_t)instate_Pre[1]<<8)) >>2); //BTN start IN3
 80055f6:	4b9c      	ldr	r3, [pc, #624]	; (8005868 <main+0x86c>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b9a      	ldr	r3, [pc, #616]	; (8005868 <main+0x86c>)
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	4313      	orrs	r3, r2
 8005604:	109b      	asrs	r3, r3, #2
 8005606:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		if(inold_Pre != keytmp)
 800560a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800560e:	4b99      	ldr	r3, [pc, #612]	; (8005874 <main+0x878>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d065      	beq.n	80056e2 <main+0x6e6>
		{
			for (i = 0; i < 16; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800561c:	e059      	b.n	80056d2 <main+0x6d6>
			{
				if((!(keytmp>>i)&0x01) && ((inold_Pre>>i) &0x01))   //now 0,pre 1
 800561e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005622:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005626:	fa42 f303 	asr.w	r3, r2, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d14c      	bne.n	80056c8 <main+0x6cc>
 800562e:	4b91      	ldr	r3, [pc, #580]	; (8005874 <main+0x878>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d042      	beq.n	80056c8 <main+0x6cc>
				{
						DWIN_add_key(IOName[i]);
 8005642:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005646:	4a8c      	ldr	r2, [pc, #560]	; (8005878 <main+0x87c>)
 8005648:	5cd3      	ldrb	r3, [r2, r3]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe f804 	bl	8003658 <DWIN_add_key>
						Led_virt = (Led_virt|(1<<(i+2))) & 0xFFFC;
 8005650:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005654:	3302      	adds	r3, #2
 8005656:	2201      	movs	r2, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	b21a      	sxth	r2, r3
 800565e:	4b87      	ldr	r3, [pc, #540]	; (800587c <main+0x880>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b21b      	sxth	r3, r3
 8005664:	4313      	orrs	r3, r2
 8005666:	b21b      	sxth	r3, r3
 8005668:	b29b      	uxth	r3, r3
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	b29a      	uxth	r2, r3
 8005670:	4b82      	ldr	r3, [pc, #520]	; (800587c <main+0x880>)
 8005672:	801a      	strh	r2, [r3, #0]
						virt_key[virt_key_cnt] = IOName[i];
 8005674:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005678:	4a81      	ldr	r2, [pc, #516]	; (8005880 <main+0x884>)
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	4611      	mov	r1, r2
 800567e:	4a7e      	ldr	r2, [pc, #504]	; (8005878 <main+0x87c>)
 8005680:	5cd2      	ldrb	r2, [r2, r3]
 8005682:	4b80      	ldr	r3, [pc, #512]	; (8005884 <main+0x888>)
 8005684:	545a      	strb	r2, [r3, r1]
						virt_key_cnt++ ;
 8005686:	4b7e      	ldr	r3, [pc, #504]	; (8005880 <main+0x884>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	3301      	adds	r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b7c      	ldr	r3, [pc, #496]	; (8005880 <main+0x884>)
 8005690:	701a      	strb	r2, [r3, #0]
						if ( virt_key_cnt == 2 )
 8005692:	4b7b      	ldr	r3, [pc, #492]	; (8005880 <main+0x884>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d104      	bne.n	80056a4 <main+0x6a8>
						{
							Keytimout = -1;
 800569a:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <main+0x88c>)
 800569c:	f04f 32ff 	mov.w	r2, #4294967295
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e007      	b.n	80056b4 <main+0x6b8>
						}
						else
						{
							Keytimout = KEYTIMOUT/10;
 80056a4:	4b78      	ldr	r3, [pc, #480]	; (8005888 <main+0x88c>)
 80056a6:	2296      	movs	r2, #150	; 0x96
 80056a8:	601a      	str	r2, [r3, #0]
							inspection_time = HAL_GetTick();
 80056aa:	f000 ff79 	bl	80065a0 <HAL_GetTick>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4a76      	ldr	r2, [pc, #472]	; (800588c <main+0x890>)
 80056b2:	6013      	str	r3, [r2, #0]
						}
						if(IOName[i] == 'C')
 80056b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80056b8:	4a6f      	ldr	r2, [pc, #444]	; (8005878 <main+0x87c>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	2b43      	cmp	r3, #67	; 0x43
 80056be:	d103      	bne.n	80056c8 <main+0x6cc>
						{
							Keytimout = -1;
 80056c0:	4b71      	ldr	r3, [pc, #452]	; (8005888 <main+0x88c>)
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 16; i++)
 80056c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80056cc:	3301      	adds	r3, #1
 80056ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80056d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d9a1      	bls.n	800561e <main+0x622>
						}
				}
			}
			inold_Pre = keytmp;
 80056da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056de:	4a65      	ldr	r2, [pc, #404]	; (8005874 <main+0x878>)
 80056e0:	6013      	str	r3, [r2, #0]
		}
		if(LedOfftimout <0)
 80056e2:	4b6b      	ldr	r3, [pc, #428]	; (8005890 <main+0x894>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da06      	bge.n	80056f8 <main+0x6fc>
		{
			Led_virt = 0x00;
 80056ea:	4b64      	ldr	r3, [pc, #400]	; (800587c <main+0x880>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	801a      	strh	r2, [r3, #0]
			LedOfftimout = INT32_MAX;
 80056f0:	4b67      	ldr	r3, [pc, #412]	; (8005890 <main+0x894>)
 80056f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80056f6:	601a      	str	r2, [r3, #0]
		}
		if(Keytimout <= 0)
 80056f8:	4b63      	ldr	r3, [pc, #396]	; (8005888 <main+0x88c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f300 8179 	bgt.w	80059f4 <main+0x9f8>
		{
			inspection_time = HAL_GetTick() - inspection_time;
 8005702:	f000 ff4d 	bl	80065a0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	4b60      	ldr	r3, [pc, #384]	; (800588c <main+0x890>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	4a5f      	ldr	r2, [pc, #380]	; (800588c <main+0x890>)
 8005710:	6013      	str	r3, [r2, #0]
			if((virt_key[0] != 'C') && (virt_key[1] != 'C'))
 8005712:	4b5c      	ldr	r3, [pc, #368]	; (8005884 <main+0x888>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b43      	cmp	r3, #67	; 0x43
 8005718:	d07a      	beq.n	8005810 <main+0x814>
 800571a:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <main+0x888>)
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b43      	cmp	r3, #67	; 0x43
 8005720:	d076      	beq.n	8005810 <main+0x814>
			{
				targetfloor = Find_target_Floor(virt_key_cnt);
 8005722:	4b57      	ldr	r3, [pc, #348]	; (8005880 <main+0x884>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fc10 	bl	8004f4c <Find_target_Floor>
 800572c:	4603      	mov	r3, r0
 800572e:	b2da      	uxtb	r2, r3
 8005730:	4b58      	ldr	r3, [pc, #352]	; (8005894 <main+0x898>)
 8005732:	701a      	strb	r2, [r3, #0]
				if((targetfloor !=  0) && (targetfloor <= TOTAL_FLOOR))
 8005734:	4b57      	ldr	r3, [pc, #348]	; (8005894 <main+0x898>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05b      	beq.n	80057f4 <main+0x7f8>
 800573c:	4b55      	ldr	r3, [pc, #340]	; (8005894 <main+0x898>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b37      	cmp	r3, #55	; 0x37
 8005742:	d857      	bhi.n	80057f4 <main+0x7f8>
				{
					char mes[30];
					sprintf(mes,"PLEASE ENTER DESTINATION FLOOR");
 8005744:	f107 0320 	add.w	r3, r7, #32
 8005748:	4953      	ldr	r1, [pc, #332]	; (8005898 <main+0x89c>)
 800574a:	4618      	mov	r0, r3
 800574c:	f003 fc48 	bl	8008fe0 <siprintf>
					DWIN_show_message(mes, 2000);
 8005750:	f107 0320 	add.w	r3, r7, #32
 8005754:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005758:	4618      	mov	r0, r3
 800575a:	f7fd ff49 	bl	80035f0 <DWIN_show_message>
					for ( cntt = 0; cntt < mInOut_Number; cntt++)
 800575e:	2300      	movs	r3, #0
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
 8005762:	e037      	b.n	80057d4 <main+0x7d8>
					{
						if (inpar [cntt][IO_BASIC_FUNC] == CAR_CALL)
 8005764:	494d      	ldr	r1, [pc, #308]	; (800589c <main+0x8a0>)
 8005766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	440b      	add	r3, r1
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b05      	cmp	r3, #5
 8005774:	d12b      	bne.n	80057ce <main+0x7d2>
						{
							if(inpar [cntt][IO_SUB_FUNC] == targetfloor)
 8005776:	4949      	ldr	r1, [pc, #292]	; (800589c <main+0x8a0>)
 8005778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	440b      	add	r3, r1
 8005782:	3301      	adds	r3, #1
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	4b43      	ldr	r3, [pc, #268]	; (8005894 <main+0x898>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d11f      	bne.n	80057ce <main+0x7d2>
							{

								bit_set(instate[cntt/8],cntt%8);
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	2b00      	cmp	r3, #0
 8005792:	da00      	bge.n	8005796 <main+0x79a>
 8005794:	3307      	adds	r3, #7
 8005796:	10db      	asrs	r3, r3, #3
 8005798:	461a      	mov	r2, r3
 800579a:	4b35      	ldr	r3, [pc, #212]	; (8005870 <main+0x874>)
 800579c:	5c9b      	ldrb	r3, [r3, r2]
 800579e:	b259      	sxtb	r1, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a2:	4258      	negs	r0, r3
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	f000 0007 	and.w	r0, r0, #7
 80057ac:	bf58      	it	pl
 80057ae:	4243      	negpl	r3, r0
 80057b0:	2001      	movs	r0, #1
 80057b2:	fa00 f303 	lsl.w	r3, r0, r3
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	430b      	orrs	r3, r1
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	b2d9      	uxtb	r1, r3
 80057be:	4b2c      	ldr	r3, [pc, #176]	; (8005870 <main+0x874>)
 80057c0:	5499      	strb	r1, [r3, r2]
								lastest_call_time = time1_cnt + KEYTIMOUT/10;
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <main+0x8a4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3396      	adds	r3, #150	; 0x96
 80057c8:	4a36      	ldr	r2, [pc, #216]	; (80058a4 <main+0x8a8>)
 80057ca:	6013      	str	r3, [r2, #0]
								break;
 80057cc:	e008      	b.n	80057e0 <main+0x7e4>
					for ( cntt = 0; cntt < mInOut_Number; cntt++)
 80057ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d0:	3301      	adds	r3, #1
 80057d2:	647b      	str	r3, [r7, #68]	; 0x44
 80057d4:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <main+0x8ac>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057dc:	4293      	cmp	r3, r2
 80057de:	dbc1      	blt.n	8005764 <main+0x768>
							}

						}
					}
					if(cntt == mInOut_Number)
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <main+0x8ac>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10f      	bne.n	800580c <main+0x810>
					{
						cntt = -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
				{
 80057f2:	e00b      	b.n	800580c <main+0x810>
					}
				}
				else
				{
					char mes[30];
					sprintf(mes,"   NO SERVICE FLOOR");
 80057f4:	463b      	mov	r3, r7
 80057f6:	492d      	ldr	r1, [pc, #180]	; (80058ac <main+0x8b0>)
 80057f8:	4618      	mov	r0, r3
 80057fa:	f003 fbf1 	bl	8008fe0 <siprintf>
					DWIN_show_message(mes, 2000);
 80057fe:	463b      	mov	r3, r7
 8005800:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005804:	4618      	mov	r0, r3
 8005806:	f7fd fef3 	bl	80035f0 <DWIN_show_message>
				if((targetfloor !=  0) && (targetfloor <= TOTAL_FLOOR))
 800580a:	e0e4      	b.n	80059d6 <main+0x9da>
				{
 800580c:	bf00      	nop
				if((targetfloor !=  0) && (targetfloor <= TOTAL_FLOOR))
 800580e:	e0e2      	b.n	80059d6 <main+0x9da>
				}
			}
			else
			{
				if(virt_key[0] == 'C')
 8005810:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <main+0x888>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b43      	cmp	r3, #67	; 0x43
 8005816:	d10a      	bne.n	800582e <main+0x832>
				{
					//del target_floor_reg
					if(time1_cnt < lastest_call_time)
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <main+0x8a4>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b21      	ldr	r3, [pc, #132]	; (80058a4 <main+0x8a8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d214      	bcs.n	800584e <main+0x852>
					{
						targetfloor = targetfloor_reg;
 8005824:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <main+0x8b4>)
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <main+0x898>)
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e00f      	b.n	800584e <main+0x852>
					}
				}
				else if(virt_key[1] == 'C')
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <main+0x888>)
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b43      	cmp	r3, #67	; 0x43
 8005834:	d10b      	bne.n	800584e <main+0x852>
				{
					//del target_floor virt_key[1]
					virt_key_cnt =1;
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <main+0x884>)
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
					targetfloor = Find_target_Floor(virt_key_cnt);
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <main+0x884>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fb83 	bl	8004f4c <Find_target_Floor>
 8005846:	4603      	mov	r3, r0
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <main+0x898>)
 800584c:	701a      	strb	r2, [r3, #0]
				}
				if(targetfloor>0)
 800584e:	4b11      	ldr	r3, [pc, #68]	; (8005894 <main+0x898>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80bf 	beq.w	80059d6 <main+0x9da>
				{
					uint8_t outindex ;
					for ( outindex = 0; outindex < mInOut_Number; outindex++)
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e03f      	b.n	80058e0 <main+0x8e4>
 8005860:	20000624 	.word	0x20000624
 8005864:	20000614 	.word	0x20000614
 8005868:	20000b98 	.word	0x20000b98
 800586c:	20000bf0 	.word	0x20000bf0
 8005870:	20000894 	.word	0x20000894
 8005874:	20000c48 	.word	0x20000c48
 8005878:	200001f8 	.word	0x200001f8
 800587c:	20000206 	.word	0x20000206
 8005880:	20000342 	.word	0x20000342
 8005884:	20000340 	.word	0x20000340
 8005888:	200001f0 	.word	0x200001f0
 800588c:	20000b1c 	.word	0x20000b1c
 8005890:	200001f4 	.word	0x200001f4
 8005894:	200003b2 	.word	0x200003b2
 8005898:	08009964 	.word	0x08009964
 800589c:	2000064c 	.word	0x2000064c
 80058a0:	200003b4 	.word	0x200003b4
 80058a4:	20000884 	.word	0x20000884
 80058a8:	200001ec 	.word	0x200001ec
 80058ac:	08009984 	.word	0x08009984
 80058b0:	200003b3 	.word	0x200003b3
					{
						if (outpar [outindex][IO_BASIC_FUNC] == CAR_CALL)
 80058b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058b8:	4ab3      	ldr	r2, [pc, #716]	; (8005b88 <main+0xb8c>)
 80058ba:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d109      	bne.n	80058d6 <main+0x8da>
						{
							if(outpar [outindex][IO_SUB_FUNC] == targetfloor)
 80058c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058c6:	4ab0      	ldr	r2, [pc, #704]	; (8005b88 <main+0xb8c>)
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	785a      	ldrb	r2, [r3, #1]
 80058ce:	4baf      	ldr	r3, [pc, #700]	; (8005b8c <main+0xb90>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d00b      	beq.n	80058ee <main+0x8f2>
					for ( outindex = 0; outindex < mInOut_Number; outindex++)
 80058d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058da:	3301      	adds	r3, #1
 80058dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e0:	4bab      	ldr	r3, [pc, #684]	; (8005b90 <main+0xb94>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3e3      	bcc.n	80058b4 <main+0x8b8>
 80058ec:	e000      	b.n	80058f0 <main+0x8f4>
							{
								break;
 80058ee:	bf00      	nop
							}

						}
					}
					if(outindex != mInOut_Number)
 80058f0:	4ba7      	ldr	r3, [pc, #668]	; (8005b90 <main+0xb94>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d06c      	beq.n	80059d6 <main+0x9da>
					{
						if( bit_select(out[outindex/8],outindex%8))	//alread call
 80058fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	4ba3      	ldr	r3, [pc, #652]	; (8005b94 <main+0xb98>)
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	fa42 f303 	asr.w	r3, r2, r3
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d059      	beq.n	80059d6 <main+0x9da>
						{
							for ( cntt = 0; cntt < mInOut_Number; cntt++)
 8005922:	2300      	movs	r3, #0
 8005924:	647b      	str	r3, [r7, #68]	; 0x44
 8005926:	e050      	b.n	80059ca <main+0x9ce>
							{
								if (inpar [cntt][IO_BASIC_FUNC] == CAR_CALL)
 8005928:	499b      	ldr	r1, [pc, #620]	; (8005b98 <main+0xb9c>)
 800592a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	440b      	add	r3, r1
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b05      	cmp	r3, #5
 8005938:	d144      	bne.n	80059c4 <main+0x9c8>
								{
									if(inpar [cntt][IO_SUB_FUNC] == targetfloor)
 800593a:	4997      	ldr	r1, [pc, #604]	; (8005b98 <main+0xb9c>)
 800593c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	440b      	add	r3, r1
 8005946:	3301      	adds	r3, #1
 8005948:	781a      	ldrb	r2, [r3, #0]
 800594a:	4b90      	ldr	r3, [pc, #576]	; (8005b8c <main+0xb90>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d138      	bne.n	80059c4 <main+0x9c8>
									{
										bit_set(instate[cntt/8],cntt%8);
 8005952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005954:	2b00      	cmp	r3, #0
 8005956:	da00      	bge.n	800595a <main+0x95e>
 8005958:	3307      	adds	r3, #7
 800595a:	10db      	asrs	r3, r3, #3
 800595c:	461a      	mov	r2, r3
 800595e:	4b8f      	ldr	r3, [pc, #572]	; (8005b9c <main+0xba0>)
 8005960:	5c9b      	ldrb	r3, [r3, r2]
 8005962:	b259      	sxtb	r1, r3
 8005964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005966:	4258      	negs	r0, r3
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	f000 0007 	and.w	r0, r0, #7
 8005970:	bf58      	it	pl
 8005972:	4243      	negpl	r3, r0
 8005974:	2001      	movs	r0, #1
 8005976:	fa00 f303 	lsl.w	r3, r0, r3
 800597a:	b25b      	sxtb	r3, r3
 800597c:	430b      	orrs	r3, r1
 800597e:	b25b      	sxtb	r3, r3
 8005980:	b2d9      	uxtb	r1, r3
 8005982:	4b86      	ldr	r3, [pc, #536]	; (8005b9c <main+0xba0>)
 8005984:	5499      	strb	r1, [r3, r2]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8005986:	2300      	movs	r3, #0
 8005988:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800598c:	e012      	b.n	80059b4 <main+0x9b8>
												virt_in [j] = inpar [cntt][j];
 800598e:	f897 004a 	ldrb.w	r0, [r7, #74]	; 0x4a
 8005992:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8005996:	4c80      	ldr	r4, [pc, #512]	; (8005b98 <main+0xb9c>)
 8005998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	4423      	add	r3, r4
 80059a2:	4403      	add	r3, r0
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	4b7e      	ldr	r3, [pc, #504]	; (8005ba0 <main+0xba4>)
 80059a8:	545a      	strb	r2, [r3, r1]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 80059aa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80059ae:	3301      	adds	r3, #1
 80059b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80059b4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d9e8      	bls.n	800598e <main+0x992>
										transmit_in (virt_in);  //tran first package
 80059bc:	4878      	ldr	r0, [pc, #480]	; (8005ba0 <main+0xba4>)
 80059be:	f7fb fee3 	bl	8001788 <transmit_in>
										break;
 80059c2:	e008      	b.n	80059d6 <main+0x9da>
							for ( cntt = 0; cntt < mInOut_Number; cntt++)
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	3301      	adds	r3, #1
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ca:	4b71      	ldr	r3, [pc, #452]	; (8005b90 <main+0xb94>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d2:	4293      	cmp	r3, r2
 80059d4:	dba8      	blt.n	8005928 <main+0x92c>
							}
						}
					}
				}
			}
			virt_key_cnt =0;
 80059d6:	4b73      	ldr	r3, [pc, #460]	; (8005ba4 <main+0xba8>)
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
			Keytimout = MAXLONGVALUE;
 80059dc:	4b72      	ldr	r3, [pc, #456]	; (8005ba8 <main+0xbac>)
 80059de:	4a73      	ldr	r2, [pc, #460]	; (8005bac <main+0xbb0>)
 80059e0:	601a      	str	r2, [r3, #0]
			LedOfftimout = LEDTIMEOUT/10;
 80059e2:	4b73      	ldr	r3, [pc, #460]	; (8005bb0 <main+0xbb4>)
 80059e4:	2232      	movs	r2, #50	; 0x32
 80059e6:	601a      	str	r2, [r3, #0]
			virt_key[0] = 0;
 80059e8:	4b72      	ldr	r3, [pc, #456]	; (8005bb4 <main+0xbb8>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
			virt_key[1] = 0;
 80059ee:	4b71      	ldr	r3, [pc, #452]	; (8005bb4 <main+0xbb8>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	705a      	strb	r2, [r3, #1]
		}
		if (Check_InChange(instate, inold))					// input state changed
 80059f4:	4970      	ldr	r1, [pc, #448]	; (8005bb8 <main+0xbbc>)
 80059f6:	4869      	ldr	r0, [pc, #420]	; (8005b9c <main+0xba0>)
 80059f8:	f7fe fa34 	bl	8003e64 <Check_InChange>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f43f acf5 	beq.w	80053ee <main+0x3f2>
			{
				for (i = 0; i < mInOut_Number; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005a0a:	e0b1      	b.n	8005b70 <main+0xb74>
					{// check all inputs
						help = bit_select (instate[i/8], i%8);
 8005a0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005a10:	08db      	lsrs	r3, r3, #3
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b61      	ldr	r3, [pc, #388]	; (8005b9c <main+0xba0>)
 8005a18:	5c9b      	ldrb	r3, [r3, r2]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	fa42 f303 	asr.w	r3, r2, r3
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <main+0xbc0>)
 8005a32:	701a      	strb	r2, [r3, #0]
						if (help != bit_select (inold[i/8], i%8))
 8005a34:	4b61      	ldr	r3, [pc, #388]	; (8005bbc <main+0xbc0>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005a3e:	08db      	lsrs	r3, r3, #3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	4b5c      	ldr	r3, [pc, #368]	; (8005bb8 <main+0xbbc>)
 8005a46:	5c5b      	ldrb	r3, [r3, r1]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	fa41 f303 	asr.w	r3, r1, r3
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d07e      	beq.n	8005b5c <main+0xb60>
							{// input has changed
								inpar [i][IO_STATE] = help;					// set input state
 8005a5e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005a62:	4b56      	ldr	r3, [pc, #344]	; (8005bbc <main+0xbc0>)
 8005a64:	7818      	ldrb	r0, [r3, #0]
 8005a66:	494c      	ldr	r1, [pc, #304]	; (8005b98 <main+0xb9c>)
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	440b      	add	r3, r1
 8005a70:	3305      	adds	r3, #5
 8005a72:	4602      	mov	r2, r0
 8005a74:	701a      	strb	r2, [r3, #0]
								if (inpar [i][IO_BASIC_FUNC])				// input has a function
 8005a76:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005a7a:	4947      	ldr	r1, [pc, #284]	; (8005b98 <main+0xb9c>)
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d068      	beq.n	8005b5c <main+0xb60>
									{
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8005a90:	e013      	b.n	8005aba <main+0xabe>
											virt_in [j] = inpar [i][j];
 8005a92:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005a96:	f897 004a 	ldrb.w	r0, [r7, #74]	; 0x4a
 8005a9a:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8005a9e:	4c3e      	ldr	r4, [pc, #248]	; (8005b98 <main+0xb9c>)
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	4423      	add	r3, r4
 8005aa8:	4403      	add	r3, r0
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	4b3c      	ldr	r3, [pc, #240]	; (8005ba0 <main+0xba4>)
 8005aae:	545a      	strb	r2, [r3, r1]
										for (j = 0; j < MAX_IO_TYPE; j++)					// write input to virtual input object
 8005ab0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8005aba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005abe:	2b06      	cmp	r3, #6
 8005ac0:	d9e7      	bls.n	8005a92 <main+0xa96>
										switch (inpar [i][IO_BASIC_FUNC])
 8005ac2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005ac6:	4934      	ldr	r1, [pc, #208]	; (8005b98 <main+0xb9c>)
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	440b      	add	r3, r1
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b84      	cmp	r3, #132	; 0x84
 8005ad4:	d03b      	beq.n	8005b4e <main+0xb52>
 8005ad6:	2b84      	cmp	r3, #132	; 0x84
 8005ad8:	dc3c      	bgt.n	8005b54 <main+0xb58>
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d02f      	beq.n	8005b3e <main+0xb42>
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	d138      	bne.n	8005b54 <main+0xb58>
											{
												case (CAR_CALL):						// standard car call
													if (help)
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <main+0xbc0>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d03a      	beq.n	8005b60 <main+0xb64>
													{
														transmit_in (virt_in);
 8005aea:	482d      	ldr	r0, [pc, #180]	; (8005ba0 <main+0xba4>)
 8005aec:	f7fb fe4c 	bl	8001788 <transmit_in>
														if(cntt >= 0)
 8005af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	db34      	blt.n	8005b60 <main+0xb64>
														{
															bit_reset(instate[cntt/8],cntt%8);
 8005af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	da00      	bge.n	8005afe <main+0xb02>
 8005afc:	3307      	adds	r3, #7
 8005afe:	10db      	asrs	r3, r3, #3
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <main+0xba0>)
 8005b04:	5c9b      	ldrb	r3, [r3, r2]
 8005b06:	b259      	sxtb	r1, r3
 8005b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0a:	4258      	negs	r0, r3
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	f000 0007 	and.w	r0, r0, #7
 8005b14:	bf58      	it	pl
 8005b16:	4243      	negpl	r3, r0
 8005b18:	2001      	movs	r0, #1
 8005b1a:	fa00 f303 	lsl.w	r3, r0, r3
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	400b      	ands	r3, r1
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	b2d9      	uxtb	r1, r3
 8005b2a:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <main+0xba0>)
 8005b2c:	5499      	strb	r1, [r3, r2]
															targetfloor_reg = targetfloor;
 8005b2e:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <main+0xb90>)
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	4b23      	ldr	r3, [pc, #140]	; (8005bc0 <main+0xbc4>)
 8005b34:	701a      	strb	r2, [r3, #0]
															targetfloor = -1;
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <main+0xb90>)
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	701a      	strb	r2, [r3, #0]
														}

													}
													break;
 8005b3c:	e010      	b.n	8005b60 <main+0xb64>

												case (HALL_CALL):						// standard hall call
													if (help)
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <main+0xbc0>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <main+0xb68>
														{// landing call misuse
															transmit_in (virt_in);
 8005b46:	4816      	ldr	r0, [pc, #88]	; (8005ba0 <main+0xba4>)
 8005b48:	f7fb fe1e 	bl	8001788 <transmit_in>
														}
													break;
 8005b4c:	e00a      	b.n	8005b64 <main+0xb68>

												case (LOAD_IN):							// load measurement input
													transmit_load ();
 8005b4e:	f7fb fe67 	bl	8001820 <transmit_load>
													break;
 8005b52:	e008      	b.n	8005b66 <main+0xb6a>

												default:
													transmit_in (virt_in);
 8005b54:	4812      	ldr	r0, [pc, #72]	; (8005ba0 <main+0xba4>)
 8005b56:	f7fb fe17 	bl	8001788 <transmit_in>
													break;
 8005b5a:	e004      	b.n	8005b66 <main+0xb6a>
											}
				 					}
 8005b5c:	bf00      	nop
 8005b5e:	e002      	b.n	8005b66 <main+0xb6a>
													break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <main+0xb6a>
													break;
 8005b64:	bf00      	nop
				for (i = 0; i < mInOut_Number; i++)
 8005b66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <main+0xb94>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	f4ff af47 	bcc.w	8005a0c <main+0xa10>
							}
					}
				for(i=0; i<mMax_InByte; i++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005b84:	e02b      	b.n	8005bde <main+0xbe2>
 8005b86:	bf00      	nop
 8005b88:	200008a0 	.word	0x200008a0
 8005b8c:	200003b2 	.word	0x200003b2
 8005b90:	200001ec 	.word	0x200001ec
 8005b94:	20000328 	.word	0x20000328
 8005b98:	2000064c 	.word	0x2000064c
 8005b9c:	20000894 	.word	0x20000894
 8005ba0:	2000087c 	.word	0x2000087c
 8005ba4:	20000342 	.word	0x20000342
 8005ba8:	200001f0 	.word	0x200001f0
 8005bac:	77359400 	.word	0x77359400
 8005bb0:	200001f4 	.word	0x200001f4
 8005bb4:	20000340 	.word	0x20000340
 8005bb8:	20000608 	.word	0x20000608
 8005bbc:	20000b84 	.word	0x20000b84
 8005bc0:	200003b3 	.word	0x200003b3
					inold[i] = instate[i];
 8005bc4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005bc8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005bcc:	4907      	ldr	r1, [pc, #28]	; (8005bec <main+0xbf0>)
 8005bce:	5c89      	ldrb	r1, [r1, r2]
 8005bd0:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <main+0xbf4>)
 8005bd2:	54d1      	strb	r1, [r2, r3]
				for(i=0; i<mMax_InByte; i++)
 8005bd4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <main+0xbf8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d3ec      	bcc.n	8005bc4 <main+0xbc8>
  {
 8005bea:	e400      	b.n	80053ee <main+0x3f2>
 8005bec:	20000894 	.word	0x20000894
 8005bf0:	20000608 	.word	0x20000608
 8005bf4:	20000bf0 	.word	0x20000bf0

08005bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b090      	sub	sp, #64	; 0x40
 8005bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bfe:	f107 0318 	add.w	r3, r7, #24
 8005c02:	2228      	movs	r2, #40	; 0x28
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f003 f9e2 	bl	8008fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005c1a:	2309      	movs	r3, #9
 8005c1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005c24:	2300      	movs	r3, #0
 8005c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c30:	2302      	movs	r3, #2
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005c3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c40:	f107 0318 	add.w	r3, r7, #24
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 ff8b 	bl	8007b60 <HAL_RCC_OscConfig>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8005c50:	f000 f9f0 	bl	8006034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c54:	230f      	movs	r3, #15
 8005c56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005c6c:	1d3b      	adds	r3, r7, #4
 8005c6e:	2102      	movs	r1, #2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f002 f9f5 	bl	8008060 <HAL_RCC_ClockConfig>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005c7c:	f000 f9da 	bl	8006034 <Error_Handler>
  }
}
 8005c80:	bf00      	nop
 8005c82:	3740      	adds	r7, #64	; 0x40
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005c8c:	4b17      	ldr	r3, [pc, #92]	; (8005cec <MX_CAN_Init+0x64>)
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <MX_CAN_Init+0x68>)
 8005c90:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8005c92:	4b16      	ldr	r3, [pc, #88]	; (8005cec <MX_CAN_Init+0x64>)
 8005c94:	2210      	movs	r2, #16
 8005c96:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <MX_CAN_Init+0x64>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <MX_CAN_Init+0x64>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <MX_CAN_Init+0x64>)
 8005ca6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005caa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <MX_CAN_Init+0x64>)
 8005cae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cb2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <MX_CAN_Init+0x64>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <MX_CAN_Init+0x64>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <MX_CAN_Init+0x64>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <MX_CAN_Init+0x64>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005ccc:	4b07      	ldr	r3, [pc, #28]	; (8005cec <MX_CAN_Init+0x64>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <MX_CAN_Init+0x64>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005cd8:	4804      	ldr	r0, [pc, #16]	; (8005cec <MX_CAN_Init+0x64>)
 8005cda:	f000 fc8f 	bl	80065fc <HAL_CAN_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005ce4:	f000 f9a6 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8005ce8:	bf00      	nop
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000854 	.word	0x20000854
 8005cf0:	40006400 	.word	0x40006400

08005cf4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <MX_IWDG_Init+0x2c>)
 8005cfa:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <MX_IWDG_Init+0x30>)
 8005cfc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <MX_IWDG_Init+0x2c>)
 8005d00:	2204      	movs	r2, #4
 8005d02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8005d04:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <MX_IWDG_Init+0x2c>)
 8005d06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005d0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005d0c:	4804      	ldr	r0, [pc, #16]	; (8005d20 <MX_IWDG_Init+0x2c>)
 8005d0e:	f001 fed6 	bl	8007abe <HAL_IWDG_Init>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8005d18:	f000 f98c 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005d1c:	bf00      	nop
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000640 	.word	0x20000640
 8005d24:	40003000 	.word	0x40003000

08005d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	609a      	str	r2, [r3, #8]
 8005d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d46:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <MX_TIM1_Init+0x9c>)
 8005d48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d4c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8005d58:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d5a:	2263      	movs	r2, #99	; 0x63
 8005d5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d5e:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d64:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005d70:	4813      	ldr	r0, [pc, #76]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d72:	f002 fb0f 	bl	8008394 <HAL_TIM_Base_Init>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005d7c:	f000 f95a 	bl	8006034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	480c      	ldr	r0, [pc, #48]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005d8e:	f002 fcab 	bl	80086e8 <HAL_TIM_ConfigClockSource>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005d98:	f000 f94c 	bl	8006034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005da4:	463b      	mov	r3, r7
 8005da6:	4619      	mov	r1, r3
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <MX_TIM1_Init+0x98>)
 8005daa:	f002 fe7d 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005db4:	f000 f93e 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000b28 	.word	0x20000b28
 8005dc4:	40012c00 	.word	0x40012c00

08005dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
 8005dd8:	609a      	str	r2, [r3, #8]
 8005dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ddc:	463b      	mov	r3, r7
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005de4:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8005dec:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005dee:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005df4:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8005dfa:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005dfc:	f241 3287 	movw	r2, #4999	; 0x1387
 8005e00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e02:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e0e:	4814      	ldr	r0, [pc, #80]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005e10:	f002 fac0 	bl	8008394 <HAL_TIM_Base_Init>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005e1a:	f000 f90b 	bl	8006034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e24:	f107 0308 	add.w	r3, r7, #8
 8005e28:	4619      	mov	r1, r3
 8005e2a:	480d      	ldr	r0, [pc, #52]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005e2c:	f002 fc5c 	bl	80086e8 <HAL_TIM_ConfigClockSource>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005e36:	f000 f8fd 	bl	8006034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e42:	463b      	mov	r3, r7
 8005e44:	4619      	mov	r1, r3
 8005e46:	4806      	ldr	r0, [pc, #24]	; (8005e60 <MX_TIM2_Init+0x98>)
 8005e48:	f002 fe2e 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005e52:	f000 f8ef 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005e56:	bf00      	nop
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000ba8 	.word	0x20000ba8

08005e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e68:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e6a:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <MX_USART1_UART_Init+0x50>)
 8005e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e76:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e8a:	220c      	movs	r2, #12
 8005e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e9a:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <MX_USART1_UART_Init+0x4c>)
 8005e9c:	f002 fe74 	bl	8008b88 <HAL_UART_Init>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005ea6:	f000 f8c5 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005eaa:	bf00      	nop
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000ad4 	.word	0x20000ad4
 8005eb4:	40013800 	.word	0x40013800

08005eb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ebe:	4a12      	ldr	r2, [pc, #72]	; (8005f08 <MX_USART2_UART_Init+0x50>)
 8005ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ede:	220c      	movs	r2, #12
 8005ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005eee:	4805      	ldr	r0, [pc, #20]	; (8005f04 <MX_USART2_UART_Init+0x4c>)
 8005ef0:	f002 fe4a 	bl	8008b88 <HAL_UART_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005efa:	f000 f89b 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000bf4 	.word	0x20000bf4
 8005f08:	40004400 	.word	0x40004400

08005f0c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <MX_WWDG_Init+0x38>)
 8005f12:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <MX_WWDG_Init+0x3c>)
 8005f14:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <MX_WWDG_Init+0x38>)
 8005f18:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005f1c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 127;
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <MX_WWDG_Init+0x38>)
 8005f20:	227f      	movs	r2, #127	; 0x7f
 8005f22:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <MX_WWDG_Init+0x38>)
 8005f26:	227f      	movs	r2, #127	; 0x7f
 8005f28:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <MX_WWDG_Init+0x38>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8005f30:	4804      	ldr	r0, [pc, #16]	; (8005f44 <MX_WWDG_Init+0x38>)
 8005f32:	f002 ffe1 	bl	8008ef8 <HAL_WWDG_Init>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8005f3c:	f000 f87a 	bl	8006034 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000b70 	.word	0x20000b70
 8005f48:	40002c00 	.word	0x40002c00

08005f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4a30      	ldr	r2, [pc, #192]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f66:	f043 0320 	orr.w	r3, r3, #32
 8005f6a:	6193      	str	r3, [r2, #24]
 8005f6c:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	4a2a      	ldr	r2, [pc, #168]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f7e:	f043 0304 	orr.w	r3, r3, #4
 8005f82:	6193      	str	r3, [r2, #24]
 8005f84:	4b28      	ldr	r3, [pc, #160]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	4a24      	ldr	r2, [pc, #144]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f96:	f043 0308 	orr.w	r3, r3, #8
 8005f9a:	6193      	str	r3, [r2, #24]
 8005f9c:	4b22      	ldr	r3, [pc, #136]	; (8006028 <MX_GPIO_Init+0xdc>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Out_Pin|HC595_SEL_Pin|SCK_Pin|MOSI_Pin
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f248 11a3 	movw	r1, #33187	; 0x81a3
 8005fae:	481f      	ldr	r0, [pc, #124]	; (800602c <MX_GPIO_Init+0xe0>)
 8005fb0:	f001 fd6d 	bl	8007a8e <HAL_GPIO_WritePin>
                          |UART_DE_Pin|HC166_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Buzzer_Out_Pin HC595_SEL_Pin SCK_Pin MOSI_Pin
                           UART_DE_Pin HC166_SEL_Pin */
  GPIO_InitStruct.Pin = Buzzer_Out_Pin|HC595_SEL_Pin|SCK_Pin|MOSI_Pin
 8005fb4:	f248 13a3 	movw	r3, #33187	; 0x81a3
 8005fb8:	613b      	str	r3, [r7, #16]
                          |UART_DE_Pin|HC166_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc6:	f107 0310 	add.w	r3, r7, #16
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4817      	ldr	r0, [pc, #92]	; (800602c <MX_GPIO_Init+0xe0>)
 8005fce:	f001 fbc3 	bl	8007758 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8005fd2:	2340      	movs	r3, #64	; 0x40
 8005fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8005fde:	f107 0310 	add.w	r3, r7, #16
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4811      	ldr	r0, [pc, #68]	; (800602c <MX_GPIO_Init+0xe0>)
 8005fe6:	f001 fbb7 	bl	8007758 <HAL_GPIO_Init>

  /*Configure GPIO pins : IC_IN1_Pin IC_IN2_Pin IC_IN3_Pin IC_IN11_Pin
                           IC_IN12_Pin IC_IN13_Pin IC_IN14_Pin IC_IN4_Pin
                           IC_IN5_Pin IC_IN6_Pin IC_IN7_Pin IC_IN8_Pin
                           IC_IN9_Pin IC_IN10_Pin */
  GPIO_InitStruct.Pin = IC_IN1_Pin|IC_IN2_Pin|IC_IN3_Pin|IC_IN11_Pin
 8005fea:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8005fee:	613b      	str	r3, [r7, #16]
                          |IC_IN12_Pin|IC_IN13_Pin|IC_IN14_Pin|IC_IN4_Pin
                          |IC_IN5_Pin|IC_IN6_Pin|IC_IN7_Pin|IC_IN8_Pin
                          |IC_IN9_Pin|IC_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	480c      	ldr	r0, [pc, #48]	; (8006030 <MX_GPIO_Init+0xe4>)
 8006000:	f001 fbaa 	bl	8007758 <HAL_GPIO_Init>

  /*Configure GPIO pin : NODE_ID_Pin */
  GPIO_InitStruct.Pin = NODE_ID_Pin;
 8006004:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800600e:	2301      	movs	r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NODE_ID_GPIO_Port, &GPIO_InitStruct);
 8006012:	f107 0310 	add.w	r3, r7, #16
 8006016:	4619      	mov	r1, r3
 8006018:	4805      	ldr	r0, [pc, #20]	; (8006030 <MX_GPIO_Init+0xe4>)
 800601a:	f001 fb9d 	bl	8007758 <HAL_GPIO_Init>

}
 800601e:	bf00      	nop
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40021000 	.word	0x40021000
 800602c:	40010800 	.word	0x40010800
 8006030:	40010c00 	.word	0x40010c00

08006034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006038:	b672      	cpsid	i
}
 800603a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800603c:	e7fe      	b.n	800603c <Error_Handler+0x8>
	...

08006040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_MspInit+0x5c>)
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	4a14      	ldr	r2, [pc, #80]	; (800609c <HAL_MspInit+0x5c>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6193      	str	r3, [r2, #24]
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <HAL_MspInit+0x5c>)
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <HAL_MspInit+0x5c>)
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <HAL_MspInit+0x5c>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006068:	61d3      	str	r3, [r2, #28]
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <HAL_MspInit+0x5c>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_MspInit+0x60>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <HAL_MspInit+0x60>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	40021000 	.word	0x40021000
 80060a0:	40010000 	.word	0x40010000

080060a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ac:	f107 0310 	add.w	r3, r7, #16
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <HAL_CAN_MspInit+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d151      	bne.n	8006168 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80060c4:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <HAL_CAN_MspInit+0xd0>)
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <HAL_CAN_MspInit+0xd0>)
 80060ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060ce:	61d3      	str	r3, [r2, #28]
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_CAN_MspInit+0xd0>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <HAL_CAN_MspInit+0xd0>)
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <HAL_CAN_MspInit+0xd0>)
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	6193      	str	r3, [r2, #24]
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <HAL_CAN_MspInit+0xd0>)
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80060f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006102:	f107 0310 	add.w	r3, r7, #16
 8006106:	4619      	mov	r1, r3
 8006108:	481b      	ldr	r0, [pc, #108]	; (8006178 <HAL_CAN_MspInit+0xd4>)
 800610a:	f001 fb25 	bl	8007758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800610e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006114:	2302      	movs	r3, #2
 8006116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006118:	2303      	movs	r3, #3
 800611a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	4619      	mov	r1, r3
 8006122:	4815      	ldr	r0, [pc, #84]	; (8006178 <HAL_CAN_MspInit+0xd4>)
 8006124:	f001 fb18 	bl	8007758 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8006128:	2200      	movs	r2, #0
 800612a:	2100      	movs	r1, #0
 800612c:	2013      	movs	r0, #19
 800612e:	f001 f990 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006132:	2013      	movs	r0, #19
 8006134:	f001 f9a9 	bl	800748a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006138:	2200      	movs	r2, #0
 800613a:	2100      	movs	r1, #0
 800613c:	2014      	movs	r0, #20
 800613e:	f001 f988 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006142:	2014      	movs	r0, #20
 8006144:	f001 f9a1 	bl	800748a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	2015      	movs	r0, #21
 800614e:	f001 f980 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8006152:	2015      	movs	r0, #21
 8006154:	f001 f999 	bl	800748a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8006158:	2200      	movs	r2, #0
 800615a:	2100      	movs	r1, #0
 800615c:	2016      	movs	r0, #22
 800615e:	f001 f978 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8006162:	2016      	movs	r0, #22
 8006164:	f001 f991 	bl	800748a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006168:	bf00      	nop
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40006400 	.word	0x40006400
 8006174:	40021000 	.word	0x40021000
 8006178:	40010800 	.word	0x40010800

0800617c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <HAL_TIM_Base_MspInit+0x88>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d11c      	bne.n	80061c8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800618e:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <HAL_TIM_Base_MspInit+0x8c>)
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <HAL_TIM_Base_MspInit+0x8c>)
 8006194:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006198:	6193      	str	r3, [r2, #24]
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <HAL_TIM_Base_MspInit+0x8c>)
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80061a6:	2200      	movs	r2, #0
 80061a8:	2100      	movs	r1, #0
 80061aa:	2018      	movs	r0, #24
 80061ac:	f001 f951 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80061b0:	2018      	movs	r0, #24
 80061b2:	f001 f96a 	bl	800748a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80061b6:	2200      	movs	r2, #0
 80061b8:	2100      	movs	r1, #0
 80061ba:	2019      	movs	r0, #25
 80061bc:	f001 f949 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80061c0:	2019      	movs	r0, #25
 80061c2:	f001 f962 	bl	800748a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80061c6:	e018      	b.n	80061fa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d0:	d113      	bne.n	80061fa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <HAL_TIM_Base_MspInit+0x8c>)
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	4a0c      	ldr	r2, [pc, #48]	; (8006208 <HAL_TIM_Base_MspInit+0x8c>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	61d3      	str	r3, [r2, #28]
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_TIM_Base_MspInit+0x8c>)
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80061ea:	2200      	movs	r2, #0
 80061ec:	2100      	movs	r1, #0
 80061ee:	201c      	movs	r0, #28
 80061f0:	f001 f92f 	bl	8007452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80061f4:	201c      	movs	r0, #28
 80061f6:	f001 f948 	bl	800748a <HAL_NVIC_EnableIRQ>
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40021000 	.word	0x40021000

0800620c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006214:	f107 0318 	add.w	r3, r7, #24
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a37      	ldr	r2, [pc, #220]	; (8006304 <HAL_UART_MspInit+0xf8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d132      	bne.n	8006292 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800622c:	4b36      	ldr	r3, [pc, #216]	; (8006308 <HAL_UART_MspInit+0xfc>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	4a35      	ldr	r2, [pc, #212]	; (8006308 <HAL_UART_MspInit+0xfc>)
 8006232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006236:	6193      	str	r3, [r2, #24]
 8006238:	4b33      	ldr	r3, [pc, #204]	; (8006308 <HAL_UART_MspInit+0xfc>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006244:	4b30      	ldr	r3, [pc, #192]	; (8006308 <HAL_UART_MspInit+0xfc>)
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	4a2f      	ldr	r2, [pc, #188]	; (8006308 <HAL_UART_MspInit+0xfc>)
 800624a:	f043 0304 	orr.w	r3, r3, #4
 800624e:	6193      	str	r3, [r2, #24]
 8006250:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <HAL_UART_MspInit+0xfc>)
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800625c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006262:	2302      	movs	r3, #2
 8006264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006266:	2303      	movs	r3, #3
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800626a:	f107 0318 	add.w	r3, r7, #24
 800626e:	4619      	mov	r1, r3
 8006270:	4826      	ldr	r0, [pc, #152]	; (800630c <HAL_UART_MspInit+0x100>)
 8006272:	f001 fa71 	bl	8007758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800627a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006280:	2300      	movs	r3, #0
 8006282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006284:	f107 0318 	add.w	r3, r7, #24
 8006288:	4619      	mov	r1, r3
 800628a:	4820      	ldr	r0, [pc, #128]	; (800630c <HAL_UART_MspInit+0x100>)
 800628c:	f001 fa64 	bl	8007758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006290:	e034      	b.n	80062fc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_UART_MspInit+0x104>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d12f      	bne.n	80062fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800629c:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <HAL_UART_MspInit+0xfc>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	4a19      	ldr	r2, [pc, #100]	; (8006308 <HAL_UART_MspInit+0xfc>)
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a6:	61d3      	str	r3, [r2, #28]
 80062a8:	4b17      	ldr	r3, [pc, #92]	; (8006308 <HAL_UART_MspInit+0xfc>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <HAL_UART_MspInit+0xfc>)
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_UART_MspInit+0xfc>)
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	6193      	str	r3, [r2, #24]
 80062c0:	4b11      	ldr	r3, [pc, #68]	; (8006308 <HAL_UART_MspInit+0xfc>)
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80062cc:	2304      	movs	r3, #4
 80062ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d0:	2302      	movs	r3, #2
 80062d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062d4:	2303      	movs	r3, #3
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d8:	f107 0318 	add.w	r3, r7, #24
 80062dc:	4619      	mov	r1, r3
 80062de:	480b      	ldr	r0, [pc, #44]	; (800630c <HAL_UART_MspInit+0x100>)
 80062e0:	f001 fa3a 	bl	8007758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80062e4:	2308      	movs	r3, #8
 80062e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f0:	f107 0318 	add.w	r3, r7, #24
 80062f4:	4619      	mov	r1, r3
 80062f6:	4805      	ldr	r0, [pc, #20]	; (800630c <HAL_UART_MspInit+0x100>)
 80062f8:	f001 fa2e 	bl	8007758 <HAL_GPIO_Init>
}
 80062fc:	bf00      	nop
 80062fe:	3728      	adds	r7, #40	; 0x28
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40013800 	.word	0x40013800
 8006308:	40021000 	.word	0x40021000
 800630c:	40010800 	.word	0x40010800
 8006310:	40004400 	.word	0x40004400

08006314 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a09      	ldr	r2, [pc, #36]	; (8006348 <HAL_WWDG_MspInit+0x34>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10b      	bne.n	800633e <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_WWDG_MspInit+0x38>)
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4a08      	ldr	r2, [pc, #32]	; (800634c <HAL_WWDG_MspInit+0x38>)
 800632c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006330:	61d3      	str	r3, [r2, #28]
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_WWDG_MspInit+0x38>)
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr
 8006348:	40002c00 	.word	0x40002c00
 800634c:	40021000 	.word	0x40021000

08006350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006354:	e7fe      	b.n	8006354 <NMI_Handler+0x4>

08006356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006356:	b480      	push	{r7}
 8006358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800635a:	e7fe      	b.n	800635a <HardFault_Handler+0x4>

0800635c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006360:	e7fe      	b.n	8006360 <MemManage_Handler+0x4>

08006362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006362:	b480      	push	{r7}
 8006364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006366:	e7fe      	b.n	8006366 <BusFault_Handler+0x4>

08006368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800636c:	e7fe      	b.n	800636c <UsageFault_Handler+0x4>

0800636e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800636e:	b480      	push	{r7}
 8006370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800637a:	b480      	push	{r7}
 800637c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006386:	b480      	push	{r7}
 8006388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006396:	f000 f8f1 	bl	800657c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80063a4:	4802      	ldr	r0, [pc, #8]	; (80063b0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80063a6:	f000 fd67 	bl	8006e78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000854 	.word	0x20000854

080063b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80063b8:	4802      	ldr	r0, [pc, #8]	; (80063c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80063ba:	f000 fd5d 	bl	8006e78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000854 	.word	0x20000854

080063c8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80063cc:	4802      	ldr	r0, [pc, #8]	; (80063d8 <CAN1_RX1_IRQHandler+0x10>)
 80063ce:	f000 fd53 	bl	8006e78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000854 	.word	0x20000854

080063dc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80063e0:	4802      	ldr	r0, [pc, #8]	; (80063ec <CAN1_SCE_IRQHandler+0x10>)
 80063e2:	f000 fd49 	bl	8006e78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000854 	.word	0x20000854

080063f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063f4:	4802      	ldr	r0, [pc, #8]	; (8006400 <TIM1_BRK_IRQHandler+0x10>)
 80063f6:	f002 f86f 	bl	80084d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000b28 	.word	0x20000b28

08006404 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006408:	4802      	ldr	r0, [pc, #8]	; (8006414 <TIM1_UP_IRQHandler+0x10>)
 800640a:	f002 f865 	bl	80084d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000b28 	.word	0x20000b28

08006418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <TIM2_IRQHandler+0x10>)
 800641e:	f002 f85b 	bl	80084d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000ba8 	.word	0x20000ba8

0800642c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <_sbrk+0x5c>)
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <_sbrk+0x60>)
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006440:	4b13      	ldr	r3, [pc, #76]	; (8006490 <_sbrk+0x64>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006448:	4b11      	ldr	r3, [pc, #68]	; (8006490 <_sbrk+0x64>)
 800644a:	4a12      	ldr	r2, [pc, #72]	; (8006494 <_sbrk+0x68>)
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800644e:	4b10      	ldr	r3, [pc, #64]	; (8006490 <_sbrk+0x64>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d207      	bcs.n	800646c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800645c:	f002 fd80 	bl	8008f60 <__errno>
 8006460:	4603      	mov	r3, r0
 8006462:	220c      	movs	r2, #12
 8006464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	e009      	b.n	8006480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <_sbrk+0x64>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <_sbrk+0x64>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	4a05      	ldr	r2, [pc, #20]	; (8006490 <_sbrk+0x64>)
 800647c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20005000 	.word	0x20005000
 800648c:	00000400 	.word	0x00000400
 8006490:	200003d4 	.word	0x200003d4
 8006494:	20000c88 	.word	0x20000c88

08006498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064a4:	480c      	ldr	r0, [pc, #48]	; (80064d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80064a6:	490d      	ldr	r1, [pc, #52]	; (80064dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80064a8:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80064aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064ac:	e002      	b.n	80064b4 <LoopCopyDataInit>

080064ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064b2:	3304      	adds	r3, #4

080064b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064b8:	d3f9      	bcc.n	80064ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80064bc:	4c0a      	ldr	r4, [pc, #40]	; (80064e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80064be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064c0:	e001      	b.n	80064c6 <LoopFillZerobss>

080064c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064c4:	3204      	adds	r2, #4

080064c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064c8:	d3fb      	bcc.n	80064c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064ca:	f7ff ffe5 	bl	8006498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ce:	f002 fd4d 	bl	8008f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064d2:	f7fe fd93 	bl	8004ffc <main>
  bx lr
 80064d6:	4770      	bx	lr
  ldr r0, =_sdata
 80064d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064dc:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 80064e0:	08009a54 	.word	0x08009a54
  ldr r2, =_sbss
 80064e4:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80064e8:	20000c88 	.word	0x20000c88

080064ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064ec:	e7fe      	b.n	80064ec <ADC1_2_IRQHandler>
	...

080064f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064f4:	4b08      	ldr	r3, [pc, #32]	; (8006518 <HAL_Init+0x28>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a07      	ldr	r2, [pc, #28]	; (8006518 <HAL_Init+0x28>)
 80064fa:	f043 0310 	orr.w	r3, r3, #16
 80064fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006500:	2003      	movs	r0, #3
 8006502:	f000 ff9b 	bl	800743c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006506:	2000      	movs	r0, #0
 8006508:	f000 f808 	bl	800651c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800650c:	f7ff fd98 	bl	8006040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40022000 	.word	0x40022000

0800651c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_InitTick+0x54>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b12      	ldr	r3, [pc, #72]	; (8006574 <HAL_InitTick+0x58>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006532:	fbb3 f3f1 	udiv	r3, r3, r1
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	4618      	mov	r0, r3
 800653c:	f000 ffb7 	bl	80074ae <HAL_SYSTICK_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e00e      	b.n	8006568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d80a      	bhi.n	8006566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006550:	2200      	movs	r2, #0
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	f000 ff7b 	bl	8007452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <HAL_InitTick+0x5c>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	2000020c 	.word	0x2000020c
 8006574:	20000214 	.word	0x20000214
 8006578:	20000210 	.word	0x20000210

0800657c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <HAL_IncTick+0x1c>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	4b05      	ldr	r3, [pc, #20]	; (800659c <HAL_IncTick+0x20>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4413      	add	r3, r2
 800658c:	4a03      	ldr	r2, [pc, #12]	; (800659c <HAL_IncTick+0x20>)
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	20000214 	.word	0x20000214
 800659c:	20000c54 	.word	0x20000c54

080065a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  return uwTick;
 80065a4:	4b02      	ldr	r3, [pc, #8]	; (80065b0 <HAL_GetTick+0x10>)
 80065a6:	681b      	ldr	r3, [r3, #0]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr
 80065b0:	20000c54 	.word	0x20000c54

080065b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065bc:	f7ff fff0 	bl	80065a0 <HAL_GetTick>
 80065c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d005      	beq.n	80065da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_Delay+0x44>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065da:	bf00      	nop
 80065dc:	f7ff ffe0 	bl	80065a0 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d8f7      	bhi.n	80065dc <HAL_Delay+0x28>
  {
  }
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000214 	.word	0x20000214

080065fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e0ed      	b.n	80067ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fd42 	bl	80060a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006630:	f7ff ffb6 	bl	80065a0 <HAL_GetTick>
 8006634:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006636:	e012      	b.n	800665e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006638:	f7ff ffb2 	bl	80065a0 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b0a      	cmp	r3, #10
 8006644:	d90b      	bls.n	800665e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2205      	movs	r2, #5
 8006656:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e0c5      	b.n	80067ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0e5      	beq.n	8006638 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0202 	bic.w	r2, r2, #2
 800667a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800667c:	f7ff ff90 	bl	80065a0 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006682:	e012      	b.n	80066aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006684:	f7ff ff8c 	bl	80065a0 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b0a      	cmp	r3, #10
 8006690:	d90b      	bls.n	80066aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2205      	movs	r2, #5
 80066a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e09f      	b.n	80067ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7e1b      	ldrb	r3, [r3, #24]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d108      	bne.n	80066d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e007      	b.n	80066e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	7e5b      	ldrb	r3, [r3, #25]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d108      	bne.n	80066fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e007      	b.n	800670c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800670a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7e9b      	ldrb	r3, [r3, #26]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d108      	bne.n	8006726 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0220 	orr.w	r2, r2, #32
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e007      	b.n	8006736 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0220 	bic.w	r2, r2, #32
 8006734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7edb      	ldrb	r3, [r3, #27]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d108      	bne.n	8006750 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0210 	bic.w	r2, r2, #16
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e007      	b.n	8006760 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0210 	orr.w	r2, r2, #16
 800675e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	7f1b      	ldrb	r3, [r3, #28]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d108      	bne.n	800677a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0208 	orr.w	r2, r2, #8
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e007      	b.n	800678a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0208 	bic.w	r2, r2, #8
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7f5b      	ldrb	r3, [r3, #29]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d108      	bne.n	80067a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0204 	orr.w	r2, r2, #4
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e007      	b.n	80067b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	ea42 0103 	orr.w	r1, r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b087      	sub	sp, #28
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006808:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800680a:	7cfb      	ldrb	r3, [r7, #19]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d003      	beq.n	8006818 <HAL_CAN_ConfigFilter+0x26>
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	2b02      	cmp	r3, #2
 8006814:	f040 80aa 	bne.w	800696c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2201      	movs	r2, #1
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	43db      	mvns	r3, r3
 8006842:	401a      	ands	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d123      	bne.n	800689a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	43db      	mvns	r3, r3
 800685c:	401a      	ands	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006874:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	3248      	adds	r2, #72	; 0x48
 800687a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800688e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006890:	6979      	ldr	r1, [r7, #20]
 8006892:	3348      	adds	r3, #72	; 0x48
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	440b      	add	r3, r1
 8006898:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d122      	bne.n	80068e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80068c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3248      	adds	r2, #72	; 0x48
 80068c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80068de:	6979      	ldr	r1, [r7, #20]
 80068e0:	3348      	adds	r3, #72	; 0x48
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	440b      	add	r3, r1
 80068e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	401a      	ands	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006902:	e007      	b.n	8006914 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	431a      	orrs	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	43db      	mvns	r3, r3
 8006926:	401a      	ands	r2, r3
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800692e:	e007      	b.n	8006940 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	431a      	orrs	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d107      	bne.n	8006958 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	431a      	orrs	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800695e:	f023 0201 	bic.w	r2, r3, #1
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	e006      	b.n	800697a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
  }
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d12e      	bne.n	80069f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069b0:	f7ff fdf6 	bl	80065a0 <HAL_GetTick>
 80069b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80069b6:	e012      	b.n	80069de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80069b8:	f7ff fdf2 	bl	80065a0 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b0a      	cmp	r3, #10
 80069c4:	d90b      	bls.n	80069de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2205      	movs	r2, #5
 80069d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e012      	b.n	8006a04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e5      	bne.n	80069b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e006      	b.n	8006a04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
  }
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b089      	sub	sp, #36	; 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006a2a:	7ffb      	ldrb	r3, [r7, #31]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d003      	beq.n	8006a38 <HAL_CAN_AddTxMessage+0x2c>
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	f040 80b8 	bne.w	8006ba8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a0 	beq.w	8006b98 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	0e1b      	lsrs	r3, r3, #24
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d907      	bls.n	8006a78 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e09e      	b.n	8006bb6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006a78:	2201      	movs	r2, #1
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	6809      	ldr	r1, [r1, #0]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	440b      	add	r3, r1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e00f      	b.n	8006ac6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ab0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006aba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	3318      	adds	r3, #24
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	440b      	add	r3, r1
 8006ac4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	440b      	add	r3, r1
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	7d1b      	ldrb	r3, [r3, #20]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d111      	bne.n	8006b06 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	3318      	adds	r3, #24
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	4413      	add	r3, r2
 8006aee:	3304      	adds	r3, #4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	6811      	ldr	r1, [r2, #0]
 8006af6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	3318      	adds	r3, #24
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	440b      	add	r3, r1
 8006b02:	3304      	adds	r3, #4
 8006b04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3307      	adds	r3, #7
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	061a      	lsls	r2, r3, #24
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3306      	adds	r3, #6
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3305      	adds	r3, #5
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	4313      	orrs	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	3204      	adds	r2, #4
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	4610      	mov	r0, r2
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	6811      	ldr	r1, [r2, #0]
 8006b2e:	ea43 0200 	orr.w	r2, r3, r0
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	440b      	add	r3, r1
 8006b38:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006b3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3303      	adds	r3, #3
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	061a      	lsls	r2, r3, #24
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3302      	adds	r3, #2
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3301      	adds	r3, #1
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	4610      	mov	r0, r2
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	6811      	ldr	r1, [r2, #0]
 8006b64:	ea43 0200 	orr.w	r2, r3, r0
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006b72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	3318      	adds	r3, #24
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	4413      	add	r3, r2
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	6811      	ldr	r1, [r2, #0]
 8006b86:	f043 0201 	orr.w	r2, r3, #1
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	440b      	add	r3, r1
 8006b92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e00e      	b.n	8006bb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e006      	b.n	8006bb6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
  }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3724      	adds	r7, #36	; 0x24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bd4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d003      	beq.n	8006be4 <HAL_CAN_GetRxMessage+0x24>
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	f040 80f3 	bne.w	8006dca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10e      	bne.n	8006c08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d116      	bne.n	8006c26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0e7      	b.n	8006dd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d107      	bne.n	8006c26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0d8      	b.n	8006dd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	331b      	adds	r3, #27
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	4413      	add	r3, r2
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0204 	and.w	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10c      	bne.n	8006c5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	331b      	adds	r3, #27
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	4413      	add	r3, r2
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	0d5b      	lsrs	r3, r3, #21
 8006c54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	e00b      	b.n	8006c76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	331b      	adds	r3, #27
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	4413      	add	r3, r2
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	08db      	lsrs	r3, r3, #3
 8006c6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	331b      	adds	r3, #27
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	4413      	add	r3, r2
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0202 	and.w	r2, r3, #2
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	331b      	adds	r3, #27
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	4413      	add	r3, r2
 8006c98:	3304      	adds	r3, #4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 020f 	and.w	r2, r3, #15
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	331b      	adds	r3, #27
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	4413      	add	r3, r2
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	331b      	adds	r3, #27
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3304      	adds	r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	0a1a      	lsrs	r2, r3, #8
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	0c1a      	lsrs	r2, r3, #16
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	3302      	adds	r3, #2
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	0e1a      	lsrs	r2, r3, #24
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	3303      	adds	r3, #3
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	0a1a      	lsrs	r2, r3, #8
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	3305      	adds	r3, #5
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	0c1a      	lsrs	r2, r3, #16
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	3306      	adds	r3, #6
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	0e1a      	lsrs	r2, r3, #24
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	3307      	adds	r3, #7
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0220 	orr.w	r2, r2, #32
 8006db2:	60da      	str	r2, [r3, #12]
 8006db4:	e007      	b.n	8006dc6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0220 	orr.w	r2, r2, #32
 8006dc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e006      	b.n	8006dd8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr

08006de2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006df2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d002      	beq.n	8006e00 <HAL_CAN_ActivateNotification+0x1e>
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d109      	bne.n	8006e14 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6959      	ldr	r1, [r3, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e006      	b.n	8006e22 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e3c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d002      	beq.n	8006e4a <HAL_CAN_DeactivateNotification+0x1e>
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d10a      	bne.n	8006e60 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6959      	ldr	r1, [r3, #20]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	43da      	mvns	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	400a      	ands	r2, r1
 8006e5a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e006      	b.n	8006e6e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d07c      	beq.n	8006fb8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d023      	beq.n	8006f10 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7f9 faa0 	bl	8000420 <HAL_CAN_TxMailbox0CompleteCallback>
 8006ee0:	e016      	b.n	8006f10 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef4:	e00c      	b.n	8006f10 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
 8006f08:	e002      	b.n	8006f10 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f96b 	bl	80071e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d024      	beq.n	8006f64 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7f9 fa88 	bl	8000444 <HAL_CAN_TxMailbox1CompleteCallback>
 8006f34:	e016      	b.n	8006f64 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
 8006f48:	e00c      	b.n	8006f64 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5c:	e002      	b.n	8006f64 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f94a 	bl	80071f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d024      	beq.n	8006fb8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7f9 fa70 	bl	8000468 <HAL_CAN_TxMailbox2CompleteCallback>
 8006f88:	e016      	b.n	8006fb8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9c:	e00c      	b.n	8006fb8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	e002      	b.n	8006fb8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f929 	bl	800720a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00c      	beq.n	8006fdc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2210      	movs	r2, #16
 8006fda:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f90f 	bl	800721c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7f9 f934 	bl	8000284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00c      	beq.n	8007040 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007036:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2210      	movs	r2, #16
 800703e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2208      	movs	r2, #8
 800705a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f8e6 	bl	800722e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7f9 f866 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d006      	beq.n	80070a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2210      	movs	r2, #16
 800709a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8cf 	bl	8007240 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d006      	beq.n	80070c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2208      	movs	r2, #8
 80070bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8c7 	bl	8007252 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d07b      	beq.n	80071c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d072      	beq.n	80071be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f043 0302 	orr.w	r3, r3, #2
 800710e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007116:	2b00      	cmp	r3, #0
 8007118:	d008      	beq.n	800712c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	f043 0304 	orr.w	r3, r3, #4
 800712a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007132:	2b00      	cmp	r3, #0
 8007134:	d043      	beq.n	80071be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800713c:	2b00      	cmp	r3, #0
 800713e:	d03e      	beq.n	80071be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007146:	2b60      	cmp	r3, #96	; 0x60
 8007148:	d02b      	beq.n	80071a2 <HAL_CAN_IRQHandler+0x32a>
 800714a:	2b60      	cmp	r3, #96	; 0x60
 800714c:	d82e      	bhi.n	80071ac <HAL_CAN_IRQHandler+0x334>
 800714e:	2b50      	cmp	r3, #80	; 0x50
 8007150:	d022      	beq.n	8007198 <HAL_CAN_IRQHandler+0x320>
 8007152:	2b50      	cmp	r3, #80	; 0x50
 8007154:	d82a      	bhi.n	80071ac <HAL_CAN_IRQHandler+0x334>
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d019      	beq.n	800718e <HAL_CAN_IRQHandler+0x316>
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d826      	bhi.n	80071ac <HAL_CAN_IRQHandler+0x334>
 800715e:	2b30      	cmp	r3, #48	; 0x30
 8007160:	d010      	beq.n	8007184 <HAL_CAN_IRQHandler+0x30c>
 8007162:	2b30      	cmp	r3, #48	; 0x30
 8007164:	d822      	bhi.n	80071ac <HAL_CAN_IRQHandler+0x334>
 8007166:	2b10      	cmp	r3, #16
 8007168:	d002      	beq.n	8007170 <HAL_CAN_IRQHandler+0x2f8>
 800716a:	2b20      	cmp	r3, #32
 800716c:	d005      	beq.n	800717a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800716e:	e01d      	b.n	80071ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	f043 0308 	orr.w	r3, r3, #8
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007178:	e019      	b.n	80071ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	f043 0310 	orr.w	r3, r3, #16
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007182:	e014      	b.n	80071ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800718c:	e00f      	b.n	80071ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007196:	e00a      	b.n	80071ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80071a0:	e005      	b.n	80071ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80071aa:	e000      	b.n	80071ae <HAL_CAN_IRQHandler+0x336>
            break;
 80071ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2204      	movs	r2, #4
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f843 	bl	8007264 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80071de:	bf00      	nop
 80071e0:	3728      	adds	r7, #40	; 0x28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr

080071f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr

0800722e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
	...

08007278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <__NVIC_SetPriorityGrouping+0x44>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007294:	4013      	ands	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072aa:	4a04      	ldr	r2, [pc, #16]	; (80072bc <__NVIC_SetPriorityGrouping+0x44>)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	60d3      	str	r3, [r2, #12]
}
 80072b0:	bf00      	nop
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <__NVIC_GetPriorityGrouping+0x18>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	f003 0307 	and.w	r3, r3, #7
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	e000ed00 	.word	0xe000ed00

080072dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	db0b      	blt.n	8007306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	f003 021f 	and.w	r2, r3, #31
 80072f4:	4906      	ldr	r1, [pc, #24]	; (8007310 <__NVIC_EnableIRQ+0x34>)
 80072f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	2001      	movs	r0, #1
 80072fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr
 8007310:	e000e100 	.word	0xe000e100

08007314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007324:	2b00      	cmp	r3, #0
 8007326:	db0a      	blt.n	800733e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	490c      	ldr	r1, [pc, #48]	; (8007360 <__NVIC_SetPriority+0x4c>)
 800732e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007332:	0112      	lsls	r2, r2, #4
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	440b      	add	r3, r1
 8007338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800733c:	e00a      	b.n	8007354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	4908      	ldr	r1, [pc, #32]	; (8007364 <__NVIC_SetPriority+0x50>)
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	3b04      	subs	r3, #4
 800734c:	0112      	lsls	r2, r2, #4
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	440b      	add	r3, r1
 8007352:	761a      	strb	r2, [r3, #24]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	e000e100 	.word	0xe000e100
 8007364:	e000ed00 	.word	0xe000ed00

08007368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f1c3 0307 	rsb	r3, r3, #7
 8007382:	2b04      	cmp	r3, #4
 8007384:	bf28      	it	cs
 8007386:	2304      	movcs	r3, #4
 8007388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3304      	adds	r3, #4
 800738e:	2b06      	cmp	r3, #6
 8007390:	d902      	bls.n	8007398 <NVIC_EncodePriority+0x30>
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3b03      	subs	r3, #3
 8007396:	e000      	b.n	800739a <NVIC_EncodePriority+0x32>
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	43da      	mvns	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	401a      	ands	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073b0:	f04f 31ff 	mov.w	r1, #4294967295
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	43d9      	mvns	r1, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073c0:	4313      	orrs	r3, r2
         );
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3724      	adds	r7, #36	; 0x24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80073d0:	f3bf 8f4f 	dsb	sy
}
 80073d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <__NVIC_SystemReset+0x24>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80073de:	4904      	ldr	r1, [pc, #16]	; (80073f0 <__NVIC_SystemReset+0x24>)
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <__NVIC_SystemReset+0x28>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80073e6:	f3bf 8f4f 	dsb	sy
}
 80073ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80073ec:	bf00      	nop
 80073ee:	e7fd      	b.n	80073ec <__NVIC_SystemReset+0x20>
 80073f0:	e000ed00 	.word	0xe000ed00
 80073f4:	05fa0004 	.word	0x05fa0004

080073f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3b01      	subs	r3, #1
 8007404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007408:	d301      	bcc.n	800740e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800740a:	2301      	movs	r3, #1
 800740c:	e00f      	b.n	800742e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <SysTick_Config+0x40>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3b01      	subs	r3, #1
 8007414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007416:	210f      	movs	r1, #15
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	f7ff ff7a 	bl	8007314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <SysTick_Config+0x40>)
 8007422:	2200      	movs	r2, #0
 8007424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <SysTick_Config+0x40>)
 8007428:	2207      	movs	r2, #7
 800742a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	e000e010 	.word	0xe000e010

0800743c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff17 	bl	8007278 <__NVIC_SetPriorityGrouping>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	4603      	mov	r3, r0
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007464:	f7ff ff2c 	bl	80072c0 <__NVIC_GetPriorityGrouping>
 8007468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	6978      	ldr	r0, [r7, #20]
 8007470:	f7ff ff7a 	bl	8007368 <NVIC_EncodePriority>
 8007474:	4602      	mov	r2, r0
 8007476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff ff49 	bl	8007314 <__NVIC_SetPriority>
}
 8007482:	bf00      	nop
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	4603      	mov	r3, r0
 8007492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff ff1f 	bl	80072dc <__NVIC_EnableIRQ>
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80074aa:	f7ff ff8f 	bl	80073cc <__NVIC_SystemReset>

080074ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff ff9e 	bl	80073f8 <SysTick_Config>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80074c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80074e2:	4b2f      	ldr	r3, [pc, #188]	; (80075a0 <HAL_FLASH_Program+0xd8>)
 80074e4:	7e1b      	ldrb	r3, [r3, #24]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_FLASH_Program+0x26>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e054      	b.n	8007598 <HAL_FLASH_Program+0xd0>
 80074ee:	4b2c      	ldr	r3, [pc, #176]	; (80075a0 <HAL_FLASH_Program+0xd8>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80074f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80074f8:	f000 f898 	bl	800762c <FLASH_WaitForLastOperation>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d144      	bne.n	8007590 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d102      	bne.n	8007512 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800750c:	2301      	movs	r3, #1
 800750e:	757b      	strb	r3, [r7, #21]
 8007510:	e007      	b.n	8007522 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d102      	bne.n	800751e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8007518:	2302      	movs	r3, #2
 800751a:	757b      	strb	r3, [r7, #21]
 800751c:	e001      	b.n	8007522 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800751e:	2304      	movs	r3, #4
 8007520:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8007522:	2300      	movs	r3, #0
 8007524:	75bb      	strb	r3, [r7, #22]
 8007526:	e02d      	b.n	8007584 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007528:	7dbb      	ldrb	r3, [r7, #22]
 800752a:	005a      	lsls	r2, r3, #1
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	eb02 0c03 	add.w	ip, r2, r3
 8007532:	7dbb      	ldrb	r3, [r7, #22]
 8007534:	0119      	lsls	r1, r3, #4
 8007536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800753a:	f1c1 0620 	rsb	r6, r1, #32
 800753e:	f1a1 0020 	sub.w	r0, r1, #32
 8007542:	fa22 f401 	lsr.w	r4, r2, r1
 8007546:	fa03 f606 	lsl.w	r6, r3, r6
 800754a:	4334      	orrs	r4, r6
 800754c:	fa23 f000 	lsr.w	r0, r3, r0
 8007550:	4304      	orrs	r4, r0
 8007552:	fa23 f501 	lsr.w	r5, r3, r1
 8007556:	b2a3      	uxth	r3, r4
 8007558:	4619      	mov	r1, r3
 800755a:	4660      	mov	r0, ip
 800755c:	f000 f84a 	bl	80075f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007560:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007564:	f000 f862 	bl	800762c <FLASH_WaitForLastOperation>
 8007568:	4603      	mov	r3, r0
 800756a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <HAL_FLASH_Program+0xdc>)
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <HAL_FLASH_Program+0xdc>)
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800757e:	7dbb      	ldrb	r3, [r7, #22]
 8007580:	3301      	adds	r3, #1
 8007582:	75bb      	strb	r3, [r7, #22]
 8007584:	7dba      	ldrb	r2, [r7, #22]
 8007586:	7d7b      	ldrb	r3, [r7, #21]
 8007588:	429a      	cmp	r2, r3
 800758a:	d3cd      	bcc.n	8007528 <HAL_FLASH_Program+0x60>
 800758c:	e000      	b.n	8007590 <HAL_FLASH_Program+0xc8>
      {
        break;
 800758e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007590:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <HAL_FLASH_Program+0xd8>)
 8007592:	2200      	movs	r2, #0
 8007594:	761a      	strb	r2, [r3, #24]

  return status;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a0:	20000c58 	.word	0x20000c58
 80075a4:	40022000 	.word	0x40022000

080075a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80075b2:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <HAL_FLASH_Unlock+0x40>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00d      	beq.n	80075da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <HAL_FLASH_Unlock+0x40>)
 80075c0:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <HAL_FLASH_Unlock+0x44>)
 80075c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <HAL_FLASH_Unlock+0x40>)
 80075c6:	4a0a      	ldr	r2, [pc, #40]	; (80075f0 <HAL_FLASH_Unlock+0x48>)
 80075c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <HAL_FLASH_Unlock+0x40>)
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80075da:	79fb      	ldrb	r3, [r7, #7]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40022000 	.word	0x40022000
 80075ec:	45670123 	.word	0x45670123
 80075f0:	cdef89ab 	.word	0xcdef89ab

080075f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <FLASH_Program_HalfWord+0x30>)
 8007602:	2200      	movs	r2, #0
 8007604:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007606:	4b08      	ldr	r3, [pc, #32]	; (8007628 <FLASH_Program_HalfWord+0x34>)
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	4a07      	ldr	r2, [pc, #28]	; (8007628 <FLASH_Program_HalfWord+0x34>)
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	887a      	ldrh	r2, [r7, #2]
 8007616:	801a      	strh	r2, [r3, #0]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000c58 	.word	0x20000c58
 8007628:	40022000 	.word	0x40022000

0800762c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007634:	f7fe ffb4 	bl	80065a0 <HAL_GetTick>
 8007638:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800763a:	e010      	b.n	800765e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d00c      	beq.n	800765e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <FLASH_WaitForLastOperation+0x2e>
 800764a:	f7fe ffa9 	bl	80065a0 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d201      	bcs.n	800765e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e025      	b.n	80076aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <FLASH_WaitForLastOperation+0x88>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e8      	bne.n	800763c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <FLASH_WaitForLastOperation+0x88>)
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007676:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <FLASH_WaitForLastOperation+0x88>)
 8007678:	2220      	movs	r2, #32
 800767a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <FLASH_WaitForLastOperation+0x88>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <FLASH_WaitForLastOperation+0x88>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <FLASH_WaitForLastOperation+0x88>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80076a0:	f000 f80a 	bl	80076b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40022000 	.word	0x40022000

080076b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80076c2:	4b23      	ldr	r3, [pc, #140]	; (8007750 <FLASH_SetErrorCode+0x98>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f003 0310 	and.w	r3, r3, #16
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d009      	beq.n	80076e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80076ce:	4b21      	ldr	r3, [pc, #132]	; (8007754 <FLASH_SetErrorCode+0x9c>)
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f043 0302 	orr.w	r3, r3, #2
 80076d6:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <FLASH_SetErrorCode+0x9c>)
 80076d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f043 0310 	orr.w	r3, r3, #16
 80076e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80076e2:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <FLASH_SetErrorCode+0x98>)
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80076ee:	4b19      	ldr	r3, [pc, #100]	; (8007754 <FLASH_SetErrorCode+0x9c>)
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	4a17      	ldr	r2, [pc, #92]	; (8007754 <FLASH_SetErrorCode+0x9c>)
 80076f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f043 0304 	orr.w	r3, r3, #4
 8007700:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007702:	4b13      	ldr	r3, [pc, #76]	; (8007750 <FLASH_SetErrorCode+0x98>)
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00b      	beq.n	8007726 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <FLASH_SetErrorCode+0x9c>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f043 0304 	orr.w	r3, r3, #4
 8007716:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <FLASH_SetErrorCode+0x9c>)
 8007718:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <FLASH_SetErrorCode+0x98>)
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <FLASH_SetErrorCode+0x98>)
 8007720:	f023 0301 	bic.w	r3, r3, #1
 8007724:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f240 1201 	movw	r2, #257	; 0x101
 800772c:	4293      	cmp	r3, r2
 800772e:	d106      	bne.n	800773e <FLASH_SetErrorCode+0x86>
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <FLASH_SetErrorCode+0x98>)
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	4a06      	ldr	r2, [pc, #24]	; (8007750 <FLASH_SetErrorCode+0x98>)
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	61d3      	str	r3, [r2, #28]
}  
 800773c:	e002      	b.n	8007744 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800773e:	4a04      	ldr	r2, [pc, #16]	; (8007750 <FLASH_SetErrorCode+0x98>)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60d3      	str	r3, [r2, #12]
}  
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40022000 	.word	0x40022000
 8007754:	20000c58 	.word	0x20000c58

08007758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007758:	b480      	push	{r7}
 800775a:	b08b      	sub	sp, #44	; 0x2c
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007762:	2300      	movs	r3, #0
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007766:	2300      	movs	r3, #0
 8007768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800776a:	e169      	b.n	8007a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800776c:	2201      	movs	r2, #1
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	4013      	ands	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	429a      	cmp	r2, r3
 8007786:	f040 8158 	bne.w	8007a3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	4a9a      	ldr	r2, [pc, #616]	; (80079f8 <HAL_GPIO_Init+0x2a0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d05e      	beq.n	8007852 <HAL_GPIO_Init+0xfa>
 8007794:	4a98      	ldr	r2, [pc, #608]	; (80079f8 <HAL_GPIO_Init+0x2a0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d875      	bhi.n	8007886 <HAL_GPIO_Init+0x12e>
 800779a:	4a98      	ldr	r2, [pc, #608]	; (80079fc <HAL_GPIO_Init+0x2a4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d058      	beq.n	8007852 <HAL_GPIO_Init+0xfa>
 80077a0:	4a96      	ldr	r2, [pc, #600]	; (80079fc <HAL_GPIO_Init+0x2a4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d86f      	bhi.n	8007886 <HAL_GPIO_Init+0x12e>
 80077a6:	4a96      	ldr	r2, [pc, #600]	; (8007a00 <HAL_GPIO_Init+0x2a8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d052      	beq.n	8007852 <HAL_GPIO_Init+0xfa>
 80077ac:	4a94      	ldr	r2, [pc, #592]	; (8007a00 <HAL_GPIO_Init+0x2a8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d869      	bhi.n	8007886 <HAL_GPIO_Init+0x12e>
 80077b2:	4a94      	ldr	r2, [pc, #592]	; (8007a04 <HAL_GPIO_Init+0x2ac>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d04c      	beq.n	8007852 <HAL_GPIO_Init+0xfa>
 80077b8:	4a92      	ldr	r2, [pc, #584]	; (8007a04 <HAL_GPIO_Init+0x2ac>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d863      	bhi.n	8007886 <HAL_GPIO_Init+0x12e>
 80077be:	4a92      	ldr	r2, [pc, #584]	; (8007a08 <HAL_GPIO_Init+0x2b0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d046      	beq.n	8007852 <HAL_GPIO_Init+0xfa>
 80077c4:	4a90      	ldr	r2, [pc, #576]	; (8007a08 <HAL_GPIO_Init+0x2b0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d85d      	bhi.n	8007886 <HAL_GPIO_Init+0x12e>
 80077ca:	2b12      	cmp	r3, #18
 80077cc:	d82a      	bhi.n	8007824 <HAL_GPIO_Init+0xcc>
 80077ce:	2b12      	cmp	r3, #18
 80077d0:	d859      	bhi.n	8007886 <HAL_GPIO_Init+0x12e>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <HAL_GPIO_Init+0x80>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	08007853 	.word	0x08007853
 80077dc:	0800782d 	.word	0x0800782d
 80077e0:	0800783f 	.word	0x0800783f
 80077e4:	08007881 	.word	0x08007881
 80077e8:	08007887 	.word	0x08007887
 80077ec:	08007887 	.word	0x08007887
 80077f0:	08007887 	.word	0x08007887
 80077f4:	08007887 	.word	0x08007887
 80077f8:	08007887 	.word	0x08007887
 80077fc:	08007887 	.word	0x08007887
 8007800:	08007887 	.word	0x08007887
 8007804:	08007887 	.word	0x08007887
 8007808:	08007887 	.word	0x08007887
 800780c:	08007887 	.word	0x08007887
 8007810:	08007887 	.word	0x08007887
 8007814:	08007887 	.word	0x08007887
 8007818:	08007887 	.word	0x08007887
 800781c:	08007835 	.word	0x08007835
 8007820:	08007849 	.word	0x08007849
 8007824:	4a79      	ldr	r2, [pc, #484]	; (8007a0c <HAL_GPIO_Init+0x2b4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800782a:	e02c      	b.n	8007886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	623b      	str	r3, [r7, #32]
          break;
 8007832:	e029      	b.n	8007888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	3304      	adds	r3, #4
 800783a:	623b      	str	r3, [r7, #32]
          break;
 800783c:	e024      	b.n	8007888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	3308      	adds	r3, #8
 8007844:	623b      	str	r3, [r7, #32]
          break;
 8007846:	e01f      	b.n	8007888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	330c      	adds	r3, #12
 800784e:	623b      	str	r3, [r7, #32]
          break;
 8007850:	e01a      	b.n	8007888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800785a:	2304      	movs	r3, #4
 800785c:	623b      	str	r3, [r7, #32]
          break;
 800785e:	e013      	b.n	8007888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d105      	bne.n	8007874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007868:	2308      	movs	r3, #8
 800786a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	611a      	str	r2, [r3, #16]
          break;
 8007872:	e009      	b.n	8007888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007874:	2308      	movs	r3, #8
 8007876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	615a      	str	r2, [r3, #20]
          break;
 800787e:	e003      	b.n	8007888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007880:	2300      	movs	r3, #0
 8007882:	623b      	str	r3, [r7, #32]
          break;
 8007884:	e000      	b.n	8007888 <HAL_GPIO_Init+0x130>
          break;
 8007886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2bff      	cmp	r3, #255	; 0xff
 800788c:	d801      	bhi.n	8007892 <HAL_GPIO_Init+0x13a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	e001      	b.n	8007896 <HAL_GPIO_Init+0x13e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2bff      	cmp	r3, #255	; 0xff
 800789c:	d802      	bhi.n	80078a4 <HAL_GPIO_Init+0x14c>
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	e002      	b.n	80078aa <HAL_GPIO_Init+0x152>
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	3b08      	subs	r3, #8
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	210f      	movs	r1, #15
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	fa01 f303 	lsl.w	r3, r1, r3
 80078b8:	43db      	mvns	r3, r3
 80078ba:	401a      	ands	r2, r3
 80078bc:	6a39      	ldr	r1, [r7, #32]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	431a      	orrs	r2, r3
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 80b1 	beq.w	8007a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80078d8:	4b4d      	ldr	r3, [pc, #308]	; (8007a10 <HAL_GPIO_Init+0x2b8>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4a4c      	ldr	r2, [pc, #304]	; (8007a10 <HAL_GPIO_Init+0x2b8>)
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	6193      	str	r3, [r2, #24]
 80078e4:	4b4a      	ldr	r3, [pc, #296]	; (8007a10 <HAL_GPIO_Init+0x2b8>)
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80078f0:	4a48      	ldr	r2, [pc, #288]	; (8007a14 <HAL_GPIO_Init+0x2bc>)
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	089b      	lsrs	r3, r3, #2
 80078f6:	3302      	adds	r3, #2
 80078f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	220f      	movs	r2, #15
 8007908:	fa02 f303 	lsl.w	r3, r2, r3
 800790c:	43db      	mvns	r3, r3
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4013      	ands	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a40      	ldr	r2, [pc, #256]	; (8007a18 <HAL_GPIO_Init+0x2c0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <HAL_GPIO_Init+0x1ec>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a3f      	ldr	r2, [pc, #252]	; (8007a1c <HAL_GPIO_Init+0x2c4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00d      	beq.n	8007940 <HAL_GPIO_Init+0x1e8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a3e      	ldr	r2, [pc, #248]	; (8007a20 <HAL_GPIO_Init+0x2c8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d007      	beq.n	800793c <HAL_GPIO_Init+0x1e4>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a3d      	ldr	r2, [pc, #244]	; (8007a24 <HAL_GPIO_Init+0x2cc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d101      	bne.n	8007938 <HAL_GPIO_Init+0x1e0>
 8007934:	2303      	movs	r3, #3
 8007936:	e006      	b.n	8007946 <HAL_GPIO_Init+0x1ee>
 8007938:	2304      	movs	r3, #4
 800793a:	e004      	b.n	8007946 <HAL_GPIO_Init+0x1ee>
 800793c:	2302      	movs	r3, #2
 800793e:	e002      	b.n	8007946 <HAL_GPIO_Init+0x1ee>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <HAL_GPIO_Init+0x1ee>
 8007944:	2300      	movs	r3, #0
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	f002 0203 	and.w	r2, r2, #3
 800794c:	0092      	lsls	r2, r2, #2
 800794e:	4093      	lsls	r3, r2
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007956:	492f      	ldr	r1, [pc, #188]	; (8007a14 <HAL_GPIO_Init+0x2bc>)
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	089b      	lsrs	r3, r3, #2
 800795c:	3302      	adds	r3, #2
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007970:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	492c      	ldr	r1, [pc, #176]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	4313      	orrs	r3, r2
 800797a:	600b      	str	r3, [r1, #0]
 800797c:	e006      	b.n	800798c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	43db      	mvns	r3, r3
 8007986:	4928      	ldr	r1, [pc, #160]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 8007988:	4013      	ands	r3, r2
 800798a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007998:	4b23      	ldr	r3, [pc, #140]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4922      	ldr	r1, [pc, #136]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	604b      	str	r3, [r1, #4]
 80079a4:	e006      	b.n	80079b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	491e      	ldr	r1, [pc, #120]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80079c0:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	4918      	ldr	r1, [pc, #96]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	608b      	str	r3, [r1, #8]
 80079cc:	e006      	b.n	80079dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80079ce:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	43db      	mvns	r3, r3
 80079d6:	4914      	ldr	r1, [pc, #80]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079d8:	4013      	ands	r3, r2
 80079da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d021      	beq.n	8007a2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	490e      	ldr	r1, [pc, #56]	; (8007a28 <HAL_GPIO_Init+0x2d0>)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60cb      	str	r3, [r1, #12]
 80079f4:	e021      	b.n	8007a3a <HAL_GPIO_Init+0x2e2>
 80079f6:	bf00      	nop
 80079f8:	10320000 	.word	0x10320000
 80079fc:	10310000 	.word	0x10310000
 8007a00:	10220000 	.word	0x10220000
 8007a04:	10210000 	.word	0x10210000
 8007a08:	10120000 	.word	0x10120000
 8007a0c:	10110000 	.word	0x10110000
 8007a10:	40021000 	.word	0x40021000
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010800 	.word	0x40010800
 8007a1c:	40010c00 	.word	0x40010c00
 8007a20:	40011000 	.word	0x40011000
 8007a24:	40011400 	.word	0x40011400
 8007a28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <HAL_GPIO_Init+0x304>)
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	43db      	mvns	r3, r3
 8007a34:	4909      	ldr	r1, [pc, #36]	; (8007a5c <HAL_GPIO_Init+0x304>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f47f ae8e 	bne.w	800776c <HAL_GPIO_Init+0x14>
  }
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	372c      	adds	r7, #44	; 0x2c
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bc80      	pop	{r7}
 8007a5a:	4770      	bx	lr
 8007a5c:	40010400 	.word	0x40010400

08007a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	887b      	ldrh	r3, [r7, #2]
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
 8007a7c:	e001      	b.n	8007a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr

08007a8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	807b      	strh	r3, [r7, #2]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a9e:	787b      	ldrb	r3, [r7, #1]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aa4:	887a      	ldrh	r2, [r7, #2]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007aaa:	e003      	b.n	8007ab4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007aac:	887b      	ldrh	r3, [r7, #2]
 8007aae:	041a      	lsls	r2, r3, #16
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	611a      	str	r2, [r3, #16]
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e034      	b.n	8007b3a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f245 5255 	movw	r2, #21845	; 0x5555
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6852      	ldr	r2, [r2, #4]
 8007aec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6892      	ldr	r2, [r2, #8]
 8007af6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007af8:	f7fe fd52 	bl	80065a0 <HAL_GetTick>
 8007afc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007afe:	e00f      	b.n	8007b20 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007b00:	f7fe fd4e 	bl	80065a0 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b27      	cmp	r3, #39	; 0x27
 8007b0c:	d908      	bls.n	8007b20 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e00c      	b.n	8007b3a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e8      	bne.n	8007b00 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007b36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007b52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr

08007b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e26c      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8087 	beq.w	8007c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b80:	4b92      	ldr	r3, [pc, #584]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f003 030c 	and.w	r3, r3, #12
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007b8c:	4b8f      	ldr	r3, [pc, #572]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f003 030c 	and.w	r3, r3, #12
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d112      	bne.n	8007bbe <HAL_RCC_OscConfig+0x5e>
 8007b98:	4b8c      	ldr	r3, [pc, #560]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba4:	d10b      	bne.n	8007bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba6:	4b89      	ldr	r3, [pc, #548]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d06c      	beq.n	8007c8c <HAL_RCC_OscConfig+0x12c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d168      	bne.n	8007c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e246      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc6:	d106      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x76>
 8007bc8:	4b80      	ldr	r3, [pc, #512]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a7f      	ldr	r2, [pc, #508]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e02e      	b.n	8007c34 <HAL_RCC_OscConfig+0xd4>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x98>
 8007bde:	4b7b      	ldr	r3, [pc, #492]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a7a      	ldr	r2, [pc, #488]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4b78      	ldr	r3, [pc, #480]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a77      	ldr	r2, [pc, #476]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e01d      	b.n	8007c34 <HAL_RCC_OscConfig+0xd4>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCC_OscConfig+0xbc>
 8007c02:	4b72      	ldr	r3, [pc, #456]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a71      	ldr	r2, [pc, #452]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	4b6f      	ldr	r3, [pc, #444]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a6e      	ldr	r2, [pc, #440]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e00b      	b.n	8007c34 <HAL_RCC_OscConfig+0xd4>
 8007c1c:	4b6b      	ldr	r3, [pc, #428]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a6a      	ldr	r2, [pc, #424]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	4b68      	ldr	r3, [pc, #416]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a67      	ldr	r2, [pc, #412]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d013      	beq.n	8007c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3c:	f7fe fcb0 	bl	80065a0 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c44:	f7fe fcac 	bl	80065a0 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b64      	cmp	r3, #100	; 0x64
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e1fa      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c56:	4b5d      	ldr	r3, [pc, #372]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0xe4>
 8007c62:	e014      	b.n	8007c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c64:	f7fe fc9c 	bl	80065a0 <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c6c:	f7fe fc98 	bl	80065a0 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b64      	cmp	r3, #100	; 0x64
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e1e6      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c7e:	4b53      	ldr	r3, [pc, #332]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f0      	bne.n	8007c6c <HAL_RCC_OscConfig+0x10c>
 8007c8a:	e000      	b.n	8007c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d063      	beq.n	8007d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c9a:	4b4c      	ldr	r3, [pc, #304]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f003 030c 	and.w	r3, r3, #12
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007ca6:	4b49      	ldr	r3, [pc, #292]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f003 030c 	and.w	r3, r3, #12
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d11c      	bne.n	8007cec <HAL_RCC_OscConfig+0x18c>
 8007cb2:	4b46      	ldr	r3, [pc, #280]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d116      	bne.n	8007cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cbe:	4b43      	ldr	r3, [pc, #268]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x176>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e1ba      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd6:	4b3d      	ldr	r3, [pc, #244]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	4939      	ldr	r1, [pc, #228]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cea:	e03a      	b.n	8007d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d020      	beq.n	8007d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cf4:	4b36      	ldr	r3, [pc, #216]	; (8007dd0 <HAL_RCC_OscConfig+0x270>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfa:	f7fe fc51 	bl	80065a0 <HAL_GetTick>
 8007cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d00:	e008      	b.n	8007d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d02:	f7fe fc4d 	bl	80065a0 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d901      	bls.n	8007d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e19b      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d14:	4b2d      	ldr	r3, [pc, #180]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0f0      	beq.n	8007d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d20:	4b2a      	ldr	r3, [pc, #168]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4927      	ldr	r1, [pc, #156]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	600b      	str	r3, [r1, #0]
 8007d34:	e015      	b.n	8007d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d36:	4b26      	ldr	r3, [pc, #152]	; (8007dd0 <HAL_RCC_OscConfig+0x270>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3c:	f7fe fc30 	bl	80065a0 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d44:	f7fe fc2c 	bl	80065a0 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e17a      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d56:	4b1d      	ldr	r3, [pc, #116]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d03a      	beq.n	8007de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d019      	beq.n	8007daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d76:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <HAL_RCC_OscConfig+0x274>)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7c:	f7fe fc10 	bl	80065a0 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d84:	f7fe fc0c 	bl	80065a0 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e15a      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d96:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <HAL_RCC_OscConfig+0x26c>)
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f0      	beq.n	8007d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007da2:	2001      	movs	r0, #1
 8007da4:	f000 fad8 	bl	8008358 <RCC_Delay>
 8007da8:	e01c      	b.n	8007de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007daa:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <HAL_RCC_OscConfig+0x274>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007db0:	f7fe fbf6 	bl	80065a0 <HAL_GetTick>
 8007db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007db6:	e00f      	b.n	8007dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007db8:	f7fe fbf2 	bl	80065a0 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d908      	bls.n	8007dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e140      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
 8007dca:	bf00      	nop
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	42420000 	.word	0x42420000
 8007dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dd8:	4b9e      	ldr	r3, [pc, #632]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e9      	bne.n	8007db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80a6 	beq.w	8007f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007df6:	4b97      	ldr	r3, [pc, #604]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10d      	bne.n	8007e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e02:	4b94      	ldr	r3, [pc, #592]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	4a93      	ldr	r2, [pc, #588]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e0c:	61d3      	str	r3, [r2, #28]
 8007e0e:	4b91      	ldr	r3, [pc, #580]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e1e:	4b8e      	ldr	r3, [pc, #568]	; (8008058 <HAL_RCC_OscConfig+0x4f8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d118      	bne.n	8007e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e2a:	4b8b      	ldr	r3, [pc, #556]	; (8008058 <HAL_RCC_OscConfig+0x4f8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a8a      	ldr	r2, [pc, #552]	; (8008058 <HAL_RCC_OscConfig+0x4f8>)
 8007e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e36:	f7fe fbb3 	bl	80065a0 <HAL_GetTick>
 8007e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3c:	e008      	b.n	8007e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e3e:	f7fe fbaf 	bl	80065a0 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b64      	cmp	r3, #100	; 0x64
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e0fd      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e50:	4b81      	ldr	r3, [pc, #516]	; (8008058 <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0f0      	beq.n	8007e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d106      	bne.n	8007e72 <HAL_RCC_OscConfig+0x312>
 8007e64:	4b7b      	ldr	r3, [pc, #492]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	4a7a      	ldr	r2, [pc, #488]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e6a:	f043 0301 	orr.w	r3, r3, #1
 8007e6e:	6213      	str	r3, [r2, #32]
 8007e70:	e02d      	b.n	8007ece <HAL_RCC_OscConfig+0x36e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10c      	bne.n	8007e94 <HAL_RCC_OscConfig+0x334>
 8007e7a:	4b76      	ldr	r3, [pc, #472]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	4a75      	ldr	r2, [pc, #468]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	6213      	str	r3, [r2, #32]
 8007e86:	4b73      	ldr	r3, [pc, #460]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	4a72      	ldr	r2, [pc, #456]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e8c:	f023 0304 	bic.w	r3, r3, #4
 8007e90:	6213      	str	r3, [r2, #32]
 8007e92:	e01c      	b.n	8007ece <HAL_RCC_OscConfig+0x36e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	2b05      	cmp	r3, #5
 8007e9a:	d10c      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x356>
 8007e9c:	4b6d      	ldr	r3, [pc, #436]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	4a6c      	ldr	r2, [pc, #432]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007ea2:	f043 0304 	orr.w	r3, r3, #4
 8007ea6:	6213      	str	r3, [r2, #32]
 8007ea8:	4b6a      	ldr	r3, [pc, #424]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	4a69      	ldr	r2, [pc, #420]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	6213      	str	r3, [r2, #32]
 8007eb4:	e00b      	b.n	8007ece <HAL_RCC_OscConfig+0x36e>
 8007eb6:	4b67      	ldr	r3, [pc, #412]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	4a66      	ldr	r2, [pc, #408]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	6213      	str	r3, [r2, #32]
 8007ec2:	4b64      	ldr	r3, [pc, #400]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	4a63      	ldr	r2, [pc, #396]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007ec8:	f023 0304 	bic.w	r3, r3, #4
 8007ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d015      	beq.n	8007f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ed6:	f7fe fb63 	bl	80065a0 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007edc:	e00a      	b.n	8007ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ede:	f7fe fb5f 	bl	80065a0 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e0ab      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef4:	4b57      	ldr	r3, [pc, #348]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0ee      	beq.n	8007ede <HAL_RCC_OscConfig+0x37e>
 8007f00:	e014      	b.n	8007f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f02:	f7fe fb4d 	bl	80065a0 <HAL_GetTick>
 8007f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f08:	e00a      	b.n	8007f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f0a:	f7fe fb49 	bl	80065a0 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e095      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f20:	4b4c      	ldr	r3, [pc, #304]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1ee      	bne.n	8007f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d105      	bne.n	8007f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f32:	4b48      	ldr	r3, [pc, #288]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	4a47      	ldr	r2, [pc, #284]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 8081 	beq.w	800804a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f48:	4b42      	ldr	r3, [pc, #264]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 030c 	and.w	r3, r3, #12
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d061      	beq.n	8008018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d146      	bne.n	8007fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f5c:	4b3f      	ldr	r3, [pc, #252]	; (800805c <HAL_RCC_OscConfig+0x4fc>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f62:	f7fe fb1d 	bl	80065a0 <HAL_GetTick>
 8007f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f6a:	f7fe fb19 	bl	80065a0 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e067      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f7c:	4b35      	ldr	r3, [pc, #212]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1f0      	bne.n	8007f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f90:	d108      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007f92:	4b30      	ldr	r3, [pc, #192]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	492d      	ldr	r1, [pc, #180]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fa4:	4b2b      	ldr	r3, [pc, #172]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a19      	ldr	r1, [r3, #32]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	4927      	ldr	r1, [pc, #156]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fbc:	4b27      	ldr	r3, [pc, #156]	; (800805c <HAL_RCC_OscConfig+0x4fc>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc2:	f7fe faed 	bl	80065a0 <HAL_GetTick>
 8007fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fca:	f7fe fae9 	bl	80065a0 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e037      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0f0      	beq.n	8007fca <HAL_RCC_OscConfig+0x46a>
 8007fe8:	e02f      	b.n	800804a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fea:	4b1c      	ldr	r3, [pc, #112]	; (800805c <HAL_RCC_OscConfig+0x4fc>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ff0:	f7fe fad6 	bl	80065a0 <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff8:	f7fe fad2 	bl	80065a0 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e020      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x498>
 8008016:	e018      	b.n	800804a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e013      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_RCC_OscConfig+0x4f4>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	429a      	cmp	r2, r3
 8008036:	d106      	bne.n	8008046 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008042:	429a      	cmp	r2, r3
 8008044:	d001      	beq.n	800804a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40021000 	.word	0x40021000
 8008058:	40007000 	.word	0x40007000
 800805c:	42420060 	.word	0x42420060

08008060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e0d0      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008074:	4b6a      	ldr	r3, [pc, #424]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d910      	bls.n	80080a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008082:	4b67      	ldr	r3, [pc, #412]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f023 0207 	bic.w	r2, r3, #7
 800808a:	4965      	ldr	r1, [pc, #404]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	4313      	orrs	r3, r2
 8008090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008092:	4b63      	ldr	r3, [pc, #396]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d001      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e0b8      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d020      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080bc:	4b59      	ldr	r3, [pc, #356]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	4a58      	ldr	r2, [pc, #352]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80080c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80080c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080d4:	4b53      	ldr	r3, [pc, #332]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4a52      	ldr	r2, [pc, #328]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80080da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80080de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080e0:	4b50      	ldr	r3, [pc, #320]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	494d      	ldr	r1, [pc, #308]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d040      	beq.n	8008180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d107      	bne.n	8008116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008106:	4b47      	ldr	r3, [pc, #284]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d115      	bne.n	800813e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e07f      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d107      	bne.n	800812e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800811e:	4b41      	ldr	r3, [pc, #260]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e073      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800812e:	4b3d      	ldr	r3, [pc, #244]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e06b      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800813e:	4b39      	ldr	r3, [pc, #228]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f023 0203 	bic.w	r2, r3, #3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	4936      	ldr	r1, [pc, #216]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 800814c:	4313      	orrs	r3, r2
 800814e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008150:	f7fe fa26 	bl	80065a0 <HAL_GetTick>
 8008154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008156:	e00a      	b.n	800816e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008158:	f7fe fa22 	bl	80065a0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f241 3288 	movw	r2, #5000	; 0x1388
 8008166:	4293      	cmp	r3, r2
 8008168:	d901      	bls.n	800816e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e053      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800816e:	4b2d      	ldr	r3, [pc, #180]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 020c 	and.w	r2, r3, #12
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	429a      	cmp	r2, r3
 800817e:	d1eb      	bne.n	8008158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008180:	4b27      	ldr	r3, [pc, #156]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d210      	bcs.n	80081b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800818e:	4b24      	ldr	r3, [pc, #144]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f023 0207 	bic.w	r2, r3, #7
 8008196:	4922      	ldr	r1, [pc, #136]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	4313      	orrs	r3, r2
 800819c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <HAL_RCC_ClockConfig+0x1c0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d001      	beq.n	80081b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e032      	b.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d008      	beq.n	80081ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081bc:	4b19      	ldr	r3, [pc, #100]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4916      	ldr	r1, [pc, #88]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081da:	4b12      	ldr	r3, [pc, #72]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	490e      	ldr	r1, [pc, #56]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081ee:	f000 f821 	bl	8008234 <HAL_RCC_GetSysClockFreq>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <HAL_RCC_ClockConfig+0x1c4>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	091b      	lsrs	r3, r3, #4
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	490a      	ldr	r1, [pc, #40]	; (8008228 <HAL_RCC_ClockConfig+0x1c8>)
 8008200:	5ccb      	ldrb	r3, [r1, r3]
 8008202:	fa22 f303 	lsr.w	r3, r2, r3
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <HAL_RCC_ClockConfig+0x1cc>)
 8008208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <HAL_RCC_ClockConfig+0x1d0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe f984 	bl	800651c <HAL_InitTick>

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40022000 	.word	0x40022000
 8008224:	40021000 	.word	0x40021000
 8008228:	08009a00 	.word	0x08009a00
 800822c:	2000020c 	.word	0x2000020c
 8008230:	20000210 	.word	0x20000210

08008234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008234:	b490      	push	{r4, r7}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800823a:	4b2a      	ldr	r3, [pc, #168]	; (80082e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800823c:	1d3c      	adds	r4, r7, #4
 800823e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008244:	f240 2301 	movw	r3, #513	; 0x201
 8008248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	2300      	movs	r3, #0
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	2300      	movs	r3, #0
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f003 030c 	and.w	r3, r3, #12
 800826a:	2b04      	cmp	r3, #4
 800826c:	d002      	beq.n	8008274 <HAL_RCC_GetSysClockFreq+0x40>
 800826e:	2b08      	cmp	r3, #8
 8008270:	d003      	beq.n	800827a <HAL_RCC_GetSysClockFreq+0x46>
 8008272:	e02d      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008276:	623b      	str	r3, [r7, #32]
      break;
 8008278:	e02d      	b.n	80082d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	0c9b      	lsrs	r3, r3, #18
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008286:	4413      	add	r3, r2
 8008288:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800828c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d013      	beq.n	80082c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008298:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	0c5b      	lsrs	r3, r3, #17
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80082a6:	4413      	add	r3, r2
 80082a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80082ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	4a0e      	ldr	r2, [pc, #56]	; (80082ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80082b2:	fb02 f203 	mul.w	r2, r2, r3
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
 80082be:	e004      	b.n	80082ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	4a0b      	ldr	r2, [pc, #44]	; (80082f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80082c4:	fb02 f303 	mul.w	r3, r2, r3
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	623b      	str	r3, [r7, #32]
      break;
 80082ce:	e002      	b.n	80082d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80082d2:	623b      	str	r3, [r7, #32]
      break;
 80082d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082d6:	6a3b      	ldr	r3, [r7, #32]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3728      	adds	r7, #40	; 0x28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc90      	pop	{r4, r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	08009998 	.word	0x08009998
 80082e8:	40021000 	.word	0x40021000
 80082ec:	007a1200 	.word	0x007a1200
 80082f0:	003d0900 	.word	0x003d0900

080082f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082f8:	4b02      	ldr	r3, [pc, #8]	; (8008304 <HAL_RCC_GetHCLKFreq+0x10>)
 80082fa:	681b      	ldr	r3, [r3, #0]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr
 8008304:	2000020c 	.word	0x2000020c

08008308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800830c:	f7ff fff2 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008310:	4602      	mov	r2, r0
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	4903      	ldr	r1, [pc, #12]	; (800832c <HAL_RCC_GetPCLK1Freq+0x24>)
 800831e:	5ccb      	ldrb	r3, [r1, r3]
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008324:	4618      	mov	r0, r3
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40021000 	.word	0x40021000
 800832c:	08009a10 	.word	0x08009a10

08008330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008334:	f7ff ffde 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008338:	4602      	mov	r2, r0
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	0adb      	lsrs	r3, r3, #11
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	4903      	ldr	r1, [pc, #12]	; (8008354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008346:	5ccb      	ldrb	r3, [r1, r3]
 8008348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800834c:	4618      	mov	r0, r3
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40021000 	.word	0x40021000
 8008354:	08009a10 	.word	0x08009a10

08008358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <RCC_Delay+0x34>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a0a      	ldr	r2, [pc, #40]	; (8008390 <RCC_Delay+0x38>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	0a5b      	lsrs	r3, r3, #9
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008374:	bf00      	nop
  }
  while (Delay --);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	1e5a      	subs	r2, r3, #1
 800837a:	60fa      	str	r2, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f9      	bne.n	8008374 <RCC_Delay+0x1c>
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr
 800838c:	2000020c 	.word	0x2000020c
 8008390:	10624dd3 	.word	0x10624dd3

08008394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e041      	b.n	800842a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fd fede 	bl	800617c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f000 fa70 	bl	80088b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d001      	beq.n	800844c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e03a      	b.n	80084c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a18      	ldr	r2, [pc, #96]	; (80084cc <HAL_TIM_Base_Start_IT+0x98>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00e      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x58>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008476:	d009      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x58>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a14      	ldr	r2, [pc, #80]	; (80084d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x58>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a13      	ldr	r2, [pc, #76]	; (80084d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d111      	bne.n	80084b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d010      	beq.n	80084c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0201 	orr.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ae:	e007      	b.n	80084c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0201 	orr.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr
 80084cc:	40012c00 	.word	0x40012c00
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800

080084d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d122      	bne.n	8008534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d11b      	bne.n	8008534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f06f 0202 	mvn.w	r2, #2
 8008504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f9b1 	bl	8008882 <HAL_TIM_IC_CaptureCallback>
 8008520:	e005      	b.n	800852e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9a4 	bl	8008870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f9b3 	bl	8008894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b04      	cmp	r3, #4
 8008540:	d122      	bne.n	8008588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b04      	cmp	r3, #4
 800854e:	d11b      	bne.n	8008588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0204 	mvn.w	r2, #4
 8008558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f987 	bl	8008882 <HAL_TIM_IC_CaptureCallback>
 8008574:	e005      	b.n	8008582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f97a 	bl	8008870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f989 	bl	8008894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b08      	cmp	r3, #8
 8008594:	d122      	bne.n	80085dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d11b      	bne.n	80085dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0208 	mvn.w	r2, #8
 80085ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2204      	movs	r2, #4
 80085b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f95d 	bl	8008882 <HAL_TIM_IC_CaptureCallback>
 80085c8:	e005      	b.n	80085d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f950 	bl	8008870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f95f 	bl	8008894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d122      	bne.n	8008630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0310 	and.w	r3, r3, #16
 80085f4:	2b10      	cmp	r3, #16
 80085f6:	d11b      	bne.n	8008630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0210 	mvn.w	r2, #16
 8008600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2208      	movs	r2, #8
 8008606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f933 	bl	8008882 <HAL_TIM_IC_CaptureCallback>
 800861c:	e005      	b.n	800862a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f926 	bl	8008870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f935 	bl	8008894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b01      	cmp	r3, #1
 800863c:	d10e      	bne.n	800865c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b01      	cmp	r3, #1
 800864a:	d107      	bne.n	800865c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0201 	mvn.w	r2, #1
 8008654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fc f9ec 	bl	8004a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	2b80      	cmp	r3, #128	; 0x80
 8008668:	d10e      	bne.n	8008688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d107      	bne.n	8008688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa77 	bl	8008b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d10e      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a0:	2b40      	cmp	r3, #64	; 0x40
 80086a2:	d107      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f8f9 	bl	80088a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d10e      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d107      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0220 	mvn.w	r2, #32
 80086d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa42 	bl	8008b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIM_ConfigClockSource+0x18>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e0b3      	b.n	8008868 <HAL_TIM_ConfigClockSource+0x180>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800871e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008738:	d03e      	beq.n	80087b8 <HAL_TIM_ConfigClockSource+0xd0>
 800873a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800873e:	f200 8087 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008746:	f000 8085 	beq.w	8008854 <HAL_TIM_ConfigClockSource+0x16c>
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874e:	d87f      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008750:	2b70      	cmp	r3, #112	; 0x70
 8008752:	d01a      	beq.n	800878a <HAL_TIM_ConfigClockSource+0xa2>
 8008754:	2b70      	cmp	r3, #112	; 0x70
 8008756:	d87b      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008758:	2b60      	cmp	r3, #96	; 0x60
 800875a:	d050      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x116>
 800875c:	2b60      	cmp	r3, #96	; 0x60
 800875e:	d877      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008760:	2b50      	cmp	r3, #80	; 0x50
 8008762:	d03c      	beq.n	80087de <HAL_TIM_ConfigClockSource+0xf6>
 8008764:	2b50      	cmp	r3, #80	; 0x50
 8008766:	d873      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008768:	2b40      	cmp	r3, #64	; 0x40
 800876a:	d058      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x136>
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d86f      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008770:	2b30      	cmp	r3, #48	; 0x30
 8008772:	d064      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x156>
 8008774:	2b30      	cmp	r3, #48	; 0x30
 8008776:	d86b      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008778:	2b20      	cmp	r3, #32
 800877a:	d060      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x156>
 800877c:	2b20      	cmp	r3, #32
 800877e:	d867      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d05c      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x156>
 8008784:	2b10      	cmp	r3, #16
 8008786:	d05a      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008788:	e062      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6899      	ldr	r1, [r3, #8]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f000 f966 	bl	8008a6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	609a      	str	r2, [r3, #8]
      break;
 80087b6:	e04e      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	6899      	ldr	r1, [r3, #8]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f000 f94f 	bl	8008a6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087da:	609a      	str	r2, [r3, #8]
      break;
 80087dc:	e03b      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6859      	ldr	r1, [r3, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	461a      	mov	r2, r3
 80087ec:	f000 f8c6 	bl	800897c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2150      	movs	r1, #80	; 0x50
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f91d 	bl	8008a36 <TIM_ITRx_SetConfig>
      break;
 80087fc:	e02b      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6859      	ldr	r1, [r3, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	461a      	mov	r2, r3
 800880c:	f000 f8e4 	bl	80089d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2160      	movs	r1, #96	; 0x60
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f90d 	bl	8008a36 <TIM_ITRx_SetConfig>
      break;
 800881c:	e01b      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6859      	ldr	r1, [r3, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	461a      	mov	r2, r3
 800882c:	f000 f8a6 	bl	800897c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2140      	movs	r1, #64	; 0x40
 8008836:	4618      	mov	r0, r3
 8008838:	f000 f8fd 	bl	8008a36 <TIM_ITRx_SetConfig>
      break;
 800883c:	e00b      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f000 f8f4 	bl	8008a36 <TIM_ITRx_SetConfig>
        break;
 800884e:	e002      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008850:	bf00      	nop
 8008852:	e000      	b.n	8008856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr

08008882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800888a:	bf00      	nop
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a29      	ldr	r2, [pc, #164]	; (8008970 <TIM_Base_SetConfig+0xb8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00b      	beq.n	80088e8 <TIM_Base_SetConfig+0x30>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d6:	d007      	beq.n	80088e8 <TIM_Base_SetConfig+0x30>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a26      	ldr	r2, [pc, #152]	; (8008974 <TIM_Base_SetConfig+0xbc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_Base_SetConfig+0x30>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a25      	ldr	r2, [pc, #148]	; (8008978 <TIM_Base_SetConfig+0xc0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d108      	bne.n	80088fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a1c      	ldr	r2, [pc, #112]	; (8008970 <TIM_Base_SetConfig+0xb8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00b      	beq.n	800891a <TIM_Base_SetConfig+0x62>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008908:	d007      	beq.n	800891a <TIM_Base_SetConfig+0x62>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a19      	ldr	r2, [pc, #100]	; (8008974 <TIM_Base_SetConfig+0xbc>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_Base_SetConfig+0x62>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a18      	ldr	r2, [pc, #96]	; (8008978 <TIM_Base_SetConfig+0xc0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d108      	bne.n	800892c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a07      	ldr	r2, [pc, #28]	; (8008970 <TIM_Base_SetConfig+0xb8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d103      	bne.n	8008960 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	615a      	str	r2, [r3, #20]
}
 8008966:	bf00      	nop
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr
 8008970:	40012c00 	.word	0x40012c00
 8008974:	40000400 	.word	0x40000400
 8008978:	40000800 	.word	0x40000800

0800897c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0201 	bic.w	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 030a 	bic.w	r3, r3, #10
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr

080089d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f023 0210 	bic.w	r2, r3, #16
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	031b      	lsls	r3, r3, #12
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	621a      	str	r2, [r3, #32]
}
 8008a2c:	bf00      	nop
 8008a2e:	371c      	adds	r7, #28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f043 0307 	orr.w	r3, r3, #7
 8008a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	609a      	str	r2, [r3, #8]
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr

08008a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b087      	sub	sp, #28
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
 8008a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	021a      	lsls	r2, r3, #8
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	609a      	str	r2, [r3, #8]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e046      	b.n	8008b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a16      	ldr	r2, [pc, #88]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00e      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0c:	d009      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a12      	ldr	r2, [pc, #72]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a10      	ldr	r2, [pc, #64]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d10c      	bne.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800

08008b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr

08008b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e03f      	b.n	8008c1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fd fb2c 	bl	800620c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2224      	movs	r2, #36	; 0x24
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f905 	bl	8008ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	695a      	ldr	r2, [r3, #20]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b08a      	sub	sp, #40	; 0x28
 8008c26:	af02      	add	r7, sp, #8
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d17c      	bne.n	8008d3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <HAL_UART_Transmit+0x2c>
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e075      	b.n	8008d3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_UART_Transmit+0x3e>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e06e      	b.n	8008d3e <HAL_UART_Transmit+0x11c>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2221      	movs	r2, #33	; 0x21
 8008c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c76:	f7fd fc93 	bl	80065a0 <HAL_GetTick>
 8008c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	88fa      	ldrh	r2, [r7, #6]
 8008c86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c90:	d108      	bne.n	8008ca4 <HAL_UART_Transmit+0x82>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e003      	b.n	8008cac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cb4:	e02a      	b.n	8008d0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2180      	movs	r1, #128	; 0x80
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f840 	bl	8008d46 <UART_WaitOnFlagUntilTimeout>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e036      	b.n	8008d3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	3302      	adds	r3, #2
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	e007      	b.n	8008cfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1cf      	bne.n	8008cb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2140      	movs	r1, #64	; 0x40
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 f810 	bl	8008d46 <UART_WaitOnFlagUntilTimeout>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e006      	b.n	8008d3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2220      	movs	r2, #32
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	e000      	b.n	8008d3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d3c:	2302      	movs	r3, #2
  }
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	4613      	mov	r3, r2
 8008d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d56:	e02c      	b.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d028      	beq.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d66:	f7fd fc1b 	bl	80065a0 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d21d      	bcs.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0201 	bic.w	r2, r2, #1
 8008d94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e00f      	b.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	bf0c      	ite	eq
 8008dc2:	2301      	moveq	r3, #1
 8008dc4:	2300      	movne	r3, #0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d0c3      	beq.n	8008d58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008e16:	f023 030c 	bic.w	r3, r3, #12
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	430b      	orrs	r3, r1
 8008e22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ef0 <UART_SetConfig+0x114>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d103      	bne.n	8008e4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008e44:	f7ff fa74 	bl	8008330 <HAL_RCC_GetPCLK2Freq>
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	e002      	b.n	8008e52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008e4c:	f7ff fa5c 	bl	8008308 <HAL_RCC_GetPCLK1Freq>
 8008e50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009a      	lsls	r2, r3, #2
 8008e5c:	441a      	add	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e68:	4a22      	ldr	r2, [pc, #136]	; (8008ef4 <UART_SetConfig+0x118>)
 8008e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	0119      	lsls	r1, r3, #4
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009a      	lsls	r2, r3, #2
 8008e7c:	441a      	add	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e88:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <UART_SetConfig+0x118>)
 8008e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	2064      	movs	r0, #100	; 0x64
 8008e92:	fb00 f303 	mul.w	r3, r0, r3
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	011b      	lsls	r3, r3, #4
 8008e9a:	3332      	adds	r3, #50	; 0x32
 8008e9c:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <UART_SetConfig+0x118>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ea8:	4419      	add	r1, r3
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009a      	lsls	r2, r3, #2
 8008eb4:	441a      	add	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ec0:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <UART_SetConfig+0x118>)
 8008ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8008ec6:	095b      	lsrs	r3, r3, #5
 8008ec8:	2064      	movs	r0, #100	; 0x64
 8008eca:	fb00 f303 	mul.w	r3, r0, r3
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	3332      	adds	r3, #50	; 0x32
 8008ed4:	4a07      	ldr	r2, [pc, #28]	; (8008ef4 <UART_SetConfig+0x118>)
 8008ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eda:	095b      	lsrs	r3, r3, #5
 8008edc:	f003 020f 	and.w	r2, r3, #15
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40013800 	.word	0x40013800
 8008ef4:	51eb851f 	.word	0x51eb851f

08008ef8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e016      	b.n	8008f38 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fd fa02 	bl	8006314 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f1c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	ea42 0103 	orr.w	r1, r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	68d2      	ldr	r2, [r2, #12]
 8008f50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr
	...

08008f60 <__errno>:
 8008f60:	4b01      	ldr	r3, [pc, #4]	; (8008f68 <__errno+0x8>)
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	20000218 	.word	0x20000218

08008f6c <__libc_init_array>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	2600      	movs	r6, #0
 8008f70:	4d0c      	ldr	r5, [pc, #48]	; (8008fa4 <__libc_init_array+0x38>)
 8008f72:	4c0d      	ldr	r4, [pc, #52]	; (8008fa8 <__libc_init_array+0x3c>)
 8008f74:	1b64      	subs	r4, r4, r5
 8008f76:	10a4      	asrs	r4, r4, #2
 8008f78:	42a6      	cmp	r6, r4
 8008f7a:	d109      	bne.n	8008f90 <__libc_init_array+0x24>
 8008f7c:	f000 fc5c 	bl	8009838 <_init>
 8008f80:	2600      	movs	r6, #0
 8008f82:	4d0a      	ldr	r5, [pc, #40]	; (8008fac <__libc_init_array+0x40>)
 8008f84:	4c0a      	ldr	r4, [pc, #40]	; (8008fb0 <__libc_init_array+0x44>)
 8008f86:	1b64      	subs	r4, r4, r5
 8008f88:	10a4      	asrs	r4, r4, #2
 8008f8a:	42a6      	cmp	r6, r4
 8008f8c:	d105      	bne.n	8008f9a <__libc_init_array+0x2e>
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f94:	4798      	blx	r3
 8008f96:	3601      	adds	r6, #1
 8008f98:	e7ee      	b.n	8008f78 <__libc_init_array+0xc>
 8008f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9e:	4798      	blx	r3
 8008fa0:	3601      	adds	r6, #1
 8008fa2:	e7f2      	b.n	8008f8a <__libc_init_array+0x1e>
 8008fa4:	08009a4c 	.word	0x08009a4c
 8008fa8:	08009a4c 	.word	0x08009a4c
 8008fac:	08009a4c 	.word	0x08009a4c
 8008fb0:	08009a50 	.word	0x08009a50

08008fb4 <memcpy>:
 8008fb4:	440a      	add	r2, r1
 8008fb6:	4291      	cmp	r1, r2
 8008fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fbc:	d100      	bne.n	8008fc0 <memcpy+0xc>
 8008fbe:	4770      	bx	lr
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc6:	4291      	cmp	r1, r2
 8008fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fcc:	d1f9      	bne.n	8008fc2 <memcpy+0xe>
 8008fce:	bd10      	pop	{r4, pc}

08008fd0 <memset>:
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4402      	add	r2, r0
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d100      	bne.n	8008fda <memset+0xa>
 8008fd8:	4770      	bx	lr
 8008fda:	f803 1b01 	strb.w	r1, [r3], #1
 8008fde:	e7f9      	b.n	8008fd4 <memset+0x4>

08008fe0 <siprintf>:
 8008fe0:	b40e      	push	{r1, r2, r3}
 8008fe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fe6:	b500      	push	{lr}
 8008fe8:	b09c      	sub	sp, #112	; 0x70
 8008fea:	ab1d      	add	r3, sp, #116	; 0x74
 8008fec:	9002      	str	r0, [sp, #8]
 8008fee:	9006      	str	r0, [sp, #24]
 8008ff0:	9107      	str	r1, [sp, #28]
 8008ff2:	9104      	str	r1, [sp, #16]
 8008ff4:	4808      	ldr	r0, [pc, #32]	; (8009018 <siprintf+0x38>)
 8008ff6:	4909      	ldr	r1, [pc, #36]	; (800901c <siprintf+0x3c>)
 8008ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffc:	9105      	str	r1, [sp, #20]
 8008ffe:	6800      	ldr	r0, [r0, #0]
 8009000:	a902      	add	r1, sp, #8
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	f000 f868 	bl	80090d8 <_svfiprintf_r>
 8009008:	2200      	movs	r2, #0
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	b01c      	add	sp, #112	; 0x70
 8009010:	f85d eb04 	ldr.w	lr, [sp], #4
 8009014:	b003      	add	sp, #12
 8009016:	4770      	bx	lr
 8009018:	20000218 	.word	0x20000218
 800901c:	ffff0208 	.word	0xffff0208

08009020 <__ssputs_r>:
 8009020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	688e      	ldr	r6, [r1, #8]
 8009026:	4682      	mov	sl, r0
 8009028:	429e      	cmp	r6, r3
 800902a:	460c      	mov	r4, r1
 800902c:	4690      	mov	r8, r2
 800902e:	461f      	mov	r7, r3
 8009030:	d838      	bhi.n	80090a4 <__ssputs_r+0x84>
 8009032:	898a      	ldrh	r2, [r1, #12]
 8009034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009038:	d032      	beq.n	80090a0 <__ssputs_r+0x80>
 800903a:	6825      	ldr	r5, [r4, #0]
 800903c:	6909      	ldr	r1, [r1, #16]
 800903e:	3301      	adds	r3, #1
 8009040:	eba5 0901 	sub.w	r9, r5, r1
 8009044:	6965      	ldr	r5, [r4, #20]
 8009046:	444b      	add	r3, r9
 8009048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800904c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009050:	106d      	asrs	r5, r5, #1
 8009052:	429d      	cmp	r5, r3
 8009054:	bf38      	it	cc
 8009056:	461d      	movcc	r5, r3
 8009058:	0553      	lsls	r3, r2, #21
 800905a:	d531      	bpl.n	80090c0 <__ssputs_r+0xa0>
 800905c:	4629      	mov	r1, r5
 800905e:	f000 fb45 	bl	80096ec <_malloc_r>
 8009062:	4606      	mov	r6, r0
 8009064:	b950      	cbnz	r0, 800907c <__ssputs_r+0x5c>
 8009066:	230c      	movs	r3, #12
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	f8ca 3000 	str.w	r3, [sl]
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907c:	464a      	mov	r2, r9
 800907e:	6921      	ldr	r1, [r4, #16]
 8009080:	f7ff ff98 	bl	8008fb4 <memcpy>
 8009084:	89a3      	ldrh	r3, [r4, #12]
 8009086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800908a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800908e:	81a3      	strh	r3, [r4, #12]
 8009090:	6126      	str	r6, [r4, #16]
 8009092:	444e      	add	r6, r9
 8009094:	6026      	str	r6, [r4, #0]
 8009096:	463e      	mov	r6, r7
 8009098:	6165      	str	r5, [r4, #20]
 800909a:	eba5 0509 	sub.w	r5, r5, r9
 800909e:	60a5      	str	r5, [r4, #8]
 80090a0:	42be      	cmp	r6, r7
 80090a2:	d900      	bls.n	80090a6 <__ssputs_r+0x86>
 80090a4:	463e      	mov	r6, r7
 80090a6:	4632      	mov	r2, r6
 80090a8:	4641      	mov	r1, r8
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	f000 fab8 	bl	8009620 <memmove>
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	6822      	ldr	r2, [r4, #0]
 80090b4:	1b9b      	subs	r3, r3, r6
 80090b6:	4432      	add	r2, r6
 80090b8:	2000      	movs	r0, #0
 80090ba:	60a3      	str	r3, [r4, #8]
 80090bc:	6022      	str	r2, [r4, #0]
 80090be:	e7db      	b.n	8009078 <__ssputs_r+0x58>
 80090c0:	462a      	mov	r2, r5
 80090c2:	f000 fb6d 	bl	80097a0 <_realloc_r>
 80090c6:	4606      	mov	r6, r0
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d1e1      	bne.n	8009090 <__ssputs_r+0x70>
 80090cc:	4650      	mov	r0, sl
 80090ce:	6921      	ldr	r1, [r4, #16]
 80090d0:	f000 fac0 	bl	8009654 <_free_r>
 80090d4:	e7c7      	b.n	8009066 <__ssputs_r+0x46>
	...

080090d8 <_svfiprintf_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	4698      	mov	r8, r3
 80090de:	898b      	ldrh	r3, [r1, #12]
 80090e0:	4607      	mov	r7, r0
 80090e2:	061b      	lsls	r3, r3, #24
 80090e4:	460d      	mov	r5, r1
 80090e6:	4614      	mov	r4, r2
 80090e8:	b09d      	sub	sp, #116	; 0x74
 80090ea:	d50e      	bpl.n	800910a <_svfiprintf_r+0x32>
 80090ec:	690b      	ldr	r3, [r1, #16]
 80090ee:	b963      	cbnz	r3, 800910a <_svfiprintf_r+0x32>
 80090f0:	2140      	movs	r1, #64	; 0x40
 80090f2:	f000 fafb 	bl	80096ec <_malloc_r>
 80090f6:	6028      	str	r0, [r5, #0]
 80090f8:	6128      	str	r0, [r5, #16]
 80090fa:	b920      	cbnz	r0, 8009106 <_svfiprintf_r+0x2e>
 80090fc:	230c      	movs	r3, #12
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e0d1      	b.n	80092aa <_svfiprintf_r+0x1d2>
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	616b      	str	r3, [r5, #20]
 800910a:	2300      	movs	r3, #0
 800910c:	9309      	str	r3, [sp, #36]	; 0x24
 800910e:	2320      	movs	r3, #32
 8009110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009114:	2330      	movs	r3, #48	; 0x30
 8009116:	f04f 0901 	mov.w	r9, #1
 800911a:	f8cd 800c 	str.w	r8, [sp, #12]
 800911e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092c4 <_svfiprintf_r+0x1ec>
 8009122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009126:	4623      	mov	r3, r4
 8009128:	469a      	mov	sl, r3
 800912a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912e:	b10a      	cbz	r2, 8009134 <_svfiprintf_r+0x5c>
 8009130:	2a25      	cmp	r2, #37	; 0x25
 8009132:	d1f9      	bne.n	8009128 <_svfiprintf_r+0x50>
 8009134:	ebba 0b04 	subs.w	fp, sl, r4
 8009138:	d00b      	beq.n	8009152 <_svfiprintf_r+0x7a>
 800913a:	465b      	mov	r3, fp
 800913c:	4622      	mov	r2, r4
 800913e:	4629      	mov	r1, r5
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff ff6d 	bl	8009020 <__ssputs_r>
 8009146:	3001      	adds	r0, #1
 8009148:	f000 80aa 	beq.w	80092a0 <_svfiprintf_r+0x1c8>
 800914c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800914e:	445a      	add	r2, fp
 8009150:	9209      	str	r2, [sp, #36]	; 0x24
 8009152:	f89a 3000 	ldrb.w	r3, [sl]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 80a2 	beq.w	80092a0 <_svfiprintf_r+0x1c8>
 800915c:	2300      	movs	r3, #0
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009166:	f10a 0a01 	add.w	sl, sl, #1
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	9307      	str	r3, [sp, #28]
 800916e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009172:	931a      	str	r3, [sp, #104]	; 0x68
 8009174:	4654      	mov	r4, sl
 8009176:	2205      	movs	r2, #5
 8009178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917c:	4851      	ldr	r0, [pc, #324]	; (80092c4 <_svfiprintf_r+0x1ec>)
 800917e:	f000 fa41 	bl	8009604 <memchr>
 8009182:	9a04      	ldr	r2, [sp, #16]
 8009184:	b9d8      	cbnz	r0, 80091be <_svfiprintf_r+0xe6>
 8009186:	06d0      	lsls	r0, r2, #27
 8009188:	bf44      	itt	mi
 800918a:	2320      	movmi	r3, #32
 800918c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009190:	0711      	lsls	r1, r2, #28
 8009192:	bf44      	itt	mi
 8009194:	232b      	movmi	r3, #43	; 0x2b
 8009196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800919a:	f89a 3000 	ldrb.w	r3, [sl]
 800919e:	2b2a      	cmp	r3, #42	; 0x2a
 80091a0:	d015      	beq.n	80091ce <_svfiprintf_r+0xf6>
 80091a2:	4654      	mov	r4, sl
 80091a4:	2000      	movs	r0, #0
 80091a6:	f04f 0c0a 	mov.w	ip, #10
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	4621      	mov	r1, r4
 80091ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b2:	3b30      	subs	r3, #48	; 0x30
 80091b4:	2b09      	cmp	r3, #9
 80091b6:	d94e      	bls.n	8009256 <_svfiprintf_r+0x17e>
 80091b8:	b1b0      	cbz	r0, 80091e8 <_svfiprintf_r+0x110>
 80091ba:	9207      	str	r2, [sp, #28]
 80091bc:	e014      	b.n	80091e8 <_svfiprintf_r+0x110>
 80091be:	eba0 0308 	sub.w	r3, r0, r8
 80091c2:	fa09 f303 	lsl.w	r3, r9, r3
 80091c6:	4313      	orrs	r3, r2
 80091c8:	46a2      	mov	sl, r4
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	e7d2      	b.n	8009174 <_svfiprintf_r+0x9c>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	1d19      	adds	r1, r3, #4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	9103      	str	r1, [sp, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bfbb      	ittet	lt
 80091da:	425b      	neglt	r3, r3
 80091dc:	f042 0202 	orrlt.w	r2, r2, #2
 80091e0:	9307      	strge	r3, [sp, #28]
 80091e2:	9307      	strlt	r3, [sp, #28]
 80091e4:	bfb8      	it	lt
 80091e6:	9204      	strlt	r2, [sp, #16]
 80091e8:	7823      	ldrb	r3, [r4, #0]
 80091ea:	2b2e      	cmp	r3, #46	; 0x2e
 80091ec:	d10c      	bne.n	8009208 <_svfiprintf_r+0x130>
 80091ee:	7863      	ldrb	r3, [r4, #1]
 80091f0:	2b2a      	cmp	r3, #42	; 0x2a
 80091f2:	d135      	bne.n	8009260 <_svfiprintf_r+0x188>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	3402      	adds	r4, #2
 80091f8:	1d1a      	adds	r2, r3, #4
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	9203      	str	r2, [sp, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bfb8      	it	lt
 8009202:	f04f 33ff 	movlt.w	r3, #4294967295
 8009206:	9305      	str	r3, [sp, #20]
 8009208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092d4 <_svfiprintf_r+0x1fc>
 800920c:	2203      	movs	r2, #3
 800920e:	4650      	mov	r0, sl
 8009210:	7821      	ldrb	r1, [r4, #0]
 8009212:	f000 f9f7 	bl	8009604 <memchr>
 8009216:	b140      	cbz	r0, 800922a <_svfiprintf_r+0x152>
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	eba0 000a 	sub.w	r0, r0, sl
 800921e:	fa03 f000 	lsl.w	r0, r3, r0
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	3401      	adds	r4, #1
 8009226:	4303      	orrs	r3, r0
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922e:	2206      	movs	r2, #6
 8009230:	4825      	ldr	r0, [pc, #148]	; (80092c8 <_svfiprintf_r+0x1f0>)
 8009232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009236:	f000 f9e5 	bl	8009604 <memchr>
 800923a:	2800      	cmp	r0, #0
 800923c:	d038      	beq.n	80092b0 <_svfiprintf_r+0x1d8>
 800923e:	4b23      	ldr	r3, [pc, #140]	; (80092cc <_svfiprintf_r+0x1f4>)
 8009240:	bb1b      	cbnz	r3, 800928a <_svfiprintf_r+0x1b2>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	3307      	adds	r3, #7
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	3308      	adds	r3, #8
 800924c:	9303      	str	r3, [sp, #12]
 800924e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009250:	4433      	add	r3, r6
 8009252:	9309      	str	r3, [sp, #36]	; 0x24
 8009254:	e767      	b.n	8009126 <_svfiprintf_r+0x4e>
 8009256:	460c      	mov	r4, r1
 8009258:	2001      	movs	r0, #1
 800925a:	fb0c 3202 	mla	r2, ip, r2, r3
 800925e:	e7a5      	b.n	80091ac <_svfiprintf_r+0xd4>
 8009260:	2300      	movs	r3, #0
 8009262:	f04f 0c0a 	mov.w	ip, #10
 8009266:	4619      	mov	r1, r3
 8009268:	3401      	adds	r4, #1
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	4620      	mov	r0, r4
 800926e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009272:	3a30      	subs	r2, #48	; 0x30
 8009274:	2a09      	cmp	r2, #9
 8009276:	d903      	bls.n	8009280 <_svfiprintf_r+0x1a8>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0c5      	beq.n	8009208 <_svfiprintf_r+0x130>
 800927c:	9105      	str	r1, [sp, #20]
 800927e:	e7c3      	b.n	8009208 <_svfiprintf_r+0x130>
 8009280:	4604      	mov	r4, r0
 8009282:	2301      	movs	r3, #1
 8009284:	fb0c 2101 	mla	r1, ip, r1, r2
 8009288:	e7f0      	b.n	800926c <_svfiprintf_r+0x194>
 800928a:	ab03      	add	r3, sp, #12
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	462a      	mov	r2, r5
 8009290:	4638      	mov	r0, r7
 8009292:	4b0f      	ldr	r3, [pc, #60]	; (80092d0 <_svfiprintf_r+0x1f8>)
 8009294:	a904      	add	r1, sp, #16
 8009296:	f3af 8000 	nop.w
 800929a:	1c42      	adds	r2, r0, #1
 800929c:	4606      	mov	r6, r0
 800929e:	d1d6      	bne.n	800924e <_svfiprintf_r+0x176>
 80092a0:	89ab      	ldrh	r3, [r5, #12]
 80092a2:	065b      	lsls	r3, r3, #25
 80092a4:	f53f af2c 	bmi.w	8009100 <_svfiprintf_r+0x28>
 80092a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092aa:	b01d      	add	sp, #116	; 0x74
 80092ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b0:	ab03      	add	r3, sp, #12
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	462a      	mov	r2, r5
 80092b6:	4638      	mov	r0, r7
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <_svfiprintf_r+0x1f8>)
 80092ba:	a904      	add	r1, sp, #16
 80092bc:	f000 f87c 	bl	80093b8 <_printf_i>
 80092c0:	e7eb      	b.n	800929a <_svfiprintf_r+0x1c2>
 80092c2:	bf00      	nop
 80092c4:	08009a18 	.word	0x08009a18
 80092c8:	08009a22 	.word	0x08009a22
 80092cc:	00000000 	.word	0x00000000
 80092d0:	08009021 	.word	0x08009021
 80092d4:	08009a1e 	.word	0x08009a1e

080092d8 <_printf_common>:
 80092d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	4616      	mov	r6, r2
 80092de:	4699      	mov	r9, r3
 80092e0:	688a      	ldr	r2, [r1, #8]
 80092e2:	690b      	ldr	r3, [r1, #16]
 80092e4:	4607      	mov	r7, r0
 80092e6:	4293      	cmp	r3, r2
 80092e8:	bfb8      	it	lt
 80092ea:	4613      	movlt	r3, r2
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092f2:	460c      	mov	r4, r1
 80092f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092f8:	b10a      	cbz	r2, 80092fe <_printf_common+0x26>
 80092fa:	3301      	adds	r3, #1
 80092fc:	6033      	str	r3, [r6, #0]
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	0699      	lsls	r1, r3, #26
 8009302:	bf42      	ittt	mi
 8009304:	6833      	ldrmi	r3, [r6, #0]
 8009306:	3302      	addmi	r3, #2
 8009308:	6033      	strmi	r3, [r6, #0]
 800930a:	6825      	ldr	r5, [r4, #0]
 800930c:	f015 0506 	ands.w	r5, r5, #6
 8009310:	d106      	bne.n	8009320 <_printf_common+0x48>
 8009312:	f104 0a19 	add.w	sl, r4, #25
 8009316:	68e3      	ldr	r3, [r4, #12]
 8009318:	6832      	ldr	r2, [r6, #0]
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	42ab      	cmp	r3, r5
 800931e:	dc28      	bgt.n	8009372 <_printf_common+0x9a>
 8009320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009324:	1e13      	subs	r3, r2, #0
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	bf18      	it	ne
 800932a:	2301      	movne	r3, #1
 800932c:	0692      	lsls	r2, r2, #26
 800932e:	d42d      	bmi.n	800938c <_printf_common+0xb4>
 8009330:	4649      	mov	r1, r9
 8009332:	4638      	mov	r0, r7
 8009334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009338:	47c0      	blx	r8
 800933a:	3001      	adds	r0, #1
 800933c:	d020      	beq.n	8009380 <_printf_common+0xa8>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	68e5      	ldr	r5, [r4, #12]
 8009342:	f003 0306 	and.w	r3, r3, #6
 8009346:	2b04      	cmp	r3, #4
 8009348:	bf18      	it	ne
 800934a:	2500      	movne	r5, #0
 800934c:	6832      	ldr	r2, [r6, #0]
 800934e:	f04f 0600 	mov.w	r6, #0
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	bf08      	it	eq
 8009356:	1aad      	subeq	r5, r5, r2
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	bf08      	it	eq
 800935c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009360:	4293      	cmp	r3, r2
 8009362:	bfc4      	itt	gt
 8009364:	1a9b      	subgt	r3, r3, r2
 8009366:	18ed      	addgt	r5, r5, r3
 8009368:	341a      	adds	r4, #26
 800936a:	42b5      	cmp	r5, r6
 800936c:	d11a      	bne.n	80093a4 <_printf_common+0xcc>
 800936e:	2000      	movs	r0, #0
 8009370:	e008      	b.n	8009384 <_printf_common+0xac>
 8009372:	2301      	movs	r3, #1
 8009374:	4652      	mov	r2, sl
 8009376:	4649      	mov	r1, r9
 8009378:	4638      	mov	r0, r7
 800937a:	47c0      	blx	r8
 800937c:	3001      	adds	r0, #1
 800937e:	d103      	bne.n	8009388 <_printf_common+0xb0>
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009388:	3501      	adds	r5, #1
 800938a:	e7c4      	b.n	8009316 <_printf_common+0x3e>
 800938c:	2030      	movs	r0, #48	; 0x30
 800938e:	18e1      	adds	r1, r4, r3
 8009390:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800939a:	4422      	add	r2, r4
 800939c:	3302      	adds	r3, #2
 800939e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093a2:	e7c5      	b.n	8009330 <_printf_common+0x58>
 80093a4:	2301      	movs	r3, #1
 80093a6:	4622      	mov	r2, r4
 80093a8:	4649      	mov	r1, r9
 80093aa:	4638      	mov	r0, r7
 80093ac:	47c0      	blx	r8
 80093ae:	3001      	adds	r0, #1
 80093b0:	d0e6      	beq.n	8009380 <_printf_common+0xa8>
 80093b2:	3601      	adds	r6, #1
 80093b4:	e7d9      	b.n	800936a <_printf_common+0x92>
	...

080093b8 <_printf_i>:
 80093b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	7e27      	ldrb	r7, [r4, #24]
 80093c0:	4691      	mov	r9, r2
 80093c2:	2f78      	cmp	r7, #120	; 0x78
 80093c4:	4680      	mov	r8, r0
 80093c6:	469a      	mov	sl, r3
 80093c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ce:	d807      	bhi.n	80093e0 <_printf_i+0x28>
 80093d0:	2f62      	cmp	r7, #98	; 0x62
 80093d2:	d80a      	bhi.n	80093ea <_printf_i+0x32>
 80093d4:	2f00      	cmp	r7, #0
 80093d6:	f000 80d9 	beq.w	800958c <_printf_i+0x1d4>
 80093da:	2f58      	cmp	r7, #88	; 0x58
 80093dc:	f000 80a4 	beq.w	8009528 <_printf_i+0x170>
 80093e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093e8:	e03a      	b.n	8009460 <_printf_i+0xa8>
 80093ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ee:	2b15      	cmp	r3, #21
 80093f0:	d8f6      	bhi.n	80093e0 <_printf_i+0x28>
 80093f2:	a001      	add	r0, pc, #4	; (adr r0, 80093f8 <_printf_i+0x40>)
 80093f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093f8:	08009451 	.word	0x08009451
 80093fc:	08009465 	.word	0x08009465
 8009400:	080093e1 	.word	0x080093e1
 8009404:	080093e1 	.word	0x080093e1
 8009408:	080093e1 	.word	0x080093e1
 800940c:	080093e1 	.word	0x080093e1
 8009410:	08009465 	.word	0x08009465
 8009414:	080093e1 	.word	0x080093e1
 8009418:	080093e1 	.word	0x080093e1
 800941c:	080093e1 	.word	0x080093e1
 8009420:	080093e1 	.word	0x080093e1
 8009424:	08009573 	.word	0x08009573
 8009428:	08009495 	.word	0x08009495
 800942c:	08009555 	.word	0x08009555
 8009430:	080093e1 	.word	0x080093e1
 8009434:	080093e1 	.word	0x080093e1
 8009438:	08009595 	.word	0x08009595
 800943c:	080093e1 	.word	0x080093e1
 8009440:	08009495 	.word	0x08009495
 8009444:	080093e1 	.word	0x080093e1
 8009448:	080093e1 	.word	0x080093e1
 800944c:	0800955d 	.word	0x0800955d
 8009450:	680b      	ldr	r3, [r1, #0]
 8009452:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009456:	1d1a      	adds	r2, r3, #4
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	600a      	str	r2, [r1, #0]
 800945c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009460:	2301      	movs	r3, #1
 8009462:	e0a4      	b.n	80095ae <_printf_i+0x1f6>
 8009464:	6825      	ldr	r5, [r4, #0]
 8009466:	6808      	ldr	r0, [r1, #0]
 8009468:	062e      	lsls	r6, r5, #24
 800946a:	f100 0304 	add.w	r3, r0, #4
 800946e:	d50a      	bpl.n	8009486 <_printf_i+0xce>
 8009470:	6805      	ldr	r5, [r0, #0]
 8009472:	600b      	str	r3, [r1, #0]
 8009474:	2d00      	cmp	r5, #0
 8009476:	da03      	bge.n	8009480 <_printf_i+0xc8>
 8009478:	232d      	movs	r3, #45	; 0x2d
 800947a:	426d      	negs	r5, r5
 800947c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009480:	230a      	movs	r3, #10
 8009482:	485e      	ldr	r0, [pc, #376]	; (80095fc <_printf_i+0x244>)
 8009484:	e019      	b.n	80094ba <_printf_i+0x102>
 8009486:	f015 0f40 	tst.w	r5, #64	; 0x40
 800948a:	6805      	ldr	r5, [r0, #0]
 800948c:	600b      	str	r3, [r1, #0]
 800948e:	bf18      	it	ne
 8009490:	b22d      	sxthne	r5, r5
 8009492:	e7ef      	b.n	8009474 <_printf_i+0xbc>
 8009494:	680b      	ldr	r3, [r1, #0]
 8009496:	6825      	ldr	r5, [r4, #0]
 8009498:	1d18      	adds	r0, r3, #4
 800949a:	6008      	str	r0, [r1, #0]
 800949c:	0628      	lsls	r0, r5, #24
 800949e:	d501      	bpl.n	80094a4 <_printf_i+0xec>
 80094a0:	681d      	ldr	r5, [r3, #0]
 80094a2:	e002      	b.n	80094aa <_printf_i+0xf2>
 80094a4:	0669      	lsls	r1, r5, #25
 80094a6:	d5fb      	bpl.n	80094a0 <_printf_i+0xe8>
 80094a8:	881d      	ldrh	r5, [r3, #0]
 80094aa:	2f6f      	cmp	r7, #111	; 0x6f
 80094ac:	bf0c      	ite	eq
 80094ae:	2308      	moveq	r3, #8
 80094b0:	230a      	movne	r3, #10
 80094b2:	4852      	ldr	r0, [pc, #328]	; (80095fc <_printf_i+0x244>)
 80094b4:	2100      	movs	r1, #0
 80094b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094ba:	6866      	ldr	r6, [r4, #4]
 80094bc:	2e00      	cmp	r6, #0
 80094be:	bfa8      	it	ge
 80094c0:	6821      	ldrge	r1, [r4, #0]
 80094c2:	60a6      	str	r6, [r4, #8]
 80094c4:	bfa4      	itt	ge
 80094c6:	f021 0104 	bicge.w	r1, r1, #4
 80094ca:	6021      	strge	r1, [r4, #0]
 80094cc:	b90d      	cbnz	r5, 80094d2 <_printf_i+0x11a>
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d04d      	beq.n	800956e <_printf_i+0x1b6>
 80094d2:	4616      	mov	r6, r2
 80094d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80094d8:	fb03 5711 	mls	r7, r3, r1, r5
 80094dc:	5dc7      	ldrb	r7, [r0, r7]
 80094de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094e2:	462f      	mov	r7, r5
 80094e4:	42bb      	cmp	r3, r7
 80094e6:	460d      	mov	r5, r1
 80094e8:	d9f4      	bls.n	80094d4 <_printf_i+0x11c>
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d10b      	bne.n	8009506 <_printf_i+0x14e>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	07df      	lsls	r7, r3, #31
 80094f2:	d508      	bpl.n	8009506 <_printf_i+0x14e>
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	6861      	ldr	r1, [r4, #4]
 80094f8:	4299      	cmp	r1, r3
 80094fa:	bfde      	ittt	le
 80094fc:	2330      	movle	r3, #48	; 0x30
 80094fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009502:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009506:	1b92      	subs	r2, r2, r6
 8009508:	6122      	str	r2, [r4, #16]
 800950a:	464b      	mov	r3, r9
 800950c:	4621      	mov	r1, r4
 800950e:	4640      	mov	r0, r8
 8009510:	f8cd a000 	str.w	sl, [sp]
 8009514:	aa03      	add	r2, sp, #12
 8009516:	f7ff fedf 	bl	80092d8 <_printf_common>
 800951a:	3001      	adds	r0, #1
 800951c:	d14c      	bne.n	80095b8 <_printf_i+0x200>
 800951e:	f04f 30ff 	mov.w	r0, #4294967295
 8009522:	b004      	add	sp, #16
 8009524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009528:	4834      	ldr	r0, [pc, #208]	; (80095fc <_printf_i+0x244>)
 800952a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800952e:	680e      	ldr	r6, [r1, #0]
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	f856 5b04 	ldr.w	r5, [r6], #4
 8009536:	061f      	lsls	r7, r3, #24
 8009538:	600e      	str	r6, [r1, #0]
 800953a:	d514      	bpl.n	8009566 <_printf_i+0x1ae>
 800953c:	07d9      	lsls	r1, r3, #31
 800953e:	bf44      	itt	mi
 8009540:	f043 0320 	orrmi.w	r3, r3, #32
 8009544:	6023      	strmi	r3, [r4, #0]
 8009546:	b91d      	cbnz	r5, 8009550 <_printf_i+0x198>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	f023 0320 	bic.w	r3, r3, #32
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	2310      	movs	r3, #16
 8009552:	e7af      	b.n	80094b4 <_printf_i+0xfc>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	f043 0320 	orr.w	r3, r3, #32
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	2378      	movs	r3, #120	; 0x78
 800955e:	4828      	ldr	r0, [pc, #160]	; (8009600 <_printf_i+0x248>)
 8009560:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009564:	e7e3      	b.n	800952e <_printf_i+0x176>
 8009566:	065e      	lsls	r6, r3, #25
 8009568:	bf48      	it	mi
 800956a:	b2ad      	uxthmi	r5, r5
 800956c:	e7e6      	b.n	800953c <_printf_i+0x184>
 800956e:	4616      	mov	r6, r2
 8009570:	e7bb      	b.n	80094ea <_printf_i+0x132>
 8009572:	680b      	ldr	r3, [r1, #0]
 8009574:	6826      	ldr	r6, [r4, #0]
 8009576:	1d1d      	adds	r5, r3, #4
 8009578:	6960      	ldr	r0, [r4, #20]
 800957a:	600d      	str	r5, [r1, #0]
 800957c:	0635      	lsls	r5, r6, #24
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	d501      	bpl.n	8009586 <_printf_i+0x1ce>
 8009582:	6018      	str	r0, [r3, #0]
 8009584:	e002      	b.n	800958c <_printf_i+0x1d4>
 8009586:	0671      	lsls	r1, r6, #25
 8009588:	d5fb      	bpl.n	8009582 <_printf_i+0x1ca>
 800958a:	8018      	strh	r0, [r3, #0]
 800958c:	2300      	movs	r3, #0
 800958e:	4616      	mov	r6, r2
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	e7ba      	b.n	800950a <_printf_i+0x152>
 8009594:	680b      	ldr	r3, [r1, #0]
 8009596:	1d1a      	adds	r2, r3, #4
 8009598:	600a      	str	r2, [r1, #0]
 800959a:	681e      	ldr	r6, [r3, #0]
 800959c:	2100      	movs	r1, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	6862      	ldr	r2, [r4, #4]
 80095a2:	f000 f82f 	bl	8009604 <memchr>
 80095a6:	b108      	cbz	r0, 80095ac <_printf_i+0x1f4>
 80095a8:	1b80      	subs	r0, r0, r6
 80095aa:	6060      	str	r0, [r4, #4]
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	2300      	movs	r3, #0
 80095b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b6:	e7a8      	b.n	800950a <_printf_i+0x152>
 80095b8:	4632      	mov	r2, r6
 80095ba:	4649      	mov	r1, r9
 80095bc:	4640      	mov	r0, r8
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	47d0      	blx	sl
 80095c2:	3001      	adds	r0, #1
 80095c4:	d0ab      	beq.n	800951e <_printf_i+0x166>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	079b      	lsls	r3, r3, #30
 80095ca:	d413      	bmi.n	80095f4 <_printf_i+0x23c>
 80095cc:	68e0      	ldr	r0, [r4, #12]
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	4298      	cmp	r0, r3
 80095d2:	bfb8      	it	lt
 80095d4:	4618      	movlt	r0, r3
 80095d6:	e7a4      	b.n	8009522 <_printf_i+0x16a>
 80095d8:	2301      	movs	r3, #1
 80095da:	4632      	mov	r2, r6
 80095dc:	4649      	mov	r1, r9
 80095de:	4640      	mov	r0, r8
 80095e0:	47d0      	blx	sl
 80095e2:	3001      	adds	r0, #1
 80095e4:	d09b      	beq.n	800951e <_printf_i+0x166>
 80095e6:	3501      	adds	r5, #1
 80095e8:	68e3      	ldr	r3, [r4, #12]
 80095ea:	9903      	ldr	r1, [sp, #12]
 80095ec:	1a5b      	subs	r3, r3, r1
 80095ee:	42ab      	cmp	r3, r5
 80095f0:	dcf2      	bgt.n	80095d8 <_printf_i+0x220>
 80095f2:	e7eb      	b.n	80095cc <_printf_i+0x214>
 80095f4:	2500      	movs	r5, #0
 80095f6:	f104 0619 	add.w	r6, r4, #25
 80095fa:	e7f5      	b.n	80095e8 <_printf_i+0x230>
 80095fc:	08009a29 	.word	0x08009a29
 8009600:	08009a3a 	.word	0x08009a3a

08009604 <memchr>:
 8009604:	4603      	mov	r3, r0
 8009606:	b510      	push	{r4, lr}
 8009608:	b2c9      	uxtb	r1, r1
 800960a:	4402      	add	r2, r0
 800960c:	4293      	cmp	r3, r2
 800960e:	4618      	mov	r0, r3
 8009610:	d101      	bne.n	8009616 <memchr+0x12>
 8009612:	2000      	movs	r0, #0
 8009614:	e003      	b.n	800961e <memchr+0x1a>
 8009616:	7804      	ldrb	r4, [r0, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	428c      	cmp	r4, r1
 800961c:	d1f6      	bne.n	800960c <memchr+0x8>
 800961e:	bd10      	pop	{r4, pc}

08009620 <memmove>:
 8009620:	4288      	cmp	r0, r1
 8009622:	b510      	push	{r4, lr}
 8009624:	eb01 0402 	add.w	r4, r1, r2
 8009628:	d902      	bls.n	8009630 <memmove+0x10>
 800962a:	4284      	cmp	r4, r0
 800962c:	4623      	mov	r3, r4
 800962e:	d807      	bhi.n	8009640 <memmove+0x20>
 8009630:	1e43      	subs	r3, r0, #1
 8009632:	42a1      	cmp	r1, r4
 8009634:	d008      	beq.n	8009648 <memmove+0x28>
 8009636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800963a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800963e:	e7f8      	b.n	8009632 <memmove+0x12>
 8009640:	4601      	mov	r1, r0
 8009642:	4402      	add	r2, r0
 8009644:	428a      	cmp	r2, r1
 8009646:	d100      	bne.n	800964a <memmove+0x2a>
 8009648:	bd10      	pop	{r4, pc}
 800964a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800964e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009652:	e7f7      	b.n	8009644 <memmove+0x24>

08009654 <_free_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4605      	mov	r5, r0
 8009658:	2900      	cmp	r1, #0
 800965a:	d043      	beq.n	80096e4 <_free_r+0x90>
 800965c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009660:	1f0c      	subs	r4, r1, #4
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfb8      	it	lt
 8009666:	18e4      	addlt	r4, r4, r3
 8009668:	f000 f8d0 	bl	800980c <__malloc_lock>
 800966c:	4a1e      	ldr	r2, [pc, #120]	; (80096e8 <_free_r+0x94>)
 800966e:	6813      	ldr	r3, [r2, #0]
 8009670:	4610      	mov	r0, r2
 8009672:	b933      	cbnz	r3, 8009682 <_free_r+0x2e>
 8009674:	6063      	str	r3, [r4, #4]
 8009676:	6014      	str	r4, [r2, #0]
 8009678:	4628      	mov	r0, r5
 800967a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800967e:	f000 b8cb 	b.w	8009818 <__malloc_unlock>
 8009682:	42a3      	cmp	r3, r4
 8009684:	d90a      	bls.n	800969c <_free_r+0x48>
 8009686:	6821      	ldr	r1, [r4, #0]
 8009688:	1862      	adds	r2, r4, r1
 800968a:	4293      	cmp	r3, r2
 800968c:	bf01      	itttt	eq
 800968e:	681a      	ldreq	r2, [r3, #0]
 8009690:	685b      	ldreq	r3, [r3, #4]
 8009692:	1852      	addeq	r2, r2, r1
 8009694:	6022      	streq	r2, [r4, #0]
 8009696:	6063      	str	r3, [r4, #4]
 8009698:	6004      	str	r4, [r0, #0]
 800969a:	e7ed      	b.n	8009678 <_free_r+0x24>
 800969c:	461a      	mov	r2, r3
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	b10b      	cbz	r3, 80096a6 <_free_r+0x52>
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	d9fa      	bls.n	800969c <_free_r+0x48>
 80096a6:	6811      	ldr	r1, [r2, #0]
 80096a8:	1850      	adds	r0, r2, r1
 80096aa:	42a0      	cmp	r0, r4
 80096ac:	d10b      	bne.n	80096c6 <_free_r+0x72>
 80096ae:	6820      	ldr	r0, [r4, #0]
 80096b0:	4401      	add	r1, r0
 80096b2:	1850      	adds	r0, r2, r1
 80096b4:	4283      	cmp	r3, r0
 80096b6:	6011      	str	r1, [r2, #0]
 80096b8:	d1de      	bne.n	8009678 <_free_r+0x24>
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	4401      	add	r1, r0
 80096c0:	6011      	str	r1, [r2, #0]
 80096c2:	6053      	str	r3, [r2, #4]
 80096c4:	e7d8      	b.n	8009678 <_free_r+0x24>
 80096c6:	d902      	bls.n	80096ce <_free_r+0x7a>
 80096c8:	230c      	movs	r3, #12
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	e7d4      	b.n	8009678 <_free_r+0x24>
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	1821      	adds	r1, r4, r0
 80096d2:	428b      	cmp	r3, r1
 80096d4:	bf01      	itttt	eq
 80096d6:	6819      	ldreq	r1, [r3, #0]
 80096d8:	685b      	ldreq	r3, [r3, #4]
 80096da:	1809      	addeq	r1, r1, r0
 80096dc:	6021      	streq	r1, [r4, #0]
 80096de:	6063      	str	r3, [r4, #4]
 80096e0:	6054      	str	r4, [r2, #4]
 80096e2:	e7c9      	b.n	8009678 <_free_r+0x24>
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	200003d8 	.word	0x200003d8

080096ec <_malloc_r>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	1ccd      	adds	r5, r1, #3
 80096f0:	f025 0503 	bic.w	r5, r5, #3
 80096f4:	3508      	adds	r5, #8
 80096f6:	2d0c      	cmp	r5, #12
 80096f8:	bf38      	it	cc
 80096fa:	250c      	movcc	r5, #12
 80096fc:	2d00      	cmp	r5, #0
 80096fe:	4606      	mov	r6, r0
 8009700:	db01      	blt.n	8009706 <_malloc_r+0x1a>
 8009702:	42a9      	cmp	r1, r5
 8009704:	d903      	bls.n	800970e <_malloc_r+0x22>
 8009706:	230c      	movs	r3, #12
 8009708:	6033      	str	r3, [r6, #0]
 800970a:	2000      	movs	r0, #0
 800970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970e:	f000 f87d 	bl	800980c <__malloc_lock>
 8009712:	4921      	ldr	r1, [pc, #132]	; (8009798 <_malloc_r+0xac>)
 8009714:	680a      	ldr	r2, [r1, #0]
 8009716:	4614      	mov	r4, r2
 8009718:	b99c      	cbnz	r4, 8009742 <_malloc_r+0x56>
 800971a:	4f20      	ldr	r7, [pc, #128]	; (800979c <_malloc_r+0xb0>)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	b923      	cbnz	r3, 800972a <_malloc_r+0x3e>
 8009720:	4621      	mov	r1, r4
 8009722:	4630      	mov	r0, r6
 8009724:	f000 f862 	bl	80097ec <_sbrk_r>
 8009728:	6038      	str	r0, [r7, #0]
 800972a:	4629      	mov	r1, r5
 800972c:	4630      	mov	r0, r6
 800972e:	f000 f85d 	bl	80097ec <_sbrk_r>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	d123      	bne.n	800977e <_malloc_r+0x92>
 8009736:	230c      	movs	r3, #12
 8009738:	4630      	mov	r0, r6
 800973a:	6033      	str	r3, [r6, #0]
 800973c:	f000 f86c 	bl	8009818 <__malloc_unlock>
 8009740:	e7e3      	b.n	800970a <_malloc_r+0x1e>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	1b5b      	subs	r3, r3, r5
 8009746:	d417      	bmi.n	8009778 <_malloc_r+0x8c>
 8009748:	2b0b      	cmp	r3, #11
 800974a:	d903      	bls.n	8009754 <_malloc_r+0x68>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	441c      	add	r4, r3
 8009750:	6025      	str	r5, [r4, #0]
 8009752:	e004      	b.n	800975e <_malloc_r+0x72>
 8009754:	6863      	ldr	r3, [r4, #4]
 8009756:	42a2      	cmp	r2, r4
 8009758:	bf0c      	ite	eq
 800975a:	600b      	streq	r3, [r1, #0]
 800975c:	6053      	strne	r3, [r2, #4]
 800975e:	4630      	mov	r0, r6
 8009760:	f000 f85a 	bl	8009818 <__malloc_unlock>
 8009764:	f104 000b 	add.w	r0, r4, #11
 8009768:	1d23      	adds	r3, r4, #4
 800976a:	f020 0007 	bic.w	r0, r0, #7
 800976e:	1ac2      	subs	r2, r0, r3
 8009770:	d0cc      	beq.n	800970c <_malloc_r+0x20>
 8009772:	1a1b      	subs	r3, r3, r0
 8009774:	50a3      	str	r3, [r4, r2]
 8009776:	e7c9      	b.n	800970c <_malloc_r+0x20>
 8009778:	4622      	mov	r2, r4
 800977a:	6864      	ldr	r4, [r4, #4]
 800977c:	e7cc      	b.n	8009718 <_malloc_r+0x2c>
 800977e:	1cc4      	adds	r4, r0, #3
 8009780:	f024 0403 	bic.w	r4, r4, #3
 8009784:	42a0      	cmp	r0, r4
 8009786:	d0e3      	beq.n	8009750 <_malloc_r+0x64>
 8009788:	1a21      	subs	r1, r4, r0
 800978a:	4630      	mov	r0, r6
 800978c:	f000 f82e 	bl	80097ec <_sbrk_r>
 8009790:	3001      	adds	r0, #1
 8009792:	d1dd      	bne.n	8009750 <_malloc_r+0x64>
 8009794:	e7cf      	b.n	8009736 <_malloc_r+0x4a>
 8009796:	bf00      	nop
 8009798:	200003d8 	.word	0x200003d8
 800979c:	200003dc 	.word	0x200003dc

080097a0 <_realloc_r>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	4607      	mov	r7, r0
 80097a4:	4614      	mov	r4, r2
 80097a6:	460e      	mov	r6, r1
 80097a8:	b921      	cbnz	r1, 80097b4 <_realloc_r+0x14>
 80097aa:	4611      	mov	r1, r2
 80097ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097b0:	f7ff bf9c 	b.w	80096ec <_malloc_r>
 80097b4:	b922      	cbnz	r2, 80097c0 <_realloc_r+0x20>
 80097b6:	f7ff ff4d 	bl	8009654 <_free_r>
 80097ba:	4625      	mov	r5, r4
 80097bc:	4628      	mov	r0, r5
 80097be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c0:	f000 f830 	bl	8009824 <_malloc_usable_size_r>
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d20f      	bcs.n	80097e8 <_realloc_r+0x48>
 80097c8:	4621      	mov	r1, r4
 80097ca:	4638      	mov	r0, r7
 80097cc:	f7ff ff8e 	bl	80096ec <_malloc_r>
 80097d0:	4605      	mov	r5, r0
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0f2      	beq.n	80097bc <_realloc_r+0x1c>
 80097d6:	4631      	mov	r1, r6
 80097d8:	4622      	mov	r2, r4
 80097da:	f7ff fbeb 	bl	8008fb4 <memcpy>
 80097de:	4631      	mov	r1, r6
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ff37 	bl	8009654 <_free_r>
 80097e6:	e7e9      	b.n	80097bc <_realloc_r+0x1c>
 80097e8:	4635      	mov	r5, r6
 80097ea:	e7e7      	b.n	80097bc <_realloc_r+0x1c>

080097ec <_sbrk_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	2300      	movs	r3, #0
 80097f0:	4d05      	ldr	r5, [pc, #20]	; (8009808 <_sbrk_r+0x1c>)
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	f7fc fe18 	bl	800642c <_sbrk>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_sbrk_r+0x1a>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_sbrk_r+0x1a>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20000c78 	.word	0x20000c78

0800980c <__malloc_lock>:
 800980c:	4801      	ldr	r0, [pc, #4]	; (8009814 <__malloc_lock+0x8>)
 800980e:	f000 b811 	b.w	8009834 <__retarget_lock_acquire_recursive>
 8009812:	bf00      	nop
 8009814:	20000c80 	.word	0x20000c80

08009818 <__malloc_unlock>:
 8009818:	4801      	ldr	r0, [pc, #4]	; (8009820 <__malloc_unlock+0x8>)
 800981a:	f000 b80c 	b.w	8009836 <__retarget_lock_release_recursive>
 800981e:	bf00      	nop
 8009820:	20000c80 	.word	0x20000c80

08009824 <_malloc_usable_size_r>:
 8009824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009828:	1f18      	subs	r0, r3, #4
 800982a:	2b00      	cmp	r3, #0
 800982c:	bfbc      	itt	lt
 800982e:	580b      	ldrlt	r3, [r1, r0]
 8009830:	18c0      	addlt	r0, r0, r3
 8009832:	4770      	bx	lr

08009834 <__retarget_lock_acquire_recursive>:
 8009834:	4770      	bx	lr

08009836 <__retarget_lock_release_recursive>:
 8009836:	4770      	bx	lr

08009838 <_init>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr

08009844 <_fini>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr
